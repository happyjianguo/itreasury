package com.iss.itreasury.clientcenter.client.bizlogic;
//
import java.rmi.RemoteException;
//
import java.util.*;
import java.sql.*;

import com.iss.itreasury.util.*;
import com.iss.itreasury.loan.util.*;
import com.iss.itreasury.clientcenter.client.dao.ClientDao;
import com.iss.itreasury.clientcenter.client.dataentity.*;
import com.iss.itreasury.settlement.account.dao.Sett_ClientDAO;
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public class ClientOperation
{
	private Log4j log4j = new Log4j(Constant.ModuleType.LOAN, this); //
	/**
	 * No argument constructor required by container.
	 */
	public ClientOperation()
	{
	}
	/**
	 * findClient 查找现有客户
	 * 根据客户编号查找现有客户，返回客户详细资料
	 * 操作Client数据表
	 * 查询记录
	 * haoning
	 * @param lClientID String  客户编号的ID
	 * @return ClientInfo  详细的客户信息
	 * @throws RemoteException`
	 */
	public ClientInfo findClientByID(long lClientID) 
    throws Exception
	{ 
        ClientDao dao = new ClientDao();
		
		return dao.findClientByID(lClientID);
		
	}
	/**
	 * 新增（修改）客户详细资料
	 * saveClientInfo  新增（修改）客户的详细资料
	 * 操作Client数据表
	 * 更新相应字段
	 * lID=0,新增  lID>0,修改
	 * 约定：long型参数=-1，string型参数=“”,为未使用项，不参与新增或修改
	 *
	 * @param clientinfo 客户信息
	 * 相应字段：（包含在clientinfo类中）
	 * @param lID 标识
	 * @param strClientName   公司名称
	 * @param strClientNo,    客户编号
	 * @param strLicence,     营业执照
	 * @param lOfficeID,      办事处
	 * @param strAccount,     财务公司账号
	 * @param strBank,        开户银行
	 * @param strAccount      开户银行账号
	 * @param strBank1,       开户银行1
	 * @param strAccount1,    账号1
	 * @param strBank2,       开户银行2
	 * @param strAccount2,    账号2
	 * @param strBank3,       开户银行3
	 * @param strAccount3,    账号3
	 * @param strProvince,    省
	 * @param strCity,        市
	 * @param strAddress1,    地址1
	 * @param strAddress2     地址2
	 * @param strZipCode,     邮编
	 * @param strDeputy,      法人代表
	 * @param strTel,         电话
	 * @param strFax,         传真
	 * @param strMailAddr,    电邮
	 * @param strContact,     联系人
	 * @param strEconomic,    经济性质
	 * @param lGovernmentID,  主管部门表示
	 * @param isShareHolder,  是否股份
	 * @param lClientTypeID,  客户分类
	 * @param lCreditLevel,   信用等级
	 * @param lVentureLevel   风险评级
	 * @param strCapital      注册资本
	 *
	 * @return long 成功返回ID信息，失败返回0
	 * @throws RemoteException
	 */
	public long saveClientInfo(ClientInfo clientinfo) 
    throws Exception,IException
	{
        ClientDao Dao = new ClientDao();
		return Dao.saveClientInfo(clientinfo);
	}
    
    /**
     * 删除客户
     *a.. 校验该客户是否在客户信息中心模块中有任何综合或者授信信息。
      b.. 校验该客户是否在结算模块中有任何交易或者账户信息。
      c.. 校验该客户是否在贷款模块中有任何贷款申请或者合同。
     * @param lClientID
     * @return >0 删除成功 <0 删除失败
     * @throws Exception
     */
    public long deleteClientByID(long lClientID) throws Exception
    {
        ClientDao Dao = new ClientDao();
        return Dao.deleteClientByID(lClientID);
    }
    
	public static void main(String args[])
	{
        ClientOperation lcs = new ClientOperation();
		ClientInfo cInfo = null;
		cInfo = new ClientInfo();
		cInfo.setClientID(0);
		cInfo.setName("qqtest");
		cInfo.setLicenceCode("nlicencecode");
		cInfo.setOfficeID(Long.valueOf("01").longValue());
		try
		{
			lcs.saveClientInfo(cInfo);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
}
