/* Generated by Together */

package com.iss.itreasury.loan.setting.bizlogic;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;

import com.iss.itreasury.command.Command;
import com.iss.itreasury.loan.setting.dao.LoanContractAssortSettingDAO;
import com.iss.itreasury.loan.setting.dataentity.LoanContractAssortSettingInfo;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.util.Database;

public class LoanContractAssortSettingBiz extends Command {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * 增加一条字段名称设置信息，增加以前检查相同fieldID 的记录是否已经存在，如果存在不允许增加
	 * 
	 * @throws Exception
	 */
	public long save(Collection c) throws Exception {
		Connection con = null;
		LoanContractAssortSettingDAO dao = null;
		LoanContractAssortSettingInfo info = null;

		try {
			con = Database.getConnection();
			long size = c.size();
			if (c != null && size > 0) {
				dao = new LoanContractAssortSettingDAO(con);
				dao.setUseMaxID();
				for (int i = 0; i < size; i++) {
					ArrayList l = (ArrayList) c;
					info = (LoanContractAssortSettingInfo) l.get(i);
					if (info.getId() <= 0) {
						dao.add(info);
					} else {
						dao.update(info);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		} finally {
			clearConn(con);
		}
		return 1;
	}

	/**
	 * 修改自定义字段名称设置信息，fieldID不允许修改
	 * 
	 * @throws Exception
	 */
	//    
	// public long update(String[] FieldID,String[] name,Timestamp
	// InputDate,long InputUserID,long StatusID) throws Exception
	// {
	// Connection con = null;
	// LoanContractAssortSettingDAO LoanContractAssortSettingDAO = null;
	// LoanContractAssortSettingInfo CFInfo = new
	// LoanContractAssortSettingInfo();
	// long lReturn = -1;
	//    	
	// try
	// {
	// con = Database.getConnection();
	// LoanContractAssortSettingDAO = new LoanContractAssortSettingDAO(con);
	//    		
	// CFInfo.setInputDate(InputDate);
	// CFInfo.setInputUserID(InputUserID);
	// CFInfo.setStatusID(StatusID);
	//    		
	// for (int i = 0;name != null && i<name.length;i++)
	// {
	//    			
	// CFInfo.setName(name[i]);
	// CFInfo.setFieldID(Long.parseLong(FieldID[i]));
	// if(LoanContractAssortSettingDAO.checkByFieldInfo(CFInfo)>0)
	// {
	// lReturn = -2;//存在相同名称的FieldID，不能保存
	// }
	// else
	// {
	// lReturn = LoanContractAssortSettingDAO.update(CFInfo);
	// }
	// }
	// }
	// catch(Exception e)
	// {
	// if(con != null)
	// {
	// con.close();
	// con = null;
	// }
	// }
	// finally
	// {
	// try
	// {
	// if(con != null)
	// {
	// con.close();
	// con = null;
	// }
	// }
	// catch(Exception ex)
	// {
	// throw new Exception(ex.getMessage());
	// }
	// }
	// return (lReturn);
	// }
	/**
	 * 删除记录
	 */
	public void delete(long id) {
	}

	/**
	 * 自定义字段名称设置库中是否已经存在fieldID相同的记录
	 */
	public int exists(Vector vResult) {
		
		return 1;
	}


	/**
	 * 根据条件查询结果集，通过ITreasuryDAO的相关方法执行查询
	 * 
	 * @throws Exception
	 */
	public Vector findByCondition(long officeID, long currencyID)
			throws Exception {
		{
			Connection con = null;
			LoanContractAssortSettingDAO loanContractAssortSettingdao = null;
			Vector v = new Vector();
			try {
				// con = Database.get_jdbc_connection();
				con = Database.getConnection();
				loanContractAssortSettingdao = new LoanContractAssortSettingDAO(
						con);

				// 查询审批设置信息
				v = loanContractAssortSettingdao.findAttributeInfo(
						officeID, currencyID);

				con.close();
				con = null;
			} catch (Exception e) {
				if (con != null) {
					con.close();
					con = null;
				}
			} finally {
				try {
					if (con != null) {
						con.close();
						con = null;
					}
				} catch (Exception ex) {
					throw new Exception(ex.getMessage());
				}
			}
			return (v);
		}
	}

	public String getFieldname(int FieldID) throws Exception {
		String str = "";
		Connection con = null;
		try {
			con = Database.getConnection();
			str = new LoanContractAssortSettingDAO(con).getFieldname(FieldID);
			return str;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		} finally {
			clearConn(con);
		}
	}

	public String getFieldname(long FieldID, long officeID, long currencyID)
			throws Exception {
		String str = "";
		Connection con = null;
		try {
			con = Database.getConnection();
			str = new LoanContractAssortSettingDAO(con).getFieldname(FieldID,
					officeID, currencyID);
			return str;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		} finally {
			clearConn(con);
		}
	}

	/**
	 * 判断合同类型数据来源<p>
	 * <li>若用户从未修改过贷款合同分类，则系统从LOANConstant常量类中取出合同分类默认的“按地区分类”、“按行业分类1”、“按行业分类2”、“是否进行帐户监管”四个属性
	 * <li>若用户已经进行过贷款合同分类修改，则系统从数据库表中查出相应的四个分类<p>
	 * <br>系统将从上述任意一种方式中查询出的四条结果存入一个Vector中
	 * <br>该方法可以被贷款合同分类选择下拉列表、贷款合同分类修改、贷款合同提交页、贷款合同审批页使用
	 * 
	 * @param FieldID
	 * @param officeID
	 * @param currencyID
	 * @return
	 * @throws Exception
	 */
	public Vector getContractVector(long officeID,
			long currencyID) throws Exception {
		Connection con = null;
		LoanContractAssortSettingDAO loanContractAssortSettingdao = new LoanContractAssortSettingDAO();
		LoanContractAssortSettingInfo loanContractAssortSettingInfo = null;
		Vector v = new Vector();
		try {
			// con = Database.get_jdbc_connection();
			con = Database.getConnection();
			loanContractAssortSettingdao = new LoanContractAssortSettingDAO(con);

			// 查询审批设置信息
			v = loanContractAssortSettingdao.findAttributeInfo(
					officeID, currencyID);

			if (v.size() == 0) {
				long[] lAllTransTypeCode = LOANConstant.AssortSetType
						.getAllCode();
				for (int i = 0; i < lAllTransTypeCode.length; i++) {
					String loanTypeName = LOANConstant.AssortSetType
							.getName(lAllTransTypeCode[i]);
					long loanTypeFieldID = lAllTransTypeCode[i];
					System.out.println("-----" + loanTypeFieldID + "-----");
					System.out.println(loanTypeName);
					loanContractAssortSettingInfo = new LoanContractAssortSettingInfo();
					loanContractAssortSettingInfo.setFieldID(loanTypeFieldID);
					loanContractAssortSettingInfo.setName(loanTypeName);

					v.add(loanContractAssortSettingInfo);
				}
			}

			con.close();
			con = null;
		} catch (Exception e) {
			if (con != null) {
				con.close();
				con = null;
			}
		}
		return v;
	}
}
