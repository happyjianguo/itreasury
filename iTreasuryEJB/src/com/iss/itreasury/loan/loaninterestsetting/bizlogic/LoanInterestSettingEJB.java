package com.iss.itreasury.loan.loaninterestsetting.bizlogic;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.dataconvert.importdataToDB.dataentity.Loan_ContractFormInfo;
import com.iss.itreasury.dataconvert.importdataToDB.dataentity.Loan_LoanContractPlanDetailInfo;
import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.contract.dataentity.RateInfo;
import com.iss.itreasury.loan.loanapply.dataentity.LoanPlanDetailInfo;
import com.iss.itreasury.loan.loaninterestsetting.dao.LoanInterestSettingDao;
import com.iss.itreasury.loan.loaninterestsetting.dataentity.AdjustInterestConditionInfo;
import com.iss.itreasury.loan.loaninterestsetting.dataentity.AdjustPayConditionInfo;
import com.iss.itreasury.loan.loaninterestsetting.dataentity.InterestRateInfo;
import com.iss.itreasury.loan.loanpaynotice.dao.LoanPayNoticeDao;
import com.iss.itreasury.loan.repayplan.dao.PlanModifyDao;
import com.iss.itreasury.loan.repayplan.dao.RepayPlanDao;
import com.iss.itreasury.loan.repayplan.dataentity.PlanModifyInfo;
import com.iss.itreasury.loan.repayplan.dataentity.RepayPlanInfo;
import com.iss.itreasury.loan.setting.dao.LoanTypeRelationDao;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.loan.util.LOANNameRef;
import com.iss.itreasury.settlement.util.NameRef;
import com.iss.itreasury.settlement.util.SETTConstant;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.system.logger.dataentity.LoggerBtnLevelInfo;
import com.iss.itreasury.system.logger.dataentity.LoggerResults;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;
import com.iss.itreasury.util.SessionMng;
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public class LoanInterestSettingEJB implements SessionBean
{
    /* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */

    /**
     * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(SessionContext context){
        this.context = context;
    }
    private SessionContext context;
	private static Log4j log4j = null;
    /**
     * No argument constructor required by container.
     */
    public LoanInterestSettingEJB()
    {
		log4j = new Log4j(Constant.ModuleType.SETTLEMENT, this);
    }
    /**
     * Create method specified in EJB 1.1 section 6.10.3
     */
    public void ejbCreate()
    {
    }
    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate()
    {
    }
    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate()
    {
    }
    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove()
    {
    }


    /**
     * addBankInterestReteSetting  新增或修改银行利率
     * 根据所给定的条件新增或修改银行利率
     * 操作InterestRateTypeInfo、InterestRateHistory数据表
     * 新增或修改相应记录
     * 对于BankLoanInterestRateHistory，如果lID〉0，修改  lID=0,新增
     * 新增步骤：
     *    1  根据利率编号从InterestRateTypeInfo中查处利率类型标示
     *    2  将利率类型标示和其他相关字段插入InterestRateHistory
     *       条件：1 生效日 〉 当前日
     *             2 对同一利率类型标示,同一币种，生效日不能重合
     *    3 如成功插入，修改InterestRateTypeInfo
     *      如果该类型的纪录已存在，用sInterestRateName替换原先的利率名称
     * 修改时，如果该利率已做过利率调整，要修改利率调整表中的利率生效日期
     *       条件：1 生效日 〉 当前日
     *             2 对同一利率类型标示,同一币种，生效日不能重合
     * @param lID 标识
     * @param strInterestRateCode 利率编号
     * @param strInterestRateName 利率名称
     * @param dInterestRate 利率
     * @param tsValibleDate 利率生效日
     * @param lInputUserID 录入人
     * @param tsInputDate 录入日期
     * @param lCurrencyID 币种
     * @return long 成功返回ID标识，失败返回0
     * @throws RemoteException
     * @throws IRollbackException 
     */
    public long saveBankInterestRateSetting (long lID, String sInterestRateCode, String sInterestRateName, double dInterestRate, Timestamp tsValibleDate, long lInputUserID, Timestamp tsInputDate, long lOfficeID,long lCurrencyID) throws java.rmi.RemoteException, IRollbackException
    {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		String strSQL1 = null;
		long lResult = -5;
		long lBankLoanInterestRateID=-1;
		long lMaxID = 0;
		int iIndex = 0;
		int iNumber=0;
		int i=0;
		long lInsertOrUpdate = 0;
		ResultSet rss1 = null;
		try
		{
			//如果是新增
			if (lID == 0)
			{
				con = Database.getConnection();
				StringBuffer sb = new StringBuffer();
				StringBuffer sbCondition = new StringBuffer();
				StringBuffer sbNumber = new StringBuffer();
				/////////////////////////////////////////////////
				////验证SINTERESTRATENO的唯一
				strSQL = "select SINTERESTRATENO from LOAN_INTERESTRATETYPEINFO where SINTERESTRATENO='"+sInterestRateCode+"' and  NOFFICEID="+lOfficeID + " and NCURRENCYID="+lCurrencyID;
				log4j.info("sql is :" + strSQL);
				ps=con.prepareStatement(strSQL);
				ResultSet rsBatch=ps.executeQuery();
				if(rsBatch!=null && rsBatch.next())
				{
					lResult=-1; //表示SINTERESTRATENO不唯一
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return lResult;
				}
				rsBatch.close();
				rsBatch = null;
				ps.close();
				ps = null;
				////////////////////////////////////////////////////

				////验证sInterestRateName的唯一
				strSQL = "select SINTERESTRATENO from LOAN_INTERESTRATETYPEINFO where SINTERESTRATEName= '"+sInterestRateName+"' and  NOFFICEID="+lOfficeID + " and NCURRENCYID="+lCurrencyID;
				log4j.info("sql is :" + strSQL);
				ps=con.prepareStatement(strSQL);
				rsBatch=ps.executeQuery();
				if(rsBatch!=null && rsBatch.next())
				{
					lResult=-2; //表示SINTERESTRATENO不唯一
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return lResult;
				}
				////////////////////////////////////////////////////
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;

				////验证loan_interestrete中mRate,dtvalidate的唯一
				strSQL = "select id from LOAN_interestrate where mrate= "+dInterestRate+" and to_char(DTVALIDATE,'yyyymmdd')=to_char(?,'yyyymmdd')"+" and  NOFFICEID="+lOfficeID + " and NCURRENCYID="+lCurrencyID;;
				log4j.info("sql is :" + strSQL);
				ps=con.prepareStatement(strSQL);
				ps.setTimestamp(1,tsValibleDate);
				rsBatch=ps.executeQuery();
				if(rsBatch!=null && rsBatch.next())
				{
					lResult=-3; //mRate,dtvalidate已存在
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return lResult;
				}
				////////////////////////////////////////////////////
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;

				//进行新增操作
				strSQL ="select ID from  LOAN_InterestRateTypeInfo where sInterestRateNo=? and  NCURRENCYID="+lCurrencyID + " and NOFFICEID="+lOfficeID;
				log4j.info("sql1 is :" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setString(1, sInterestRateCode);
				rs = ps.executeQuery();
				if( rs != null && rs.next() )
				{
					lBankLoanInterestRateID = rs.getLong("ID");
					rs.close();
					rs = null;
					ps.close();
					ps = null;

				}
				else
				{
					rs.close();
					rs = null;
					ps.close();
					ps = null;

					StringBuffer sbMaxID = new StringBuffer();
					//sbMaxID.append(" SELECT nvl(max(id),0) + 1 FROM LOAN_INTERESTRATETYPEINFO where NCURRENCYID="+lCurrencyID);
					sbMaxID.append(" SELECT nvl(max(id),0) + 1 FROM LOAN_INTERESTRATETYPEINFO ");
					
					ps = con.prepareStatement(sbMaxID.toString());
					rs = ps.executeQuery();
					if( rs.next() )
					{
						lMaxID = rs.getLong(1);
					}
					else
					{
						lResult = 1;
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;


					/////////////////////////////////////
					//如果该银行利率记录不存在
					//则在数据库中新增
					//SINTERESTRATENAME在后面会重新更新一下
					///////////////////////////////////////


					strSQL1 = "insert into LOAN_InterestRateTypeInfo (ID, SINTERESTRATENO, SINTERESTRATENAME, NCURRENCYID ,NOFFICEID)"+
					"values (?,?,?,?,?)  ";

					ps = con.prepareStatement(strSQL1);
					ps.setLong(1,lMaxID);
					ps.setString(2,sInterestRateCode);
					ps.setString(3,sInterestRateName);
					ps.setLong(4,lCurrencyID);
					ps.setLong(5,lOfficeID);


					ps.executeUpdate();
					lResult=lMaxID;
					//用于插入 loan_InterestRate
					lBankLoanInterestRateID= lMaxID;
					ps.close();
					ps = null;

				}//else

				sInterestRateCode=sInterestRateCode.trim();

				log4j.info(" sInterestRateCode is"+sInterestRateCode);

				strSQL ="UPDATE   LOAN_InterestRateTypeInfo SET SINTERESTRATENAME=? where sInterestRateNo=? and NCURRENCYID="+lCurrencyID+" and NOFFICEID="+lOfficeID ;

				log4j.info("sql is :" + strSQL);
				ps = con.prepareStatement(strSQL);

				log4j.info("sInterestRateName is :" + sInterestRateName);
				ps.setString(1, sInterestRateName);
				ps.setString(2, sInterestRateCode);
				lResult = ps.executeUpdate();

				log4j.info("lResult is :" + lResult);
				ps.close();
				ps = null;

				//获得最大id＋1
				StringBuffer sbMaxID = new StringBuffer();
				sbMaxID.append(" SELECT nvl(max(id),0) + 1 FROM loan_interestrate ");
				ps = con.prepareStatement(sbMaxID.toString());
				rs = ps.executeQuery();
				if( rs.next() )
				{
					lMaxID = rs.getLong(1);
				}else
				{
					lResult = 1;
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				//插入loan_InterestRate
				strSQL1 = "insert into loan_interestrate (ID,NBANKINTERESTTYPEID,mRate,dtValidate,nInputUserID,dtInput, NCURRENCYID ,NOFFICEID)"+
				"values (?,?,?,?,?,?,?,?) ";

				ps = con.prepareStatement(strSQL1);
				ps.setLong(1,lMaxID);
				ps.setLong(2,lBankLoanInterestRateID);
				ps.setDouble(3,dInterestRate);
				ps.setTimestamp(4,tsValibleDate);
				ps.setLong(5,lInputUserID);
				ps.setTimestamp(6,tsInputDate);
				ps.setLong(7,lCurrencyID);
				ps.setLong(8,lOfficeID);
				
				ps.executeUpdate();
				lResult=lMaxID;
				ps.close();
				ps = null;
				////////////////////////////
				//生效日的问题由页面去控制
				/////////////////////////////
			}
			////////////////////////////////////////////////////////////
			//以下是更新////////////////////////////////////////////////
			////////////////////////////////////////////////////////////
			else
			{
				con = Database.getConnection();
				StringBuffer sb = new StringBuffer();
				StringBuffer sbCondition = new StringBuffer();
				StringBuffer sbNumber = new StringBuffer();
				//获得LOAN_InterestRateTypeInfo中相应的id
				strSQL ="select ID from  LOAN_InterestRateTypeInfo where sInterestRateNo=? and  NCURRENCYID="+lCurrencyID + " and NOFFICEID="+lOfficeID;
				log4j.info("sql2 is :" + strSQL);
				ps = con.prepareStatement(strSQL);

				ps.setString(1, sInterestRateCode);
				rs = ps.executeQuery();
				if( rs != null && rs.next() )
				{
					lBankLoanInterestRateID = rs.getLong("ID");
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				//should not  effective in this field /////////////
				////////////////////////////////////////////////////
				////验证新增纪录的的唯一，是否与已有记录内容相冲突(如果存在其他纪录与录入的纪录的生效日重合，则返回)
				//strSQL = "select ID from loan_interestrate where NBANKINTERESTTYPEID="+lBankLoanInterestRateID+" and to_char(DTVALIDATE,'yyyymmdd')=to_char(?,'yyyymmdd') and id != ? and mRate = ?";
				strSQL = "select ID from loan_interestrate where to_char(DTVALIDATE,'yyyymmdd')=to_char(?,'yyyymmdd') and id != ? and mRate = ?"+" and  NOFFICEID="+lOfficeID+ " and NCURRENCYID="+lCurrencyID;
				ps=con.prepareStatement(strSQL);
				ps.setTimestamp(1,tsValibleDate);
				ps.setLong(2,lID);
				ps.setDouble(3,dInterestRate);
				rss1=ps.executeQuery();
				if(rss1!=null && rss1.next())
				{
					rss1.close();
					rss1 = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return -2;
				}
				rss1.close();
				rss1 = null;
				ps.close();
				ps = null;
				////////////////////////////////////////////////////

				////////////////////////////////////////////////////
				////验证新增纪录的的唯一，是否与已有记录内容相冲突(如果只修改了利率值，没有修改生效日或生效日在当前生效日之前，则只是update原先的纪录，而不是新增纪录)
				//strSQL = "select ID from loan_interestrate where NBANKINTERESTTYPEID="+lBankLoanInterestRateID+" and to_char(DTVALIDATE,'yyyymmdd')>=to_char(?,'yyyymmdd') ";//11.21 change by fanyang
				strSQL = "select ID from loan_interestrate where NBANKINTERESTTYPEID="+lBankLoanInterestRateID+" and to_char(DTVALIDATE,'yyyymmdd')>=to_char(?,'yyyymmdd') "+" and NOFFICEID="+lOfficeID+ " and NCURRENCYID="+lCurrencyID;
				ps=con.prepareStatement(strSQL);
				ps.setTimestamp(1,tsValibleDate);
				//ps.setDouble(2,dInterestRate);
				rs=ps.executeQuery();
				if(rs!=null && rs.next())
				{
				  log4j.info("1-------------------------1");
				  lInsertOrUpdate = 1;  //修改
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				////////////////////////////////////////////////////
				if  (lInsertOrUpdate == 1 ) //修改
				{
				  strSQL = "update loan_interestrate set mRate = ?,dtValidate=? where  id = ?";
				  log4j.info("strSQL = " + strSQL);
				  ps=con.prepareStatement(strSQL);
				  ps.setDouble(1,dInterestRate);
				  ps.setTimestamp(2,tsValibleDate);
				  ps.setLong(3,lID);
				  ps.executeUpdate();
				  lResult = lID;
				  ps.close();
				  ps = null;			  
				  //add by xwhe 2008-09-17 
				  strSQL = "update LOAN_InterestRateTypeInfo set SINTERESTRATENAME = ? where  id = ?";
				  ps=con.prepareStatement(strSQL);
				  ps.setString(1,sInterestRateName);
				  ps.setLong(2,lBankLoanInterestRateID);
				  ps.executeUpdate();
				  lResult = lID;
				  ps.close();
				  ps = null;
				  //如果修改成功，则修改该利率在adjustedcontract中的利率值和生效日
				  strSQL = "update LOAN_RATEADJUSTCONTRACTDETAIL set mRate = ?,DTSTARTDATE=? where  NBANKINTERESTID = ?";
				  log4j.info("strSQL = " + strSQL);
				  ps=con.prepareStatement(strSQL);
				  ps.setDouble(1,dInterestRate);
				  ps.setTimestamp(2,tsValibleDate);
				  ps.setLong(3,lID);
				  ps.executeUpdate();
				  lResult = lID;
				  ps.close();
				  ps = null;
				}
				else   //新增
				{
					StringBuffer sbMaxID = new StringBuffer();
					sbMaxID.append(" SELECT nvl(max(id),0) + 1 FROM loan_interestrate ");
					ps = con.prepareStatement(sbMaxID.toString());
					rs = ps.executeQuery();
					if( rs.next() )
					{
						lMaxID = rs.getLong(1);
					}else
					{
						lResult = 1;
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;

					strSQL1 = "insert into loan_interestrate (ID,NBANKINTERESTTYPEID,mRate,dtValidate,nInputUserID,dtInput,NCURRENCYID ,NOFFICEID)"+
					" values (?,?,?,?,?,?,?,?) ";

					ps = con.prepareStatement(strSQL1);
					ps.setLong(1,lMaxID);
					ps.setLong(2,lBankLoanInterestRateID);
					ps.setDouble(3,dInterestRate);
					//need to modify
					//ps.setDouble(3,0.3);
					ps.setTimestamp(4,tsValibleDate);
					ps.setLong(5,lInputUserID);
					ps.setTimestamp(6,tsInputDate);
					ps.setLong(7,lCurrencyID);
					ps.setLong(8,lOfficeID);
					ps.executeUpdate();
					lResult=lMaxID;
					ps.close();
					ps = null;
				}
				con.close();
				con = null;
				return    lResult;
			}//else

		}
		catch (Exception e)
		{
			log4j.error("catch a error");
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(e.getMessage());			
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
					rs = null;
				if (rss1 != null)
					rss1.close();
					rss1 = null;
				if (ps != null)
					ps.close();
					ps = null;
				if (con != null)
					con.close();
					con = null;
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;

		// return 0;

    }
    
    /**
     * 根据国电修改贷款利率设置
     * Boxu Add 2008年12月15日
     */
    public long saveBankInterestRateSetting (long lID, String sInterestRateCode, String sInterestRateName, double dInterestRate, Timestamp tsValibleDate, long lInputUserID, Timestamp tsInputDate, long lOfficeID, long lCurrencyID, long lLoanTermTypeID) throws java.rmi.RemoteException, IRollbackException
    {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		String strSQL1 = null;
		long lResult = -5;
		long lBankLoanInterestRateID = -1;
		long lMaxID = 0;
		int iIndex = 0;
		int iNumber = 0;
		int i = 0;
		long lInsertOrUpdate = 0;
		ResultSet rss1 = null;
		try
		{
			//如果是新增
			if (lID == 0)
			{
				con = Database.getConnection();
				StringBuffer sb = new StringBuffer();
				StringBuffer sbCondition = new StringBuffer();
				StringBuffer sbNumber = new StringBuffer();
				/////////////////////////////////////////////////
				////验证SINTERESTRATENO的唯一
				strSQL = "select SINTERESTRATENO from LOAN_INTERESTRATETYPEINFO where SINTERESTRATENO='"+sInterestRateCode+"' and  NOFFICEID="+lOfficeID + " and NCURRENCYID="+lCurrencyID;
				log4j.info("sql is :" + strSQL);
				ps=con.prepareStatement(strSQL);
				ResultSet rsBatch=ps.executeQuery();
				if(rsBatch!=null && rsBatch.next())
				{
					lResult=-1; //表示SINTERESTRATENO不唯一
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return lResult;
				}
				rsBatch.close();
				rsBatch = null;
				ps.close();
				ps = null;
				////////////////////////////////////////////////////

				////验证sInterestRateName的唯一
				strSQL = "select SINTERESTRATENO from LOAN_INTERESTRATETYPEINFO where SINTERESTRATEName= '"+sInterestRateName+"' and  NOFFICEID="+lOfficeID + " and NCURRENCYID="+lCurrencyID;
				log4j.info("sql is :" + strSQL);
				ps=con.prepareStatement(strSQL);
				rsBatch=ps.executeQuery();
				if(rsBatch!=null && rsBatch.next())
				{
					lResult=-2; //表示SINTERESTRATENO不唯一
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return lResult;
				}
				////////////////////////////////////////////////////
				rsBatch.close();
				rsBatch = null;
				ps.close();
				ps = null;

				////验证loan_interestrete中mRate,dtvalidate的唯一
				strSQL = "select id from LOAN_interestrate where mrate= "+dInterestRate+" and to_char(DTVALIDATE,'yyyymmdd')=to_char(?,'yyyymmdd')"+" and  NOFFICEID="+lOfficeID + " and NCURRENCYID="+lCurrencyID;;
				log4j.info("sql is :" + strSQL);
				ps=con.prepareStatement(strSQL);
				ps.setTimestamp(1,tsValibleDate);
				rsBatch=ps.executeQuery();
				if(rsBatch!=null && rsBatch.next())
				{
					lResult=-3; //mRate,dtvalidate已存在
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return lResult;
				}
				////////////////////////////////////////////////////
					rsBatch.close();
					rsBatch = null;
					ps.close();
					ps = null;

				//进行新增操作
				strSQL ="select ID from LOAN_InterestRateTypeInfo where sInterestRateNo=? and NCURRENCYID="+lCurrencyID + " and NOFFICEID="+lOfficeID;
				log4j.info("sql1 is :" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setString(1, sInterestRateCode);
				rs = ps.executeQuery();
				if( rs != null && rs.next() )
				{
					lBankLoanInterestRateID = rs.getLong("ID");
					rs.close();
					rs = null;
					ps.close();
					ps = null;
				}
				else
				{
					rs.close();
					rs = null;
					ps.close();
					ps = null;

					StringBuffer sbMaxID = new StringBuffer();
					//sbMaxID.append(" SELECT nvl(max(id),0) + 1 FROM LOAN_INTERESTRATETYPEINFO where NCURRENCYID="+lCurrencyID);
					sbMaxID.append(" SELECT nvl(max(id),0) + 1 FROM LOAN_INTERESTRATETYPEINFO ");
					
					ps = con.prepareStatement(sbMaxID.toString());
					rs = ps.executeQuery();
					if( rs.next() )
					{
						lMaxID = rs.getLong(1);
					}
					else
					{
						lResult = 1;
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					
					/////////////////////////////////////
					//如果该银行利率记录不存在
					//则在数据库中新增
					//SINTERESTRATENAME在后面会重新更新一下
					///////////////////////////////////////
					
					strSQL1 = " insert into LOAN_InterestRateTypeInfo (ID, SINTERESTRATENO, SINTERESTRATENAME, NCURRENCYID, NOFFICEID, ADJUSTRATETYPEID)"+
					" values (?,?,?,?,?,?) ";

					ps = con.prepareStatement(strSQL1);
					ps.setLong(1,	lMaxID);
					ps.setString(2,	sInterestRateCode);
					ps.setString(3,	sInterestRateName);
					ps.setLong(4,	lCurrencyID);
					ps.setLong(5,	lOfficeID);
					ps.setLong(6,	lLoanTermTypeID);

					ps.executeUpdate();
					lResult=lMaxID;
					//用于插入 loan_InterestRate
					lBankLoanInterestRateID= lMaxID;
					ps.close();
					ps = null;

				}//else

				sInterestRateCode=sInterestRateCode.trim();
				log4j.info(" sInterestRateCode is"+sInterestRateCode);
				strSQL =" update loan_InterestRateTypeInfo SET SINTERESTRATENAME=?, adjustratetypeid=? where sInterestRateNo=? and NCURRENCYID="+lCurrencyID+" and NOFFICEID="+lOfficeID ;
				log4j.info("sql is :" + strSQL);
				ps = con.prepareStatement(strSQL);
				log4j.info("sInterestRateName is :" + sInterestRateName);
				ps.setString(1, 	sInterestRateName);
				ps.setLong(2, 		lLoanTermTypeID);
				ps.setString(3, 	sInterestRateCode);
				lResult = ps.executeUpdate();

				log4j.info("lResult is :" + lResult);
				ps.close();
				ps = null;

				//获得最大id＋1
				StringBuffer sbMaxID = new StringBuffer();
				sbMaxID.append(" SELECT nvl(max(id),0) + 1 FROM loan_interestrate ");
				ps = con.prepareStatement(sbMaxID.toString());
				rs = ps.executeQuery();
				if( rs.next() )
				{
					lMaxID = rs.getLong(1);
				}else
				{
					lResult = 1;
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				//插入loan_InterestRate
				strSQL1 = "insert into loan_interestrate (ID,NBANKINTERESTTYPEID,mRate,dtValidate,nInputUserID,dtInput, NCURRENCYID ,NOFFICEID)"+
				"values (?,?,?,?,?,?,?,?) ";

				ps = con.prepareStatement(strSQL1);
				ps.setLong(1,lMaxID);
				ps.setLong(2,lBankLoanInterestRateID);
				ps.setDouble(3,dInterestRate);
				ps.setTimestamp(4,tsValibleDate);
				ps.setLong(5,lInputUserID);
				ps.setTimestamp(6,tsInputDate);
				ps.setLong(7,lCurrencyID);
				ps.setLong(8,lOfficeID);
				
				ps.executeUpdate();
				lResult=lMaxID;
				ps.close();
				ps = null;
				////////////////////////////
				//生效日的问题由页面去控制
				/////////////////////////////
			}
			////////////////////////////////////////////////////////////
			//以下是更新////////////////////////////////////////////////
			////////////////////////////////////////////////////////////
			else
			{
				con = Database.getConnection();
				StringBuffer sb = new StringBuffer();
				StringBuffer sbCondition = new StringBuffer();
				StringBuffer sbNumber = new StringBuffer();
				//获得LOAN_InterestRateTypeInfo中相应的id
				strSQL ="select ID from  LOAN_InterestRateTypeInfo where sInterestRateNo=? and  NCURRENCYID="+lCurrencyID + " and NOFFICEID="+lOfficeID;
				log4j.info("sql2 is :" + strSQL);
				ps = con.prepareStatement(strSQL);

				ps.setString(1, sInterestRateCode);
				rs = ps.executeQuery();
				if( rs != null && rs.next() )
				{
					lBankLoanInterestRateID = rs.getLong("ID");
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				//should not  effective in this field /////////////
				////////////////////////////////////////////////////
				////验证新增纪录的的唯一，是否与已有记录内容相冲突(如果存在其他纪录与录入的纪录的生效日重合，则返回)
				//strSQL = "select ID from loan_interestrate where NBANKINTERESTTYPEID="+lBankLoanInterestRateID+" and to_char(DTVALIDATE,'yyyymmdd')=to_char(?,'yyyymmdd') and id != ? and mRate = ?";
				strSQL = "select ID from loan_interestrate where to_char(DTVALIDATE,'yyyymmdd')=to_char(?,'yyyymmdd') and id != ? and mRate = ?"+" and  NOFFICEID="+lOfficeID+ " and NCURRENCYID="+lCurrencyID;
				ps=con.prepareStatement(strSQL);
				ps.setTimestamp(1,tsValibleDate);
				ps.setLong(2,lID);
				ps.setDouble(3,dInterestRate);
				rss1=ps.executeQuery();
				if(rss1!=null && rss1.next())
				{
					rss1.close();
					rss1 = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return -2;
				}
				rss1.close();
				rss1 = null;
				ps.close();
				ps = null;
				////////////////////////////////////////////////////
				
				////////////////////////////////////////////////////
				//验证新增纪录的的唯一，是否与已有记录内容相冲突(如果只修改了利率值，没有修改生效日或生效日在当前生效日之前，则只是update原先的纪录，而不是新增纪录)
				//strSQL = "select ID from loan_interestrate where NBANKINTERESTTYPEID="+lBankLoanInterestRateID+" and to_char(DTVALIDATE,'yyyymmdd')>=to_char(?,'yyyymmdd') ";//11.21 change by fanyang
				strSQL = "select ID from loan_interestrate where NBANKINTERESTTYPEID="+lBankLoanInterestRateID+" and to_char(DTVALIDATE,'yyyymmdd')>=to_char(?,'yyyymmdd') "+" and NOFFICEID="+lOfficeID+ " and NCURRENCYID="+lCurrencyID;
				ps=con.prepareStatement(strSQL);
				ps.setTimestamp(1,tsValibleDate);
				//ps.setDouble(2,dInterestRate);
				rs=ps.executeQuery();
				if(rs != null && rs.next())
				{
				  log4j.info("1-------------------------1");
				  lInsertOrUpdate = 1;  //修改
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				////////////////////////////////////////////////////
				if (lInsertOrUpdate == 1)  //修改
				{
					strSQL = "update loan_interestrate set mRate = ?, dtValidate = ? where id = ?";
					log4j.info("strSQL = " + strSQL);
					ps=con.prepareStatement(strSQL);
					ps.setDouble(1,dInterestRate);
					ps.setTimestamp(2,tsValibleDate);
					ps.setLong(3,lID);
					ps.executeUpdate();
					lResult = lID;
					ps.close();
					ps = null;			  
					//add by xwhe 2008-09-17 
					strSQL = "update LOAN_InterestRateTypeInfo set SINTERESTRATENAME = ?, adjustratetypeid = ? where  id = ?";
					ps=con.prepareStatement(strSQL);
					ps.setString(1,		sInterestRateName);
					ps.setLong(2,		lLoanTermTypeID);
					ps.setLong(3,		lBankLoanInterestRateID);
					ps.executeUpdate();
					lResult = lID;
					ps.close();
					ps = null;
					//如果修改成功，则修改该利率在adjustedcontract中的利率值和生效日
					strSQL = "update LOAN_RATEADJUSTCONTRACTDETAIL set mRate = ?, DTSTARTDATE = ? where NBANKINTERESTID = ?";
					log4j.info("strSQL = " + strSQL);
					ps=con.prepareStatement(strSQL);
					ps.setDouble(1,		dInterestRate);
					ps.setTimestamp(2,	tsValibleDate);
					ps.setLong(3,		lID);
					ps.executeUpdate();
					lResult = lID;
					ps.close();
					ps = null;
				}
				else  //新增
				{
					StringBuffer sbMaxID = new StringBuffer();
					sbMaxID.append(" SELECT nvl(max(id),0) + 1 FROM loan_interestrate ");
					ps = con.prepareStatement(sbMaxID.toString());
					rs = ps.executeQuery();
					if( rs.next() )
					{
						lMaxID = rs.getLong(1);
					}
					else
					{
						lResult = 1;
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;

					strSQL1 = "insert into loan_interestrate (ID,NBANKINTERESTTYPEID,mRate,dtValidate,nInputUserID,dtInput,NCURRENCYID ,NOFFICEID)"+
					" values (?,?,?,?,?,?,?,?) ";

					ps = con.prepareStatement(strSQL1);
					ps.setLong(1,lMaxID);
					ps.setLong(2,lBankLoanInterestRateID);
					ps.setDouble(3,dInterestRate);
					//need to modify
					//ps.setDouble(3,0.3);
					ps.setTimestamp(4,tsValibleDate);
					ps.setLong(5,lInputUserID);
					ps.setTimestamp(6,tsInputDate);
					ps.setLong(7,lCurrencyID);
					ps.setLong(8,lOfficeID);
					ps.executeUpdate();
					lResult=lMaxID;
					ps.close();
					ps = null;
				}
				con.close();
				con = null;
				return    lResult;
			}
		}
		catch (Exception e)
		{
			log4j.error("catch a error");		
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
					rs = null;
				if (rss1 != null)
					rss1.close();
					rss1 = null;
				if (ps != null)
					ps.close();
					ps = null;
				if (con != null)
					con.close();
					con = null;
			}
			catch (Exception ex)
			{
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		
		return lResult;
    }
    
    public long delBankInterestRateSetting (long lID, String sInterestRateCode, String sInterestRateName, double dInterestRate, Timestamp tsValibleDate, long lInputUserID, Timestamp tsInputDate, long lOfficeID,long lCurrencyID) throws java.rmi.RemoteException, IRollbackException
    {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		String strSQL1 = null;
		long lResult = -5;
		long lBankLoanInterestRateID=-1;
		ResultSet rss1 = null;
		try
		{
			if (lID == 0)
			{
				con = Database.getConnection();
				StringBuffer sb = new StringBuffer();
				StringBuffer sbCondition = new StringBuffer();
				StringBuffer sbNumber = new StringBuffer();
		 }
		}
		catch (Exception e)
		{
			log4j.error("catch a error");			
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
					rs = null;
				if (rss1 != null)
					rss1.close();
					rss1 = null;
				if (ps != null)
					ps.close();
					ps = null;
				if (con != null)
					con.close();
					con = null;
			}
			catch (Exception ex)
			{				
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;

		// return 0;

    }
    
    /**
     * findInterestRate  银行利率设置查找
     * 根据银行利率标示查询银行利率设置
     * 操作InterestRateHistory数据表
     * 查询相应记录
     * @param lID 银行利率标示
     * @return InterestRateInfo 银行利率信息
     * @throws RemoteException
     */
    public InterestRateInfo findInterestRateByID (long lID) throws java.rmi.RemoteException
    {
		//可能还会需要别的信息
		long lOfficeID=0;
		long lInputUserID=0;
		long lUpdateUserID=0;

		InterestRateInfo ii = new InterestRateInfo();
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		try
		{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append(" SELECT a.*, b.SINTERESTRATENO,b.SINTERESTRATENAME,b.id as parentid, b.adjustratetypeid ");
			sb.append(" FROM loan_InterestRate a,loan_INTERESTRATETYPEINFO b ");
			sb.append(" WHERE a.id=? and b.ID=a.NBANKINTERESTTYPEID ");

			ps = con.prepareStatement(sb.toString());
			ps.setLong(1, lID);
			rs = ps.executeQuery();
			if( rs != null && rs.next() )
			{
				ii.setID(rs.getLong("ID"));
				ii.setBankInterestTypeID(rs.getLong("nBankInterestTypeID"));
				ii.setInterestRate(rs.getDouble("mRate"));
				ii.setValiDate(rs.getTimestamp("dtValidate"));
				ii.setInputUserID(rs.getLong("nInputUserID"));
				ii.setInputDate(rs.getTimestamp("dtInput"));
				ii.setInterestRateCode(rs.getString("SINTERESTRATENO"));
				ii.setInterestRateName(rs.getString("SINTERESTRATENAME"));
				ii.setAdjustratetypeid(rs.getLong("adjustratetypeid"));
				ii.setCheckUserID(rs.getLong("nModifyUserID"));
				ii.setCheckDate(rs.getTimestamp("dtModify"));
				//ii.m_lLoanType = rs.getLong("nCurrencyID");
				//ii.m_lBankInterestID = rs.getLong("ParentID");        //这个实际就是上边的BankInterestTypeID
			}
			
			rs.close();rs = null;
			ps.close();ps = null;
			
			sb.setLength(0);
			sb.append(" SELECT *  ");
			sb.append(" FROM userinfo ");
			sb.append(" WHERE id=? ");

			ps = con.prepareStatement(sb.toString());
			ps.setLong(1, ii.getCheckUserID());
			rs = ps.executeQuery();
			if( rs != null && rs.next() )
			{
				ii.setCheckUserName(rs.getString("sName"));
			}

			rs.close();rs = null;
			ps.close();ps = null;

			sb.setLength(0);
			sb.append(" SELECT sName ");
			sb.append(" FROM userinfo ");
			sb.append(" WHERE id=? ");

			ps = con.prepareStatement(sb.toString());
			ps.setLong(1, ii.getInputUserID());
			rs = ps.executeQuery();
			if( rs != null && rs.next() )
			{
				ii.setInputUserName(rs.getString("sName"));
			}


			rs.close();rs = null;
			ps.close();ps = null;
			sb.setLength(0);

			con.close();con = null;
		}
		catch(Exception e)
		{
			log4j.error(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if( rs != null )
				{
					rs.close();
					rs = null;
				}
				if( ps != null )
				{
					ps.close();
					ps = null;
				}
				if( con != null )
				{
					con.close();
					con = null;
				}
			}
			catch(Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}
		}
		return ii;
    }

    /**
     * findMaxInterestRateCode  查找最大银行利率编号
     * 操作InterestRateType数据表
     * 查询相应记录
     * @param lCurrencyID 币种标示
     *
     * @return String 最大银行利率编号
     * @throws RemoteException
     */
    
    public String findMaxInterestRateCode (long lOfficeID,long lCurrencyID) throws java.rmi.RemoteException
    {
    	
		//StringBuffer sb = new StringBuffer();
		String MaxCode="";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		long ltemp=1;

		try
		{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			String  strSql="";

		/*	strSql=" select id from ( select id from LOAN_INTERESTRATETYPEINFO where NCURRENCYID="+lCurrencyID+" minus  select to_number(SINTERESTRATENO) scode from LOAN_INTERESTRATETYPEINFO   where NCURRENCYID="+lCurrencyID+")";
			ps = con.prepareStatement(strSql);
			rs = ps.executeQuery();

			if (rs.next())
			{  // 如果有跳过的scode，通过下面方sql获取被跳过的scode；如果没有跳过的scode，数据库查询结果返回0。
				ltemp = rs.getLong(1);
			}
			else//取最大值加一
			{*/
				sb.append(" SELECT max(to_number(nvl(SINTERESTRATENO,'001')))  ");
				sb.append(" FROM LOAN_INTERESTRATETYPEINFO where NOFFICEID="+lOfficeID+ " and  NCURRENCYID="+lCurrencyID);
				ps = con.prepareStatement(sb.toString());
				System.out.print("sql is: "+sb.toString());
				rs = ps.executeQuery();
				if( rs.next() )
				{
					MaxCode = rs.getString(1);
				}
				else
				{
					MaxCode="0";
				}
			MaxCode = MaxCode != null ? MaxCode : "0";
			//Common.log(" MaxCode : " + MaxCode );
			ltemp=Long.parseLong(MaxCode);
			ltemp=ltemp+1;
			log4j.info("ltemp is "+ltemp);
			//}//end else
			MaxCode=String.valueOf(ltemp);

			for (int j=MaxCode.length();j<3;j++)
				MaxCode = "0"+MaxCode;
			rs.close();rs = null;
			ps.close();ps = null;
			sb.setLength(0);

			con.close();con = null;
		}
		catch(Exception e)
		{
			log4j.error(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if( rs != null )
				{
					rs.close();
					rs = null;
				}
				if( ps != null )
				{
					ps.close();
					ps = null;
				}
				if( con != null )
				{
					con.close();
					con = null;
				}
			}
			catch(Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}

		}
		return MaxCode;

    }

    

    /**
     * findInterestRate  银行利率设置查找
     * 根据银行利率类型查询银行利率设置
     * 操作InterestRateHistory数据表
     * 查找 利率生效日在当前日起之后 的纪录
     * 查询相应记录
     *
     * @param lTypeID 银行利率编号
     * @param lCurrencyID 币种
     * @return Collection 银行利率信息
     * @throws RemoteException
     */
    public Collection findInterestRateByTypeID (long lTypeID,long lOfficeID,long lCurrencyID, long lPageLineCount,long lPageNo,long lOrderParam,long lDesc) throws java.rmi.RemoteException
    {


				Vector v= new Vector();
				long lAccountID = 0;
				long lBankID = 0;
				long lInputUserID = 0;
				long lCheckUserID = 0;
				long lPayerClientID = 0;
				long lID = 0;
				long lRecordCount=1;
				long lPageCount=10;

				long lRowNumStart = -1;
				long lRowNumEnd = -1;

				String strTmpSQL = "";
				Timestamp tsSystemDate = null;
				int iIndex = 0;
				Connection con = null;
				PreparedStatement ps = null;
				ResultSet rs = null;
				//PreparedStatement ps1 = null;
				//ResultSet rs1 = null;
				try
				{
					con = Database.getConnection();
					StringBuffer sb = new StringBuffer();
					String strSQL="";
					//tsSystemDate = Common.getSystemDate();
					//////////////////////////////////////////
					//计算记录总数
				strSQL=" select count(*) from loan_InterestRate a, loan_INTERESTRATETYPEINFO b,userinfo c  "+
					" where   b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID and b.NCURRENCYID="+lCurrencyID+ " and b.NOFFICEID="+lOfficeID+
					" and to_char(a.DTVALIDATE,'yyyymmdd')>to_char(sysdate,'yyyymmdd') ";

				if (lTypeID>0)
				{
					log4j.info("lTypeID"+lTypeID);
					strSQL=strSQL+" and a.id=? ";
				}
				    log4j.info(strSQL);
					ps = con.prepareStatement(strSQL);

				if (lTypeID>0)
				{
					ps.setLong(1,lTypeID);
				}


				rs = ps.executeQuery();
				if( rs != null && rs.next() )
				{
					lRecordCount = rs.getLong(1);
				}
				log4j.info("the lRecordCount is "+lRecordCount);
				rs.close();
				rs = null;
				ps.close();
				ps = null;


				strSQL=" select count(distinct b.id) from loan_InterestRate a, loan_INTERESTRATETYPEINFO b,userinfo c  "+
					" where b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID  and b.NCURRENCYID="+lCurrencyID+" and b.NOFFICEID="+lOfficeID+
					" and to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') ";

				if (lTypeID>0)
				{
					log4j.info("lTypeID"+lTypeID);
					strSQL=strSQL+" and a.id=? ";
				}
				    log4j.info(strSQL);
					ps = con.prepareStatement(strSQL);

				if (lTypeID>0)
				{
					ps.setLong(1,lTypeID);
				}

				rs = ps.executeQuery();
				if( rs != null && rs.next() )
				{
					lRecordCount = lRecordCount + rs.getLong(1);
				}
				log4j.info("--------------the lRecordCount is------------- "+lRecordCount);
				rs.close();
				rs = null;
				ps.close();
				ps = null;


				//计算总页数
				lPageCount = lRecordCount / lPageLineCount;
				if ((lRecordCount % lPageLineCount) != 0)
				{
					lPageCount++;
				}

				//返回需求的结果集

				//分页显示，显示下一页
				lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
				lRowNumEnd = lRowNumStart + lPageLineCount - 1;
				////////////////////////////////////////////

				sb.setLength(0);

				//进行查找

				 strSQL=" select a.dtInput, a.id,a.NBANKINTERESTTYPEID,a.mrate,a.dtvalidate ,b.SINTERESTRATENAME ,b.SINTERESTRATENO, c.SNAME as name1,a.nInputUserID nInputUserID from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c  "+
						" where b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID  and b.NCURRENCYID="+lCurrencyID +" and b.NOFFICEID="+lOfficeID+
						" and to_char(a.DTVALIDATE,'yyyymmdd')>to_char(sysdate,'yyyymmdd')" ;
				  if (lTypeID>0)
				  {
					  log4j.info("lTypeID"+lTypeID);
					  strSQL=strSQL+ " and a.id=? ";
				  }
				  strSQL =  strSQL +
						" union " +
						" select a.dtInput,a.id,a.NBANKINTERESTTYPEID,a.mrate,a.dtvalidate ,b.SINTERESTRATENAME ,b.SINTERESTRATENO, c.SNAME as name1,a.nInputUserID nInputUserID from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c  "+
						" where b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID  and b.NCURRENCYID="+lCurrencyID+" and b.NOFFICEID="+lOfficeID+
						//" and b.NCURRENCYID=a.NCURRENCYID " +
						" and (b.id,a.dtValidate) in " +
						" (select b.id,max(a.dtvalidate) from loan_InterestRate a,loan_INTERESTRATETYPEINFO b " +
						" where  b.ID=a.NBANKINTERESTTYPEID " +
						" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
						" group by b.id )  " ;


					if (lTypeID>0)
					{
						log4j.info("lTypeID"+lTypeID);
						strSQL=strSQL+" and a.id=? ";
					}
					strTmpSQL = "";
					switch ((int)lOrderParam)
					{
						case 1:
							//银行利率编号
							strTmpSQL += " order by a.SINTERESTRATENO";
							break;
						case 2:
							//银行利率名称
							strTmpSQL += " order by a.SINTERESTRATENAME";
							break;
						case 3:
							//银行利率
							strTmpSQL += " order by a.mRATE";
							break;
						case 4:
							//生效日
							strTmpSQL += " order by a.DTVALIDATE";
							break;
						case 5:
							//录入人
							strTmpSQL += " order by a.NINPUTUSERID";
							break;
						case 6:
							//录入日期
							strTmpSQL += " order by a.DTINPUT";
							break;
						default:
							strTmpSQL += "";
					}
					//strSQL +=strTmpSQL;

					//判断是升序还是降序，升序是系统默认的，降序是desc
					if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
					{
						strTmpSQL += " desc";
					}

					strSQL = " select ff.*, rownum r from ( select a.* from ( " + strSQL + " ) a " + strTmpSQL + " ) ff" ;
					strSQL = " select * from ( " + strSQL + " ) b  where b.r between " + lRowNumStart + " and " + lRowNumEnd;

					ps = con.prepareStatement(strSQL);
					log4j.info("strSQL is  "+ strSQL);
					System.out.println("strSQL is  "+ strSQL);
					//ps.setTimestamp(2,tsSystemDate);
					iIndex = 0;
					if (lTypeID>0)
					{
					  iIndex++;
					  ps.setLong(iIndex,lTypeID);
					}
					if (lTypeID>0)
					{
					  iIndex++;
					  ps.setLong(iIndex,lTypeID);
					}
					rs = ps.executeQuery();
					while( rs != null && rs.next() )
					{   //返回InterestRateInfo
						InterestRateInfo ii = new InterestRateInfo();
						ii.setID(rs.getLong("ID"));
						ii.setInterestRateCode(rs.getString("SINTERESTRATENO"));

						ii.setBankInterestTypeID(rs.getLong("NBANKINTERESTTYPEID"));
						ii.setInterestRateName(rs.getString("SINTERESTRATENAME"));
						ii.setInterestRate(rs.getDouble("mRATE"));
						ii.setValiDate(rs.getTimestamp("DTVALIDATE"));
 
						ii.setInputUserName(rs.getString("name1"));
		 				ii.setInputDate(rs.getTimestamp("DTINPUT"));
						log4j.info("在 EJB 中"+ii.getID());
						ii.setPageCount(lPageCount);
						v.addElement(ii);
					}
					rs.close();rs = null;
					ps.close();ps = null;
 
					con.close();con = null;
				}
				catch(Exception e)
				{
					log4j.error(e.toString());
					throw new RemoteException("remote exception : " + e.toString());
				}
				finally
				{
					try
					{
						if( rs != null )
						{
							rs.close();
							rs = null;
						}
						if( ps != null )
						{
							ps.close();
							ps = null;
						}

						if( con != null )
						{
							con.close();
							con = null;
						}
					}
					catch(Exception e)
					{
						throw new RemoteException("remote exception : " + e.toString());
					}
				}

				return (v.size() > 0 ? v : null);
				// return null;
    }
    
    /**
     * findInterestRate  银行利率设置查找
     * 根据银行利率类型查询银行利率设置
     * 操作InterestRateHistory数据表
     * 查找 利率生效日在当前日起之后 的纪录
     * 查询相应记录
     *
     * @param lTypeID 银行利率编号
     * @param lCurrencyID 币种
     * @return Collection 银行利率信息
     * @throws RemoteException
     */
    public Collection findRateByTypeID (long lTypeID,long lOfficeID,long lCurrencyID, long lPageLineCount,long lPageNo,long lOrderParam,long lDesc) throws java.rmi.RemoteException
    {
				Vector v= new Vector();
				long lAccountID = 0;
				long lBankID = 0;
				long lInputUserID = 0;
				long lCheckUserID = 0;
				long lPayerClientID = 0;
				long lID = 0;
				long lRecordCount=1;
				long lPageCount=10;

				long lRowNumStart = -1;
				long lRowNumEnd = -1;

				String strTmpSQL = "";
				Timestamp tsSystemDate = null;
				int iIndex = 0;
				Connection con = null;
				PreparedStatement ps = null;
				ResultSet rs = null;
				//PreparedStatement ps1 = null;
				//ResultSet rs1 = null;
				try
				{
					con = Database.getConnection();
					StringBuffer sb = new StringBuffer();
					String strSQL="";
					strSQL=" select count(*) from loan_InterestRate a, loan_INTERESTRATETYPEINFO b,userinfo c  "+
					" where   b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID and b.NCURRENCYID="+lCurrencyID+ " and b.NOFFICEID="+lOfficeID+
					" and to_char(a.DTVALIDATE,'yyyymmdd')>to_char(sysdate,'yyyymmdd') ";

				if (lTypeID>0)
				{
					log4j.info("lTypeID"+lTypeID);
					strSQL=strSQL+" and a.id=? ";
				}
				    log4j.info(strSQL);
					ps = con.prepareStatement(strSQL);

				if (lTypeID>0)
				{
					ps.setLong(1,lTypeID);
				}


				rs = ps.executeQuery();
				if( rs != null && rs.next() )
				{
					lRecordCount = rs.getLong(1);
				}
				log4j.info("the lRecordCount is "+lRecordCount);
				rs.close();
				rs = null;
				ps.close();
				ps = null;


				strSQL=" select count(distinct b.id) from loan_InterestRate a, loan_INTERESTRATETYPEINFO b,userinfo c  "+
					" where b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID  and b.NCURRENCYID="+lCurrencyID+" and b.NOFFICEID="+lOfficeID+
					" and to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') ";

				if (lTypeID>0)
				{
					log4j.info("lTypeID"+lTypeID);
					strSQL=strSQL+" and a.id=? ";
				}
				    log4j.info(strSQL);
					ps = con.prepareStatement(strSQL);

				if (lTypeID>0)
				{
					ps.setLong(1,lTypeID);
				}

				rs = ps.executeQuery();
				if( rs != null && rs.next() )
				{
					lRecordCount = lRecordCount + rs.getLong(1);
				}
				log4j.info("--------------the lRecordCount is------------- "+lRecordCount);
				rs.close();
				rs = null;
				ps.close();
				ps = null;


				//计算总页数
				lPageCount = lRecordCount / lPageLineCount;
				if ((lRecordCount % lPageLineCount) != 0)
				{
					lPageCount++;
				}

				//返回需求的结果集

				//分页显示，显示下一页
				lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
				lRowNumEnd = lRowNumStart + lPageLineCount - 1;
				////////////////////////////////////////////

				sb.setLength(0);
				//进行查找

				// strSQL=" select a.dtInput, a.id,a.NBANKINTERESTTYPEID,a.mrate,a.dtvalidate ,b.SINTERESTRATENAME ,b.SINTERESTRATENO, c.SNAME as name1,a.nInputUserID nInputUserID from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c  "+
				//		" where b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID  and b.NCURRENCYID="+lCurrencyID +" and b.NOFFICEID="+lOfficeID+
				//		" and to_char(a.DTVALIDATE,'yyyymmdd')>to_char(sysdate,'yyyymmdd')" ;
				//  if (lTypeID>0)
				//  {
				//	  log4j.info("lTypeID"+lTypeID);
				//	  strSQL=strSQL+ " and a.id=? ";
				//  }
				  strSQL =	" select a.dtInput,a.id,a.NBANKINTERESTTYPEID,a.mrate,a.dtvalidate ,b.SINTERESTRATENAME ,b.SINTERESTRATENO, c.SNAME as name1,a.nInputUserID nInputUserID, b.adjustratetypeid from loan_InterestRate a, loan_INTERESTRATETYPEINFO b, userinfo c "+
						" where b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID  and b.NCURRENCYID="+lCurrencyID+" and b.NOFFICEID="+lOfficeID+
						//" and b.NCURRENCYID=a.NCURRENCYID " +
						" and (b.id,a.dtValidate) in " +
						" (select b.id,max(a.dtvalidate) from loan_InterestRate a,loan_INTERESTRATETYPEINFO b " +
						" where  b.ID=a.NBANKINTERESTTYPEID " +
					//	" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
						" group by b.id )  " ;


					if (lTypeID>0)
					{
						log4j.info("lTypeID"+lTypeID);
						strSQL=strSQL+" and a.id=? ";
					}
					strTmpSQL = "";
					switch ((int)lOrderParam)
					{
						case 1:
							//银行利率编号
							strTmpSQL += " order by a.SINTERESTRATENO";
							break;
						case 2:
							//银行利率名称
							strTmpSQL += " order by a.SINTERESTRATENAME";
							break;
						case 3:
							//银行利率
							strTmpSQL += " order by a.mRATE";
							break;
						case 4:
							//生效日
							strTmpSQL += " order by a.DTVALIDATE";
							break;
						case 5:
							//录入人
							strTmpSQL += " order by a.NINPUTUSERID";
							break;
						case 6:
							//录入日期
							strTmpSQL += " order by a.DTINPUT";
							break;
						case 7:
							//基准利率调整类型
							strTmpSQL += " order by a.adjustratetypeid";
							break;
						default:
							strTmpSQL += "";
					}
					//strSQL +=strTmpSQL;

					//判断是升序还是降序，升序是系统默认的，降序是desc
					if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
					{
						strTmpSQL += " desc";
					}

					strSQL = " select ff.*, rownum r from ( select a.* from ( " + strSQL + " ) a " + strTmpSQL + " ) ff" ;
					strSQL = " select * from ( " + strSQL + " ) b  where b.r between " + lRowNumStart + " and " + lRowNumEnd;

					ps = con.prepareStatement(strSQL);
					log4j.info("strSQL is  "+ strSQL);
					System.out.println("strSQL is  "+ strSQL);
					//ps.setTimestamp(2,tsSystemDate);
					iIndex = 0;
					if (lTypeID>0)
					{
					  iIndex++;
					  ps.setLong(iIndex,lTypeID);
					}
				//	if (lTypeID>0)
				//	{
				//	  iIndex++;
				//	  ps.setLong(iIndex,lTypeID);
				//	}
					rs = ps.executeQuery();
					while( rs != null && rs.next() )
					{
						InterestRateInfo ii = new InterestRateInfo();
						ii.setID(rs.getLong("ID"));
						ii.setInterestRateCode(rs.getString("SINTERESTRATENO"));
						ii.setBankInterestTypeID(rs.getLong("NBANKINTERESTTYPEID"));
						ii.setInterestRateName(rs.getString("SINTERESTRATENAME"));
						ii.setInterestRate(rs.getDouble("mRATE"));
						ii.setValiDate(rs.getTimestamp("DTVALIDATE"));
						ii.setInputUserName(rs.getString("name1"));
		 				ii.setInputDate(rs.getTimestamp("DTINPUT"));
						ii.setPageCount(lPageCount);
						ii.setAdjustratetypeid(rs.getLong("adjustratetypeid"));
						
						v.addElement(ii);
					}
					rs.close();rs = null;
					ps.close();ps = null;
 
					con.close();con = null;
				}
				catch(Exception e)
				{
					log4j.error(e.toString());
					throw new RemoteException("remote exception : " + e.toString());
				}
				finally
				{
					try
					{
						if( rs != null )
						{
							rs.close();
							rs = null;
						}
						if( ps != null )
						{
							ps.close();
							ps = null;
						}

						if( con != null )
						{
							con.close();
							con = null;
						}
					}
					catch(Exception e)
					{
						throw new RemoteException("remote exception : " + e.toString());
					}
				}

				return (v.size() > 0 ? v : null);
				// return null;
    }


    /**
     * findInterestRateHistory  查看历史利率记录
     * 根据利率类型标示查询历史利率记录
     * 操作InterestRateHistory、InterestRateTypeInfo数据表
     * 查询相应记录
     * 只查出生效日在当前日期之前的纪录
     *
     * @param lTypeID 银行利率编号
     * @param lCurrencyID 币种
     * @return Collection 结果集
     * @throws RemoteException
     */
    public Collection findInterestRateHistoryByTypeID (long lTypeID, long lOfficeID,long lCurrencyID, long lPageLineCount,long lPageNo,long lOrderParam,long lDesc) throws java.rmi.RemoteException
    {
		Vector v= new Vector();

		long lAccountID = 0;
		long lBankID = 0;
		long lInputUserID = 0;
		long lCheckUserID = 0;
		long lPayerClientID = 0;
		long lID = 0;
		long lRecordCount=10;
		long lPageCount=10;

		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		String strTmpSQL = "";
		String strSQL = "";
		Timestamp tsSystemDate = null;
		//tsSystemDate =Common.getSystemDate();
		int iIndex = 0;

		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		//PreparedStatement ps1 = null;
		//ResultSet rs1 = null;
		try
		{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
		  //tsSystemDate = Common.getSystemDate();

			strSQL="SELECT count(*) FROM (select b.id,a.dtValidate from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c WHERE a.NBANKINTERESTTYPEID=? "+
				" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
				" minus " +
				" select b.id,max(a.dtValidate) from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c WHERE a.NBANKINTERESTTYPEID=? "+
				" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
				" group by b.id )";
			log4j.info("strSQL = " + strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1,lTypeID);
			ps.setLong(2,lTypeID);
		    //ps.setTimestamp(3,tsSystemDate);
			System.out.println(strSQL);
			log4j.info(strSQL);
			rs = ps.executeQuery();
			while( rs != null && rs.next() )
			{
				lRecordCount = rs.getLong(1);
				System.out.println("1="+lTypeID+"2="+lRecordCount);
			}

			log4j.info("the lRecordCount is "+lRecordCount);
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			log4j.info(sb.toString());
			//计算总页数
			lPageCount = lRecordCount / lPageLineCount;
			if ((lRecordCount % lPageLineCount) != 0)
			{
				lPageCount++;
			}

			//返回需求的结果集

			//分页显示，显示下一页
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;
			////////////////////////////////////////////
			sb.setLength(0);

			strSQL="SELECT * FROM " +
			" ( " +
			" select a.*, b.SINTERESTRATENO,b.SINTERESTRATENAME,c.SNAME as name1  from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c " +
			" WHERE a.NBANKINTERESTTYPEID=? " +
			" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
			" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
			//" and b.NCURRENCYID=a.NCURRENCYID " +
			" minus " +
			" select a.*, b.SINTERESTRATENO,b.SINTERESTRATENAME,c.SNAME as name1 from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c " +
			" WHERE a.NBANKINTERESTTYPEID=? " +
			" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
			" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
			//" and b.NCURRENCYID=a.NCURRENCYID " +
			" and (b.id,a.dtvalidate) in " +
			" (   select b.id,max(a.dtvalidate) from loan_INTERESTRATETYPEINFO b,loan_InterestRate a,userinfo c " +
			" WHERE a.NBANKINTERESTTYPEID=? " +
			" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
			" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
			//" and b.NCURRENCYID=a.NCURRENCYID " +
			" group by b.id " +
			" ) " +
			" ) ";

			strTmpSQL = "";
			switch ((int)lOrderParam)
			{
				case 1:
					//银行利率编号
					strTmpSQL += " order by NBANKINTERESTTYPEID";
					break;
				case 2:
					//银行利率名称
					strTmpSQL += " order by SINTERESTRATENAME";
					break;
				case 3:
					//银行利率
					strTmpSQL += " order by mRATE";
					break;
				case 4:
					//生效日
					strTmpSQL += " order by DTVALIDATE";
					break;
				case 5:
					//录入人
					strTmpSQL += " order by NINPUTUSERID";
					break;

				case 6:
					//录入日期
					strTmpSQL += " order by DTINPUT";
					break;
				default:
					strTmpSQL += " order by NBANKINTERESTTYPEID";
			}
			strSQL +=strTmpSQL;

			//判断是升序还是降序，升序是系统默认的，降序是desc
			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				strSQL += " desc";

			}

			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between " + lRowNumStart + " and " + lRowNumEnd;
			System.out.println("the strSQL is "+strSQL);
			System.out.println("the lTypeID is "+lTypeID);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1,lTypeID);

			ps.setLong(2,lTypeID);

			ps.setLong(3,lTypeID);

			//ps.setTimestamp(3,tsSystemDate);
			rs = ps.executeQuery();
			while( rs != null && rs.next() )
			{   //返回InterestRateInfo
				InterestRateInfo ii = new InterestRateInfo();

				ii.setInterestRateCode(rs.getString("SINTERESTRATENO"));
				ii.setBankInterestTypeID(rs.getLong("NBANKINTERESTTYPEID"));
				ii.setInterestRateName(rs.getString("SINTERESTRATENAME"));
				ii.setInterestRate(rs.getDouble("mRATE"));
				ii.setValiDate(rs.getTimestamp("DTVALIDATE"));

				ii.setInputUserName(rs.getString("name1"));
				ii.setInputDate(rs.getTimestamp("DTINPUT"));
				ii.setPageCount(lPageCount);
				v.addElement(ii);
			}


			rs.close();rs = null;
			ps.close();ps = null;

			con.close();con = null;





		}
		catch(Exception e)
		{
			log4j.error(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if( rs != null )
				{
					rs.close();
					rs = null;
				}
				if( ps != null )
				{
					ps.close();
					ps = null;
				}

				if( con != null )
				{
					con.close();
					con = null;
				}
			}
			catch(Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}
		}


		return (v.size() > 0 ? v : null);
		//return null;

    }
    public Collection findRateHistoryByTypeID (long lTypeID, long lOfficeID,long lCurrencyID, long lPageLineCount,long lPageNo,long lOrderParam,long lDesc,Timestamp tsValibleDate) throws java.rmi.RemoteException
    {
		Vector v= new Vector();

		long lAccountID = 0;
		long lBankID = 0;
		long lInputUserID = 0;
		long lCheckUserID = 0;
		long lPayerClientID = 0;
		long lID = 0;
		long lRecordCount=10;
		long lPageCount=10;

		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		String strTmpSQL = "";
		String strSQL = "";
		Timestamp tsSystemDate = null;
		//tsSystemDate =Common.getSystemDate();
		int iIndex = 0;

		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		//PreparedStatement ps1 = null;
		//ResultSet rs1 = null;
		try
		{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
		  //tsSystemDate = Common.getSystemDate();

			strSQL="SELECT count(*) FROM (select b.id,a.dtValidate from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c WHERE a.NBANKINTERESTTYPEID=? "+
				" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID and  to_char(a.DTVALIDATE,'yyyymmdd')<to_char(?,'yyyymmdd') and a.ncurrencyid="+lCurrencyID+ 
				//" minus " +
				//" select b.id,max(a.dtValidate) from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c WHERE a.NBANKINTERESTTYPEID=? "+
				//" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
				" group by b.id )";
			log4j.info("strSQL = " + strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1,lTypeID);
			ps.setTimestamp(2,tsValibleDate);
		    //ps.setTimestamp(3,tsSystemDate);
			System.out.println(strSQL);
			log4j.info(strSQL);
			rs = ps.executeQuery();
			while( rs != null && rs.next() )
			{
				lRecordCount = rs.getLong(1);
				System.out.println("1="+lTypeID+"2="+lRecordCount);
			}

			log4j.info("the lRecordCount is "+lRecordCount);
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			log4j.info(sb.toString());
			//计算总页数
			lPageCount = lRecordCount / lPageLineCount;
			if ((lRecordCount % lPageLineCount) != 0)
			{
				lPageCount++;
			}

			//返回需求的结果集

			//分页显示，显示下一页
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;
			////////////////////////////////////////////
			sb.setLength(0);

			strSQL="SELECT * FROM " +
			" ( " +
			" select a.*, b.SINTERESTRATENO,b.SINTERESTRATENAME,c.SNAME as name1  from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c " +
			" WHERE a.NBANKINTERESTTYPEID=? " +
			" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
			" and  to_char(a.DTVALIDATE,'yyyymmdd')<to_char(?,'yyyymmdd') and a.ncurrencyid="+lCurrencyID+
			//" and b.NCURRENCYID=a.NCURRENCYID " +
		//	" minus " +
		//	" select a.*, b.SINTERESTRATENO,b.SINTERESTRATENAME,c.SNAME as name1 from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c " +
		//	" WHERE a.NBANKINTERESTTYPEID=? " +
		//	" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
		//	" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
		//	//" and b.NCURRENCYID=a.NCURRENCYID " +
		//	" and (b.id,a.dtvalidate) in " +
		//	" (   select b.id,max(a.dtvalidate) from loan_INTERESTRATETYPEINFO b,loan_InterestRate a,userinfo c " +
		//	" WHERE a.NBANKINTERESTTYPEID=? " +
		//	" and b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
		//	" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') " +
			//" and b.NCURRENCYID=a.NCURRENCYID " +
		//	" group by b.id " +
		//	" ) " +
			" ) ";

			strTmpSQL = "";
			switch ((int)lOrderParam)
			{
				case 1:
					//银行利率编号
					strTmpSQL += " order by NBANKINTERESTTYPEID";
					break;
				case 2:
					//银行利率名称
					strTmpSQL += " order by SINTERESTRATENAME";
					break;
				case 3:
					//银行利率
					strTmpSQL += " order by mRATE";
					break;
				case 4:
					//生效日
					strTmpSQL += " order by DTVALIDATE";
					break;
				case 5:
					//录入人
					strTmpSQL += " order by NINPUTUSERID";
					break;

				case 6:
					//录入日期
					strTmpSQL += " order by DTINPUT";
					break;
				default:
					strTmpSQL += " order by NBANKINTERESTTYPEID";
			}
			strSQL +=strTmpSQL;

			//判断是升序还是降序，升序是系统默认的，降序是desc
			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				strSQL += " desc";

			}

			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between " + lRowNumStart + " and " + lRowNumEnd;
			System.out.println("the strSQL is "+strSQL);
			System.out.println("the lTypeID is "+lTypeID);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1,lTypeID);

			ps.setTimestamp(2,tsValibleDate);


			//ps.setTimestamp(3,tsSystemDate);
			rs = ps.executeQuery();
			while( rs != null && rs.next() )
			{   //返回InterestRateInfo
				InterestRateInfo ii = new InterestRateInfo();

				ii.setInterestRateCode(rs.getString("SINTERESTRATENO"));
				ii.setBankInterestTypeID(rs.getLong("NBANKINTERESTTYPEID"));
				ii.setInterestRateName(rs.getString("SINTERESTRATENAME"));
				ii.setInterestRate(rs.getDouble("mRATE"));
				ii.setValiDate(rs.getTimestamp("DTVALIDATE"));

				ii.setInputUserName(rs.getString("name1"));
				ii.setInputDate(rs.getTimestamp("DTINPUT"));
				ii.setPageCount(lPageCount);
				v.addElement(ii);
			}


			rs.close();rs = null;
			ps.close();ps = null;

			con.close();con = null;





		}
		catch(Exception e)
		{
			log4j.error(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if( rs != null )
				{
					rs.close();
					rs = null;
				}
				if( ps != null )
				{
					ps.close();
					ps = null;
				}

				if( con != null )
				{
					con.close();
					con = null;
				}
			}
			catch(Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}
		}


		return (v.size() > 0 ? v : null);
		//return null;

    }


    /**
     * findInterestRateHistory  查看所有历史利率记录
     * 查询所有历史利率记录
     * 操作BankLoanInterestRate、InterestRateTypeInfo数据表
     * 查询相应记录
     *
     * 只查出生效日在当前日期之前的纪录
     * @param lCurrencyID 币种
     * @return Collection 结果集
     * @throws RemoteException
     */
    public Collection findInterestRateHistory (long lOfficeID,long lCurrencyID,long lPageLineCount,long lPageNo,long lOrderParam,long lDesc) throws java.rmi.RemoteException
    {
		Vector v= new Vector();

		long lAccountID = 0;
		long lBankID = 0;
		long lInputUserID = 0;
		long lCheckUserID = 0;
		long lPayerClientID = 0;
		long lID = 0;
		long lRecordCount=10;
		long lPageCount=10;

		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		String strTmpSQL = "";
		String strSQL = "";
		Timestamp tsSystemDate = null;
		//tsSystemDate =Common.getSystemDate();
		int iIndex = 0;

		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		//PreparedStatement ps1 = null;
		//ResultSet rs1 = null;



		try
		{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			//tsSystemDate = Common.getSystemDate();



			strSQL="SELECT count(*) FROM (select b.id,a.dtValidate from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c WHERE  "+
			" b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') and a.ncurrencyid ="+lCurrencyID+
			" minus " +
			" select b.id,max(a.dtValidate) from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c WHERE "+
			" b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') and a.ncurrencyid ="+lCurrencyID+
			" group by b.id )";

			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			while( rs != null && rs.next() )
			{
				lRecordCount = rs.getLong(1);
			}

			log4j.info("the lRecordCount is "+lRecordCount);
			rs.close();
			rs = null;
			ps.close();
			ps = null;


			log4j.info(sb.toString());
			//计算总页数
			lPageCount = lRecordCount / lPageLineCount;
			if ((lRecordCount % lPageLineCount) != 0)
			{
				lPageCount++;
			}

			//返回需求的结果集

			//分页显示，显示下一页
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;
			////////////////////////////////////////////
			sb.setLength(0);

			strSQL="SELECT * FROM " +
			" ( " +
			" select a.*, b.SINTERESTRATENO,b.SINTERESTRATENAME,c.SNAME as name1  from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c " +
			" WHERE   " +
			"  b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
			" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') and a.ncurrencyid ="+lCurrencyID+
			//" and b.NCURRENCYID=a.NCURRENCYID " +
			" minus " +
			" select a.*, b.SINTERESTRATENO,b.SINTERESTRATENAME,c.SNAME as name1 from loan_InterestRate a,loan_INTERESTRATETYPEINFO b,userinfo c " +
			" WHERE  " +
			"  b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
			" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') and a.ncurrencyid ="+lCurrencyID+
			//" and b.NCURRENCYID=a.NCURRENCYID " +
			" and (b.id,a.dtvalidate) in " +
			" (   select b.id,max(a.dtvalidate) from loan_INTERESTRATETYPEINFO b,loan_InterestRate a,userinfo c " +
			" WHERE " +
			" b.ID=a.NBANKINTERESTTYPEID and c.ID=a.NINPUTUSERID " +
			" and  to_char(a.DTVALIDATE,'yyyymmdd')<=to_char(sysdate,'yyyymmdd') and a.ncurrencyid ="+lCurrencyID+
			//" and b.NCURRENCYID=a.NCURRENCYID " +
			" group by b.id " +
			" ) " +
			" ) ";

			strTmpSQL = "";
			switch ((int)lOrderParam)
			{
				case 1:
					//银行利率编号
					strTmpSQL += " order by NBANKINTERESTTYPEID";
					break;
				case 2:
					//银行利率名称
					strTmpSQL += " order by SINTERESTRATENAME";
					break;
				case 3:
					//银行利率
					strTmpSQL += " order by mRATE";
					break;
				case 4:
					//生效日
					strTmpSQL += " order by DTVALIDATE";
					break;
				case 5:
					//录入人
					strTmpSQL += " order by NINPUTUSERID";
					break;

				case 6:
					//录入日期
					strTmpSQL += " order by DTINPUT";
					break;
				default:
					strTmpSQL += "";
			}
			strSQL +=strTmpSQL;


			//判断是升序还是降序，升序是系统默认的，降序是desc
			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				strSQL += " desc";

			}

			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between " + lRowNumStart + " and " + lRowNumEnd;

			ps = con.prepareStatement(strSQL);
			log4j.info("the strSQL is "+strSQL);
			System.out.println("the strSQL is "+strSQL);
			rs = ps.executeQuery();
			while( rs != null && rs.next() )
			{   //返回InterestRateInfo
				InterestRateInfo ii = new InterestRateInfo();
				ii.setBankInterestTypeID(rs.getLong("NBANKINTERESTTYPEID"));
				ii.setInterestRateCode(rs.getString("SINTERESTRATENO"));
				ii.setInterestRateName(rs.getString("SINTERESTRATENAME"));
				ii.setInterestRate(rs.getDouble("mrate"));
				ii.setValiDate(rs.getTimestamp("DTVALIDATE"));

				ii.setInputUserName(rs.getString("name1"));
				ii.setInputDate(rs.getTimestamp("DTINPUT"));
				ii.setPageCount(lPageCount);
				v.addElement(ii);
			}
			rs.close();rs = null;
			ps.close();ps = null;

			con.close();con = null;

		}
		catch(Exception e)
		{
			log4j.error(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if( rs != null )
				{
					rs.close();
					rs = null;
				}
				if( ps != null )
				{
					ps.close();
					ps = null;
				}

				if( con != null )
				{
					con.close();
					con = null;
				}
			}
			catch(Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}
		}

		return (v.size() > 0 ? v : null);

    }


    /**
     * findInterestByID  查找利率信息
     * 根据条件查找利率信息
     * 操作 BANKLOANINTERESTRATE 数据表
     * 查询相应记录
     *
     * @param long           lID              利率标示
     * @return InterestRateInfo
     * @throws RemoteException
     */
    public InterestRateInfo findInterestByID (long lID) throws java.rmi.RemoteException
    {
        return null;
    }


    /**
     * updateInterestRate  普通贷款银行利率修改
     * 提交银行利率修改申请
     * 操作 ContractRateSetting 数据表
     * 提交银行利率修改申请
     * 将被修改的合同的查询条件写入表中
     * lID = 0 ,新增。不能修改纪录
     *
     * @param lID                       long          利率修改条件标示
     * @param lLoanInterestRateID       long          贷款利率标示
     * @param lContractID               long          合同标示
     * @param lLoanPayNoticeID          long          放款通知单标示
     * @param dRate                     double        利率值
     * @param tsValidate                Timestamp     生效日
     * @param strReason                 String        调整原因
     * @param lCurrencyID               long          币种
     * @param lOfficeID                 long          办事处ID
     * @param lInputUserID              long          录入人ID
     * @param tsInputDate               Timestamp     录入日期
     * @return long  成功返回ID标识，失败返回0
     * @throws RemoteException
     * @throws IRollbackException 
     */
    public long adjustInterestRate (
      long lID,
      long lLoanInterestRateID,
      long lContractID,
      long lLoanPayNoticeID,
      double dRate,
      double dAdjustRate,
      double dStaidAdjustRate,
      Timestamp tsValidate,
      String strReason,
      long lCurrencyID,
      long lOfficeID,
      long lInputUserID,
      Timestamp tsInputDate
    ) throws java.rmi.RemoteException, IRollbackException
{
	PreparedStatement ps = null;
	ResultSet rs = null;
	Connection conn = null;
	String strSQL = null;
	long lMaxID = -1;
	long nStatusID = -1;
	
	 // add by jbpan 20120607 操作日志 start
    LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
	logInfo.setBusinessType("贷款合同执行利率调整");
	logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
	logInfo.setTransCode(NameRef.getContractNoByID(lContractID));  //业务主键-合同号
    // add by jbpan 20120607 end
	try
	{
		conn = Database.getConnection();

		//检查是否有重复纪录
		strSQL =
			" select count(*) from loan_rateadjustpaycondition where 1=1 ";

		//修改 by kenny(胡志强)(2007-03-29) 只要在同一个生效日期，一笔合同不能存在两笔利率调整记录
		/*
		if (lLoanInterestRateID > 0)
		{
			strSQL += " and nBankInterestID = " + lLoanInterestRateID;
		}
		if (dAdjustRate != -100)
		{
			strSQL += " and MADJUSTRATE = " + dAdjustRate;
		}
		if (dStaidAdjustRate != -100)
		{
			strSQL += " and MSTAIDADJUSTRATE = " + dStaidAdjustRate;
		}
		*/
		if (lContractID > 0)
		{
			strSQL += " and nContractID = " + lContractID;
		}
		if (lLoanPayNoticeID > 0)
		{
			strSQL += " and nLoanPayNoticeID = " + lLoanPayNoticeID;
		}
		//modify by xwhe 2008-06-05 国电修改
	//	if (tsValidate != null)
	//	{
	//		strSQL += " and to_char(dtValidate,'yyyy-mm-dd') = '" +
	//			DataFormat.getDateString(tsValidate) + "' ";
	//	}
		/*修改 by kenny(胡志强) (2007-03-21) 处理合同利率调整修改时提示存在相同记录问题 */
		if (lID > 0)
		{
			strSQL += " and id not in ("+lID+") ";
		}
		strSQL += " and nstatusId in ("+LOANConstant.InterestRateSettingStatus.SUBMIT+","+LOANConstant.InterestRateSettingStatus.APPROVALING+") ";

		System.out.println("--------------------haoliang-------------------"+strSQL);
		ps = conn.prepareStatement(strSQL);
		rs = ps.executeQuery();
		if (rs.next())
		{
			lMaxID = rs.getLong(1);
		}
		rs.close();
		rs = null;
		ps.close();
		ps = null;

		System.out.println("lMaxID1=" + lMaxID);
		if (lMaxID > 0)
		{
			conn.close();
			conn = null;

			return ( -2);
		}

		if (lID <= 0)
		{
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
			//得到最大的ID
			strSQL = "select nvl(max(ID)+1,1) from loan_rateadjustpaycondition ";
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lMaxID = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			strSQL = " Insert into loan_rateadjustpaycondition( " +
				" ID,nBankInterestID,nContractID,nLoanPayNoticeID,mRate,dtValiDate,sReason, " +
				" nInputUserID,dtInputDate,nStatusID,nOfficeID,nNextCheckUserID,MADJUSTRATE,MSTAIDADJUSTRATE,nNextCheckLevel,nCurrencyID ) " +
				" values (?,?,?,?,?,?,?,?,sysdate,?,?,?,?,?,-1,?) ";

			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lMaxID);
			ps.setLong(2, lLoanInterestRateID);
			ps.setLong(3, lContractID);
			ps.setLong(4, lLoanPayNoticeID);
			ps.setDouble(5, dRate);
			ps.setTimestamp(6, tsValidate);
			ps.setString(7, strReason);
			ps.setLong(8, lInputUserID);
			ps.setLong(9, LOANConstant.InterestRateSettingStatus.SUBMIT);
			ps.setLong(10, lOfficeID);
			ps.setLong(11, -1);
			ps.setDouble(12, dAdjustRate);
			ps.setDouble(13, dStaidAdjustRate);
			ps.setLong(14, lCurrencyID);
			ps.executeUpdate();
			ps.close();
			ps = null;
		}
		else
		{
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
			//这里注意要把nnextcheckuserid置为nInputUserID
			strSQL = " Update loan_rateadjustpaycondition Set " +
				" nBankInterestID=?,mRate=?,dtValiDate=?,sReason=?,nstatusID=?,MADJUSTRATE=?,MSTAIDADJUSTRATE=? " +
				" Where ID=? ";

			//System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lLoanInterestRateID);
			ps.setDouble(2, dRate);
			ps.setTimestamp(3, tsValidate);
			ps.setString(4, strReason);
			ps.setLong(5, LOANConstant.InterestRateSettingStatus.SUBMIT);
			ps.setDouble(6, dAdjustRate);
			ps.setDouble(7, dStaidAdjustRate);
			ps.setLong(8, lID);
           
			ps.executeUpdate();
			
			ps.close();
			ps = null;

			lMaxID = lID;

		}
		conn.close();
		conn = null;
		// add by jbpan 20120607 加上操作日志-操作结果-成功        
 		logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
	}
	catch (Exception e)
	{
		e.printStackTrace();
		// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
		//modified by mzh_fu 2007/08/07
		//throw new RemoteException("remote exception : " + e.toString());
		throw new IRollbackException(context, e.getMessage(), e);
	}
	finally
	{
		 // add by jbpan 20120607 操作日志 start
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			// add by jbpan 20120607 end
		try
		{
			if (rs != null)
				rs.close();
				rs = null;
			if (ps != null)
				ps.close();
				ps = null;
			if (conn != null)
				conn.close();
				conn = null;
		}
		catch (Exception ex)
		{
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException("remote exception : " + ex.toString());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
	}
	return (lMaxID);
}



    /**
     * findUpdateInterestRateByID  查找利率修改条件信息
     * 根据条件查找利率修改条件信息
     * 操作 ContractRateSetting 数据表
     * 查询相应记录
     *
     * @param long           lID              利率修改条件标示
     * @param long			 lCurrencyID      币种类型标识 
     * @return AdjustInterestConditionInfo
     * @throws RemoteException
     */
    public AdjustInterestConditionInfo findAdjustInterestRateByID (long lID,long lCurrencyID) throws java.rmi.RemoteException
    {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		int nBillCount = 0;
		AdjustInterestConditionInfo info = new AdjustInterestConditionInfo ();

		try{
			con = Database.getConnection ();
			ContractDao dao = new ContractDao();
			/*strSQL  = " select a.*, ";
			strSQL += " b.ID as nContractID, b.sContractCode, c.mExamineAmount, c.fInterestRate, c.dtStartDate, c.dtEndDate, d.sName, e.sInterestRateNo ";
			strSQL += " from ContractRateSetting a, ContractInfo b, LoanInfo c, Client d, InterestRateTypeInfo e, InterestRateHistory f ";
			strSQL += " where a.nContractID=b.ID(+) and b.nLoanID=c.ID(+) and c.nBorrowClientID=d.ID(+) and a.nBankLoanInterestRateID=f.ID(+) ";
			strSQL += " and f.nBankLoanInterestRateID=e.ID and a.ID=? and e.nCurrencyID=? and f.nCurrencyID=? ";*/

			strSQL  = " select a.*, ";
			strSQL += " b.ID as nContractID, b.sContractCode, c.mExamineAmount, f.mrate as mRateNow,g.mrate as mRateBefore, c.dtStartDate, c.dtEndDate, d.sName, e.sInterestRateNo ,g.dtValidate as dtRateValidate ";
			strSQL += " from loan_rateadjustpaycondition a, loan_ContractForm b, loan_loanForm c, Client d, loan_InterestRateTypeInfo e, loan_InterestRate f ,loan_InterestRate g ";
			strSQL += " where a.nContractID=b.ID(+) and b.nLoanID=c.ID(+) and c.nBorrowClientID=d.ID(+) and a.nBankInterestID=f.ID(+) ";
			strSQL += " and f.nBankInterestTypeID=e.ID and a.ID=? and e.nCurrencyID=? ";
			strSQL += " and b.nBankInterestID=g.ID(+) ";
			System.out.println("查询sql----findAdjustInterestRateByID--------\n"+strSQL);
			ps = con.prepareStatement (strSQL);
			ps.setLong (1, lID);
		//	ps.setLong (2, Constant.CurrencyType.RMB);
			ps.setLong (2, lCurrencyID);
			//ps.setLong (3, Constant.CurrencyType.RMB);
			//System.out.println (strSQL);
			rs = ps.executeQuery ();
			if (rs.next ()) {

				info.lID = lID;
				info.lLoanPayNoticeID = rs.getLong ("nLoanPayNoticeID");
				info.lContractID = rs.getLong ("nContractID");
				info.strContractNo = rs.getString ("sContractCode");
				info.strClientName = rs.getString ("sName");
				info.mExamineAmount = rs.getDouble ("mExamineAmount");
				//info.fInterestRate = rs.getFloat ("mRateBefore");
				info.tsStartDate = rs.getTimestamp ("dtStartDate");
				info.tsEndDate = rs.getTimestamp ("dtEndDate");

				info.lBankLoanInterestRateID = rs.getLong ("nBankInterestID");
				info.strBankLoanInterestRateNo = rs.getString ("sInterestRateNo");
				info.fRate = rs.getFloat ("mRateNow");
				info.tsValidate = rs.getTimestamp ("dtValiDate");
				info.strReason = rs.getString ("sReason");
				info.lStatusID = rs.getLong ("nStatusID");

				info.lInputUserID = rs.getLong ("nInputUserID");
				info.strInputUserName = findUserNameByID ((int) info.lInputUserID);
				info.tsInputDate = rs.getTimestamp ("dtInputDate");

				//
				info.tsRateValidate = rs.getTimestamp("dtRateValidate");
				//
				Timestamp tsTemp = DataFormat.getPreviousDate(info.tsValidate);
				if(info.lLoanPayNoticeID>0)
				{
					LoanPayNoticeDao lPayDao = new LoanPayNoticeDao();
					info.fInterestRate = lPayDao.getLatelyRate(info.lLoanPayNoticeID,tsTemp);
				}
				else
				{
					RateInfo rinfo = new RateInfo();
					rinfo = dao.getLatelyRate((long)-1,info.lContractID,tsTemp);
					info.fInterestRate = rinfo.getLateRate();
				}
				//info.m_lCheckUserID = rs.getLong ("nCheckUserID");
				//info.m_strCheckUserName = findUserNameByID ((int) info.m_lCheckUserID);
				//info.m_tsCheck = rs.getTimestamp ("dtCheckDate");
				info.lNextCheckLevel = rs.getLong ("nNextCheckLevel");
				info.dAdjustRate = rs.getDouble ("MADJUSTRATE");
				info.dStaidAdjustRate = rs.getDouble ("MSTAIDADJUSTRATE");

			}
			rs.close ();
			rs = null;
			ps.close ();
			ps = null;

			con.close();
			con = null;
		}
		catch(Exception e) {
			e.printStackTrace ();
			throw new RemoteException (e.getMessage ());
		}

		finally {
			try {
				if (rs != null) rs.close ();rs = null;
				if (ps != null) ps.close ();ps = null;
				if (con != null) con.close ();con = null;
			}
			catch(Exception ex) {
				throw new RemoteException (ex.getMessage ());
			}
		}

		return info;

    }

    
    /**
     * findUpdateInterestRateByID  查找利率修改条件信息
     * 根据条件查找利率修改条件信息
     * 操作 ContractRateSetting 数据表
     * 查询相应记录
     *
     * @param long           lID              利率修改条件标示
     * @return AdjustInterestConditionInfo
     * @throws RemoteException
     */
    public AdjustInterestConditionInfo findAdjustInterestRateByID (long lID) throws java.rmi.RemoteException
    {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		int nBillCount = 0;
		AdjustInterestConditionInfo info = new AdjustInterestConditionInfo ();

		try{
			con = Database.getConnection ();
			ContractDao dao = new ContractDao();
			/*strSQL  = " select a.*, ";
			strSQL += " b.ID as nContractID, b.sContractCode, c.mExamineAmount, c.fInterestRate, c.dtStartDate, c.dtEndDate, d.sName, e.sInterestRateNo ";
			strSQL += " from ContractRateSetting a, ContractInfo b, LoanInfo c, Client d, InterestRateTypeInfo e, InterestRateHistory f ";
			strSQL += " where a.nContractID=b.ID(+) and b.nLoanID=c.ID(+) and c.nBorrowClientID=d.ID(+) and a.nBankLoanInterestRateID=f.ID(+) ";
			strSQL += " and f.nBankLoanInterestRateID=e.ID and a.ID=? and e.nCurrencyID=? and f.nCurrencyID=? ";*/

			strSQL  = " select a.*, ";
			strSQL += " b.ID as nContractID, b.sContractCode, c.mExamineAmount, f.mrate as mRateNow,g.mrate as mRateBefore, c.dtStartDate, c.dtEndDate, d.sName, e.sInterestRateNo ,g.dtValidate as dtRateValidate ";
			strSQL += " from loan_rateadjustpaycondition a, loan_ContractForm b, loan_loanForm c, Client d, loan_InterestRateTypeInfo e, loan_InterestRate f ,loan_InterestRate g ";
			strSQL += " where a.nContractID=b.ID(+) and b.nLoanID=c.ID(+) and c.nBorrowClientID=d.ID(+) and a.nBankInterestID=f.ID(+) ";
			strSQL += " and f.nBankInterestTypeID=e.ID and a.ID=?";
			strSQL += " and b.nBankInterestID=g.ID(+) ";
			ps = con.prepareStatement (strSQL);
			ps.setLong (1, lID);
			//ps.setLong (2, Constant.CurrencyType.RMB);
			//ps.setLong (3, Constant.CurrencyType.RMB);
			//System.out.println (strSQL);
			rs = ps.executeQuery ();
			if (rs.next ()) {

				info.lID = lID;
				info.lLoanPayNoticeID = rs.getLong ("nLoanPayNoticeID");
				info.lContractID = rs.getLong ("nContractID");
				info.strContractNo = rs.getString ("sContractCode");
				info.strClientName = rs.getString ("sName");
				info.mExamineAmount = rs.getDouble ("mExamineAmount");
				//info.fInterestRate = rs.getFloat ("mRateBefore");
				info.tsStartDate = rs.getTimestamp ("dtStartDate");
				info.tsEndDate = rs.getTimestamp ("dtEndDate");

				info.lBankLoanInterestRateID = rs.getLong ("nBankInterestID");
				info.strBankLoanInterestRateNo = rs.getString ("sInterestRateNo");
				info.fRate = rs.getFloat ("mRateNow");
				info.tsValidate = rs.getTimestamp ("dtValiDate");
				info.strReason = rs.getString ("sReason");
				info.lStatusID = rs.getLong ("nStatusID");

				info.lInputUserID = rs.getLong ("nInputUserID");
				info.strInputUserName = findUserNameByID ((int) info.lInputUserID);
				info.tsInputDate = rs.getTimestamp ("dtInputDate");

				//
				info.tsRateValidate = rs.getTimestamp("dtRateValidate");
				//
				Timestamp tsTemp = DataFormat.getPreviousDate(info.tsValidate);
				if(info.lLoanPayNoticeID>0)
				{
					LoanPayNoticeDao lPayDao = new LoanPayNoticeDao();
					info.fInterestRate = lPayDao.getLatelyRate(info.lLoanPayNoticeID,tsTemp);
				}
				else
				{
					RateInfo rinfo = new RateInfo();
					rinfo = dao.getLatelyRate((long)-1,info.lContractID,tsTemp);
					info.fInterestRate = rinfo.getLateRate();
				}
				//info.m_lCheckUserID = rs.getLong ("nCheckUserID");
				//info.m_strCheckUserName = findUserNameByID ((int) info.m_lCheckUserID);
				//info.m_tsCheck = rs.getTimestamp ("dtCheckDate");
				info.lNextCheckLevel = rs.getLong ("nNextCheckLevel");
				info.dAdjustRate = rs.getDouble ("MADJUSTRATE");
				info.dStaidAdjustRate = rs.getDouble ("MSTAIDADJUSTRATE");

			}
			rs.close ();
			rs = null;
			ps.close ();
			ps = null;

			con.close();
			con = null;
		}
		catch(Exception e) {
			e.printStackTrace ();
			throw new RemoteException (e.getMessage ());
		}

		finally {
			try {
				if (rs != null) rs.close ();rs = null;
				if (ps != null) ps.close ();ps = null;
				if (con != null) con.close ();con = null;
			}
			catch(Exception ex) {
				throw new RemoteException (ex.getMessage ());
			}
		}

		return info;

    }


    /**
     * findUpdateInterestByMultiOption  查找应复核的利率修改
     * 根据条件查找应该复核的利率修改
     * 操作 Contract RateSetting 数据表
     * 查询相应记录
     *
     * @param long           lActionID             操作标示1：修改查询；2：复核查询
     * @param Timestamp      tsStartDate           利率修改开始日
     * @param Timestamp      tsEndDate             利率修改结束日
     * @param long           lStatusID             利率修改状态
     * @param long           lCurrencyID           币种
     * @param long           lOfficeID             办事处ID
     * @param long           lUserID               操作人ID
     * @param long           lPageLineCount        每页页行数条件
     * @param long           lPageNo               第几页条件
     * @param long           lOrderParam           排序条件，根据此参数决定结果集排序条件
     * @param long           lDesc                 升序或降序
     * @return Collection  结果集
     * @throws RemoteException
     */
    public Collection findAdjustInterestByMultiOption (
      long lActionID,
      Timestamp tsStartDate,
      Timestamp tsEndDate,
      long lStatusID,
      long lCurrencyID,
      long lOfficeID,
      long lUserID,
      long lPageLineCount,
      long lPageNo,
      long lOrderParam,
      long lDesc
    )throws java.rmi.RemoteException
{

	PreparedStatement ps = null;
	ResultSet rs = null;
	PreparedStatement ps1 = null;
	ResultSet rs1 = null;
	Connection con = null;
	String strSelect = null;
	String strSQL = null;
	String strOrder = null;
	
	long[] a_SubLoanType = null;
	String nextUserAndTypeSql = " ( ";

	//得到他的类型参数，为后面的审批查询服务
	long lModule = Constant.ModuleType.LOAN;
	long lLoanType = Constant.ApprovalLoanType.OTHER;
	long lAction = Constant.ApprovalAction.INTEREST_ADJUST;

	Vector v= new Vector ();
	long lRecordCount = -1;
	long lPageCount = -1;
	long lRowNumStart = -1;
	long lRowNumEnd = -1;


	try {

		con = Database.getConnection ();
		ContractDao dao = new ContractDao();
		LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();

		//计算记录总数
		strSelect = " select count(*) " ;
		strSQL  = " from loan_rateadjustpaycondition aa, loan_ContractForm bb, loan_LoanForm cc, Client dd, loan_InterestRateTypeInfo ee, loan_InterestRate ff , loan_InterestRate gg ";
		//10.19加balance的查询
		//strSQL += " ,(select nvl(sum(bbb.MBALANCE),0) BALANCE,aaa.nContractID  from LOAN_PAYFORM aaa,SETT_SUBACCOUNT bbb" + " where  bbb.AL_NLOANNOTEID = aaa.ID(+) group by aaa.nContractID ) hh " + "";
		//10.16改！strSQL += " where aa.nContractID=bb.ID(+) and bb.nLoanID=cc.ID(+) and cc.nBorrowClientID=dd.ID(+) and aa.nBankInterestID=ff.ID(+) and ff.nBankInterestTypeID=ee.ID and bb.nBankInterestID=gg.ID(+)";
		strSQL += " where aa.nContractID=bb.ID and bb.nLoanID=cc.ID(+) and cc.nBorrowClientID=dd.ID(+) and aa.nBankInterestID=ff.ID(+) and ff.nBankInterestTypeID=ee.ID and bb.nBankInterestID=gg.ID(+)";
		//strSQL += " and hh.nContractID(+)=bb.ID ";
		//////////////////////查询条件////////////////////////////////////////////////////
		if (lOfficeID != -1) {
			strSQL = strSQL + " and aa.nOfficeID = " + lOfficeID;
		}
		if (lCurrencyID != -1) {
			strSQL = strSQL + " and aa.nCurrencyID = " + lCurrencyID;
			//strSQL = strSQL + " and ff.nCurrencyID = " + lCurrencyID;
		}
		if (tsStartDate != null) {
			strSQL = strSQL + " and to_char(aa.dtInputDate,'yyyy-mm-dd') >= '" + DataFormat.getDateString (tsStartDate) + "'";
		}
		if (tsEndDate != null) {
			strSQL = strSQL + " and to_char(aa.dtInputDate,'yyyy-mm-dd') <= '" + DataFormat.getDateString (tsEndDate) + "'";
		}
		//修改查询
		if (lActionID == 1)
		{
			if (lUserID != -1 && lStatusID == LOANConstant.InterestRateSettingStatus.SUBMIT) {
				//strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.NNEXTCHECKUSERID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.SUBMIT;
			    //strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.nNextCheckLevel = 1 and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.SUBMIT;
			    strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.SUBMIT;
			}
			if (lUserID != -1 && lStatusID == LOANConstant.InterestRateSettingStatus.CHECK) {
				//strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.CHECK;
				strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.CHECK;
			}
			if (lUserID != -1 && lStatusID == -1) {
				//strSQL = strSQL + " and (( aa.nInputUserID = " + lUserID + " and aa.NNEXTCHECKUSERID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.SUBMIT + " ) or ( aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.CHECK + " )) ";
			    //strSQL = strSQL + " and (( aa.nInputUserID = " + lUserID + " and aa.nNextCheckLevel = 1 and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.SUBMIT + " ) or ( aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.CHECK + " )) ";
			    strSQL = strSQL + " and (( aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.SUBMIT + " ) or ( aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.InterestRateSettingStatus.CHECK + " )) ";
			}
		}
		//审核查询
		else if (lActionID == 2)
		{
			ApprovalDelegation appBiz = new ApprovalDelegation();
			//获得真正来审批这个记录的人（真实或传给的虚拟的人！）
			//获取所有子类型
			a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(lOfficeID,lCurrencyID,loanTypeDao.getAllSetLoanTypeID(lOfficeID,lCurrencyID));
			if(a_SubLoanType!=null && a_SubLoanType.length>0)
			{
				for(int i=0 ; i<a_SubLoanType.length ; i++)
				{
					nextUserAndTypeSql = nextUserAndTypeSql
								+ " (aa.NNEXTCHECKUSERID in "+appBiz.findTheVeryUser(Constant.ModuleType.LOAN, a_SubLoanType[i], lAction,lOfficeID,lCurrencyID, lUserID)
								+ " and bb.NSUBTYPEID = "+a_SubLoanType[i]+ ")";
					if(i < a_SubLoanType.length-1)
						nextUserAndTypeSql += " or ";
					else
						nextUserAndTypeSql += " ) ";
				}	
			}
			else
			{
				return null;
			}
			//String strUser = appBiz.findTheVeryUser(lModule,lLoanType,lAction,lOfficeID,lCurrencyID,lUserID);
			//lUserID = appBiz.findTheVeryUser(lModule,lLoanType,lAction,lUserID);
			if (lUserID >= 0 && lStatusID == LOANConstant.InterestRateSettingStatus.SUBMIT)
				strSQL += " and aa.NSTATUSID = " + LOANConstant.InterestRateSettingStatus.SUBMIT + " and  " + nextUserAndTypeSql;
			if (lUserID >= 0 && lStatusID == LOANConstant.InterestRateSettingStatus.CHECK)
				strSQL += " and aa.NSTATUSID = " + LOANConstant.InterestRateSettingStatus.CHECK;
			if (lUserID >= 0 && (lStatusID <= 0 || lStatusID > 3))
				strSQL += " and ((aa.NSTATUSID = "
					+ LOANConstant.InterestRateSettingStatus.SUBMIT
					+ " and  "
					+ nextUserAndTypeSql
					+ ") or aa.NSTATUSID = "
					+ LOANConstant.InterestRateSettingStatus.CHECK
					+ ")";


			if (lStatusID > 0)
			{
				strSQL += " and aa.nStatusID = " + lStatusID ;
			}
			else
			{
				strSQL += " and aa.nStatusID in ( " + LOANConstant.InterestRateSettingStatus.CHECK + "," + LOANConstant.InterestRateSettingStatus.SUBMIT+ ")";
			}

		}

		System.out.println (strSelect + strSQL);
		ps=con.prepareStatement (strSelect + strSQL);
		rs = ps.executeQuery ();

		if (rs!=null && rs.next ()) {
			lRecordCount = rs.getLong (1);
		}

		rs.close ();
		rs = null;
		ps.close ();
		ps = null;

		lPageCount = lRecordCount / lPageLineCount;

		if ((lRecordCount % lPageLineCount) != 0) {
			lPageCount ++;
		}
		////////////////////////////排序处理//////////////////////////////////////////////////////////////////////
		switch ((int) lOrderParam) {
			case 1 :
				strSQL += " order by bb.sContractCode ";
				break;
			case 2 :
				strSQL += " order by dd.sName ";
				break;
			case 3 :
				strSQL += " order by ee.sInterestRateNo ";
				break;
			case 4 :
				strSQL += " order by bb.NINTERVALNUM ";
				break;
			case 5 :
				strSQL += " order by aa.mRate ";
				break;
			case 6 :
				strSQL += " order by aa.dtValiDate ";
				break;
			case 7 :
				strSQL += " order by aa.dtInputDate ";
				break;
			case 8 :
				strSQL += " order by aa.nStatusID ";
				break;
			case 9 :
				strSQL += " order by ff.mRate*(1+nvl(bb.madjustrate,0)/100) ";
				break;
			default:
				strSQL += " order by aa.dtInputDate ";
		}

		if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
			strSQL += " desc";
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//返回需求的结果集
		lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
		lRowNumEnd = lRowNumStart + lPageLineCount - 1;

		strSQL = " select aa.*,bb.sContractCode,dd.sName,ee.sInterestRateNo,ee.sInterestRateName,gg.mRate as mRateBefore ,ff.mRate*(1+nvl(aa.MADJUSTRATE,0)/100)+nvl(aa.MSTAIDADJUSTRATE,0) as mRateNow,bb.NINTERVALNUM " + strSQL;
		strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
		strSQL = " select * from ( " + strSQL + " ) b  where b.r between " + lRowNumStart + " and " + lRowNumEnd;
		ps = con.prepareStatement (strSQL);
		rs = ps.executeQuery ();

		while (rs!=null && rs.next ()) {
			AdjustInterestConditionInfo info = new AdjustInterestConditionInfo ();

			info.lID = rs.getLong ("ID");
			info.lContractID = rs.getLong ("nContractID");
			info.strContractNo = rs.getString ("sContractCode");
			info.lLoanPayNoticeID = rs.getLong ("nLoanPayNoticeID");

			info.strClientName = rs.getString ("sName");
			//info.mExamineAmount = rs.getDouble ("mExamineAmount");
			//info.fRate = rs.getFloat ("mRate");
			info.fRate = rs.getDouble ("mRateNow");
			//info.fInterestRate = rs.getFloat ("mRateBefore");
			//info.tsStartDate = rs.getTimestamp ("dtStartDate");
			//info.tsEndDate = rs.getTimestamp ("dtEndDate");

			info.strBankLoanInterestRateNo = rs.getString ("sInterestRateNo");
			info.strBankLoanInterestRateName = rs.getString ("sInterestRateName");
			//info.fRate = rs.getFloat ("dRate");
			info.tsValidate = rs.getTimestamp ("dtValiDate");
			Timestamp tsTemp = DataFormat.getPreviousDate(info.tsValidate);
			RateInfo rinfo = new RateInfo();
			rinfo = dao.getLatelyRate((long)-1,info.lContractID,tsTemp);
			if(info.lLoanPayNoticeID>0)
			{
				LoanPayNoticeDao payDao = new LoanPayNoticeDao();
				info.fInterestRate = payDao.getLatelyRate(info.lLoanPayNoticeID,tsTemp);
			}
			else
			{
				info.fInterestRate = rinfo.getLateRate();  //执行利率
			}			
			System.out.println("herecontratID="+info.lContractID);
			System.out.println("tstemp="+tsTemp);
			//info.strReason = rs.getString ("sReason");
			info.lStatusID = rs.getLong ("nStatusID");
			info.tsInputDate = rs.getTimestamp ("dtInputDate");
			info.lIntervalNum = rs.getLong("NINTERVALNUM");
			info.lNextCheckLevel = rs.getLong("nNextCheckLevel");

			info.lCount = lRecordCount;
			v.add (info);
		}
		rs.close ();
		rs = null;
		ps.close ();
		ps = null;
		con.close();
		con = null;

	}
	catch (Exception e) {
		//System.out.println(e.toString ());
		e.printStackTrace ();
		throw new RemoteException (e.getMessage ());
	}
	finally {
		try {
			if (rs != null)
				rs.close ();
				rs = null;
			if (ps != null)
				ps.close ();
				ps = null;
			if (rs1 != null)
				rs1.close ();
				rs1 = null;
			if (ps1 != null)
				ps1.close ();
				ps1 = null;
			if (con != null)
				con.close ();
				con = null;
		}
		catch (Exception ex) {
			throw new RemoteException (ex.getMessage ());
		}
	}
	return (v.size () > 0 ? v : null);
}



    /**
     * cancelUpdateInterestRate  取消普通贷款银行利率修改
     * 取消普通贷款银行利率修改
     * 操作 AdjustedContract 数据表
     * 更新相应记录
     * 应首先检查审核状态
	 * @param     long        lModuleIDID           模块
	 * @param     long        lLoanTypeID           类型
	 * @param     long        lActionID             操作
     * @param lAdjustConditionID : ContractRateSetting.ID
     * @return long  成功返回ID标识，失败返回0
     * @throws RemoteException
     * @throws IRollbackException 
     */
	public long cancelAdjustInterestRate (long lAdjustConditionID,long lCurrencyID,long lOfficeID) throws java.rmi.RemoteException, IRollbackException
    {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;

		//定义相应操作常量
		//贷款
		long lModuleID = Constant.ModuleType.LOAN;
		//模块类型
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		long lActionID = Constant.ApprovalAction.INTEREST_ADJUST;


		long lApprovalID = -1;
		long lContractID = -1;
		long lLoanPayNoticeID = -1;
		ApprovalDelegation appbiz = new ApprovalDelegation();
		 // add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCEL);
		AdjustInterestConditionInfo adInfo = this.findAdjustInterestRateByID(lAdjustConditionID);
		logInfo.setTransCode(adInfo.strContractNo);
		logInfo.setBusinessType("贷款合同执行利率调整");
        // add by jbpan 20120607 end
		try
		{
			//获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
			//连结数据库
			con = Database.getConnection();
			//先删除以前的审核记录（物理删除）
			try
			{
				appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID, lAdjustConditionID, 1);
			}
			catch(Exception e)
			{
				e.printStackTrace ();
				System.out.println("here="+e.getMessage());
				throw e;
			}

			//将loan_rateadjustpaycondition的装态置为无效
			strSQL = " update loan_rateadjustpaycondition set nstatusID = ? "
				   + " where id =? ";
			//System.out.println("sql="+strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1,Constant.RecordStatus.INVALID);
			ps.setLong(2,lAdjustConditionID);
			ps.executeUpdate();
			ps.close();
			ps = null;
			//把删除已生效的记录放在取消审批中
			//2012-06-26
			//查出该loan_rateadjustpaycondition下的合同id和放款通知单id
		/*	strSQL = " select ncontractid,nloanpaynoticeid from loan_rateadjustpaycondition "
				   + " where id = ?";
			//System.out.println("sql="+strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1,lAdjustConditionID);
			rs = ps.executeQuery ();

			if (rs!=null && rs.next ()) {
				lContractID = rs.getLong ("nContractID");
				lLoanPayNoticeID = rs.getLong ("nLoanPayNoticeID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			if (lContractID > 0)//删除
			{
				logInfo.setTransCode(NameRef.getContractNoByID(lContractID));
				strSQL = " delete from loan_rateadjustcontractdetail where ncontractid = ? and nadjustconditionid = ? ";
				//System.out.println("sql="+strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1,lContractID);
				ps.setLong(2,lAdjustConditionID);
				ps.execute();
				ps.close();
				ps = null;
			}
			if (lLoanPayNoticeID > 0)
			{
				strSQL = " delete from loan_rateadjustpaydetail where nLoanpayNoticeID = ? and nadjustconditionid = ? ";
				//System.out.println("sql="+strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1,lLoanPayNoticeID);
				ps.setLong(2,lAdjustConditionID);
				ps.execute();
				ps.close();
				ps = null;
			}
			else//删除该合同下所有放款通知单的相关数据
			{
				strSQL = " delete from loan_rateadjustpaydetail where nLoanpayNoticeID in ( "
					   + " select id from loan_payform where ncontractid = ? ) "
					   + " and nadjustconditionid = ? ";
				//System.out.println("sql="+strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1,lContractID);
				ps.setLong(2,lAdjustConditionID);
				ps.execute();
				ps.close();
				ps = null;
			}*/
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch(Exception e) {
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
			logInfo.setFailReason(e.getMessage());
			e.printStackTrace ();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException (e.getMessage ());
			throw new IRollbackException(context, e.getMessage(), e);
		}

		finally {
			LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
			try {
				if (rs != null) rs.close ();rs = null;
				if (ps != null) ps.close ();ps = null;
				if (con != null) con.close ();con = null;
			}
			catch(Exception ex) {
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException (ex.getMessage ());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}


        return -1;
    }

	//通过人员标示查询人员名称
	private String findUserNameByID (int nUserID) throws RemoteException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		String strUserName = null;

		try{
			if (nUserID == -1)
				return null;

			con = Database.getConnection ();
			//查询
			strSQL = "select sName from UserInfo where ID=? ";
			//System.out.println (strSQL);
			ps = con.prepareStatement (strSQL);
			ps.setLong (1, nUserID);
			rs = ps.executeQuery ();
			if (rs != null && rs.next ()) {
				strUserName = rs.getString ("sName");		//人员名称
			}

			rs.close ();
			rs = null;
			ps.close ();
			ps = null;
			con.close();
			con = null;

		}
		catch(Exception e) {
			e.printStackTrace ();
			throw new RemoteException (e.getMessage ());
		}

		finally {
			try {
				if (rs != null) rs.close ();rs = null;
				if (ps != null) ps.close ();ps = null;
				if (con != null) con.close ();con = null;
			}
			catch(Exception ex) {
				throw new RemoteException (ex.getMessage ());
			}
		}

		return strUserName;
	}

	//lModuleID,lLoanTypeID,lActionID确定lApprovalID
	private long getApprovalID (long lModuleID,long lLoanTypeID,long lActionID) throws RemoteException,Exception {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		long lApprovalID = -1;

		try{
			con = Database.getConnection ();
			//查询
			strSQL = "select id from loan_approvalsetting where nModuleID=? "
			       + "and nLoanTypeID=? and nActionID=? ";
			//System.out.println (strSQL);
			ps = con.prepareStatement (strSQL);
			ps.setLong (1, lModuleID);
			ps.setLong (2,lLoanTypeID);
			ps.setLong (3,lActionID);
			rs = ps.executeQuery ();
			if (rs != null && rs.next ()) {
				lApprovalID= rs.getLong ("id");
			}

			rs.close ();
			rs = null;
			ps.close ();
			ps = null;
			con.close();
			con = null;

		}
		catch(Exception e) {
			e.printStackTrace ();
			throw e;
		}

		finally {
			try {
				if (rs != null) rs.close ();rs = null;
				if (ps != null) ps.close ();ps = null;
				if (con != null) con.close ();con = null;
			}
			catch(Exception ex) {
				throw ex;
			}
		}

		return lApprovalID;
	}


	private String getUserPriv(long lUserID) throws RemoteException
	{
		StringBuffer sb = new StringBuffer();
		String strResult = "";

		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try
		{
			con = Database.getConnection();
			// get the whole content
			sb.append(" SELECT sPrivLevel FROM userinfo Where ID = ?");
			ps = con.prepareStatement(sb.toString());
			ps.setLong(1, lUserID);
			rs = ps.executeQuery();
			if( rs.next() )
				strResult = rs.getString(1);
			else
				strResult = "";
			if(rs!=null)
			{
				rs.close();
				rs = null;
			}
			if(ps!=null)
			{
				ps.close();
				ps = null;
			}
			sb.setLength(0);
		}
		catch(Exception e)
		{
			strResult = "";
			// System.out.println(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if( rs != null )
				{
					rs.close();
					rs = null;
				}
				if( ps != null )
				{
					ps.close();
					ps = null;
				}
				if( con != null )
				{
					con.close();
					con = null;
				}
			}
			catch(Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}

		}
		return strResult;

	}

	/**
	 * 新增审批意见
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol><b>新增审批意见</b>
	 * <ul>
	 * <li>操作数据库表loan_approvalTracing,loan_rateadjustpaycondition
	 * <li>如果审批决定是拒绝，修改带审批的主体状态
	 * </ul>
	 * </ol>
	 * @Copyright (c) Jan. 2003, by iSoftStone Inc. All Rights Reserved
	 * @param     long        lReviewContentID      审批内容类型
	 * @param     String      sOpinion              审批意见
	 * @param     long        lUserID               审批人标示
	 * @param     long        lNextUserID           下一个审批人标示
	 * @param     long        action                审批，拒绝，修改，最后审批
	 * @return    long        成功，返回值 == 1，失败，返回值 == -1
	 * @throws IRollbackException 
	 * @exception Exception
	 **/
	public long checkAdjustInterestRate(
		long lApprovalContentID,
		String sOpinion,
		long lUserID,
		long lNextUserID,
		long lAction,
		long lCurrencyID,
		long lOfficeID)
		throws RemoteException, IRollbackException
	{
		System.out.println("here");
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;

		//定义相应操作常量
		//贷款
		long lModuleID = Constant.ModuleType.LOAN;

		long lBankInterestID = -1;
		double dAdjustRate = -100;
		double dStaidAdjustRate = -100;
		double mRate = -100;
		Timestamp dtValiDate = null;
		long lLoanPayNoticeID = -1;
		//long lOBStatusID = 0;
		String strSQL = "";		
		long lLevel = -1;

		//模块类型
		//贷款类型，从利率调整id获取利率调整合同的子类型
		long lContractID = Long.parseLong(LOANNameRef.getNameByID("NCONTRACTID","LOAN_RATEADJUSTPAYCONDITION","id",String.valueOf(lApprovalContentID),null));
		long lLoanTypeID = Long.parseLong(LOANNameRef.getSubTypeByContractID(lContractID));
		long lActionID = Constant.ApprovalAction.INTEREST_ADJUST;

		long lMaxID = -1;
		long lSerialID = -1;
		long lStatusID = -1;
		long lResultID = -1;
		long lDeleteID = -1;
		long lApprovalID = -1;

		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();

		try
		{
			//获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
			//下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			//审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);
			//////////////////////
			System.out.println("here");
			conn = Database.getConnection();
			//从loan_rateadjustpaycondition表获得lBankInterestID,dtvalidate,nContractID,nLoanPayNoticeID
			strSQL = " select * from loan_rateadjustpaycondition where id = ? ";
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1,lApprovalContentID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lBankInterestID = rs.getLong("nBankInterestID");
				dtValiDate = rs.getTimestamp("dtvalidate");
				lContractID = rs.getLong("nContractID");
				lLoanPayNoticeID = rs.getLong("nLoanPayNoticeID");
				dAdjustRate = rs.getDouble("MADJUSTRATE");
				dStaidAdjustRate = rs.getDouble("MSTAIDADJUSTRATE");
				//modify by xwhe 2008-06-13 
				mRate = rs.getDouble("mRate");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;


			//获得ID
			/*strSQL = "select nvl(max(ID)+1,1) from loan_approvalTracing";
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lMaxID = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			//获得nSerialID
			strSQL = "select nvl(max(nSerialID)+1,1) from loan_approvalTracing where nApprovalID=? and nApprovalContentID=? ";
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lApprovalID);
			ps.setLong(2, lApprovalContentID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lSerialID = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;*/
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			strSQL = "";
			System.out.println("laction="+lAction);
			if (lAction == 1) //拒绝
			{
		        //逻辑删除
				appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID,lApprovalContentID,2);

				lStatusID = Constant.RecordStatus.INVALID;
				lResultID = Constant.ApprovalDecision.REFUSE;
				strSQL = "update loan_rateadjustpaycondition  set nStatusID=" + LOANConstant.InterestRateSettingStatus.REFUSE + " where ID=" + lApprovalContentID;
				//lOBStatusID = OBNotes.CODE_OBLOAN_INSTR_STATUS_REFUSE;

			}
			if (lAction == 2) //审批
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
				{
				    strSQL = "update loan_rateadjustpaycondition set nnextcheckuserid=" + lNextUserID + ", nNextCheckLevel=" + lLevel + " where ID=" + lApprovalContentID;
				    Log.print("更新下一个审核级别（可越级）：" + lLevel);
				}
				else
				{
				    strSQL = "update loan_rateadjustpaycondition set nnextcheckuserid=" + lNextUserID + ", nNextCheckLevel=nNextCheckLevel+1 where ID=" + lApprovalContentID;
				    Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
			}

			if (lAction == 3) //审批&&最后
			{
				lStatusID = Constant.RecordStatus.VALID;
				//状态结果置为已完成
				lResultID = Constant.ApprovalDecision.FINISH;
				strSQL =
					"update loan_rateadjustpaycondition set nnextcheckuserid="
						+ lNextUserID
						+ ", nStatusID="
						+ LOANConstant.InterestRateSettingStatus.CHECK
						+ " where ID="
						+ lApprovalContentID;

				//审批完成后需要做的操作
				System.out.println("11111111111="+lContractID+" "+lLoanPayNoticeID+" "+lBankInterestID+" "+lApprovalContentID+" "+dtValiDate);
				insertValues(lContractID,lLoanPayNoticeID,lBankInterestID,dAdjustRate,dStaidAdjustRate,lApprovalContentID,dtValiDate,mRate);
				System.out.println("11111111111=");
			}
			if (lAction == 4) //修改
			{
				lStatusID = Constant.RecordStatus.VALID;
				//装态也置为已提交
				lResultID = Constant.ApprovalDecision.RETURN;
				strSQL =
					"update loan_rateadjustpaycondition set nnextcheckuserid=ninputuserid, nStatusID=" + LOANConstant.InterestRateSettingStatus.SUBMIT + ", nNextCheckLevel=1 where ID=" + lApprovalContentID;
			}

			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.executeUpdate();
			ps.close();
			ps = null;



			////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//if (lAction != 1)//拒绝     //10.31改，也就是拒绝也要写一条记录
			{
				/*strSQL="insert into loan_approvaltracing (ID, NApprovalID, NApprovalCONTENTID, NSERIALID, NUSERID, NNEXTUSERID, SOPINION, DTDATE, NRESULTID, NSTATUSID) values (?,?,?,?,?,?,?,sysdate,?,?)";
				System.out.println(strSQL);
				ps = conn.prepareStatement (strSQL);
				ps.setLong (1,lMaxID);
				ps.setLong (2,lApprovalID);
				ps.setLong (3,lApprovalContentID);
				ps.setLong (4,lSerialID);
				ps.setLong (5,lUserID);
				ps.setLong (6,lNextUserID);
				ps.setString (7,sOpinion);
				ps.setLong (8,lResultID);
				ps.setLong (9,lStatusID);
				ps.executeUpdate ();
				ps.close ();
				ps = null;*/
		                /*if(lAction==3)
				{
					info.setIsFinish(Constant.YesOrNo.YES);
				}
				else
				{
					info.setIsFinish(Constant.YesOrNo.NO);
				}*/
				info.setModuleID(lModuleID);
				info.setLoanTypeID(lLoanTypeID);
				info.setActionID(lActionID);
				info.setApprovalContentID(lApprovalContentID);
				//info.setSerialID(lSerialID);
				info.setUserID(lUserID);
				info.setNextUserID(lNextUserID);
				info.setOpinion(sOpinion);
				info.setResultID(lResultID);
				info.setStatusID(lStatusID);
				info.setOfficeID(lOfficeID);
				info.setCurrencyID(lCurrencyID);
				System.out.println("before_____________________________________");
				appbiz.saveApprovalTracing(info);
				System.out.println("AFTER_____________________________________");
			}
			if (conn != null)
				conn.close();
				conn = null;
			//////////////////////
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
					rs = null;
				if (ps != null)
					ps.close();
					ps = null;

				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return 1;

	}

	//审批完成后需要做的操作
	private void insertValues(long lContractID, 
			                  long lLoanPayNoticeID,
							  long lBankInterestID,
							  double dAdjustRate,
							  double dStaidAdjustRate,
							  long lApprovalContentID, 
							  Timestamp dtValiDate,
							  double mRate)
	                          throws Exception
	{
		PreparedStatement ps = null;
		PreparedStatement ps1 = null;
		PreparedStatement ps2 = null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		Connection conn = null;
		long lMaxID = -1;
		long lSerialID = -1;
		long lStatusID = -1;
		long lResultID = -1;
		long lDeleteID = -1;
		LoanPayNoticeDao paydao = null;
		//long lOBStatusID = 0;
		String strSQL = "";
		try
		{
			//////////////////////
			conn = Database.getConnection();
			//往loan_rateadjustcontractdetail加入一条数据
			//如下操作是判断在loan_rateadjustcontractdetail表中是否有生效日期大于等于tsValide的日期，如果有，则将该记录删除

			//modified by mzh_fu 2007/07/19 增加条件 status != Constant.RecordStatus.INVALID
			strSQL =
			"select id from loan_rateadjustcontractdetail where status != "+Constant.RecordStatus.INVALID+" and nContractID=" +
			lContractID + " and nBankInterestID=" + lBankInterestID +
			" and MADJUSTRATE=" + dAdjustRate + " and MSTAIDADJUSTRATE=" + dStaidAdjustRate +
			" and to_char(dtStartDate,'yyyy-mm-dd') >= to_char(?,'yyyy-mm-dd') ";
		
			ps = conn.prepareStatement(strSQL);
			ps.setTimestamp(1, dtValiDate);
			rs = ps.executeQuery();
			
			while (rs != null && rs.next())
			{
				lDeleteID = rs.getLong("id");
				
				if (lDeleteID > 0)
				{
					//modified by mzh_fu 2007/07/19
					//strSQL = "delete loan_rateadjustcontractdetail where id=? ";
					strSQL = " update loan_rateadjustcontractdetail set status = "+Constant.RecordStatus.INVALID +" where id=? ";
					
					ps2 = conn.prepareStatement(strSQL);
					ps2.setLong(1, lDeleteID);
					ps2.executeUpdate();
					ps2.close();
					ps2 = null;
				}
			}
			
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			//判断是否有生效日和欲新增记录在同一天的但是利率不一样的记录，有则删除,这样在同一天同一个合同就只可能有一个利率
			lDeleteID = -1;
			strSQL =
			"select id from loan_rateadjustcontractdetail where nContractID=" +
			lContractID +
			" and to_char(dtStartDate,'yyyy-mm-dd') >= to_char(?,'yyyy-mm-dd') ";
		
			//modified by mzh_fu 2007/07/19 增加条件 status != Constant.RecordStatus.INVALID
			strSQL = strSQL + " and status != "+Constant.RecordStatus.INVALID;
			
			ps = conn.prepareStatement(strSQL);
			ps.setTimestamp(1, dtValiDate);
			rs = ps.executeQuery();
			while (rs != null && rs.next())
			{
				lDeleteID = rs.getLong("id");
				
				if (lDeleteID > 0)
				{
					//modified by mzh_fu 2007/07/19
					//strSQL = "delete loan_rateadjustcontractdetail where id=? ";
					strSQL = "update loan_rateadjustcontractdetail set status = " + Constant.RecordStatus.INVALID + " where id=? ";
					
					ps2 = conn.prepareStatement(strSQL);
					ps2.setLong(1, lDeleteID);
					ps2.executeUpdate();
					ps2.close();
					ps2 = null;
				}
			}
			
			rs.close();
			rs = null;
			ps.close();
			ps = null;

	        //获得ID
			strSQL = "select nvl(max(ID)+1,1) from loan_rateadjustcontractdetail";
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lMaxID = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
	        //获得nSerialID
			strSQL = "select nvl(max(nAdjustSerial)+1,1) from loan_rateadjustcontractdetail where nAdjustConditionID=? ";
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lApprovalContentID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lSerialID = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			
			//modified by mzh_fu 2007/07/19 增加status
			strSQL = "insert into loan_rateadjustcontractdetail (ID, NAdjustConditionID, NContractID, NBankInterestID, NAdjustSerial, dtstartdate,MADJUSTRATE,MSTAIDADJUSTRATE,niscountinterest,status,mRate) values (?,?,?,?,?,?,?,?,?,"+Constant.RecordStatus.VALID+",?)";
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lMaxID);
			ps.setLong(2, lApprovalContentID);
			ps.setLong(3, lContractID);
			ps.setLong(4, lBankInterestID);
			ps.setLong(5, lSerialID);
			ps.setTimestamp(6, dtValiDate);
			ps.setDouble(7,dAdjustRate);
			ps.setDouble(8,dStaidAdjustRate);
			
	        //置为有效
			ps.setLong(9, 1);
			ps.setDouble(10, mRate);
			ps.executeUpdate();
			ps.close();
			ps = null;
	
	        ////////////////////////////////////////////////////////////////
	        //往loan_rateadjustpaydetail加入数据,如果是一个放款通知单，则加一条，如果是
	        //选择的所有的放款通知单，则该合同下有几条则要加几条
	
	        //1,如果是单条
			if (lLoanPayNoticeID > 0)
			{
				lDeleteID = -1;
				//如下操作是判断在loan_rateadjustpaydetail表中是否有生效日期大于等于tsValide的日期，如果有，则将该记录删除
				strSQL = "select id from loan_rateadjustpaydetail where nLoanPayNoticeID=? and nBankInterestID=? and MADJUSTRATE=? and	MSTAIDADJUSTRATE=? and to_char(DTStartDate,'yyyy-mm-dd') >= to_char(?,'yyyy-mm-dd') ";
		        
				//modified by mzh_fu 2007/07/19 增加条件 status != Constant.RecordStatus.INVALID
				strSQL = strSQL + " and status != "+Constant.RecordStatus.INVALID;
				
				ps = conn.prepareStatement(strSQL);
				
				ps.setLong(1, lLoanPayNoticeID);
				ps.setLong(2, lBankInterestID);
				ps.setDouble(3,dAdjustRate);
				ps.setDouble(4,dStaidAdjustRate);
				ps.setTimestamp(5, dtValiDate);
	
				rs = ps.executeQuery();
				while (rs != null && rs.next())
				{
					lDeleteID = rs.getLong("id");
					
					if (lDeleteID > 0)
					{
						//modified by mzh_fu 2007/07/19
						//strSQL = "delete loan_rateadjustpaydetail where id=? ";
						strSQL = " update loan_rateadjustpaydetail set status = " + Constant.RecordStatus.INVALID + " where id=? ";
						
						ps2 = conn.prepareStatement(strSQL);
						ps2.setLong(1, lDeleteID);
						ps2.executeUpdate();
						ps2.close();
						ps2 = null;
					}
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
	
				lDeleteID = -1;
				//判断是否有生效日和欲新增记录在同一天的但是利率不一样的记录，有则删除,这样在同一天同一个放款通知单就只可能有一个利率
				strSQL = " select id from loan_rateadjustpaydetail where nLoanPayNoticeID=?  and to_char(DTStartDate,'yyyy-mm-dd') >= to_char(?,'yyyy-mm-dd') ";
					
				//modified by mzh_fu 2007/07/19 增加条件 status != Constant.RecordStatus.INVALID
				strSQL = strSQL + " and status != "+Constant.RecordStatus.INVALID;
					
				ps = conn.prepareStatement(strSQL);
	
				ps.setLong(1, lLoanPayNoticeID);
				//ps.setLong(2, lBankInterestID);
				ps.setTimestamp(2, dtValiDate);
				
				rs = ps.executeQuery();
				while (rs != null && rs.next())
				{
					lDeleteID = rs.getLong("id");
					
					if (lDeleteID > 0)
					{
						//modified by mzh_fu 2007/07/19
						//strSQL = "delete loan_rateadjustpaydetail where id=? ";
						strSQL = " update loan_rateadjustpaydetail set status = " + Constant.RecordStatus.INVALID + " where id=? ";
						
						ps2 = conn.prepareStatement(strSQL);
						ps2.setLong(1, lDeleteID);
						ps2.executeUpdate();
						ps2.close();
						ps2 = null;
					}
				}
				
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				
				//获得ID
				strSQL = " select nvl(max(ID)+1,1) from loan_rateadjustpaydetail ";
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next())
				{
					lMaxID = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				//获得nSerialID
				strSQL = " select nvl(max(nAdjustSerial)+1,1) from loan_rateadjustpaydetail  where nAdjustConditionID=? ";
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lApprovalContentID);
				rs = ps.executeQuery();
				if (rs.next())
				{
					lSerialID = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				
				//modified by mzh_fu 2007/07/19 增加status
				strSQL = " insert into loan_rateadjustpaydetail  (ID, NAdjustConditionID, NLoanPayNoticeID, NBankInterestID, NAdjustSerial, dtstartdate,MADJUSTRATE,MSTAIDADJUSTRATE, niscountinterest,nContractID,status,mRate) values (?,?,?,?,?,?,?,?,?,?,"+Constant.RecordStatus.VALID+",?)";
				
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lMaxID);
				ps.setLong(2, lApprovalContentID);
				ps.setLong(3, lLoanPayNoticeID);
				ps.setLong(4, lBankInterestID);
				ps.setLong(5, lSerialID);
				ps.setTimestamp(6, dtValiDate);
				ps.setDouble(7,dAdjustRate);
				ps.setDouble(8,dStaidAdjustRate);
				//置为有效
				ps.setLong(9, 1);
				ps.setLong(10,lContractID);
				ps.setDouble(11, mRate);
				ps.executeUpdate();
				ps.close();
				ps = null;
				
				//Boxu Add 2008年12月18日 修改放款通知单利率调整日期
				paydao = new LoanPayNoticeDao();
				paydao.updateRateAdjustDate(lLoanPayNoticeID, 1);
			}
			else
			{
				//strSQL = " select id from loan_payform where ncontractid =" + lContractID;
				//Boxu Add 2008年10月20日 勾选包含全部放款单后，已结清的放款单也会被修改
				strSQL = " select a.id from loan_payform a ,sett_subaccount b " 
		              + " where a.id = b.AL_nLoanNoteID and b.nstatusid <> "+ SETTConstant.SubAccountStatus.FINISH +" "     
		              + " and a.ncontractid = "  + lContractID ;
				
				ps1 = conn.prepareStatement(strSQL);
				rs1 = ps1.executeQuery();
				while (rs1.next())
				{
					lDeleteID = -1;
					lLoanPayNoticeID = rs1.getLong("id");
					
					strSQL = "select id from loan_rateadjustpaydetail where nLoanPayNoticeID=? and nBankInterestID=? and MADJUSTRATE=? and	MSTAIDADJUSTRATE=? and to_char(DTStartDate,'yyyy-mm-dd') >= to_char(?,'yyyy-mm-dd') ";
					//modified by mzh_fu 2007/07/19 增加条件 status != Constant.RecordStatus.INVALID
					strSQL = strSQL + " and status != "+Constant.RecordStatus.INVALID;
					
					ps = conn.prepareStatement(strSQL);
	
					ps.setLong(1, lLoanPayNoticeID);
					ps.setLong(2, lBankInterestID);
					ps.setDouble(3,dAdjustRate);
					ps.setDouble(4,dStaidAdjustRate);
					ps.setTimestamp(5, dtValiDate);
	
					rs = ps.executeQuery();
					while (rs != null && rs.next())
					{
						lDeleteID = rs.getLong("id");
						
						if (lDeleteID > 0)
						{
							//modified by mzh_fu 2007/07/19
							//strSQL = "delete loan_rateadjustpaydetail where id=? ";
							strSQL = "update loan_rateadjustpaydetail set status = " + Constant.RecordStatus.INVALID + " where id=? ";
							
							ps2 = conn.prepareStatement(strSQL);
							ps2.setLong(1, lDeleteID);
							ps2.executeUpdate();
							ps2.close();
							ps2 = null;
						}
					}
					
					rs.close();
					rs = null;
					ps.close();
					ps = null;
	
					
					lDeleteID = -1;
					    
					strSQL = "select id from loan_rateadjustpaydetail where nLoanPayNoticeID=? and to_char(DTStartDate,'yyyy-mm-dd') >= to_char(?,'yyyy-mm-dd') ";
						
					//modified by mzh_fu 2007/07/19 增加条件 status != Constant.RecordStatus.INVALID
					strSQL = strSQL + " and status != "+Constant.RecordStatus.INVALID;
					
					ps = conn.prepareStatement(strSQL);
	
					ps.setLong(1, lLoanPayNoticeID);
					//ps.setLong(2, lBankInterestID);
					ps.setTimestamp(2, dtValiDate);
	
					rs = ps.executeQuery();
					while (rs != null && rs.next())
					{
						lDeleteID = rs.getLong("id");
						
						if (lDeleteID > 0)
						{
							//modified by mzh_fu 2007/07/19
							//strSQL = "delete loan_rateadjustpaydetail where id=? ";
							strSQL = " update loan_rateadjustpaydetail set status = " + Constant.RecordStatus.INVALID + " where id=? ";
							
							ps2 = conn.prepareStatement(strSQL);
							ps2.setLong(1, lDeleteID);
							ps2.executeUpdate();
							ps2.close();
							ps2 = null;
						}
					}
					
					rs.close();
					rs = null;
					ps.close();
					ps = null;
	
					//新增这条记录
					//获得ID
					strSQL = " select nvl(max(ID)+1,1) from loan_rateadjustpaydetail ";
					ps = conn.prepareStatement(strSQL);
					rs = ps.executeQuery();
					if (rs.next())
					{
						lMaxID = rs.getLong(1);
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					//获得nSerialID
					strSQL = " select nvl(max(nAdjustSerial)+1,1) from loan_rateadjustpaydetail  where nAdjustConditionID=? ";
					ps = conn.prepareStatement(strSQL);
					ps.setLong(1, lApprovalContentID);
					rs = ps.executeQuery();
					if (rs.next())
					{
						lSerialID = rs.getLong(1);
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					
					strSQL = "insert into loan_rateadjustpaydetail  (ID, NAdjustConditionID, NLoanPayNoticeID, NBankInterestID, NAdjustSerial, dtstartdate,MADJUSTRATE,MSTAIDADJUSTRATE, niscountinterest,nContractID,status,mRate ) values (?,?,?,?,?,?,?,?,?,?,"+ Constant.RecordStatus.VALID+",?)";
					
					ps = conn.prepareStatement(strSQL);
					ps.setLong(1, lMaxID);
					ps.setLong(2, lApprovalContentID);
					ps.setLong(3, lLoanPayNoticeID);
					ps.setLong(4, lBankInterestID);
					ps.setLong(5, lSerialID);
					ps.setTimestamp(6, dtValiDate);
					ps.setDouble(7,dAdjustRate);
					ps.setDouble(8,dStaidAdjustRate);
					//置为有效
					ps.setLong(9, 1);
					ps.setLong(10,lContractID);
					ps.setDouble(11, mRate);
					ps.executeUpdate();
					ps.close();
					ps = null;
					
					//Boxu Add 2008年12月18日 修改放款通知单利率调整日期
					paydao = new LoanPayNoticeDao();
					paydao.updateRateAdjustDate(lLoanPayNoticeID, 1);
				}
				rs1.close();
				rs1 = null;
				ps1.close();
				ps1 = null;
			}
			if (conn != null)
				conn.close();
				conn = null;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw ex;
		}
		finally
		{
			try
			{
				if (rs1 != null)
					rs1.close();
					rs1 = null;
				if (ps1 != null)
					ps1.close();
					ps1 = null;
				if (rs != null)
					rs.close();
					rs = null;
				if (ps != null)
					ps.close();
					ps = null;
	
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
	}
	
	 public long initApproval(AdjustPayConditionInfo  adjInfo) throws RemoteException, IRollbackException
	 {
		 
            long lReturn = -1;
         // add by jbpan 20120607 操作日志 start
            LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
    		logInfo.setActionTypeID(Constant.LoggerOfOperationType.INITAPPROVAL);
    		logInfo.setBusinessType("贷款合同执行利率调整");
            // add by jbpan 20120607 end
			try
			{
				InutParameterInfo pInfo = adjInfo.getInutParameterInfo();
				if(adjInfo.getNcontractid()!=null&&!"".equals(adjInfo.getNcontractid())){
	        		logInfo.setTransCode(NameRef.getContractNoByID(Long.parseLong(adjInfo.getNcontractid())));  //操作日志-合同号
	        	}else{
	        		AdjustInterestConditionInfo tmpInfo = this.findAdjustInterestRateByID(adjInfo.getId());
	        		logInfo.setTransCode(tmpInfo.strContractNo);
	        	}
				//提交审批
				lReturn = FSWorkflowManager.initApproval(pInfo);
				if(lReturn > 0){
				//更新状态到审批中
				this.updateCheckStatus(adjInfo.getId(),LOANConstant.InterestRateSettingStatus.APPROVALING);
				}
				//add by jbpan 20120607 加上操作日志-操作结果-成功        
				logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			}
			catch (Exception e)
			{
				// add by jbapn 20120607 start
				// 加上操作日志       
				logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
				logInfo.setFailReason(e.getMessage()); //失败原因
				// add by jbpan 20120607 end
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException("remote  exception : " + e.toString());
				throw new IRollbackException(context, e.getMessage(), e);
			}
			//add by jbpan 20120607 start
	        finally
	        {
	        	
	            LoggerResults vResult = LoggerResults.getInstance(); 
	    		// 将日志记录保存到内存中
	    		vResult.getResult().add(logInfo);
	        }     
	        //add by jbpan 20120607 end

			return adjInfo.getId();		
	
	 }
   //返回一个AdjustPayConditionInfo实体
   public AdjustPayConditionInfo findAdjustPayConditionInfoByID(long lID) throws RemoteException
   {
	    PreparedStatement ps = null;
		Connection conn = null;
		ResultSet rs = null;
		String strSQL = null;
		AdjustPayConditionInfo conditioninfo = new AdjustPayConditionInfo();
		try
		{
			    conn = Database.getConnection();
				strSQL = "select id,nbankinterestid,ncontractid,mrate,dtvalidate,sreason,ninputuserid,dtinputdate,nnextcheckuserid," +
						"nstatusid,nofficeid,nloanpaynoticeid,nnextchecklevel,mstaidadjustrate,madjustrate,ncurrencyid " +
						" from loan_rateadjustpaycondition where id = ?" ;
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1,lID);
				rs = ps.executeQuery();
				while(rs.next())
				{
					conditioninfo.setId(rs.getLong("id"));
					conditioninfo.setNbankinterestid(rs.getLong("nbankinterestid"));
					conditioninfo.setNcontractid(rs.getString("ncontractid"));
					conditioninfo.setMrate(rs.getDouble("mrate"));
					conditioninfo.setDtvalidate(rs.getTimestamp("dtvalidate"));
					conditioninfo.setSreason(rs.getString("sreason"));
					conditioninfo.setNinputuserid(rs.getLong("ninputuserid"));
					conditioninfo.setDtinputdate(rs.getTimestamp("dtinputdate"));
					conditioninfo.setNstatusid(rs.getLong("nstatusid"));
					conditioninfo.setNofficeid(rs.getLong("nofficeid"));
					conditioninfo.setNloanpaynoticeid(rs.getLong("nloanpaynoticeid"));
					conditioninfo.setMstaidadjustrate(rs.getDouble("mstaidadjustrate"));
					conditioninfo.setMadjustrate(rs.getDouble("madjustrate"));
					conditioninfo.setNcurrencyid(rs.getLong("ncurrencyid"));
					System.out.println("固定利率"+conditioninfo.getMstaidadjustrate());
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
			conn.close();
			conn = null;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
					rs = null;
				if (ps != null)
					ps.close();
					ps = null;
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				throw new RemoteException("remote exception : " + ex.toString());
			}
		}
	return conditioninfo;   
   }
   
   /**
    * @param contractID
    * 检查是否能取消审批
    */
   public int checkIsCancel(long contractID,long adjustID) throws RemoteException
   {
	   PreparedStatement ps = null;
		Connection conn = null;
		ResultSet rs = null;
		int returnResult = 0;//0为成功,1为存在更高版本
		String strSQL = "select * from loan_rateadjustpaycondition where ncontractid =? and nstatusid!=0";
		try{
			 conn = Database.getConnection();
			 ps = conn.prepareStatement(strSQL);
			 ps.setLong(1,contractID);
			 rs = ps.executeQuery();
			 while(rs.next())
			 {
				 long getAdjustID = rs.getLong("id");
				 if(getAdjustID>adjustID)
				 {
					 returnResult=1;
				 }
			 }
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
					rs = null;
				if (ps != null)
					ps.close();
					ps = null;
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				throw new RemoteException("remote exception : " + ex.toString());
			}
		}
		return returnResult;
	   
   }
   
   //将原有的利率调整调整为已调整状态
   public long updateAdjustStatus(long lID,long lContraCtID,long lCheckStatus,long lOfficeID,long lCurrencyID) throws RemoteException, IRollbackException
   {
	   PreparedStatement ps = null;
		Connection conn = null;
		String strSQL = null;
		int lReturn = 0;
		try
		{
			    conn = Database.getConnection();
				strSQL = " Update loan_rateadjustpaycondition Set nstatusid=?  Where ncontractid=? and id<>?" +
						" and nofficeid=? and ncurrencyid=?" ;
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1,lCheckStatus);
				ps.setString(2,String.valueOf(lContraCtID));
				ps.setLong(3,lID);
				ps.setLong(4,lOfficeID);
				ps.setLong(5,lCurrencyID);
				lReturn = ps.executeUpdate();
				ps.close();
				ps = null;
			conn.close();
			conn = null;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			//throw new RemoteException("remote updateAdjustStatus exception : " + e.toString());
			//modified by mzh_fu 2007/08/07
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (ps != null)
					ps.close();
					ps = null;
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				//throw new RemoteException("remote updateAdjustStatus exception : " + ex.toString());
				//modified by mzh_fu 2007/08/07
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		
	   return new Long(lReturn).longValue();
   }
   //判断是否有相同记录
   public long isAdjustRecord(long lID,long lContraCtID,long lCheckStatus,long lOfficeID,long lCurrencyID) throws RemoteException
   {
	   
	    PreparedStatement ps = null;
		Connection conn = null;
		ResultSet rs = null;
		String strSQL = null;
		long lReturn = -1;
		try
		{
			    conn = Database.getConnection();
				strSQL = "select count(*) count from loan_rateadjustpaycondition where ncontractid=? and id<>? " +
						" and nstatusid=? and nofficeid=? and ncurrencyid=? ";
				ps = conn.prepareStatement(strSQL);
				ps.setString(1,String.valueOf(lContraCtID));
				ps.setLong(2,lID);
				ps.setLong(3,lCheckStatus);
				ps.setLong(4,lOfficeID);
				ps.setLong(5,lCurrencyID);
				rs = ps.executeQuery();
				while(rs.next())
				{
					lReturn = rs.getLong("count");
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
			conn.close();
			conn = null;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new RemoteException("remote isAdjustRecord() exception : " + e.toString());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
					rs = null;
				if (ps != null)
					ps.close();
					ps = null;
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				throw new RemoteException("remote isAdjustRecord() exception : " + ex.toString());
			}
		}
	return lReturn;   
   }
   public long updateCheckStatus(long lID,long lCheckStatus) throws RemoteException, IRollbackException
   {
	    PreparedStatement ps = null;
		Connection conn = null;
		String strSQL = null;
		int lReturn = 0;
		try
		{
			    conn = Database.getConnection();
				strSQL = " Update loan_rateadjustpaycondition Set nstatusid=?  Where ID=?" ;
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1,lCheckStatus);
				ps.setLong(2,lID);
				lReturn = ps.executeUpdate();
				ps.close();
				ps = null;
			conn.close();
			conn = null;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException("remote updateCheckStatus exception : " + e.toString());
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (ps != null)
					ps.close();
					ps = null;
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException("remote updateCheckStatus exception : " + ex.toString());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		
	   return new Long(lReturn).longValue();
   }
   
   /**
    * Modify by leiyang date 2007/07/27
    * 
    * @param lID
    * @param lCheckStatus
    * @return
    * @throws RemoteException
 * @throws IRollbackException 
    */
   public long updateStatusAndCheckStatus(long lID,long lCheckStatus) throws RemoteException, IRollbackException
   {
	    PreparedStatement ps = null;
		Connection conn = null;
		String strSQL = null;
		StringBuffer SQL = new StringBuffer();
		long lReturn = -1;
		try
		{
			    conn = Database.getConnection();
				strSQL = " Update loan_rateadjustpaycondition Set nstatusid=?  Where ID=? and nstatusid=?" ;
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1,lCheckStatus);
				ps.setLong(2,lID);
				ps.setLong(3,LOANConstant.InterestRateSettingStatus.CHECK);
				lReturn = ps.executeUpdate();
				ps.close();
				ps = null;
				SQL.append("Update loan_rateadjustpaydetail Set status=?  Where nadjustconditionid =? ");
				ps = conn.prepareStatement(SQL.toString());
				ps.setLong(1,Constant.RecordStatus.INVALID);
				ps.setLong(2,lID);
				lReturn = ps.executeUpdate();
				
		}
		catch (Exception e)
		{
			e.printStackTrace();
			//throw new RemoteException("remote updateCheckStatus exception : " + e.toString());
			//modified by mzh_fu 2007/08/07
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (ps != null)
					ps.close();
					ps = null;
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				//throw new RemoteException("remote updateCheckStatus exception : " + ex.toString());
				//modified by mzh_fu 2007/08/07
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		
	   return lReturn;
   }
   
   public long doApproval(AdjustPayConditionInfo adjinfo)throws RemoteException, IRollbackException
   {
	   long lId = adjinfo.getId();
	   long lReturn = -1;
	   long lContractID = Long.parseLong(adjinfo.getNcontractid());
	   InutParameterInfo pInfo = adjinfo.getInutParameterInfo();
	   SessionMng sessionMng = pInfo.getSessionMng();
	// add by jbpan 20120607 操作日志 start
       LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
		logInfo.setBusinessType("贷款合同执行利率调整");
       // add by jbpan 20120607 end
		try
		{
			if(adjinfo.getNcontractid()!=null&&!"".equals(adjinfo.getNcontractid())){
        		logInfo.setTransCode(NameRef.getContractNoByID(Long.parseLong(adjinfo.getNcontractid())));  //操作日志-合同号
        	}else{
        		AdjustInterestConditionInfo tmpInfo = this.findAdjustInterestRateByID(adjinfo.getId());
        		logInfo.setTransCode(tmpInfo.strContractNo);
        	}
			lReturn = this.isAdjustRecord(lId,lContractID,LOANConstant.InterestRateSettingStatus.CHECK,sessionMng.m_lOfficeID,sessionMng.m_lCurrencyID);
			//提交审批
			pInfo.setDataEntity(adjinfo);
			InutParameterInfo _inutParameterInfo = FSWorkflowManager.doApproval(pInfo);
			
			//如果是最后一级,且为审批通过,更新状态为已审批
			if(_inutParameterInfo.isLastLevel())
			{	
				if(lReturn>0)
				{
					this.updateAdjustStatus(lId,lContractID,LOANConstant.InterestRateSettingStatus.ADJUST,sessionMng.m_lOfficeID,sessionMng.m_lCurrencyID);
				}
				this.updateCheckStatus(lId,LOANConstant.InterestRateSettingStatus.CHECK);
			//	this.insertValues(lContractID,adjinfo.getNloanpaynoticeid(),adjinfo.getNbankinterestid(),adjinfo.getMadjustrate(),adjinfo.getMstaidadjustrate(),lId,adjinfo.getDtvalidate());
			    //modify by xwhe 2008-06-13 
				this.insertValues(lContractID,adjinfo.getNloanpaynoticeid(),adjinfo.getNbankinterestid(),adjinfo.getMadjustrate(),adjinfo.getMstaidadjustrate(),lId,adjinfo.getDtvalidate(),adjinfo.getMrate());
				lReturn = LOANConstant.InterestRateSettingStatus.CHECK;
			}
			//如果是最后一级,且为审批拒绝,更新状态为已保存
			else if(_inutParameterInfo.isRefuse())
			{
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				this.updateCheckStatus(lId,LOANConstant.InterestRateSettingStatus.SUBMIT);
				lReturn = LOANConstant.InterestRateSettingStatus.REFUSE;
				
			}else{
				lReturn = LOANConstant.InterestRateSettingStatus.APPROVALING;
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException("remote  exception : " + e.toString());
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lReturn;
   }
   
   //add by zwxiao 2010-07-04 融资租赁利率调整审批方法
   public long doNewApproval(AdjustPayConditionInfo adjinfo)throws RemoteException, IRollbackException
   {
	   long lId = adjinfo.getId();
	   long lReturn = -1;
	   long lContractID = Long.parseLong(adjinfo.getNcontractid());
	   InutParameterInfo pInfo = adjinfo.getInutParameterInfo();
	   SessionMng sessionMng = pInfo.getSessionMng();
		try
		{
//			lReturn = this.isAdjustRecord(lId,lContractID,LOANConstant.InterestRateSettingStatus.CHECK,sessionMng.m_lOfficeID,sessionMng.m_lCurrencyID);
			//提交审批
			pInfo.setDataEntity(adjinfo);
			InutParameterInfo _inutParameterInfo = FSWorkflowManager.doApproval(pInfo);
			
			//如果是最后一级,且为审批通过,更新状态为已审批
			if(_inutParameterInfo.isLastLevel())
			{	
//				if(lReturn>0)
//				{
//					this.updateAdjustStatus(lId,lContractID,LOANConstant.InterestRateSettingStatus.ADJUST,sessionMng.m_lOfficeID,sessionMng.m_lCurrencyID);
//				}
				this.updateCheckStatus(lId,LOANConstant.InterestRateSettingStatus.CHECK);
//			    modify by xwhe 2008-06-13 
				//this.insertValues(lContractID,adjinfo.getNloanpaynoticeid(),adjinfo.getNbankinterestid(),adjinfo.getMadjustrate(),adjinfo.getMstaidadjustrate(),lId,adjinfo.getDtvalidate(),adjinfo.getMrate());
				afterApprovalUpdateValues(adjinfo);
				lReturn = LOANConstant.InterestRateSettingStatus.CHECK;
			}
			//如果是最后一级,且为审批拒绝,更新状态为已保存
			else if(_inutParameterInfo.isRefuse())
			{
				this.updateCheckStatus(lId,LOANConstant.InterestRateSettingStatus.SUBMIT);
				lReturn = LOANConstant.InterestRateSettingStatus.REFUSE;
			}else{
				lReturn = LOANConstant.InterestRateSettingStatus.APPROVALING;
			}
			
		}catch (Exception e)
		{
			//modified by mzh_fu 2007/08/07
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return lReturn;
   }
   
	/**
	 * Modify by leiyang date 2007/07/12
	 * 审批流：取消审批方法（合同利率调整）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(AdjustPayConditionInfo adjinfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		LoanPayNoticeDao paydao = null;
		InutParameterInfo inutParameterInfo = adjinfo.getInutParameterInfo();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
		logInfo.setBusinessType("贷款合同执行利率调整");
		LoanInterestSettingDao dao=new LoanInterestSettingDao();
		try
		{
			if(adjinfo.getNcontractid()!=null&&!"".equals(adjinfo.getNcontractid())){
        		logInfo.setTransCode(NameRef.getContractNoByID(Long.parseLong(adjinfo.getNcontractid())));  //操作日志-合同号
        	}else{
        		AdjustInterestConditionInfo tmpInfo = this.findAdjustInterestRateByID(adjinfo.getId());
        		logInfo.setTransCode(tmpInfo.strContractNo);
        	}
			//取消审批
			lReturn = updateStatusAndCheckStatus(adjinfo.getId(),LOANConstant.InterestRateSettingStatus.SUBMIT);
			
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}				
			}
			//删除已变更的利率记录
			dao.deleteRateAdjustContractDetail(adjinfo);
			//Boxu Add 2008年12月18日 修改放款通知单利率调整日期
			paydao = new LoanPayNoticeDao();
			paydao.updateRateAdjustDate(adjinfo.getNloanpaynoticeid(), 0);
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lReturn;
	}	

	//add by zwxiao 2010-07-04 融资租赁利率调整取消审批方法
	public long cancelNewApproval(AdjustPayConditionInfo adjinfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = adjinfo.getInutParameterInfo();
		try
		{
			//取消审批
			lReturn = updateNewStatusAndCheckStatus(adjinfo.getId(),LOANConstant.InterestRateSettingStatus.SUBMIT);
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}				
			}
			//取消审批后
			afterCancelApprovalUpdateValues(adjinfo);
		}
		catch (Exception e)
		{
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return lReturn;
	}
	
	//add by zwxiao 2010-07-04 融资租赁利率调整审批完成后需要做的操作
	private void afterApprovalUpdateValues(AdjustPayConditionInfo adjinfo) throws Exception
	{
		//更新调整计划版本的状态
	   PreparedStatement ps = null;
		Connection conn = null;
		String strSQL = null;
		int lReturn = 0;
		try
		{
			//更新loan_planmodifyform合同计划修改表的状态为已审批
		    conn = Database.getConnection();
			strSQL = " Update loan_planmodifyform Set nstatusid=?  Where ncontractid=? and nplanid = ?" +
					" and nofficeid=? and ncurrencyid=?" ;
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1,LOANConstant.InterestRateSettingStatus.CHECK);
			ps.setString(2,adjinfo.getNcontractid());
			ps.setLong(3,adjinfo.getNPlanID());
			ps.setLong(4,adjinfo.getNofficeid());
			ps.setLong(5,adjinfo.getNcurrencyid());
			lReturn = ps.executeUpdate();
			ps.close();
			ps = null;
			//更新loan_loancontractplan合同计划表的状态为已使用
			strSQL = " Update loan_loancontractplan Set NISUSED=?  Where ID=? ";
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1,2);
			ps.setLong(2,adjinfo.getNPlanID());
			lReturn = ps.executeUpdate();
			ps.close();
			ps = null;
			conn.close();
			conn = null;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (ps != null)
					ps.close();
					ps = null;
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
	}
	
	//add by zwxiao 2010-07-04 融资租赁利率调整审批完成后需要做的操作
	private void afterCancelApprovalUpdateValues(AdjustPayConditionInfo adjinfo) throws Exception
	{
		//更新调整计划版本的状态
	   PreparedStatement ps = null;
		Connection conn = null;
		String strSQL = null;
		int lReturn = 0;
		try
		{
			//更新loan_planmodifyform合同计划修改表的状态为审批中而不是已保存（特殊处理）
		    conn = Database.getConnection();
			strSQL = " Update loan_planmodifyform Set nstatusid=?  Where ncontractid=? and nplanid = ?" +
					" and nofficeid=? and ncurrencyid=?" ;
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1,LOANConstant.InterestRateSettingStatus.APPROVALING);
			ps.setString(2,adjinfo.getNcontractid());
			ps.setLong(3,adjinfo.getNPlanID());
			ps.setLong(4,adjinfo.getNofficeid());
			ps.setLong(5,adjinfo.getNcurrencyid());
			lReturn = ps.executeUpdate();
			ps.close();
			ps = null;
			//更新loan_loancontractplan合同计划表的状态为已使用
			strSQL = " Update loan_loancontractplan Set NISUSED=?  Where ID=? ";
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1,1);
			ps.setLong(2,adjinfo.getNPlanID());
			lReturn = ps.executeUpdate();
			ps.close();
			ps = null;
			conn.close();
			conn = null;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (ps != null)
					ps.close();
					ps = null;
				if (conn != null)
					conn.close();
					conn = null;
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
	}
	
	   //add by zwxiao 2010-07-08 调价更新状态的方法
	   public long updateNewStatusAndCheckStatus(long lID,long lCheckStatus) throws RemoteException, IRollbackException
	   {
		    PreparedStatement ps = null;
			Connection conn = null;
			String strSQL = null;
			StringBuffer SQL = new StringBuffer();
			long lReturn = -1;
			try
			{
				    conn = Database.getConnection();
					strSQL = " Update loan_rateadjustpaycondition Set nstatusid=?  Where ID=? and nstatusid=?" ;
					ps = conn.prepareStatement(strSQL);
					ps.setLong(1,lCheckStatus);
					ps.setLong(2,lID);
					ps.setLong(3,LOANConstant.InterestRateSettingStatus.CHECK);
					lReturn = ps.executeUpdate();
					ps.close();
					ps = null;
					conn.close();
					conn = null;
			}
			catch (Exception e)
			{
				e.printStackTrace();
				//throw new RemoteException("remote updateCheckStatus exception : " + e.toString());
				//modified by mzh_fu 2007/08/07
				throw new IRollbackException(context, e.getMessage(), e);
			}
			finally
			{
				try
				{
					if (ps != null)
						ps.close();
						ps = null;
					if (conn != null)
						conn.close();
						conn = null;
				}
				catch (Exception ex)
				{
					//throw new RemoteException("remote updateCheckStatus exception : " + ex.toString());
					//modified by mzh_fu 2007/08/07
					throw new IRollbackException(context, ex.getMessage(), ex);
				}
			}
			
		   return lReturn;
	   }
}
