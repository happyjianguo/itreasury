package com.iss.itreasury.loan.loaninterestsetting.bizlogic;

import java.rmi.RemoteException;
import java.sql.Timestamp;
import java.util.Collection;

import javax.ejb.EJBObject;

import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.loaninterestsetting.dataentity.AdjustInterestConditionInfo;
import com.iss.itreasury.loan.loaninterestsetting.dataentity.AdjustPayConditionInfo;
import com.iss.itreasury.loan.loaninterestsetting.dataentity.InterestRateInfo;
import com.iss.itreasury.loan.repayplan.dataentity.PlanModifyInfo;
import com.iss.itreasury.loan.repayplan.dataentity.RepayPlanInfo;
import com.iss.itreasury.util.IRollbackException;

/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */

public interface LoanInterestSetting extends EJBObject {

    
    /**
     * addBankInterestReteSetting  新增或修改银行利率
     * 根据所给定的条件新增或修改银行利率
     * 操作InterestRateTypeInfo、InterestRateHistory数据表
     * 新增或修改相应记录
     * 对于BankLoanInterestRateHistory，如果lID〉0，修改  lID=0,新增
     * 新增步骤：
     *    1  根据利率编号从InterestRateTypeInfo中查处利率类型标示
     *    2  将利率类型标示和其他相关字段插入InterestRateHistory
     *       条件：1 生效日 〉 当前日
     *             2 对同一利率类型标示,同一币种，生效日不能重合
     *    3 如成功插入，修改InterestRateTypeInfo
     *      如果该类型的纪录已存在，用sInterestRateName替换原先的利率名称
     * 修改时，如果该利率已做过利率调整，要修改利率调整表中的利率生效日期
     *       条件：1 生效日 〉 当前日
     *             2 对同一利率类型标示,同一币种，生效日不能重合
     * @param lID 标识
     * @param strInterestRateCode 利率编号
     * @param strInterestRateName 利率名称
     * @param dInterestRate 利率
     * @param tsValibleDate 利率生效日
     * @param lInputUserID 录入人
     * @param tsInputDate 录入日期
     * @param lCurrencyID 币种
     * @return long 成功返回ID标识，失败返回0
     * @throws RemoteException
     */
    public long saveBankInterestRateSetting (long lID, String sInterestRateCode, String sInterestRateName, double dInterestRate, Timestamp tsValibleDate, long lInputUserID, Timestamp tsInputDate,long lOfficeID, long lCurrencyID) throws java.rmi.RemoteException, IRollbackException;
        
    public long saveBankInterestRateSetting (long lID, String sInterestRateCode, String sInterestRateName, double dInterestRate, Timestamp tsValibleDate, long lInputUserID, Timestamp tsInputDate,long lOfficeID, long lCurrencyID, long lLoanTermTypeID) throws java.rmi.RemoteException, IRollbackException;
    
    /**
     * findInterestRate  银行利率设置查找
     * 根据银行利率标示查询银行利率设置
     * 操作InterestRateHistory数据表
     * 查询相应记录
     * 
     * @param lID 银行利率标示
     * @return InterestRateInfo 银行利率信息
     * @throws RemoteException
     */
    public InterestRateInfo findInterestRateByID (long lID) throws java.rmi.RemoteException;
    
    /**
     * findMaxInterestRateCode  查找最大银行利率编号
     * 操作InterestRateType数据表
     * 查询相应记录
     * @param lCurrencyID 币种标示
     * 
     * @return String 最大银行利率编号
     * @throws RemoteException
     */
    public String findMaxInterestRateCode (long lOfficeID,long lCurrencyID) throws java.rmi.RemoteException;
    
    /**
     * findInterestRate  银行利率设置查找
     * 根据银行利率类型查询银行利率设置
     * 操作InterestRateHistory数据表
     * 查找 利率生效日在当前日起之后 的纪录
     * 查询相应记录
     * 
     * @param lTypeID 银行利率编号
     * @param lCurrencyID 币种
     * @return Collection 银行利率信息
     * @throws RemoteException
     */
    public Collection findInterestRateByTypeID (long lTypeID,long lOfficeID,long lCurrencyID, long lPageLineCount,long lPageNo,long lOrderParam,long lDesc) throws java.rmi.RemoteException;
    /**
     * findInterestRate  银行利率设置查找
     * 根据银行利率类型查询银行利率设置
     * 操作InterestRateHistory数据表
     * 查找 利率生效日在当前日起之后 的纪录
     * 查询相应记录
     * 
     * @param lTypeID 银行利率编号
     * @param lCurrencyID 币种
     * @return Collection 银行利率信息
     * @throws RemoteException
     */
    public Collection findRateByTypeID (long lTypeID,long lOfficeID,long lCurrencyID, long lPageLineCount,long lPageNo,long lOrderParam,long lDesc) throws java.rmi.RemoteException;
    
    /**
     * findInterestRateHistory  查看历史利率记录
     * 根据利率类型标示查询历史利率记录
     * 操作InterestRateHistory、InterestRateTypeInfo数据表
     * 查询相应记录
     * 只查出生效日在当前日期之前的纪录
     * 
     * @param lTypeID 银行利率编号
     * @param lCurrencyID 币种
     * @return Collection 结果集
     * @throws RemoteException
     */
    public Collection findInterestRateHistoryByTypeID (long lTypeID,long lOfficeID, long lCurrencyID, long lPageLineCount,long lPageNo,long lOrderParam,long lDesc) throws java.rmi.RemoteException;
    public Collection findRateHistoryByTypeID (long lTypeID,long lOfficeID, long lCurrencyID, long lPageLineCount,long lPageNo,long lOrderParam,long lDesc,Timestamp tsValibleDate) throws java.rmi.RemoteException;
    
    /**
     * findInterestRateHistory  查看所有历史利率记录
     * 查询所有历史利率记录
     * 操作BankLoanInterestRate、InterestRateTypeInfo数据表
     * 查询相应记录
     * 
     * 只查出生效日在当前日期之前的纪录
     * @param lCurrencyID 币种
     * @return Collection 结果集
     * @throws RemoteException
     */
    public Collection findInterestRateHistory (long lOfficeID,long lCurrencyID,long lPageLineCount,long lPageNo,long lOrderParam,long lDesc) throws java.rmi.RemoteException;

    
    /**
     * findInterestByID  查找利率信息
     * 根据条件查找利率信息
     * 操作 BANKLOANINTERESTRATE 数据表
     * 查询相应记录
     * 
     * @param long           lID              利率标示
     * @return InterestRateInfo    
     * @throws RemoteException
     */
    public InterestRateInfo findInterestByID (long lID) throws java.rmi.RemoteException;

    
    /**
     * updateInterestRate  普通贷款银行利率修改
     * 提交银行利率修改申请
     * 操作 ContractRateSetting 数据表
     * 提交银行利率修改申请
     * 将被修改的合同的查询条件写入表中
     * lID = 0 ,新增。不能修改纪录
     * 
     * @param lID                       long          利率修改条件标示
     * @param lLoanInterestRateID       long          贷款利率标示
     * @param lContractID               long          合同标示
     * @param lLetoutRequisitionID      long          放款通知单标示
     * @param dRate                     double        利率值
     * @param tsValidate                Timestamp     生效日
     * @param strReason                 String        调整原因
     * @param lCurrencyID               long          币种
     * @param lOfficeID                 long          办事处ID
     * @param lInputUserID              long          录入人ID
     * @param tsInputDate               Timestamp     录入日期
     * @return long  成功返回ID标识，失败返回0
     * @throws RemoteException
     */
    public long adjustInterestRate (
      long lID,
      long lLoanInterestRateID,
      long lContractID,
      long lLetoutRequisitionID,
      double dRate,
      double dAdjustRate,
      double dStaidAdjustRate,
      Timestamp tsValidate,
      String strReason,
      long lCurrencyID,
      long lOfficeID,
      long lInputUserID,
      Timestamp tsInputDate
    ) throws java.rmi.RemoteException, IRollbackException;
    
    
    /**
     * findUpdateInterestRateByID  查找利率修改条件信息
     * 根据条件查找利率修改条件信息
     * 操作 ContractRateSetting 数据表
     * 查询相应记录
     * 
     * @param long           lID              利率修改条件标示
     * @return AdjustInterestConditionInfo    
     * @throws RemoteException
     */
    public AdjustInterestConditionInfo findAdjustInterestRateByID (long lID,long lCurrencyID) throws java.rmi.RemoteException;

    /**
     * findUpdateInterestRateByID  查找利率修改条件信息
     * 根据条件查找利率修改条件信息
     * 操作 ContractRateSetting 数据表
     * 查询相应记录
     * 
     * @param long           lID              利率修改条件标示
     * @return AdjustInterestConditionInfo    
     * @throws RemoteException
     */
    public AdjustInterestConditionInfo findAdjustInterestRateByID (long lID) throws java.rmi.RemoteException;
    
    /**
     * findUpdateInterestByMultiOption  查找应复核的利率修改
     * 根据条件查找应该复核的利率修改
     * 操作 Contract RateSetting 数据表
     * 查询相应记录
     * 
     * @param long           lActionID             操作标示1：修改查询；2：复核查询
     * @param Timestamp      tsStartDate           利率修改开始日
     * @param Timestamp      tsEndDate             利率修改结束日
     * @param long           lStatusID             利率修改状态
     * @param long           lCurrencyID           币种
     * @param long           lOfficeID             办事处ID
     * @param long           lUserID               操作人ID
     * @param long           lPageLineCount        每页页行数条件
     * @param long           lPageNo               第几页条件
     * @param long           lOrderParam           排序条件，根据此参数决定结果集排序条件
     * @param long           lDesc                 升序或降序
     * @return Collection  结果集
     * @throws RemoteException
     */
    public Collection findAdjustInterestByMultiOption (
      long lActionID,
      Timestamp tsStartDate,
      Timestamp tsEndDate,
      long lStatusID,
      long lCurrencyID,
      long lOfficeID,
      long lUserID,
      long lPageLineCount,
      long lPageNo,
      long lOrderParam,
      long lDesc
    )throws java.rmi.RemoteException;
    
    
	/**
	 * 新增审批意见
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol><b>新增审批意见</b>
	 * <ul>
	 * <li>操作数据库表loan_approvalTracing,loan_rateadjustpaycondition
	 * <li>如果审批决定是拒绝，修改带审批的主体状态
	 * </ul>
	 * </ol>
	 * @Copyright (c) Jan. 2003, by iSoftStone Inc. All Rights Reserved
	 * @param     long        nReviewTypeID         审批类型
	 * @param     long        nReviewContentID      审批内容类型
	 * @param     String      sOpinion              审批意见
	 * @param     long        nUserID               审批人标示
	 * @param     long        nNextUserID           下一个审批人标示
	 * @param     long        action                审批，拒绝，修改，最后审批
	 * @return    long        成功，返回值 == 1，失败，返回值 == -1
	 * @exception Exception
	 **/
	public long checkAdjustInterestRate(
		long lApprovalContentID,
		String sOpinion,
		long lUserID,
		long lNextUserID,
		long lAction,
		long lCurrencyID,
		long lOfficeID
	) throws RemoteException, IRollbackException;
	
	
    /**
     * cancelUpdateInterestRate  取消普通贷款银行利率修改
     * 取消普通贷款银行利率修改
     * 操作 AdjustedContract 数据表
     * 更新相应记录
     * 应首先检查审核状态
     * 
     * @param lAdjustConditionID : ContractRateSetting.ID
     * @return long  成功返回ID标识，失败返回0
     * @throws RemoteException
     */
    public long cancelAdjustInterestRate (long lAdjustConditionID,long lCurrencyID,long lOfficeID) throws java.rmi.RemoteException, IRollbackException;
    
    
    public long initApproval(AdjustPayConditionInfo info) throws java.rmi.RemoteException, IRollbackException;
    
    public long doApproval(AdjustPayConditionInfo info)throws java.rmi.RemoteException, IRollbackException;
    //提交审批之后更新记录的装态
    public long updateCheckStatus(long lID,long lCheckStatus)throws java.rmi.RemoteException, IRollbackException;
    
//  返回一个AdjustPayConditionInfo实体
    public AdjustPayConditionInfo findAdjustPayConditionInfoByID(long lID)throws java.rmi.RemoteException;
    
//  将原有的利率调整调整为已调整状态
    public long updateAdjustStatus(long lID,long lContraCtID,long lCheckStatus,long lOfficeID,long lCurrencyID)throws java.rmi.RemoteException, IRollbackException;
    
//  判断是否有相同记录
    public long isAdjustRecord(long lID,long lContraCtID,long lCheckStatus,long lOfficeID,long lCurrencyID)throws java.rmi.RemoteException;
    
    public long cancelApproval(AdjustPayConditionInfo adjinfo)throws RemoteException, IRollbackException;
    /**
     * delBankInterestReteSetting  删除银行利率
     * 根据所给定的条件删除银行利率
     * 操作InterestRateTypeInfo、InterestRateHistory数据表
     * 删除相应记录
     * @param lID 标识
     * @param strInterestRateCode 利率编号
     * @param strInterestRateName 利率名称
     * @param dInterestRate 利率
     * @param tsValibleDate 利率生效日
     * @param lInputUserID 录入人
     * @param tsInputDate 录入日期
     * @param lCurrencyID 币种
     * @return long 成功返回ID标识，失败返回0
     * @throws RemoteException
     */
    public long delBankInterestRateSetting (long lID, String sInterestRateCode, String sInterestRateName, double dInterestRate, Timestamp tsValibleDate, long lInputUserID, Timestamp tsInputDate,long lOfficeID, long lCurrencyID) throws java.rmi.RemoteException, IRollbackException;
 
  //add by zwxiao 2010-07-04 融资租赁利率调整审批方法
    public long doNewApproval(AdjustPayConditionInfo adjinfo)throws RemoteException, IRollbackException;
    
  //add by zwxiao 2010-07-04 融资租赁利率调整审批方法
    public long cancelNewApproval(AdjustPayConditionInfo adjinfo)throws RemoteException, IRollbackException;
    
    public int checkIsCancel(long contractID,long adjustID) throws RemoteException;
}
