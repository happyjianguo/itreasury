package com.iss.itreasury.loan.repayplan.bizlogic;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.contractstatus.dao.ContractStatusDAO;
import com.iss.itreasury.loan.contractstatus.dataentity.ContractStatusInfo;
import com.iss.itreasury.loan.loaninterestsetting.dao.LoanInterestSettingDao;
import com.iss.itreasury.loan.loaninterestsetting.dataentity.AdjustPayConditionInfo;
import com.iss.itreasury.loan.loanpaynotice.dao.LoanPayNoticeDao;
import com.iss.itreasury.loan.repayplan.dao.PlanModifyDao;
import com.iss.itreasury.loan.repayplan.dao.RepayPlanDao;
import com.iss.itreasury.loan.repayplan.dataentity.PlanAssignInfo;
import com.iss.itreasury.loan.repayplan.dataentity.PlanDetailInfo;
import com.iss.itreasury.loan.repayplan.dataentity.PlanModifyInfo;
import com.iss.itreasury.loan.repayplan.dataentity.PlanVersionInfo;
import com.iss.itreasury.loan.repayplan.dataentity.QueryContractInfo;
import com.iss.itreasury.loan.repayplan.dataentity.RepayPlanInfo;
import com.iss.itreasury.loan.setting.dao.LoanTypeRelationDao;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.settlement.util.NameRef;
import com.iss.itreasury.settlement.util.SETTConstant;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.system.logger.dataentity.LoggerBtnLevelInfo;
import com.iss.itreasury.system.logger.dataentity.LoggerResults;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log;

/**
 * Created 2003-8-15 14:50:59 Code generated by the Forte for Java EJB Module
 * 
 * @author yfan
 */

public class RepayPlanEJB implements SessionBean
{

	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */

	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context)
	{

		this.context = context;
	}

	private SessionContext	context;

	/**
	 * No argument constructor required by container.
	 */
	public RepayPlanEJB()
	{

	}

	/**
	 * ................................................... Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate()
	{

	}

	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate()
	{

	}

	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate()
	{

	}

	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove()
	{

	}

	/**
	 * 新增还款计划
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>新增或修改还款计划</b>
	 * <ul>
	 * <li>还款金额不能大于合理还款数
	 * 
	 * <li>操作数据库表ContractPayPlan、ContractPayPlanVersion
	 * <li>新增：（lID == 0）
	 * <li>根据nAddANewVersion： 1--新增一条版本纪录 0--不需新增版本纪录
	 * <li>如果nAddANewVersion=1，ContractPayPlanVersion中新增一条纪录，版本号为空
	 * <li> 复制ContractPayPlan中最近的版本纪录，nContractPayPlanVersionID
	 * <li> 值为ContractPayPlanVersion中新增纪录的ID
	 * <li> ContractPayPlan中插入新增的纪录
	 * <li>如果nAddANewVersion=0，ContractPayPlan中插入新增的纪录，nContractPayPlanVersionID
	 * <li> 值为该贷款纪录在ContractPayPlanVersion中的最大ID
	 * <li>修改: (lID > 0)
	 * <li>两步操作：复制和修改
	 * <li>其他同新增
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lID 还款计划标示
	 * @param long lLoanID 贷款标示
	 * @param long lContractID 合同标示
	 * @param Timestamp tsPlanDate 原始计划日期
	 * @param int nLoanOrRepay 贷/还
	 * @param double dAmount 金额
	 * @param String strType 类型（本金）
	 * @param long lInputUserID 用户标示
	 * @param Timestamp tsInputDate 新增时间/修改时间
	 * @param long lExtendApplyID 展期申请标示
	 * @param long lOverdueApplyID 逾期申请标示
	 * @param long lIsOverdue 是否逾期
	 * @param long lUserTypeID 修改来源（申请、展期、逾期、菜单）
	 * @param int nAddANewVersion 是否新增一个版本号
	 * 
	 * @param long lOfficeID 办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 * 
	 * @return long 新增或修改成功，返回值 ContractPayPlanVersion中纪录的ID，失败，返回值 == 0。主要用于修改信息
	 * @throws IRollbackException 
	 * 
	 * @exception Exception
	 */
	public long savePlan(PlanDetailInfo o) throws RemoteException, IRollbackException
	{

		long lResult = -1;
		long lVersionID = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		ArrayList alist = new ArrayList();
		RepayPlanInfo rp_info = new RepayPlanInfo();
		double lNowRate = 0;
		int nIndex = 1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setBusinessType("合同执行计划更改");
        // add by jbpan 20120607 end
		try
		{
			logInfo.setTransCode(NameRef.getContractNoByID(o.getContractID()));  //业务主键-合同编号
			ContractDao contractDao = new ContractDao();
			conn = Database.getConnection();
			if (o.getID() == 0)
			{

//				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
				if (o.getAddANewVersion() > 0)
				{
					// 查询CONTRACTPAYPLANVERSION的ID
					sb.append("select ID from loan_loanContractPlan where nContractID = ? and NPLANVERSION is null");
					Log.print(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					ps.setLong(1, o.getContractID());
					rs = ps.executeQuery();
					if (rs.next())
					{
						lVersionID = rs.getLong(1);
					}
					Log.print("loan_loanContractPlan.lVersionID: " + lVersionID);
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					sb.setLength(0);

					if (lVersionID == -1)
					{
						// 如果没有申请的空版本号则自动取CONTRACTPAYPLANVERSION标识
						sb.append("select nvl(max(id)+1,1) from loan_loanContractPlan");
						Log.print(sb.toString());
						ps = conn.prepareStatement(sb.toString());
						rs = ps.executeQuery();
						if (rs.next())
						{
							lVersionID = rs.getLong(1);
						}
						Log.print("loan_loanContractPlan.lVersionID: " + lVersionID);
						rs.close();
						rs = null;
						ps.close();
						ps = null;
						sb.setLength(0);

						// 要新增一条空版本CONTRACTPAYPLANVERSION记录
						sb
								.append("insert into loan_loanContractPlan (ID, NLOANID, NCONTRACTID, NPLANVERSION,  NSTATUSID,nIsUsed,nUserType,dtInputDate) values (?,?,?,null,?,?,?,sysdate)");
						Log.print(sb.toString());
						ps = conn.prepareStatement(sb.toString());
						nIndex = 1;
						ps.setLong(nIndex++, lVersionID);
						ps.setLong(nIndex++, o.getLoanID());
						ps.setLong(nIndex++, o.getContractID());
						ps.setLong(nIndex++, Constant.RecordStatus.INVALID);
						ps.setLong(nIndex++, Constant.YesOrNo.YES);
						ps.setLong(nIndex++, o.getUserTypeID());
						if (ps.executeUpdate() < 1)
						{
							Log.print("error.update.loan_loanContractPlan");
						}
						Log.print("updated.loan_loanContractPlan.ID: " + lVersionID);
						ps.close();
						ps = null;
						sb.setLength(0);

					}
					else
					{
						// 已有一空版本号记录，先删除CONTRACTPAYPLAN中多余的记录
						sb.append("delete from loan_loanContractPlanDetail where nContractPlanID = ?");
						Log.print(sb.toString());
						ps = conn.prepareStatement(sb.toString());
						ps.setLong(1, lVersionID);
						ps.executeUpdate();
						ps.close();
						ps = null;
						sb.setLength(0);

					}
					if (o.getAddANewVersion() > 1)
					{

						sb.append("select * from loan_loanContractPlan where ID = ?");
						Log.print(sb.toString());
						ps = conn.prepareStatement(sb.toString());
						ps.setLong(1, o.getAddANewVersion() - 1);
						rs = ps.executeQuery();
						while (rs.next())
						{
							o.setContractID(rs.getLong("NCONTRACTID"));
						}
						rs.close();
						rs = null;
						ps.close();
						ps = null;
						sb.setLength(0);

						sb.append("update loan_loanContractPlan set NCONTRACTID = ? where ID = ?");
						Log.print(sb.toString());
						ps = conn.prepareStatement(sb.toString());
						ps.setLong(1, o.getContractID());
						ps.setLong(2, lVersionID);
						lResult = ps.executeUpdate();
						ps.close();
						ps = null;
						sb.setLength(0);

						// 复制指定的版 本号
						sb.append("select * from  loan_loanContractPlanDetail where nContractPlanID = ? order by ID");
						Log.print(sb.toString());
						ps = conn.prepareStatement(sb.toString());
						// ps.setLong(1,lLoanID);
						ps.setLong(1, o.getAddANewVersion() - 1);
						rs = ps.executeQuery();
						while (rs.next())
						{
							rp_info = new RepayPlanInfo();
							rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
							rp_info.fExecuteInterestRate = contractDao.getLatelyRate(0, o.getContractID(),
									rp_info.tsPlanDate).getLateRate();
							rp_info.nLoanOrRepay = rs.getInt("NPAYTYPEID");
							rp_info.dAmount = rs.getDouble("MAMOUNT");
							rp_info.sType = rs.getString("STYPE");
							rp_info.lLastExtendID = rs.getLong("NLASTEXTENDID");
							rp_info.lLastOverDueID = rs.getLong("NLASTOVERDUEID");
							// rp_info.lisOverDue = rs.getLong("NISOVERDUE");
							rp_info.lLastVersionPlanID = rs.getLong("ID");
							rp_info.tsInputDate = rs.getTimestamp("DTMODIFYDATE");
							alist.add(rp_info);
						}
						rs.close();
						rs = null;
						ps.close();
						ps = null;
						sb.setLength(0);
					}
					else
					{
						// 查询是否有一个版本号
						sb
								.append("select aa.* from  loan_loanContractPlanDetail aa,loan_loanContractPlan bb where bb.NLOANID = ? and aa.nContractPlanID = bb.ID and bb.NPLANVERSION in(select max(NPLANVERSION) from loan_loanContractPlan where NLOANID = ?) order by aa.ID");
						Log.print(sb.toString());
						ps = conn.prepareStatement(sb.toString());
						ps.setLong(1, o.getLoanID());
						ps.setLong(2, o.getLoanID());
						rs = ps.executeQuery();
						while (rs.next())
						{
							rp_info = new RepayPlanInfo();
							rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
							rp_info.fExecuteInterestRate = contractDao.getLatelyRate(0, o.getContractID(),
									rp_info.tsPlanDate).getLateRate();
							rp_info.nLoanOrRepay = rs.getInt("NPAYTYPEID");
							rp_info.dAmount = rs.getDouble("MAMOUNT");
							rp_info.sType = rs.getString("STYPE");
							rp_info.lLastExtendID = rs.getLong("NLASTEXTENDID");
							rp_info.lLastOverDueID = rs.getLong("NLASTOVERDUEID");
							// rp_info.lisOverDue = rs.getLong("NISOVERDUE");
							rp_info.lLastVersionPlanID = rs.getLong("ID");
							rp_info.tsInputDate = rs.getTimestamp("DTMODIFYDATE");
							alist.add(rp_info);
						}
						rs.close();
						rs = null;
						ps.close();
						ps = null;
						sb.setLength(0);
					}

					if (alist.size() != 0)
					{
						sb
								.append("insert into  loan_loanContractPlanDetail (ID, nContractPlanID, DTPLANDATE,  NPAYTYPEID, MAMOUNT, STYPE, DTMODIFYDATE,nLastExtendID,nLastOverdueID,nLastVersionPlanID ) values (nvl((select max(id) from loan_loanContractPlanDetail),0)+1,?,?,?,?,?,?,?,?,?)");
						Log.print(sb.toString());
						Iterator iter = alist.iterator();
						while (iter.hasNext())
						{
							nIndex = 1;
							rp_info = (RepayPlanInfo) iter.next();
							ps = conn.prepareStatement(sb.toString());

							ps.setLong(nIndex++, lVersionID);
							ps.setTimestamp(nIndex++, rp_info.tsPlanDate);
							ps.setLong(nIndex++, (long) rp_info.nLoanOrRepay);
							ps.setDouble(nIndex++, rp_info.dAmount);
							ps.setString(nIndex++, rp_info.sType);
							ps.setTimestamp(nIndex++, rp_info.tsInputDate);
							ps.setLong(nIndex++, rp_info.lLastExtendID);
							ps.setLong(nIndex++, rp_info.lLastOverDueID);
							ps.setLong(nIndex++, rp_info.lLastVersionPlanID);
							if (ps.executeUpdate() < 1)
							{
								// throw new RemoteException("error.copy.CONTRACTPAYPLAN");
								Log.print("error.copy.loan_loanContractPlanDetail");
							}
							Log.print("success.copy.loan_loanContractPlanDetail");
							ps.close();
							ps = null;
						}
						sb.setLength(0);
					}

					// 新增用户原始计划

					sb
							.append("insert into  loan_loanContractPlanDetail (ID, nContractPlanID, DTPLANDATE,  NPAYTYPEID, MAMOUNT, STYPE, DTMODIFYDATE,nLastExtendID,nLastOverdueID) values (nvl((select max(id) from loan_loanContractPlanDetail),0)+1,?,?,?,?,?,sysdate,?,?)");
					Log.print(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					nIndex = 1;
					ps.setLong(nIndex++, lVersionID);
					ps.setTimestamp(nIndex++, o.getPlanDate());
					ps.setLong(nIndex++, (long) o.getLoanOrRepay());
					ps.setDouble(nIndex++, o.getAmount());
					ps.setString(nIndex++, o.getType());
					ps.setLong(nIndex++, o.getExtendApplyID());
					ps.setLong(nIndex++, o.getOverdueApplyID());
					// ps.setLong(nIndex++, o.getIsOverdue());
					if (ps.executeUpdate() < 1)
					{
						Log.print("error.update.loan_loanContractPlanDetail");
					}
					lResult = lVersionID;
					ps.close();
					ps = null;
					sb.setLength(0);
				}
				if (o.getAddANewVersion() == 0)
				{

					// 查询CONTRACTPAYPLANVERSION的ID空版 本
					sb.append("select ID from loan_loanContractPlan where nContractID = ? and NPLANVERSION is null");
					Log.print(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					ps.setLong(1, o.getContractID());
					rs = ps.executeQuery();
					while (rs.next())
					{
						lVersionID = rs.getLong(1);
					}
					System.out.println("loan_loanContractPlan.lVersionID: " + lVersionID);
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					sb.setLength(0);

					sb
							.append("insert into  loan_loanContractPlanDetail (ID, nContractPlanID, DTPLANDATE,  NPAYTYPEID, MAMOUNT, STYPE, DTMODIFYDATE,nLastExtendID,nLastOverdueID) values (nvl((select max(id) from loan_loanContractPlanDetail),0)+1,?,?,?,?,?,sysdate,?,?)");
					Log.print(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					ps.setLong(1, lVersionID);
					ps.setTimestamp(2, o.getPlanDate());
					ps.setLong(3, (long) o.getLoanOrRepay());
					ps.setDouble(4, o.getAmount());
					ps.setString(5, o.getType());
					ps.setLong(6, o.getExtendApplyID());
					ps.setLong(7, o.getOverdueApplyID());
					lResult = ps.executeUpdate();
					ps.close();
					ps = null;
					sb.setLength(0);
				}

			}
			if (o.getID() > 0)
			{
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
				sb
						.append("update  loan_loanContractPlanDetail set DTPLANDATE = ?, NPAYTYPEID = ?,MAMOUNT = ?,STYPE = ?,DTMODIFYDATE = sysdate where ID = ?");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setTimestamp(1, o.getPlanDate());
				ps.setLong(2, (long) o.getLoanOrRepay());
				ps.setDouble(3, o.getAmount());
				ps.setString(4, o.getType());
				ps.setLong(5, o.getID());
				lResult = ps.executeUpdate();
				ps.close();
				ps = null;
				sb.setLength(0);

				// 更新网银记录 modify by hallyzhang 10/15/2003
				/*
				 * sb.append(" update OB_PlanVersion set nStatusID=? where ID=(select ID from OB_PlanVersion where nInID = ?)
				 * "); ps = conn.prepareStatement(sb.toString()); ps.setLong(1,
				 * OBNotes.CODE_OBLOAN_INSTR_STATUS_ACCEPT); ps.setLong(2, lID); ps.executeUpdate(); ps.close(); ps =
				 * null; sb.setLength(0);
				 */
				// }
			}
			conn.close();
			conn = null;
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			WritePlanIntoFile(o.getLoanID());

		}
		catch (Exception ex)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(ex.getMessage()); //失败原因
			// add by jbpan 20120607 end
			ex.printStackTrace();
			//throw new RemoteException(ex.getMessage());
			//modified by mzh_fu 2007/08/07
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			// add by jbpan 20120607 操作日志 start
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			// add by jbpan 20120607 end
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				//throw new RemoteException(ex.getMessage());
				//modified by mzh_fu 2007/08/07
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		// 写入计划
		return lResult;
	}

	/**
	 * 修改还款计划（复核后）
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>修改还款计划</b>
	 * <ul>
	 * <li>操作数据库表ContractPayPlanVersion
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lID 还款计划标示
	 * @param long lCheckUserID 复核人标示
	 * @param Timestamp tsCheckDate 复核时间
	 * 
	 * @param long lOfficeID 办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 * 
	 * @return long 修改成功，返回值 == 1，失败，返回值 == 0。主要用于修改信息
	 * 
	 * @exception Exception
	 */
	public long savePlan(long lID, long lCheckUserID, Timestamp tsCheckDate, long lOfficeID) throws RemoteException
	{

		return -1;
	}

	/**
	 * 自动新增还款计划
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>新增还款计划</b>
	 * <ul>
	 * <li>操作数据库表ContractPayPlan、ContractPayPlanVersion
	 * <li>往ContractPayPlanVersion中插入一条版本号为空的纪录
	 * <li>详细计划插入ContractPayPlan
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lLoanID 贷款标示
	 * @param int nLoanType 放款方式类型
	 * @param Timestamp tsLoanStartDate 起始贷款日期
	 * @param int nRepayType 还款方式类型
	 * @param Timestamp tsRepayStartDate 起始还款日起
	 * @param Timestamp tsInputDate 新增时间/修改时间
	 * @param String strType 类型（本金）
	 * 
	 * @param long lUserID 用户标示，选择使用，可以用于核对是否与loanInfo中的inputuser是同一人
	 * @param long lOfficeID 办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 * 
	 * @return long 新增或修改成功，返回值 ContractPayPlanVersion中纪录的ID，失败，返回值 == 0。主要用于修改信息
	 * @throws IRollbackException 
	 * 
	 * @exception Exception
	 */
	public long autosavePlan(PlanAssignInfo o) throws RemoteException, IRollbackException
	{

		// 取得贷款的起始时间
		int nNum = 0; // 一次放款或还款插入的纪录数
		double dTotal = 0;
		double dLastTime = 0;
		long dEach = 0;
		long lResult = 0;
		// long lContractID = 0;
		long lVersionID = 0;

		// 放款次数
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
        logInfo.setBusinessType("合同执行计划更改");
        // add by jbpan 20120607 end
		try
		{
			logInfo.setTransCode(NameRef.getContractNoByID(o.getContractID()));  //业务主键-合同编号+放款通知单编号
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			// 删除该申请版本为空的版本纪录和明细纪录
			sb.append("DELETE  loan_loanContractPlanDetail WHERE nContractPlanID IN ");
			sb
					.append(" (SELECT distinct ID FROM loan_loanContractPlan WHERE nContractID = ? AND NPLANVERSION is null) ");
			ps = con.prepareStatement(sb.toString());
			ps.setLong(1, o.getContractID());
			ps.executeUpdate();
			ps.close();
			ps = null;
			sb.setLength(0);
			sb.append("DELETE  loan_loanContractPlan WHERE nContractID = ? AND NPLANVERSION is null ");
			ps = con.prepareStatement(sb.toString());
			ps.setLong(1, o.getContractID());
			ps.executeUpdate();
			ps.close();
			ps = null;
			sb.setLength(0);
			// 取得申请金额
			sb.append("SELECT MEXAMINEAMOUNT FROM loan_ContractForm WHERE ID = ?");
			ps = con.prepareStatement(sb.toString());
			ps.setLong(1, o.getContractID());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dTotal = rs.getDouble("MEXAMINEAMOUNT");
				Log.print("dTotal is " + dTotal);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			int nAdd = 0;
			if (o.getPayType() != LOANConstant.PayType.NOTUSE)
			{

				/*******************************************************************************************************
				 * 放款开始
				 ******************************************************************************************************/
				if (o.getPayType() == (int) LOANConstant.PayType.ONETIME) // 一次性放款
				{
					Log.print("is right4--------------------");
					// 往库中插入一条纪录
					lResult = savePlanPro(0, 0, o.getContractID(), o.getLoanStartDate(),
							(int) LOANConstant.PlanType.PAY, dTotal, o.getType(), o.getUserType(), o.getUserID(), o
									.getInputDate(), (int) 1, o.getOfficeID());
					Log.print("is right5--------------------");
					lVersionID = lResult;
				}
				else
				{
					while (!o.getLoanStartDate().after(o.getLoanEndDate()))
					{
						// 往库中插入一条纪录，金额暂为0
						if (nNum == 0)
						{
							lResult = savePlanPro(0, 0, o.getContractID(), o.getLoanStartDate(),
									(int) LOANConstant.PlanType.PAY, 0, o.getType(), o.getUserType(), o.getUserID(), o
											.getInputDate(), (int) 1, o.getOfficeID());
						}
						else
						{
							lResult = savePlanPro(0, 0, o.getContractID(), o.getLoanStartDate(),
									(int) LOANConstant.PlanType.PAY, 0, o.getType(), o.getUserType(), o.getUserID(), o
											.getInputDate(), (int) 0, o.getOfficeID());
							lVersionID = lResult;
						}
						nNum++;
						switch (o.getPayType())
						{
							case (int) LOANConstant.PayType.YEAR : // 年
								o.setLoanStartDate(DataFormat.getNextMonth(o.getLoanStartDate(), 12));
								break;
							case (int) LOANConstant.PayType.HALFYEAR : // 半年
								o.setLoanStartDate(DataFormat.getNextMonth(o.getLoanStartDate(), 6));
								break;
							case (int) LOANConstant.PayType.QUARTOR : // 季
								o.setLoanStartDate(DataFormat.getNextMonth(o.getLoanStartDate(), 3));
								break;
							case (int) LOANConstant.PayType.MONTH : // 月
								o.setLoanStartDate(DataFormat.getNextMonth(o.getLoanStartDate(), 1));
								break;
							case (int) LOANConstant.PayType.WEEK : // 周
								o.setLoanStartDate(DataFormat.getNextDate(o.getLoanStartDate(), 7));
								break;
							case (int) LOANConstant.PayType.DAY : // 日
								o.setLoanStartDate(DataFormat.getNextDate(o.getLoanStartDate(), 1));
								break;
						}
					}
					dEach = (long) dTotal / nNum;
					dLastTime = dTotal - dEach * (nNum - 1);

					// 将该申请单所有版本唯恐的纪录的金额改为dEach;
					sb.append("UPDATE  loan_loanContractPlanDetail SET mAmount = ? WHERE nContractPlanID IN ");
					sb
							.append(" (SELECT distinct ID FROM loan_loanContractPlan WHERE nContractID = ? AND NPLANVERSION is null) ");
					sb.append(" AND nPayTypeID = ?");
					Log.print("sql is: " + sb.toString());
					ps = con.prepareStatement(sb.toString());
					ps.setDouble(1, dEach);
					ps.setLong(2, o.getContractID());
					ps.setLong(3, LOANConstant.PlanType.PAY);
					ps.executeUpdate();
					ps.close();
					ps = null;
					sb.setLength(0);
					// 将该申请单最后一条版本唯恐的纪录的金额改为dLastTime;
					sb.append("UPDATE  loan_loanContractPlanDetail SET mAmount = ? ");
					sb.append("WHERE id = (SELECT max(id) FROM  loan_loanContractPlanDetail WHERE nContractPlanID IN ");
					sb
							.append(" (SELECT distinct ID FROM loan_loanContractPlan WHERE nContractID = ? AND NPLANVERSION is null) ");
					sb.append(" AND nPayTypeID = ? )");
					Log.print("sql is: " + sb.toString());
					ps = con.prepareStatement(sb.toString());
					ps.setDouble(1, dLastTime);
					ps.setLong(2, o.getContractID());
					ps.setLong(3, LOANConstant.PlanType.PAY);
					ps.executeUpdate();
					ps.close();
					ps = null;
					sb.setLength(0);
				}
				/*******************************************************************************************************
				 * 放款结束
				 ******************************************************************************************************/
			}
			else
			{
				nAdd = 1;
			}
			Log.print("is right7--------------------");

			nNum = 0;
			dEach = 0;
			dLastTime = 0;

			if (o.getRepayType() != LOANConstant.RepayType.NOTUSE)
			{

				/*******************************************************************************************************
				 * 还款开始
				 ******************************************************************************************************/
				if (o.getRepayType() == (int) LOANConstant.RepayType.ONETIME) // 一次性放款
				{
					Log.print("is right8--------------------");
					// 往库中插入一条纪录
					lResult = savePlanPro(0, 0, o.getContractID(), o.getRepayStartDate(),
							(int) LOANConstant.PlanType.REPAY, dTotal, o.getType(), o.getUserType(), o.getUserID(), o
									.getInputDate(), nAdd, o.getOfficeID());
					Log.print("is right9--------------------");
					lVersionID = lResult;
				}
				else
				{
					while (!o.getRepayStartDate().after(o.getRepayEndDate()))
					{
						// 往库中插入一条纪录，金额暂为0
						if (nNum == 0)
						{
							lResult = savePlanPro(0, 0, o.getContractID(), o.getRepayStartDate(),
									(int) LOANConstant.PlanType.REPAY, 0, o.getType(), o.getUserType(), o.getUserID(),
									o.getInputDate(), nAdd, o.getOfficeID());
							lVersionID = lResult;
						}
						else
						{
							lResult = savePlanPro(0, 0, o.getContractID(), o.getRepayStartDate(),
									(int) LOANConstant.PlanType.REPAY, 0, o.getType(), o.getUserType(), o.getUserID(),
									o.getInputDate(), (int) 0, o.getOfficeID());
							lVersionID = lResult;
						}
						nNum++;
						switch (o.getRepayType())
						{
							case (int) LOANConstant.RepayType.YEAR : // 年
								o.setRepayStartDate(DataFormat.getNextMonth(o.getRepayStartDate(), 12));
								break;
							case (int) LOANConstant.RepayType.HALFYEAR : // 半年
								o.setRepayStartDate(DataFormat.getNextMonth(o.getRepayStartDate(), 6));
								break;
							case (int) LOANConstant.RepayType.QUARTOR : // 季
								o.setRepayStartDate(DataFormat.getNextMonth(o.getRepayStartDate(), 3));
								break;
							case (int) LOANConstant.RepayType.MONTH : // 月
								o.setRepayStartDate(DataFormat.getNextMonth(o.getRepayStartDate(), 1));
								break;
							case (int) LOANConstant.RepayType.WEEK : // 周
								o.setRepayStartDate(DataFormat.getNextDate(o.getRepayStartDate(), 7));
								break;
							case (int) LOANConstant.RepayType.DAY : // 日
								o.setRepayStartDate(DataFormat.getNextDate(o.getRepayStartDate(), 1));
								break;
						}
					}
					dEach = (long) dTotal / nNum;
					dLastTime = dTotal - dEach * (nNum - 1);
					Log.print("is right10--------------------");

					// 将该申请单所有版本唯恐的纪录的金额改为dEach;
					sb.append("UPDATE  loan_loanContractPlanDetail SET mAmount = ? WHERE nContractPlanID IN ");
					sb
							.append(" (SELECT distinct ID FROM loan_loanContractPlan WHERE nContractID = ? AND NPLANVERSION is null) ");
					sb.append(" AND nPayTypeID = ?");
					Log.print("sql is: " + sb.toString());
					ps = con.prepareStatement(sb.toString());
					ps.setDouble(1, dEach);
					ps.setLong(2, o.getContractID());
					ps.setLong(3, LOANConstant.PlanType.REPAY);
					ps.executeUpdate();
					ps.close();
					ps = null;
					sb.setLength(0);
					// 将该申请单最后一条版本唯恐的纪录的金额改为dLastTime;
					sb.append("UPDATE  loan_loanContractPlanDetail SET mAmount = ? ");
					sb.append("WHERE id = (SELECT max(id) FROM  loan_loanContractPlanDetail WHERE nContractPlanID IN ");
					sb
							.append(" (SELECT distinct ID FROM loan_loanContractPlan WHERE nContractID = ? AND NPLANVERSION is null) ");
					sb.append(" AND nPayTypeID = ? )");
					Log.print("sql is: " + sb.toString());
					ps = con.prepareStatement(sb.toString());
					ps.setDouble(1, dLastTime);
					ps.setLong(2, o.getContractID());
					ps.setLong(3, LOANConstant.PlanType.REPAY);
					ps.executeUpdate();
					ps.close();
					ps = null;
					sb.setLength(0);
				}

				/*******************************************************************************************************
				 * 还款结束
				 ******************************************************************************************************/

			}
			con.close();
			con = null;
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			WritePlanIntoFile(o.getContractID());

			// 关闭数据库
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			Log.print(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(" exception : " + e.toString());
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			// add by jbpan 20120607 操作日志 start
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			// add by jbpan 20120607 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(" exception : " + e.toString());
				throw new IRollbackException(context, e.getMessage(), e);
			}
			// 将计划改入合同文本
		}
		return lResult;
	}

	/**
	 * 确认新版还款计划
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>确认新版还款计划</b>
	 * <ul>
	 * <li>点击“完成”执行此方法
	 * <li>操作数据库表ContractPayPlanVersion
	 * <li>补充ContractPayPlanVersion中纪录的版本号
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lID 版本纪录标示
	 * 
	 * @param long lUserID 用户标示，选择使用，可以用于核对是否与loanInfo中的inputuser是同一人
	 * @param long lOfficeID 办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 * 
	 * @return long 成功，返回值 == 1，失败，返回值 == 0。
	 * @throws IRollbackException 
	 * 
	 * @exception Exception
	 */
	public long createPlanVersion(long lID, long lContractID, long lUserID, long lOfficeID, long lCurrencyID)
			throws RemoteException, IRollbackException
	{

		long lResult = -1;
		long lVersion = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		long lStatusID = 0;
		long lUsertype = 0;
		long lID_old = 0;

		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
		logInfo.setBusinessType("合同执行计划更改");
		logInfo.setTransCode(NameRef.getContractNoByID(lContractID));  //业务主键-合同编号
        // add by jbpan 20120607 end
		
		try
		{
			conn = Database.getConnection();

			/*
			 * 修改已经提交的执行计划时，实际上是新增加了一个版本号为空的记录 因此，在重新保存修改时 要删除旧的已经提交的版本记录
			 */
			sb
					.append("select nstatusid,NUSERTYPE,ID from loan_loanContractPlan where ID = (select max(id) from loan_loanContractPlan where nContractID = ? and nPlanVersion > 0 )");
			Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lStatusID = rs.getLong(1);
				lUsertype = rs.getLong(2);
				lID_old = rs.getLong(3);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			sb.append("select nvl(max(NPLANVERSION)+1,1) from loan_loanContractPlan where nContractID = ?");
			Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lVersion = rs.getLong(1);
			}
			System.out.println("loan_loanContractPlan.lVersion: " + lVersion);
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			/*
			 * 如果是在已提交的计划修改记录基础上重新提交， 删除之前的版本 并且修改loan_PlanModifyForm表中的nPlanID， 指向新的版本标示
			 */
			if (lStatusID == 0)
			{
				/*
				 * 网上银行 sb.setLength(0); sb.append( "update ob_planversion set nInID = ? where nInID = (select max(id)
				 * from ContractPayPlanVersionNew where nLoanID = ? and nPlanVersion > 0)");
				 * System.out.println(sb.toString()); ps = conn.prepareStatement(sb.toString()); ps.setLong(1, lID);
				 * ps.setLong(2, lLoanID); lResult = ps.executeUpdate(); ps.close(); ps = null;
				 */

				sb.setLength(0);
				sb
						.append("delete loan_loanContractPlanDetail where nContractPlanID = (select max(id) from loan_loanContractPlan where nContractID = ? and nPlanVersion > 0)");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lContractID);
				lResult = ps.executeUpdate();
				if (lResult < 1)
				{
					System.out.println("error.update.loan_loanContractPlan");
				}
				ps.close();
				ps = null;

				sb.setLength(0);
				sb
						.append("delete loan_loanContractPlan where ID = (select max(id) from loan_loanContractPlan where nContractID = ? and nPlanVersion > 0)");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lContractID);
				lResult = ps.executeUpdate();
				if (lResult < 1)
				{
					System.out.println("error.update.loan_loanContractPlan");
				}
				else
				{
					lVersion = lVersion - 1;
				}
				ps.close();
				ps = null;

				sb.setLength(0);
				sb.append("update loan_PlanModifyForm set nPlanID = ?  where nPlanID = ? ");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lID);
				ps.setLong(2, lID_old);
				lResult = ps.executeUpdate();
				ps.close();
				ps = null;

				if (lUsertype == LOANConstant.PlanModifyType.EXTEND)
				{ // 说明是展期一级审核中的修改
					/*
					 * sb.append( "update EXTENDAPPLYNEW set NPLANVERSIONID = ? where ID = (select ID from
					 * EXTENDAPPLYNEW where NPLANVERSIONID = ? and (NSTATUSID = 2 or NSTATUSID = 3))");
					 * System.out.println(sb.toString()); ps = conn.prepareStatement(sb.toString()); ps.setLong(1, lID);
					 * ps.setLong(2, lID_old); lResult = ps.executeUpdate(); ps.close(); ps = null; sb.setLength(0);
					 */
				}

			}
			/*
			 * 如果是在已复核的计划基础上提交， 新增loan_PlanModifyForm表中记录
			 */
			else
			{
				// 在计划修改表中插入一条记录
				PlanModifyInfo planmodifyinfo = new PlanModifyInfo();
				planmodifyinfo.setContractID(lContractID);
				planmodifyinfo.setInputUserID(lUserID);
				planmodifyinfo.setNextCheckUserID(lUserID);
				planmodifyinfo.setPlanID(lID);
				planmodifyinfo.setCurrencyID(lCurrencyID);
				planmodifyinfo.setOfficeID(lOfficeID);
				savePlanModify(planmodifyinfo);

			}
			sb.setLength(0);
			sb.append("update loan_loanContractPlan set NPLANVERSION = ?,NISUSED = ?,NSTATUSID = ?  where ID = ? ");
			Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lVersion);
			ps.setLong(2, 1);
			ps.setLong(3, 0);
			ps.setLong(4, lID);
			lResult = ps.executeUpdate();
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			sb.setLength(0);
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(ex.getMessage()); //失败原因
			// add by jbpan 20120607 end
			
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			// add by jbpan 20120607 操作日志 start
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			
			
			// add by jbpan 20120607 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}

	/**
	 * 根据贷款合同号查找计划信息
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>查找贷款信息</b>
	 * <ul>
	 * <li>操作数据库表ContractPayPlanVersion，ContractPayPlan
	 * <li>得到版本号最高的信息
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lContractID 贷款合同标示
	 * 
	 * @param long lPageLineCount 每页页行数条件
	 * @param long lPageNo 第几页条件
	 * @param long lOrderParam 排序条件，根据此参数决定结果集排序条件
	 * @param long lDesc 升序或降序 *
	 * @return Collection
	 * 
	 * @exception Exception
	 */
	public Collection findPlanByContract(long lContractID, long lPageLineCount, long lPageNo, long lOrderParam,
			long lDesc) throws RemoteException, IException
	{

		/*
		 */
		ArrayList alist = new ArrayList();

		try
		{
			RepayPlanDao dao = new RepayPlanDao();
			alist = (ArrayList) dao.findPlanByContract(lContractID, lPageLineCount, lPageNo, lOrderParam, lDesc);
		}
		catch (IException ie)
		{
			throw ie;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}

		return (alist != null && alist.size() > 0 ? alist : null);
	}

	/**
	 * 根据ContractPayPlanVersion中的ID查找计划信息
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>查找贷款信息</b>
	 * <ul>
	 * <li>不关心版本号
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long ContractPayPlanVersionID ContractPayPlanVersion中的ID
	 * 
	 * @param long lPageLineCount 每页页行数条件
	 * @param long lPageNo 第几页条件
	 * @param long lOrderParam 排序条件，根据此参数决定结果集排序条件
	 * @param long lDesc 升序或降序
	 * 
	 * @param long lUserID 用户标示，选择使用，可以用于核对是否与loanInfo中的inputuser是同一人
	 * @param long lOfficeID 办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 * 
	 * @return Collection
	 * 
	 * @exception Exception
	 */
	public Collection findPlanByVer(long ContractPayPlanVersionID, long lPageLineCount, long lPageNo, long lOrderParam,
			long lDesc, long lUserID, long lOfficeID) throws RemoteException
	{

		long lResult = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		ArrayList alist = new ArrayList();
		String strCondition = "";
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		long lContractID = 0;
		ContractDao contractdao = new ContractDao();

		try
		{
			conn = Database.getConnection();

			// 查找银行利率
			double dInterestRate = 0;
			String sInterestRate = ""; // for Libor 因为Libor没有值

			// 查询合同标识，为取得利率用
			sb.append("select nContractID from loan_loanContractPlan  where ID = ? ");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, ContractPayPlanVersionID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lContractID = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			sb.append("select count(*)");
			strCondition = " from  loan_loanContractPlanDetail aa, "
					+ "(select sum(MAMOUNT) as TOTAL1 from  loan_loanContractPlanDetail where nContractPlanID = ? and npaytypeid = 1) bb, "
					+ "(select sum(MAMOUNT) as TOTAL2 from  loan_loanContractPlanDetail where nContractPlanID = ? and npaytypeid = 2) cc "
					+ "where aa.nContractPlanID = ? ";
			switch ((int) lOrderParam)
			{
				case 1 :
					strCondition += " order by DTPLANDATE";
					break;
				case 2 :
					strCondition += " order by NPAYTYPEID";
					break;
				case 3 :
					strCondition += " order by MAMOUNT";
					break;
				case 4 :
					strCondition += " order by STYPE";
					break;
				case 5 :
					strCondition += " order by mEXECUTEINTERESTRATE";
					break;
				case 6 :
					strCondition += " order by DTMODIFYDATE";
					break;
				default :
					strCondition += " order by DTPLANDATE";
			}
			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				strCondition += " desc";
			}
			sb.append(strCondition);
			Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, ContractPayPlanVersionID);
			ps.setLong(2, ContractPayPlanVersionID);
			ps.setLong(3, ContractPayPlanVersionID);
			rs = ps.executeQuery();

			while (rs.next())
			{
				lRecordCount = rs.getLong(1);
				Log.print("RecordCount: " + lRecordCount);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			lPageCount = lRecordCount / lPageLineCount;

			if (lRecordCount % lPageLineCount != 0)
			{
				lPageCount++;
			}

			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			sb.append("select * from ( select a.*, rownum num from (");
			sb.append("select aa.*,bb.TOTAL1,cc.TOTAL2 " + strCondition);
			sb.append(" )  a) where num between  " + lRowNumStart + " and " + lRowNumEnd);
			Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, ContractPayPlanVersionID);
			ps.setLong(2, ContractPayPlanVersionID);
			ps.setLong(3, ContractPayPlanVersionID);
			Log.print("mamamamamcontractpayplanversionid=" + ContractPayPlanVersionID);
			rs = ps.executeQuery();

			RepayPlanDao dao = new RepayPlanDao();

			while (rs != null & rs.next())
			{
				Log.print("A...");
				RepayPlanInfo rp_info = new RepayPlanInfo();
				rp_info.lID = rs.getLong("ID");
				rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
				//add by zwxiao 2010-07-10 添加对融资租赁合同的判断，如果为融资租赁则计算的方法不一样
				if(contractdao.findByID(lContractID).getLoanTypeID() == LOANConstant.LoanType.RZZL){
					rp_info.fExecuteInterestRate = contractdao.getLatelyRateForRZZLPlan(lContractID, rp_info.tsPlanDate)
							.getRate();
					rp_info.lateRateString = DataFormat.formatRate(rp_info.fExecuteInterestRate);
				}else{
					rp_info.fExecuteInterestRate = contractdao.getLatelyRate(0, lContractID, rp_info.tsPlanDate)
							.getLateRate();
					rp_info.lateRateString = contractdao.getLatelyRate(0, lContractID, rp_info.tsPlanDate)
							.getLateRateString();
				}
				rp_info.sExecuteInterestRate = dao.getPlanRate(lContractID, rp_info.tsPlanDate);
				rp_info.nLoanOrRepay = rs.getInt("NPAYTYPEID");
				rp_info.dAmount = rs.getDouble("MAMOUNT");
				//add by zwxiao 2010-06-20 添加利息
				rp_info.mINTERESTAMOUNT = rs.getDouble("MINTERESTAMOUNT");
				rp_info.sType = rs.getString("STYPE");
				rp_info.tsInputDate = rs.getTimestamp("DTMODIFYDATE");
				rp_info.lCount = lPageCount;
				rp_info.lVersionNo = getPlanVersion(ContractPayPlanVersionID);
				rp_info.dPayCounter = rs.getDouble("TOTAL1");
				rp_info.dRePayCounter = rs.getDouble("TOTAL2");
				rp_info.lLastExtendID = rs.getLong("NLASTEXTENDID");
				rp_info.lLastOverDueID = rs.getLong("NLASTOVERDUEID");
				// rp_info.lisOverDue = rs.getLong("NISOVERDUE");
				rp_info.lLastVersionPlanID = rs.getLong("nLastVersionPlanID");
				alist.add(rp_info);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return (alist.size() > 0 ? alist : null);
	}

	/**
	 * 根据计划标示查找还款计划
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>查找还款计划</b>
	 * <ul>
	 * <li>操作数据库表ContractPayPlan
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lID 还款计划标示
	 * 
	 * @param long lUserID 用户标示，选择使用，可以用于核对是否与loanInfo中的inputuser是同一人
	 * @param long lOfficeID 办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 * 
	 * @return PayPlanInfo
	 * 
	 * @exception Exception
	 */
	public RepayPlanInfo findPlanByID(long lID, long lUserID, long lOfficeID) throws RemoteException
	{

		RepayPlanInfo rp_info = new RepayPlanInfo();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try
		{
			ContractDao contractDao = new ContractDao();
			conn = Database.getConnection();
			sb
					.append("select a.*,b.nContractID from loan_loanContractPlanDetail a,loan_loanContractPlan b where a.nContractPlanID = b.ID and a.ID = ?");
			Log.print(" ======= RepayPlanNewEJB.findPlanByID() Start ... ");
			Log.print(sb.toString());
			Log.print(" ======= RepayPlanNewEJB.findPlanByID() End ... ");
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lID);
			rs = ps.executeQuery();

			while (rs.next())
			{
				rp_info.lID = rs.getLong("ID");
				rp_info.lVersionNo = rs.getLong("nContractPlanID");
				rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
				rp_info.fExecuteInterestRate = contractDao.getLatelyRate(0, rs.getLong("nContractID"),
						rp_info.tsPlanDate).getLateRate();
				rp_info.nLoanOrRepay = rs.getInt("NPAYTYPEID");
				rp_info.dAmount = rs.getDouble("MAMOUNT");
				rp_info.sType = rs.getString("STYPE");
				rp_info.tsInputDate = rs.getTimestamp("DTMODIFYDATE");
				rp_info.lLastExtendID = rs.getLong("NLASTEXTENDID");
				rp_info.lLastOverDueID = rs.getLong("NLASTOVERDUEID");
				// rp_info.lisOverDue = rs.getLong("NISOVERDUE");
				rp_info.dPlanBalance = getPlanBalance(rs.getLong("nContractID"), rp_info.lVersionNo, rp_info.lID);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return rp_info;
	}

	/**
	 * 根据合同标示查询最大版本计划的标示
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>根据合同标示查询最大版本计划的标示</b>
	 * <ul>
	 * <li>操作数据库表loan_loanContractPlan
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lContractID 合同标示
	 * 
	 * @return long 删除成功，返回值 等于 删除的记录数，失败，返回值 == -1。
	 * 
	 * @exception Exception
	 */
	public long findMaxVersionID(long lContractID) throws RemoteException
	{

		long lResult = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try
		{
			conn = Database.getConnection();
			sb
					.append("select ID from loan_loancontractplan  where nPlanVersion>0 and nContractID = ? order by nPlanVersion DESC");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lResult = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			sb.setLength(0);

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lResult;
	}

	/**
	 * 通过合同号查找最大的版本号
	 * @param lContractID
	 * @return
	 * @throws RemoteException
	 */
	public long findMaxVersionCode(long lContractID) throws RemoteException
	{

		long lResult = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try
		{
			conn = Database.getConnection();
			sb
					.append("select nPlanVersion from loan_loancontractplan  where nPlanVersion>0 and nContractID = ? order by nPlanVersion DESC");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lResult = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			sb.setLength(0);

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lResult;
	}

	/**
	 * 删除还款计划
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>删除lID[]指定的还款计划</b>
	 * <ul>
	 * <li>操作数据库表ContractPayPlan
	 * <li>注意：是否要产生新的版本信息，如果要，要首先复制最近一次的还款计划，
	 * <li>产生新的还款纪录
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lID[] 计划标示数组
	 * @param long lLoanID 贷款标示
	 * @param int nAddANewVersion 是否新增一个版本号
	 * 
	 * @param long lUserID 用户标示，选择使用，可以用于核对是否与loanInfo中的inputuser是同一人
	 * @param long lOfficeID 办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 * 
	 * @return long 删除成功，返回值 等于 删除的记录数，失败，返回值 == -1。
	 * @throws IRollbackException 
	 * 
	 * @exception Exception
	 */
	// 增加一个参数，用来区分是否需要保存操作日志。isFirst=true时不需要保存，=false时需要保存
//	public long deletePlan(long lID[], long lContractID, long nAddANewVersion, long lUserID, long lOfficeID)
//			throws RemoteException, IRollbackException
	public long deletePlan(long lID[], long lContractID, long nAddANewVersion, long lUserID, long lOfficeID, boolean isFirst)
			throws RemoteException, IRollbackException
	{

		long lResult = -1;
		long ltempResult = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DELETE);
        logInfo.setBusinessType("合同执行计划更改");
        // add by jbpan 20120607 end
		try
		{
			logInfo.setTransCode(NameRef.getContractNoByID(lContractID));  //业务主键-合同编号
			conn = Database.getConnection();
			if (lUserID == -1 && lOfficeID == -1)
			{ // delete Last ID
				sb
						.append("select max(ID) from  loan_loanContractPlanDetail where nContractPlanID in (select ID from loan_loanContractPlan where nContractID = ? and ( NPLANVERSION is null or nPlanVersion <=0))");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lContractID);
				rs = ps.executeQuery();
				if (rs.next())
				{
					ltempResult = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);

				if (ltempResult > 0)
				{
					Log.print(ltempResult);
					sb.append("delete from  loan_loanContractPlanDetail where ID = ?");
					Log.print(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					ps.setLong(1, ltempResult);
					lResult = ps.executeUpdate();
					ps.close();
					ps = null;
					sb.setLength(0);
				}
			}
			else
			{
				for (int i = 0; i < lID.length; i++)
				{
					Log.print(lID[i]);
					sb.append("delete from  loan_loanContractPlanDetail where ID = ?");
					Log.print(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					ps.setLong(1, lID[i]);
					ltempResult = ps.executeUpdate();
					if (ltempResult < 1)
					{
						// throw new RemoteException("error.remove.CONTRACTPAYPLAN");
						Log.print("error.remove.loan_loanContractPlanDetail");
					}
					else
					{
						lResult = ltempResult;
					}
					ps.close();
					ps = null;
					sb.setLength(0);
				}
			}
			conn.close();
			conn = null;
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			// 将更改写入文件
			WritePlanIntoFile(lContractID);
		}
		catch (Exception ex)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(ex.getMessage()); //失败原因
			// add by jbpan 20120607 end
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			// add by jbpan 20120607 操作日志 start
			if(!isFirst)
			{
				LoggerResults vResult = LoggerResults.getInstance(); 
				// 将日志记录保存到内存中
				vResult.getResult().add(logInfo);
			}
			
			// add by jbpan 20120607 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}

	/**
	 * 执行计划更改合同查找（合同的状态为“执行中”）
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param nIsHaveNew 是否有需要复核的计划版本
	 * @param lCurrencyID 币种标识
	 * @param lOfficeID 办事处标识
	 * @param lContractIDFrom 合同编号起始
	 * @param lContractIDTo 合同编号结束
	 * @param lClientID 借款单位标识
	 * @param lPeriod 期限
	 * @param dAmountFrom 金额起始
	 * @param dAmountTo 金额结束
	 * @param tsUpdateFrom 起始修改日期
	 * @param tsUpdateTo 截至修改日期
	 * @param lStatusID 状态
	 * @return Collection
	 * @exception Exception
	 */
	public Collection findContractByMultiOption(QueryContractInfo o) throws RemoteException
	{

		Vector v = new Vector();

		// 分页变量
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		int lIndex = 1;

		String strSQL = "";
		String strSQL_pre = "";
		String strSQL_con = "";
		String strSQL_order = "";

		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		ContractDao cDao = null;

		try
		{
			con = Database.getConnection();
			if (o.getIsHaveNew() == 0) // 提交查询
			{
				// 计算记录总数. 条件：合同状态为已复核/执行中/已展期状态
				strSQL_pre = "SELECT COUNT(*) FROM loan_contractform bb, "
						+ " (select nContractID,nNextCheckUserID,nInputUserID,nStatusID  from loan_PlanModifyForm where nStatusID = "
						+ LOANConstant.LoanStatus.APPROVALING + " and  NCURRENCYID=" + o.getCurrencyID()
						//+ "or nStatusID = " + LOANConstant.LoanStatus.APPROVALING
						+ " and NOFFICEID=" + o.getOfficeID() + " )  cc ";
				strSQL_con = " WHERE bb.nTypeID != "
						+ LOANConstant.LoanType.TX
						+ " and bb.nTypeID != "
						+ LOANConstant.LoanType.ZTX
						+ " and bb.nTypeID != "
						+ LOANConstant.LoanType.DB
						+ " and  cc.nContractID(+) = bb.ID and (cc.nNextCheckUserID is null or cc.nNextCheckUserID = cc.nInputUserID) "
						+ " and bb.NCURRENCYID=" + o.getCurrencyID() + " AND bb.NOFFICEID=" + o.getOfficeID();
				if (o.getIsFromMywork() == Constant.YesOrNo.YES)
				{
					strSQL_con += " and  cc.nContractID = bb.ID ";
				}

				// 是否录入人
				if (o.getUserID() > 0)
					strSQL_con += " and bb.NINPUTUSERID = " + o.getUserID();
				// strSQL_con=" WHERE bb.NLOANID=aa.ID AND bb.NINPUTUSERID="+lUserID;
			}
			else
			// 审核查询
			{
				// 计算记录总数.
				strSQL_pre = "SELECT COUNT(*) FROM  loan_contractform bb, "
						+ " (select nContractID,nNextCheckUserID,nStatusID  from loan_PlanModifyForm where nStatusID = "
						+ LOANConstant.LoanStatus.APPROVALING + " and  NCURRENCYID=" + o.getCurrencyID()
						+ " and NOFFICEID=" + o.getOfficeID() + " )  cc ";
				strSQL_con = " WHERE bb.nTypeID != " + LOANConstant.LoanType.TX + " and bb.nTypeID != "
						+ LOANConstant.LoanType.ZTX + " and bb.nTypeID != " + LOANConstant.LoanType.DB
						+ " and  bb.NCURRENCYID=" + o.getCurrencyID() + " and bb.NOFFICEID=" + o.getOfficeID()
						+ " and cc.nContractID = bb.ID";
				/*
				 * if(o.getIsFromMywork() == Constant.YesOrNo.YES) { strSQL_con += " and cc.nContractID = bb.ID "; }//
				 */

				// 是否录入人
				if (o.getUserID() > 0)
				{
					ApprovalDelegation appBiz = new ApprovalDelegation();
					// 获得真正来审批这个记录的人（真实或传给的虚拟的人！）
					// String strAllUser =
					// appBiz.findTheVeryUser(Constant.ModuleType.LOAN, Constant.ApprovalLoanType.OTHER,
					// Constant.ApprovalAction.CONTRACT_PLAN,o.getOfficeID(),o.getCurrencyID(), o.getUserID());
					// 自营贷款,委托贷款,最高限额,银团贷款,买方信贷,其他
					LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
					long[] loanTypeId = {LOANConstant.LoanType.ZY, LOANConstant.LoanType.WT, LOANConstant.LoanType.TX,
							LOANConstant.LoanType.DB, LOANConstant.LoanType.RZZL, LOANConstant.LoanType.ZGXE,
							LOANConstant.LoanType.YT, LOANConstant.LoanType.MFXD, LOANConstant.LoanType.OTHER};
					String strAllUser = "";
					long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(o.getOfficeID(), o.getCurrencyID(),
							loanTypeId);
					// 获取所有子类型
					if (a_SubLoanType != null && a_SubLoanType.length > 0)
					{
						strSQL_con += " and ( ";
						for (int i = 0; i < a_SubLoanType.length; i++)
						{
							strAllUser = appBiz.findTheVeryUser(Constant.ModuleType.LOAN, a_SubLoanType[i],
									Constant.ApprovalAction.CONTRACT_PLAN, o.getOfficeID(), o.getCurrencyID(), o
											.getUserID());
							strSQL_con += " ( cc.nNextCheckUserID in " + strAllUser + ") ";
							if (i < a_SubLoanType.length - 1)
								strSQL_con += " or ";
							else
								strSQL_con += " ) ";
						}
					}
					else
					{
						return null;
					}

				}
			}

			if (o.getPlanStatusID() > 0 && o.getIsHaveNew() == 1)
				strSQL_con += " and cc.NSTATUSID = " + o.getPlanStatusID();

			// 贷款类型 ninh 2004-01-14
			if (o.getLoanTypeID() > 0)
				strSQL_con += " and bb.nTypeID = " + o.getLoanTypeID();

			// 1.lContractIDFrom 合同编号起
			if (o.getContractIDFrom() > 0)
				strSQL_con += " and bb.ID >=" + o.getContractIDFrom();
			// 1.lContractIDTo 合同编号止
			if (o.getContractIDTo() > 0)
				strSQL_con += " and bb.ID <=" + o.getContractIDTo();

			// 2.lClientID借款单位编号
			if (o.getClientID() > 0)
				strSQL_con += " and bb.NBORROWCLIENTID =" + o.getClientID();

			// 3.lPeriod期限
			if (o.getPeriod() > 0)
				strSQL_con += " and bb.NINTERVALNUM =" + o.getPeriod();

			// 4.dAmountFrom金额起
			if (o.getAmountFrom() > 0)
				strSQL_con += " and bb.MLOANAMOUNT >=" + o.getAmountFrom();
			// 4.dAmountTo金额止
			if (o.getAmountTo() > 0)
				strSQL_con += " and bb.MLOANAMOUNT <=" + o.getAmountTo();

			// 5.tsUpdateFrom更改日期
			if (o.getUpdateFrom() != null && o.getIsHaveNew() == 0)
				strSQL_con += " and bb.DTCHECK>= To_Date('" + DataFormat.formatDate(o.getUpdateFrom())
						+ "','yyyy-mm-dd') ";
			// 5.tsUpdateTo更改日期止
			if (o.getUpdateTo() != null && o.getIsHaveNew() == 0)
				strSQL_con += " and bb.DTCHECK<= To_Date('" + DataFormat.formatDate(o.getUpdateTo())
						+ "','yyyy-mm-dd') ";

			// 6.lStatusID 借款合同状态(已复核/执行中/已展期状态之一)
			if (o.getStatusID() > 0)
				strSQL_con += " and bb.NSTATUSID =" + o.getStatusID();
			else
				strSQL_con += " and ( bb.NSTATUSID = " + LOANConstant.ContractStatus.NOTACTIVE + " or bb.NSTATUSID = "
						+ LOANConstant.ContractStatus.ACTIVE + " or bb.NSTATUSID = "
						+ LOANConstant.ContractStatus.EXTEND + ") ";

			strSQL = strSQL_pre + strSQL_con;
			Log.print(o.getIsHaveNew());
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
				lRecordCount = rs.getLong(1);

			rs.close();
			rs = null;
			ps.close();
			ps = null;

			// 计算总页数
			lPageCount = lRecordCount / o.getPageLineCount();
			if ((lRecordCount % o.getPageLineCount()) != 0)
				lPageCount++;

			// 分页显示，显示下一页
			lRowNumStart = (o.getPageNo() - 1) * o.getPageLineCount() + 1;
			lRowNumEnd = lRowNumStart + o.getPageLineCount() - 1;

			switch ((int) o.getOrderParam())
			{
				case 1 : // 按合同编号排序
					strSQL_order += " order by bb.SCONTRACTCODE";
					break;
				case 2 : // 按贷款种类
					strSQL_order += " order by bb.NTYPEID";
					break;
				case 3 : // 按借款单位排序
					strSQL_order += " order by dd.SNAME";
					break;
				case 4 : // 按金额排序
					strSQL_order += " order by bb.MLOANAMOUNT";
					break;
				case 5 : // 按执行利率排序
					strSQL_order += " order by bb.mINTERESTRATE";
					break;
				case 6 : // 按期限排序
					strSQL_order += " order by bb.NINTERVALNUM";
					break;
				case 7 : // 按借款合同状态排序
					strSQL_order += " order by bb.NSTATUSID";
					break;
				case 8 : // 按更改日期
					strSQL_order += " order by bb.DTCHECK";
					break;
				default :
					strSQL_order += "";
			}

			if (o.getDesc() == Constant.PageControl.CODE_ASCORDESC_DESC)
				strSQL_order += " desc";

			// got the sql sentence
			if (o.getIsHaveNew() == 0)
			{
				strSQL_pre = "SELECT * FROM "
						+ " ( SELECT all_record.*,ROWNUM num FROM "
						+ "( SELECT distinct bb.ID, bb.SCONTRACTCODE, bb.NTYPEID,bb.nSubTypeID,dd.SNAME, bb.MLOANAMOUNT,  bb.NINTERVALNUM, bb.NSTATUSID FROM  loan_contractform bb, (select nContractID,nNextCheckUserID,nInputUserID,nStatusID,nvl(nNextCheckLevel,1) nNextCheckLevel from loan_PlanModifyForm  where nStatusID = "
						+ LOANConstant.LoanStatus.APPROVALING + " )  cc, CLIENT dd";
			}
			else
			{ 
				strSQL_pre = "SELECT * FROM "
						+ " ( SELECT all_record.*,ROWNUM num FROM "
						+ "( SELECT distinct bb.ID, bb.SCONTRACTCODE, bb.NTYPEID,bb.nSubTypeID,dd.SNAME, bb.MLOANAMOUNT,  bb.NINTERVALNUM,bb.NSTATUSID, cc.nContractID as cnContractID,cc.dtModifyPlanDate FROM  loan_contractform bb, (select nContractID,nNextCheckUserID,dtInput as dtModifyPlanDate,nStatusID,nvl(nNextCheckLevel,1) nNextCheckLevel from loan_planModifyForm  where nStatusID = "
						+ LOANConstant.LoanStatus.APPROVALING + ")  cc , CLIENT dd";
			}
			// 合同ID, 合同编号,贷款种类,借款单位,金额,执行利率,期限,更改日期,合同状态
			strSQL_con += " and bb.nTypeID != " + LOANConstant.LoanType.TX + " and bb.nTypeID !="+LOANConstant.LoanType.RZZL+" AND bb.NBORROWCLIENTID=dd.ID(+)";
			strSQL_con += strSQL_order;

			strSQL_con += ")all_record ";
			strSQL_con += ") WHERE num BETWEEN  " + lRowNumStart + " and " + lRowNumEnd;

			strSQL = strSQL_pre + strSQL_con;
			Log.print("2:" + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			// boolean isAdd = true;
			cDao = new ContractDao();
			while (rs != null && rs.next())
			{
				ContractInfo info = new ContractInfo();

				info.setContractID(rs.getLong("ID")); // 合同的ID
				info.setContractCode(rs.getString("SCONTRACTCODE")); // 借款合同编号
				info.setLoanTypeID(rs.getLong("NTYPEID")); // 贷款种类
				info.setSubTypeID(rs.getLong("nSubTypeID"));// 贷款子类
				info.setBorrowClientName(rs.getString("SNAME")); // 借款单位
				info.setLoanAmount(rs.getDouble("MLOANAMOUNT")); // 借款金额
				info.setInterestRate(cDao.getLatelyRate(0, rs.getLong("ID"), null).getLateRate()); // 执行利率
				info.setLateRateString(cDao.getLatelyRate(0, rs.getLong("ID"), null).getLateRateString());// 利率,字符串格式（可能是LIBOR）
				info.setIntervalNum(rs.getLong("NINTERVALNUM")); // 期限
				info.setStatusID(rs.getLong("NSTATUSID")); // 合同状态
				if (o.getIsHaveNew() == 1)
				{
					info.setPlanModifyDate(rs.getTimestamp("dtModifyPlanDate")); // 合同计划修改日期
				}
				info.setStatus(LOANConstant.ContractStatus.getName(info.getStatusID()));
				info.setPageCount(lPageCount); // 记录总的页面数
				v.addElement(info);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
			Log.print("success!");
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new RemoteException("error.select.findContractByMultiOption : " + e.toString());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}
		}
		return (v.size() > 0 ? v : null);
	}

	/**
	 * 根据ContractPayPlanVersion中的nContractID查找计划版本信息
	 * <p>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lContractID ContractPayPlanVersion中的lContractID
	 * 
	 * @param long lPageLineCount 每页页行数条件
	 * @param long lPageNo 第几页条件
	 * @param long lOrderParam 排序条件，根据此参数决定结果集排序条件
	 * @param long lDesc 升序或降序
	 * 
	 * @param long lUserID 用户标示，选择使用，可以用于核对是否与loanInfo中的inputuser是同一人
	 * @param long lOfficeID 办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 * 
	 * @return Collection
	 * 
	 * @exception Exception
	 */
	public Collection findPlanVerByContract(long lContractID, long lPageLineCount, long lPageNo, long lOrderParam,
			long lDesc, long lUserID, long lOfficeID) throws RemoteException
	{

		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSelect = null;
		String strSQL = null;
		ArrayList alist = new ArrayList();

		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		try
		{
			conn = Database.getConnection();

			// 计算记录总数
			strSelect = " select count(*) ";
			strSQL = " from loan_loanContractPlan aa,loan_PlanModifyForm cc,USERINFO bb1,USERINFO bb2 where aa.nContractID = "
					+ lContractID
					+ " and NPLANVERSION > 0 and aa.id = cc.nPlanID(+) and cc.NINPUTUSERID = bb1.ID(+) and cc.NNextCHECKUSERID = bb2.ID(+) and (cc.nStatusID > 0 or cc.nStatusID is null ) ";
			switch ((int) lOrderParam)
			{
				case 1 :
					strSQL += " order by aa.dtInputDate";
					break;
				case 2 :
					strSQL += " order by cc.DTINPUT";
					break;
				case 3 :
					strSQL += " order by cc.NSTATUSID";
					break;
				default :
					strSQL += " order by aa.dtInputDate";
			}
			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
				strSQL += " desc";

			Log.print(strSelect + strSQL);
			ps = conn.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lRecordCount = rs.getLong(1);
				Log.print("lRecordCount: " + lRecordCount);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0)
				lPageCount++;

			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			strSQL = " select cc.ID nModifyID,aa.ID ID,aa.nLoanID nLoanID,aa.nContractID nContractID,aa.nPlanVersion nPlanVersion,cc.nInputUserID nInputUserID,aa.dtInputDate dtInput,cc.nNextCheckUserID nNextCheckUserID,aa.nStatusID nStatusID,aa.nIsUsed nIsUsed,aa.nUserType nUserType,bb1.SNAME as SNAME1,bb2.SNAME as SNAME2,nvl(cc.nNextCheckLevel,1) nNextCheckLevel "
					+ strSQL;
			strSQL = "select * from ( select a.*,rownum num from ( " + strSQL + " ) a ) where num between  "
					+ lRowNumStart + " and " + lRowNumEnd;

			Log.print("ContractPayPlanVersionEJB: " + strSQL);
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			while (rs.next())
			{
				PlanVersionInfo le_info = new PlanVersionInfo();

				le_info.setID(rs.getLong("ID")); // 标识
				le_info.setModifyID(rs.getLong("nModifyID"));
				le_info.setLoanID(rs.getLong("nLoanID")); // 只有第一个版本关联申请书
				le_info.setContractID(rs.getLong("nContractID")); // 合同标识
				le_info.setPlanVersion(rs.getLong("nPlanVersion")); // 计划版本号
				le_info.setInputUserID(rs.getLong("nInputUserID")); // 录入用户标识
				le_info.setInput(rs.getTimestamp("dtInput")); // 录入日期
				le_info.setCheckUserID(rs.getLong("nNextCheckUserID")); // 复核用户标识
				le_info.setStatusID(rs.getLong("nStatusID")); // 状态
				le_info.setInputUserName(rs.getString("SNAME1")); // 提交人名称
				le_info.setCheckUserName(rs.getString("SNAME2")); // 复核人名称
				le_info.setIsUsed(rs.getLong("nIsUsed"));
				le_info.setUserType(rs.getLong("nUserType"));
				le_info.setNextCheckLevel(rs.getLong("nNextCheckLevel"));

				le_info.setPageCount(lPageCount); // 页数
				le_info.setCount(lRecordCount); // 记录数

				alist.add(le_info);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new RemoteException(e.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return (alist.size() > 0 ? alist : null);
	}

	/**
	 * @throws IRollbackException 
	 * 取消已提交的合同执行计划修改
	 * <p>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lPlanModifyID 合同执行计划修改记录标示
	 * @param long lUserID 修改人
	 * @return long 成功，返回值 == 1，失败，返回值 == -1
	 * @exception long
	 */
	public long cancelRepayPlan(long lPlanModifyID, long lUserID) throws RemoteException, IRollbackException
	{

		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;

		long lResultID = -1;

		String strSQL = "";

		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();
		try
		{
			conn = Database.getConnection();

			strSQL = "";
			lResultID = LOANConstant.PlanModifyStatus.REFUSE;
			strSQL = "update loan_planmodifyform  set nStatusID=" + LOANConstant.PlanModifyStatus.REFUSE + " where ID="
					+ lPlanModifyID;
			// lOBStatusID = OBNotes.CODE_OBLOAN_INSTR_STATUS_REFUSE;

			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.executeUpdate();
			ps.close();
			ps = null;

			strSQL = "update loan_loancontractplan set nPlanVersion = null where id = (select nPlanID from loan_planmodifyform where id = "
					+ lPlanModifyID + ")";

			ps = conn.prepareStatement(strSQL);
			ps.executeUpdate();
			ps.close();
			ps = null;

			conn.close();
			conn = null;
			// ////////////////////
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			//throw new RemoteException(ex.getMessage());
			//modified by mzh_fu 2007/08/07
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}

				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//throw new RemoteException(ex.getMessage());
				//modified by mzh_fu 2007/08/07
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return 1;
	}

	/**
	 * @throws IRollbackException 
	 * 审核更改的合同执行计划
	 * <p>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long nReviewContentID 审批内容类型ContractPayPlanVersion中的ID
	 * @param String sOpinion 审批意见
	 * @param long nUserID 审批人标示
	 * @param long nNextUserID 下一个审批人标示
	 * @param long lAction 审批，拒绝，修改，最后审批
	 * @return long 成功，返回值 == 1，失败，返回值 == -1
	 * @exception long
	 */
	public long checkRepayPlan(long lApprovalContentID, String sOpinion, long lUserID, long lNextUserID, long lAction,
			long lCurrencyID, long lOfficeID) throws RemoteException, IRollbackException
	{

		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setBusinessType("合同执行计划更改");
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
		PlanModifyDao planModifyDao = new PlanModifyDao();
		PlanModifyInfo planModifyInfo = planModifyDao.findPlanModifyByID(lApprovalContentID);
		long lContractID = planModifyInfo.getContractID() ; // modify by jbpan 20120626 
        // add by jbpan 20120607 end
		// 定义审核需要的常量
		long lModuleID = Constant.ModuleType.LOAN;
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		long lActionID = Constant.ApprovalAction.CONTRACT_PLAN;
		long lApprovalID = -1;
		long lStatusID = -1;
		long lResultID = -1;

		String strSQL = "";

		long lLevel = -1;

		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();

		try
		{
			logInfo.setTransCode(NameRef.getContractNoByID(lContractID));  //业务主键-审批流内容标识
			// 获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID, lActionID, lOfficeID, lCurrencyID);
			// 下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			// 审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);
			// ////////////////////
			conn = Database.getConnection();

			strSQL = "";
			if (lAction == 1) // 拒绝
			{
				//add by jbpan 20120607 操作日志-操作类型-拒绝
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				if("删除".equals(sOpinion)){
					logInfo.setActionTypeID(Constant.LoggerOfOperationType.DELETE);
				}
				// 逻辑删除
				appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID, lActionID, lOfficeID, lCurrencyID,
						lApprovalContentID, 2);
				
				lStatusID = Constant.RecordStatus.INVALID;
				lResultID = LOANConstant.PlanModifyStatus.REFUSE;
				strSQL = "update loan_planmodifyform  set nStatusID=" + LOANConstant.PlanModifyStatus.REFUSE
						+ " where ID=" + lApprovalContentID;
				// lOBStatusID = OBNotes.CODE_OBLOAN_INSTR_STATUS_REFUSE;

			}
			if (lAction == 2) // 审批
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
				{
					strSQL = "update loan_planmodifyform set nnextcheckuserid=" + lNextUserID + ", nNextCheckLevel="
							+ lLevel + " where ID=" + lApprovalContentID;
					Log.print("更新下一个审核级别（可越级）：" + lLevel);
				}
				else
				{
					strSQL = "update loan_planmodifyform set nnextcheckuserid=" + lNextUserID
							+ ", nNextCheckLevel=nNextCheckLevel+1 where ID=" + lApprovalContentID;
					Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
			}

			if (lAction == 3) // 审批&&最后
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.FINISH;
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				strSQL = "update loan_planmodifyform set nnextcheckuserid=-2" + ", nStatusID="
						+ LOANConstant.PlanModifyStatus.CHECK + " where ID=" + lApprovalContentID;

				// 审批完成后需要做的操作
				insertValues(lApprovalContentID);
			}
			if (lAction == 4) // 修改
			{
				lStatusID = Constant.RecordStatus.VALID;
				// 装态也置为已提交
				lResultID = Constant.ApprovalDecision.RETURN;
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
				strSQL = "update loan_planmodifyform set nnextcheckuserid=ninputuserid, nStatusID="
						+ LOANConstant.PlanModifyStatus.SUBMIT + ", nNextCheckLevel=1 where ID=" + lApprovalContentID;
			}

			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.executeUpdate();
			ps.close();
			ps = null;

			// //////////////////////////////////////////////////////////////////////////////////////////////////////////////
			if (lAction != 1) // 非拒绝
			{
				info.setModuleID(lModuleID);
				info.setLoanTypeID(lLoanTypeID);
				info.setActionID(lActionID);
				info.setApprovalContentID(lApprovalContentID);
				// info.setSerialID(lSerialID);
				info.setUserID(lUserID);
				info.setNextUserID(lNextUserID);
				info.setOpinion(sOpinion);
				info.setResultID(lResultID);
				info.setStatusID(lStatusID);
				info.setOfficeID(lOfficeID);
				info.setCurrencyID(lCurrencyID);
				appbiz.saveApprovalTracing(info);
			}
			else
			// 拒绝
			{
				strSQL = "update loan_loancontractplan set nPlanVersion = null where id = (select nPlanID from loan_planmodifyform where id = "
						+ lApprovalContentID + ")";

				ps = conn.prepareStatement(strSQL);
				ps.executeUpdate();
				ps.close();
				ps = null;
			}
			conn.close();
			conn = null;
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			// ////////////////////
		}
		catch (Exception ex)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(ex.getMessage()); //失败原因
			// add by jbpan 20120607 end
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			// add by jbpan 20120607 操作日志 start
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			// add by jbpan 20120607 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}

				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return 1;
	}

	/**
	 * 判断合同执行计划是否能够被指定的来源修改
	 * <p>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lID 合同标示
	 * @param long lSourceID 来源标示
	 * @param long lUserID 用户标示
	 * 
	 * @return Collection
	 * 
	 * @exception long
	 */
	public long findCanBeModify(long lContractID, long lSourceID, long lUserID) throws RemoteException
	{

		long lResult = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		long lStatusID = -1;
		long lisUsed = -1;
		long lUserType = -1;

		try
		{
			conn = Database.getConnection();

			sb
					.append("select NSTATUSID,NISUSED,NUSERTYPE from loan_loanContractPlan where NCONTRACTID = ? and NPLANVERSION = (select max(NPLANVERSION) from loan_loanContractPlan where NCONTRACTID = ?)");

			Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			ps.setLong(2, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lStatusID = rs.getLong(1);
				lisUsed = rs.getLong(2);
				lUserType = rs.getLong(3);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			if (lStatusID == 0 && lisUsed == 1 && lUserType != lSourceID)
			{ // 说明正在修改中而且不是菜单中的修改
				lResult = 1;
			}

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lResult;
	}

	// savePlanPro for autoSave()
	private long savePlanPro(long lID, long lLoanID, long lContractID, Timestamp tsPlanDate, int nLoanOrRepay,
			double dAmount, String strType, long lUserType, long lInputUserID, Timestamp tsInputDate,
			int nAddANewVersion, long lOfficeID) throws Exception
	{

		long lResult = -1;
		long lVersionID = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		ArrayList alist = new ArrayList();
		RepayPlanInfo rp_info = new RepayPlanInfo();
		int nIndex = 1;

		try
		{
			conn = Database.getConnection();

			if (nAddANewVersion == 1)
			{

				// 如果没有申请的空版本号则自动取CONTRACTPAYPLANVERSION标识
				sb.append("select nvl(max(id)+1,1) from loan_loanContractPlan");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				rs = ps.executeQuery();
				if (rs.next())
				{
					lVersionID = rs.getLong(1);
				}
				Log.print("loan_loanContractPlan.lVersionID: " + lVersionID);
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);

				// 要新增一条空版本CONTRACTPAYPLANVERSION记录
				sb
						.append("insert into loan_loanContractPlan (ID,nLoanID, NCONTRACTID,  NSTATUSID, nIsUsed, nUserType,dtInputDate ) values (?,0,?,?,1,?,sysdate)");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				nIndex = 1;
				ps.setLong(nIndex++, lVersionID);
				ps.setLong(nIndex++, lContractID);
				ps.setLong(nIndex++, Constant.RecordStatus.INVALID);
				ps.setLong(nIndex++, lUserType);
				if (ps.executeUpdate() < 1)
				{
					Log.print("error.update.loan_loanContractPlan");
				}
				Log.print("updated.loan_loanContractPlan.ID: " + lVersionID);
				ps.close();
				ps = null;
				sb.setLength(0);

				// 新增用户原始计划
				sb
						.append("insert into  loan_loanContractPlanDetail (ID, nContractPlanID, DTPLANDATE,  NPAYTYPEID, MAMOUNT, STYPE, DTMODIFYDATE) values (nvl((select max(id) from loan_loanContractPlanDetail),0)+1,?,?,?,?,?,sysdate)");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lVersionID);
				ps.setTimestamp(2, tsPlanDate);
				ps.setLong(3, (long) nLoanOrRepay);
				ps.setDouble(4, dAmount);
				ps.setString(5, strType);
				if (ps.executeUpdate() < 1)
				{
					// throw new Exception("error.update.CONTRACTPAYPLAN");
					Log.print("error.update.loan_loanContractPlanDetail");
				}
				lResult = lVersionID;
				ps.close();
				ps = null;
				sb.setLength(0);
			}
			if (nAddANewVersion == 0)
			{

				// 查询CONTRACTPAYPLANVERSION的ID空版 本
				sb.append("select ID from loan_loanContractPlan where nContractID = ? and NPLANVERSION is null");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lContractID);
				rs = ps.executeQuery();
				while (rs.next())
				{
					lVersionID = rs.getLong(1);
				}
				Log.print("loan_loanContractPlan.lVersionID: " + lVersionID);
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);

				sb
						.append("insert into  loan_loanContractPlanDetail (ID, nContractPlanID, DTPLANDATE, NPAYTYPEID, MAMOUNT, STYPE, DTMODIFYDATE) values (nvl((select max(id) from loan_loanContractPlanDetail),0)+1,?,?,?,?,?,sysdate)");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lVersionID);
				ps.setTimestamp(2, tsPlanDate);
				ps.setLong(3, (long) nLoanOrRepay);
				ps.setDouble(4, dAmount);
				ps.setString(5, strType);
				lResult = ps.executeUpdate();
				ps.close();
				ps = null;
				sb.setLength(0);
				lResult = lVersionID;
			}
			conn.close();
			conn = null;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new Exception(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
		return lResult;
	}

	/**
	 * 更改计划后写入计划文本 <br>
	 * 如果状态不是未复核，返回错误信息
	 * 
	 * @param lContractID 合同标识
	 * @return 返回值lResult为-3表明没有写执行计划，为-2表明状态不对失败，为-1为操作失败，成功返回1
	 * @writen by wli
	 */
	private void WritePlanIntoFile(long lContractID) throws Exception
	{

		// 操作步骤
		// 1、取得批量号
		// 2、在ClientType增加记录

		Connection conn = null;
		PreparedStatement ps = null;
		PreparedStatement psBatch = null;
		ResultSet rsBatch = null;

		String strSQL = null;
		String strSQLBatch = null;
		long lStatusID = -1; // 状态号
		long lResult = 1; // 提交状态标识

		long lTypeID = 0; // 合同类型
		long lLoanID = 0; // 借款LoanInfo的ID
		long lIntervalNum = 0; // 贷款期限
		long lIsCircle = 0; // 是否循环贷款
		String sDocName = ""; // 合同文本名称
		String sSysDate = DataFormat.getDateString(); // 取系统当前日期
		String sSysYear = sSysDate.substring(0, 4); // 取系统年
		String sSysMonth = sSysDate.substring(5, 7); // 取系统月
		String sSysDay = sSysDate.substring(8, 10); // 取系统日
		try
		{
			conn = Database.getConnection();

			// 如下是写合同开始日期到合同文本中
			// 1. 从LoanInfo表得到该合同ID的nTypeID
			// 2. 判断此合同是否是“信托流动资金贷款”--s7.txt或“信托固定资金贷款”--s9.txt
			// “股份信托流动资金贷款”--s7.txt或“股份信托固定资金贷款”--s9.txt
			// “外汇信托流动资金贷款--s10.txt”或“外汇信托固定资金贷款--s10.txt”
			// 3. Notes.CODE_CONTRACT_TYPE_LOAN

			// **** 注意同时还要将所有合同的执行计划给更新一遍

			strSQL = "SELECT LOANINFO.NISCIRCLE, LOANINFO.ID, LOANINFO.NTYPEID,LOANINFO.NINTERVALNUM, LOANINFO.NINTERVALNUM, CONTRACTCONTENT.SDOCNAME "
					+ " FROM loan_ContractForm contractinfo, loan_loanForm loaninfo, loan_CONTRACTCONTENT contractcontent"
					+ " WHERE CONTRACTINFO.NLOANID=LOANINFO.ID "
					+ " AND CONTRACTCONTENT.NCONTRACTID=CONTRACTINFO.ID AND CONTRACTCONTENT.NCONTRACTTYPEID= "
					+ LOANConstant.ContractType.LOAN + " AND ContractInfo.ID=" + lContractID;
			ps = conn.prepareStatement(strSQL);
			// ************************************
			// test set, wait to del
			Log.print("************* 提交合同 submitContract() Test by LW " + strSQL);
			// ************************************
			rsBatch = ps.executeQuery();
			if (rsBatch != null && rsBatch.next())
			{
				sDocName = rsBatch.getString("SDOCNAME");
				lIntervalNum = rsBatch.getLong("NINTERVALNUM");
				lTypeID = rsBatch.getLong("NTYPEID");
				lLoanID = rsBatch.getLong("ID");
				lIsCircle = rsBatch.getLong("NISCIRCLE");
				if (rsBatch != null)
				{
					rsBatch.close();
					rsBatch = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
			}

			if (rsBatch != null)
			{
				rsBatch.close();
				rsBatch = null;
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}

			String sFileContent = ""; // 暂存文件内容
			String sFileContentArray[]; // 搁放各个合同文本
			String sPayPlanTable = ""; // 一般计划
			String sPayPlanTableRepay = ""; // 合同执行计划(还款）
			String sPayPlanTablePay = ""; // 合同执行计划(借款)
			int lFileNum = 0; // 当页文本填入的个数
			// 新的合同默认值中的执行计划 杨帆改
			sPayPlanTable = getPayPlanTableIV(lLoanID);
			sPayPlanTableRepay = getPayPlanTableIV(lLoanID, LOANConstant.PlanType.REPAY);
			sPayPlanTablePay = getPayPlanTableIV(lLoanID, LOANConstant.PlanType.PAY);
			Log.print("sPayPlantable===============" + sPayPlanTable);
			Log.print("sPayPlantableRepay===============" + sPayPlanTableRepay);
			Log.print("sPayPlantablePay===============" + sPayPlanTablePay);
			Log.print("sDocName================================" + sDocName);
			//
			if (sDocName == null || sDocName.length() == 0)
			{
				Log.print("outoutoutoutotutou");
				return;
			}
			// 根据合同类型操作相应的合同文本，填写相应的起始日期到合同文本中
			switch ((int) (lTypeID))
			{
				case (int) LOANConstant.LoanType.ZY :
					/*
					 * lFileNum = 13; sFileContent = DocMng.getFileContent(sDocName, 5); //得到第5页的合同默认值 sFileContentArray =
					 * getFileContentArray(lFileNum + 1, sFileContent); sFileContentArray[lFileNum] = sPayPlanTable;
					 * //注意是最后一个空格要重新写一遍执行计划table sFileContent = uniteFileContentArray(sFileContentArray);
					 * //将字符串数组合并为一个大字符串 sDocName = DocMng.saveContent(sDocName, 5, sFileContent);
					 */
					break;

			}
			// 提交记录
			// 如果是委托类的合同，则不需要更新合同的起始日期，终止日期 --外汇部分的委托合同除外
			/**
			 * if(!(lTypeID==Notes.CODE_RECORD_LOANTYPE_YBWTLDZJ || lTypeID==Notes.CODE_RECORD_LOANTYPE_YBWTGDZC ||
			 * lTypeID==Notes.CODE_RECORD_LOANTYPE_GFWTLDZJ || lTypeID==Notes.CODE_RECORD_LOANTYPE_GFWTGDZC )) {
			 * 
			 * strSQL = "UPDATE LOANINFO SET DTSTARTDATE=?, DTENDDATE=? WHERE ID="+lLoanID; ps =
			 * conn.prepareStatement(strSQL); ps.setTimestamp(1,dtStart);// 设置为合同起始日期 ps.setTimestamp(2,dtEnd);//
			 * 设置为合同起始日期 ps.executeUpdate(); if(ps!=null) { ps.close(); ps=null; } }
			 */

			// 如下是写合同开始日期到保证合同中 杨帆加
			/**
			 * strSQL="SELECT LOANINFO.NISCIRCLE, LOANINFO.ID, LOANINFO.NTYPEID,LOANINFO.NINTERVALNUM,
			 * LOANINFO.NINTERVALNUM, CONTRACTCONTENT.SDOCNAME FROM CONTRACTINFO, LOANINFO, CONTRACTCONTENT WHERE
			 * CONTRACTINFO.NLOANID=LOANINFO.ID " +" AND CONTRACTCONTENT.NCONTRACTID=CONTRACTINFO.ID AND
			 * CONTRACTCONTENT.NCONTRACTTYPEID= "+Notes.CODE_CONTRACT_TYPE_ASSURE+" AND CONTRACTINFO.ID="+lContractID;
			 * ps=conn.prepareStatement(strSQL); rsBatch=ps.executeQuery(); while(rsBatch!=null && rsBatch.next()) {
			 * sDocName=rsBatch.getString("SDOCNAME"); lIntervalNum=rsBatch.getLong("NINTERVALNUM");
			 * lTypeID=rsBatch.getLong("NTYPEID"); lLoanID=rsBatch.getLong("ID");
			 * lIsCircle=rsBatch.getLong("NISCIRCLE");
			 * 
			 * //更新保证合同第一页的签订合同日期 //lFileNum=32; //这是关键，今后可能会变化，注意更新 //sFileContent=DocMng.getFileContent(sDocName,1);
			 * //** 在第1页填写相应的日期 //sFileContentArray=getFileContentArray(lFileNum,sFileContent); //得到字符串数组形式的合同文本
			 * //sFileContentArray[23]=sSysYear; //得到字符形式的合同签订日期 //sFileContentArray[24]=sSysMonth;
			 * //sFileContentArray[25]=sSysDay; //sFileContent=uniteFileContentArray(sFileContentArray);
			 * //将字符串数组合并为一个大字符串 //sDocName=DocMng.saveContent(sDocName,1,sFileContent);
			 * 
			 * //更新保证合同第四页的签订合同日期 // lFileNum=18; //这是关键，今后可能会变化，注意更新 //sFileContent=DocMng.getFileContent(sDocName,4);
			 * //** 在第4页填写相应的日期 //sFileContentArray=getFileContentArray(lFileNum,sFileContent); //得到字符串数组形式的合同文本
			 * //sFileContentArray[2]=sSysYear; //得到字符形式的合同签订日期 //sFileContentArray[3]=sSysMonth;
			 * //sFileContentArray[4]=sSysDay; //sFileContentArray[7]=sSysYear; //得到字符形式的合同签订日期
			 * //sFileContentArray[8]=sSysMonth; //sFileContentArray[9]=sSysDay; //sFileContentArray[12]=sSysYear;
			 * //得到字符形式的合同签订日期 //sFileContentArray[13]=sSysMonth; //sFileContentArray[14]=sSysDay;
			 * //sFileContent=uniteFileContentArray(sFileContentArray); //将字符串数组合并为一个大字符串
			 * //sDocName=DocMng.saveContent(sDocName,4,sFileContent); } if(rsBatch!=null) { rsBatch.close();
			 * rsBatch=null; } if(ps!=null) { ps.close(); ps=null; }
			 */

			/**
			 * strSQL = "UPDATE CONTRACTINFO SET NSTATUSID=? WHERE ID="+lContractID; ps = conn.prepareStatement(strSQL);
			 * ps.setLong(1,Notes.CODE_CONTRACT_STATUS_SUBMIT);// 设置为提交状态
			 * 
			 * lResult = ps.executeUpdate(); if(lResult<=0) { lResult=-1; //失败 }else { lResult=1;//成功 } if(ps!=null) {
			 * ps.close(); ps = null; } if(conn!=null) { conn.close(); conn=null; }
			 */
		}
		catch (Exception e)
		{
			throw new Exception(e.toString());
		}
		finally
		{
			try
			{
				if (rsBatch != null)
				{
					rsBatch.close();
					rsBatch = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception e)
			{
				throw new Exception(e.getMessage());
			}
		}

		return;
	}

	private String getPayPlanTableIV(long lContractID) throws Exception
	{

		String sTable = "";
		long lVersionID = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		ArrayList alist = new ArrayList();
		ArrayList alist2 = new ArrayList();
		RepayPlanInfo rp_info = new RepayPlanInfo();
		// RepayPlanInfo rp_info2 = new RepayPlanInfo();

		try
		{
			conn = Database.getConnection();
			sb.append("select ID from loan_loanContractPlan where nContractID = ?");
			// Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lVersionID = rs.getLong("ID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			// Log.print("ejb-------------lVersionID: " + lVersionID);

			if (lVersionID < 1)
			{ // 无执行计划
				sTable = "";
			}
			else
			{
				sb
						.append("select aa.*,bb.MPAYTOTAL from (select * from loan_loanContractPlanDetail where nContractPlanID = ?  and NPAYTYPEID = ? order by DTPLANDATE)aa, ");
				sb
						.append("(select nContractPlanID,sum(MAMOUNT) as MPAYTOTAL from loan_loanContractPlanDetail where nContractPlanID = ? and NPAYTYPEID = ? group by nContractPlanID) bb");
				// Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lVersionID);
				ps.setLong(2, LOANConstant.PlanType.PAY);
				ps.setLong(3, lVersionID);
				ps.setLong(4, LOANConstant.PlanType.PAY);
				rs = ps.executeQuery();
				while (rs.next())
				{
					rp_info = new RepayPlanInfo();
					rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
					rp_info.dAmount = rs.getDouble("MAMOUNT");
					rp_info.dPayCounter = rs.getDouble("MPAYTOTAL");
					alist.add(rp_info);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				sb
						.append("select aa.*,bb.MREPAYTOTAL from (select * from loan_loanContractPlanDetail where nContractPlanID = ?  and NPAYTYPEID = ? order by DTPLANDATE)aa, ");
				sb
						.append("(select nContractPlanID,sum(MAMOUNT) as MREPAYTOTAL from loan_loanContractPlanDetail where nContractPlanID = ? and NPAYTYPEID = ? group by nContractPlanID) bb");
				// Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lVersionID);
				ps.setLong(2, LOANConstant.PlanType.REPAY);
				ps.setLong(3, lVersionID);
				ps.setLong(4, LOANConstant.PlanType.REPAY);
				rs = ps.executeQuery();
				while (rs.next())
				{
					rp_info = new RepayPlanInfo();
					rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
					rp_info.dAmount = rs.getDouble("MAMOUNT");
					rp_info.dRePayCounter = rs.getDouble("MREPAYTOTAL");
					alist2.add(rp_info);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
			}
			if (alist.size() == 0 && alist2.size() == 0)
			{ // 无计划明细
				sTable = "";
			}
			else
			{
				sTable = "<table border=0 width='100%'><tr>";

				sTable += "         <td width=50% valign=top>";
				sTable += "<table border=1 width='100%'>";
				sTable += "     <tr><td colspan=2 align=middle> 放款计划</td></tr> ";
				sTable += "     <tr> ";
				sTable += "       <td width=50% align=middle > 日期 </td>";
				sTable += "       <td width=50% align=middle > 金额 </td>";
				sTable += "     </tr>";
				Iterator iter = alist.iterator();
				while (iter.hasNext())
				{
					rp_info = (RepayPlanInfo) iter.next();
					sTable += "		<tr> ";
					sTable += "       <td width=50% align=middle > "
							+ DataFormat.getChineseDateString(rp_info.tsPlanDate) + " </td>";
					sTable += "       <td width=50% align=middle > " + DataFormat.formatListAmount(rp_info.dAmount)
							+ " </td>";
					sTable += "     </tr>";
				}
				sTable += "		<tr> ";
				sTable += "       <td width=50% align=middle > 合计： </td>";
				sTable += "       <td width=50%  align=middle > " + DataFormat.formatListAmount(rp_info.dPayCounter)
						+ " </td>";
				sTable += "     </tr>";

				sTable += "</table>";
				sTable += "</td>";

				sTable += "         <td width=50% valign=top>";
				sTable += "<table border=1 width='100%'>";
				sTable += "     <tr><td colspan=2 align=middle> 还款计划 </td></tr> ";
				sTable += "     <tr> ";
				sTable += "       <td width=50% align=middle > 日期 </td>";
				sTable += "       <td width=50% align=middle > 金额 </td>";
				sTable += "     </tr>";
				iter = alist2.iterator();
				// Log.print("ejb------------------5");
				while (iter.hasNext())
				{
					rp_info = (RepayPlanInfo) iter.next();
					sTable += "		<tr> ";
					sTable += "       <td width=50% align=middle > "
							+ DataFormat.getChineseDateString(rp_info.tsPlanDate) + " </td>";
					sTable += "       <td width=50% align=middle > " + DataFormat.formatListAmount(rp_info.dAmount)
							+ " </td>";
					sTable += "     </tr>";
				}
				sTable += "		<tr> ";
				sTable += "       <td width=50% align=middle > 合计： </td>";
				sTable += "       <td width=50%  align=middle > " + DataFormat.formatListAmount(rp_info.dRePayCounter)
						+ " </td>";
				sTable += "     </tr>";

				sTable += "</table>";
				sTable += "</td>";

				sTable += "     </tr></table>";
			}

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new Exception(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
		// // Log.print("ejb--------------------get_sTable: " + sTable);
		return sTable;
	}

	// 没有版本的计划，审核时用
	// ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
	// 注意该方法在ContractEJB中的submit合同的方法中调用了，所以如果该方法有变动，
	// 请一定要同时改合同EJB中的该方法！！！杨帆增 1.3
	private String getPayPlanTableIV(long lContractID, long lPayType) throws Exception
	{

		String sTable = "";
		long lVersionID = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		ArrayList alist = new ArrayList();
		ArrayList alist2 = new ArrayList();
		RepayPlanInfo rp_info = new RepayPlanInfo();
		// RepayPlanInfo rp_info2 = new RepayPlanInfo();

		try
		{
			conn = Database.getConnection();
			sb.append("select ID from loan_loanContractPlan where nContractID = ?");
			Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lVersionID = rs.getLong("ID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			if (lVersionID < 1)
			{ // 无执行计划
				sTable = "";
			}
			else
			{
				sb
						.append("select aa.*,bb.MPAYTOTAL from (select * from loan_loanContractPlanDetail where nContractPlanID = ?  and NPAYTYPEID = ? order by DTPLANDATE)aa, ");
				sb
						.append("(select nContractPlanID,sum(MAMOUNT) as MPAYTOTAL from loan_loanContractPlanDetail where nContractPlanID = ? and NPAYTYPEID = ? group by nContractPlanID) bb");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lVersionID);
				ps.setLong(2, LOANConstant.PlanType.PAY);
				ps.setLong(3, lVersionID);
				ps.setLong(4, LOANConstant.PlanType.PAY);
				rs = ps.executeQuery();
				while (rs.next())
				{
					rp_info = new RepayPlanInfo();
					rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
					rp_info.dAmount = rs.getDouble("MAMOUNT");
					rp_info.dPayCounter = rs.getDouble("MPAYTOTAL");
					alist.add(rp_info);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				sb
						.append("select aa.*,bb.MREPAYTOTAL from (select * from loan_loanContractPlanDetail where nContractPlanID = ?  and NPAYTYPEID = ? order by DTPLANDATE)aa, ");
				sb
						.append("(select nContractPlanID,sum(MAMOUNT) as MREPAYTOTAL from loan_loanContractPlanDetail where nContractPlanID = ? and NPAYTYPEID = ? group by nContractPlanID) bb");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lVersionID);
				ps.setLong(2, LOANConstant.PlanType.REPAY);
				ps.setLong(3, lVersionID);
				ps.setLong(4, LOANConstant.PlanType.REPAY);
				rs = ps.executeQuery();
				while (rs.next())
				{
					rp_info = new RepayPlanInfo();
					rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
					rp_info.dAmount = rs.getDouble("MAMOUNT");
					rp_info.dRePayCounter = rs.getDouble("MREPAYTOTAL");
					alist2.add(rp_info);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
			}
			if (alist.size() == 0 && alist2.size() == 0)
			{ // 无计划明细
				sTable = "";
			}
			else
			{
				sTable = "<table border=0 width='100%'><tr>";
				sTable += "         <td width=100% valign=top>";
				if (lPayType == LOANConstant.PlanType.PAY)
				{
					sTable += "<table border=1 width='100%'>";
					// sTable += " <tr><td colspan=2 align=middle> 放款计划</td></tr> ";
					sTable += "     <tr> ";
					sTable += "       <td width=50% align=middle > 日期 </td>";
					sTable += "       <td width=50% align=middle > 金额 </td>";
					sTable += "     </tr>";
					Iterator iter = alist.iterator();
					while (iter.hasNext())
					{
						rp_info = (RepayPlanInfo) iter.next();
						sTable += "		<tr> ";
						sTable += "       <td width=50% align=middle > "
								+ DataFormat.getChineseDateString(rp_info.tsPlanDate) + " </td>";
						sTable += "       <td width=50% align=middle > " + DataFormat.formatListAmount(rp_info.dAmount)
								+ " </td>";
						sTable += "     </tr>";
					}
					sTable += "		<tr> ";
					sTable += "       <td width=50% align=middle > 合计： </td>";
					sTable += "       <td width=50%  align=middle > "
							+ DataFormat.formatListAmount(rp_info.dPayCounter) + " </td>";
					sTable += "     </tr>";
				}
				if (lPayType == LOANConstant.PlanType.REPAY)
				{
					// sTable += " <td width=100% valign=top>";
					sTable += "<table border=1 width='100%'>";
					// sTable += " <tr><td colspan=2 align=middle> 还款计划 </td></tr> ";
					sTable += "     <tr> ";
					sTable += "       <td width=50% align=middle > 日期 </td>";
					sTable += "       <td width=50% align=middle > 金额 </td>";
					sTable += "     </tr>";
					Iterator iter = alist2.iterator();
					Log.print("ejb------------------5");
					while (iter.hasNext())
					{
						rp_info = (RepayPlanInfo) iter.next();
						sTable += "		<tr> ";
						sTable += "       <td width=50% align=middle > "
								+ DataFormat.getChineseDateString(rp_info.tsPlanDate) + " </td>";
						sTable += "       <td width=50% align=middle > " + DataFormat.formatListAmount(rp_info.dAmount)
								+ " </td>";
						sTable += "     </tr>";
					}
					sTable += "		<tr> ";
					sTable += "       <td width=50% align=middle > 合计： </td>";
					sTable += "       <td width=50%  align=middle > "
							+ DataFormat.formatListAmount(rp_info.dRePayCounter) + " </td>";
					sTable += "     </tr>";
				}
				sTable += "</table>";
				sTable += "</td>";

				sTable += "     </tr></table>";
			}

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new Exception(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
		// Log.print("ejb--------------------get_sTable: " + sTable);
		return sTable;
	}

	public static void main(String[] str)
	{

		RepayPlanEJB ejb = new RepayPlanEJB();

		Timestamp tsInputDate = null;
		Timestamp tsDate1 = null;
		Timestamp tsDate2 = null;
		Timestamp tsDate3 = null;
		Timestamp tsDate4 = null;

		try
		{
			tsInputDate = DataFormat.getDateTime(2003, 10, 16, 0, 0, 0);
			tsDate1 = DataFormat.getDateTime(2003, 11, 14, 0, 0, 0);
			tsDate2 = DataFormat.getDateTime(2003, 11, 14, 0, 0, 0);
			tsDate3 = DataFormat.getDateTime(2004, 10, 14, 0, 0, 0);
			tsDate4 = DataFormat.getDateTime(2004, 10, 14, 0, 0, 0);

			/*
			 * //自动安排 PlanAssignInfo o = new PlanAssignInfo(); o.setContractID(1); o.setInputDate(tsInputDate);
			 * o.setLoanEndDate(tsDate2); o.setLoanStartDate(tsDate1); o.setOfficeID(1); o.setPayType(1);
			 * o.setRepayEndDate(tsDate4); o.setRepayStartDate(tsDate3); o.setRepayType(1); o.setType("本金");
			 * o.setUserID(3); ejb.autosavePlan(o);
			 * 
			 * //查询合同 QueryContractInfo o = new QueryContractInfo(); ejb.findContractByMultiOption( o);
			 * 
			 * //根据合同查询计划版本
			 * 
			 * ejb.findPlanByVer(9,10,1,1,1,3,1);
			 * 
			 * ejb.findPlanByContract(2, 10,1,1, 1);
			 * 
			 * PlanDetailInfo o = new PlanDetailInfo(); o.setID(0); o.setLoanID(0); o.setContractID(2);
			 * o.setPlanDate(null); o.setLoanOrRepay(1); o.setAmount(12); o.setType("本金"); o.setInputUserID(1);
			 * o.setInputDate(null); o.setExtendApplyID(-1); o.setOverdueApplyID(-1);
			 * o.setIsOverdue(Constant.YesOrNo.NO); o.setUserTypeID(LOANConstant.PlanModifyType.MENU);
			 * o.setAddANewVersion(0); o.setOfficeID(1); long lResult = ejb.savePlan(o); System.out.println("result is " +
			 * lResult);
			 * 
			 * ejb.findPlanVerByContract(2, 10, 1, 1, 1, 1, 1);
			 * 
			 * //查询合同 QueryContractInfo o = new QueryContractInfo(); //o.setContractIDFrom(1);
			 * //o.setContractIDTo(1000000); //o.setAmountFrom(1); //o.setAmountTo(1000000000); //o.setClientID(1);
			 * o.setCurrencyID(1); o.setDesc(1); o.setOfficeID(1); o.setOrderParam(1); o.setPageLineCount(10);
			 * o.setPageNo(1); //o.setPeriod(12); o.setPlanStatusID(0); //o.setUpdateFrom(tsDate1);
			 * //o.setUpdateTo(tsDate1); o.setUserID(4); o.setIsHaveNew(1); ejb.findContractByMultiOption(o);
			 */
			Collection c = (Collection) ejb.findPlanByVer(679, 10, 1, 1, 1, 3, 1);
			Iterator it = c.iterator();
			if (it != null & it.hasNext())
			{
				RepayPlanInfo rp_info = (RepayPlanInfo) it.next();
				System.out.println(" - " + rp_info.tsPlanDate);
			}
			else
			{
				System.out.println("null --");
			}

		}
		catch (Exception e)
		{
			Log.print(e.toString());
		}

	}

	// 查是否有版本，参数传contractpayplanversion.ID
	private long getPlanVersion(long lID) throws RemoteException
	{

		long lResult = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try
		{
			conn = Database.getConnection();
			sb
					.append("select max(bb.NPLANVERSION) from loan_loancontractplan aa,loan_loancontractplan bb where bb.NCONTRACTID = aa.NCONTRACTID and aa.ID = ?");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lResult = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			sb.setLength(0);

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lResult;
	}

	// 审批完成后需要做的操作
	private void insertValues(long lPlanModifyID) throws Exception
	{

		PreparedStatement ps = null;
		Connection conn = null;
		long lResult = -1;
		String strSQL = "";
		try
		{
			conn = Database.getConnection();

			strSQL = "UPDATE loan_loanContractPlan SET NSTATUSID =?,nIsUsed=? WHERE ID = ( select nPlanID from loan_planModifyForm where id = ?)";
			System.out.println("the sql is : " + strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, 1);
			ps.setLong(2, Constant.YesOrNo.NO);
			ps.setLong(3, lPlanModifyID);

			lResult = ps.executeUpdate();
			if (lResult <= 0)
			{
				lResult = -1; // 失败
			}
			else
			{
				lResult = 1; // 成功
			}
			ps.close();
			ps = null;

			conn.close();
			conn = null;

			/*
			 * //更新网银记录 strSQL = " update OB_PlanVersion set nStatusID=? where ID=(select ID from OB_PlanVersion where
			 * nInID = ?) "; ps = conn.prepareStatement(strSQL); System.out.println("the sql is : " + strSQL + " -- " +
			 * lID); ps.setLong(1, OBNotes.CODE_OBLOAN_INSTR_STATUS_EXAMINE); ps.setLong(2, lID); ps.executeUpdate();
			 * ps.close(); ps = null;
			 */
		}
		catch (Exception e)
		{
			throw new Exception(e.getMessage());
		}
		finally
		{
			try
			{
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
	}

	
	//	 提交审批后需要做的操作
	private void insertInitAppValues(long lPlanModifyID) throws Exception
	{

		PreparedStatement ps = null;
		Connection conn = null;
		long lResult = -1;
		String strSQL = "";
		try
		{
			conn = Database.getConnection();

			strSQL = "UPDATE loan_loanContractPlan SET NSTATUSID =?,nIsUsed=? WHERE ID = ( select nPlanID from loan_planModifyForm where id = ?)";
			System.out.println("the sql is : " + strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, 2);
			ps.setLong(2, Constant.YesOrNo.NO);
			ps.setLong(3, lPlanModifyID);

			lResult = ps.executeUpdate();
			if (lResult <= 0)
			{
				lResult = -1; // 失败
			}
			else
			{
				lResult = 1; // 成功
			}
			ps.close();
			ps = null;

			conn.close();
			conn = null;

			/*
			 * //更新网银记录 strSQL = " update OB_PlanVersion set nStatusID=? where ID=(select ID from OB_PlanVersion where
			 * nInID = ?) "; ps = conn.prepareStatement(strSQL); System.out.println("the sql is : " + strSQL + " -- " +
			 * lID); ps.setLong(1, OBNotes.CODE_OBLOAN_INSTR_STATUS_EXAMINE); ps.setLong(2, lID); ps.executeUpdate();
			 * ps.close(); ps = null;
			 */
		}
		catch (Exception e)
		{
			throw new Exception(e.getMessage());
		}
		finally
		{
			try
			{
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
	}

//	 审批拒绝需要做的操作
	private void insertAppRefValues(long lPlanModifyID) throws Exception
	{

		PreparedStatement ps = null;
		Connection conn = null;
		long lResult = -1;
		String strSQL = "";
		try
		{
			conn = Database.getConnection();

			strSQL = "UPDATE loan_loanContractPlan SET NSTATUSID =?,nIsUsed=? WHERE ID = ( select nPlanID from loan_planModifyForm where id = ?)";
			System.out.println("the sql is : " + strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, 0);
			ps.setLong(2, Constant.YesOrNo.NO);
			ps.setLong(3, lPlanModifyID);

			lResult = ps.executeUpdate();
			if (lResult <= 0)
			{
				lResult = -1; // 失败
			}
			else
			{
				lResult = 1; // 成功
			}
			ps.close();
			ps = null;

			conn.close();
			conn = null;

			/*
			 * //更新网银记录 strSQL = " update OB_PlanVersion set nStatusID=? where ID=(select ID from OB_PlanVersion where
			 * nInID = ?) "; ps = conn.prepareStatement(strSQL); System.out.println("the sql is : " + strSQL + " -- " +
			 * lID); ps.setLong(1, OBNotes.CODE_OBLOAN_INSTR_STATUS_EXAMINE); ps.setLong(2, lID); ps.executeUpdate();
			 * ps.close(); ps = null;
			 */
		}
		catch (Exception e)
		{
			throw new Exception(e.getMessage());
		}
		finally
		{
			try
			{
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
	}
	/**
	 * 新增合同执行计划修改记录
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>新增或修改合同执行计划修改记录</b>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2003, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param PlanModifyInfo o 计划修改对象
	 * 
	 * @return long 新增或修改成功，返回值 == 1，失败，返回值 == 0。主要用于修改信息
	 * 
	 * @exception Exception
	 */
	private long savePlanModify(PlanModifyInfo o) throws RemoteException
	{

		long lResult = -1;
		long lID = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		int nIndex = 1;

		try
		{
			conn = Database.getConnection();

			// 要新增一条loan_PlanModifyForm记录
			sb
					.append("insert into loan_PlanModifyForm (ID,NCURRENCYID, NOFFICEID, NCONTRACTID,nPlanID, NINPUTUSERID, DTINPUT, NNextCHECKUSERID,  NSTATUSID, nNextCheckLevel) values ((select nvl(max(id),0) + 1 from loan_PlanModifyForm ),?,?,?,?,?,sysdate,?,?,1)");
			Log.print(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			nIndex = 1;
			ps.setLong(nIndex++, o.getCurrencyID());
			ps.setLong(nIndex++, o.getOfficeID());
			ps.setLong(nIndex++, o.getContractID());
			ps.setLong(nIndex++, o.getPlanID());
			ps.setLong(nIndex++, o.getInputUserID());
			ps.setLong(nIndex++, o.getInputUserID());
			//现在调用审批流，把状态更改为已保存
			ps.setLong(nIndex++, LOANConstant.PlanModifyStatus.SUBMIT);

			lResult = ps.executeUpdate();
			if (lResult < 1)
			{
				Log.print("error.update.loan_PlanModifyForm");
			}
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			sb.setLength(0);

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		// 写入计划
		return lResult;
	}

	/**
	 * 修改合同执行计划并提交审批 Create Date: 2007-7-9
	 * 
	 * @param RepayPlanInfo 合同信息
	 * @return long 如大于0表示成功，小于等于0表示失败
	 * @exception Exception
	 */
	public long commitAndApprovalInit(PlanModifyInfo info) throws RemoteException, IRollbackException
	{

		long lResult = -1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.INITAPPROVAL);
		logInfo.setBusinessType("合同执行计划更改");
        // add by jbpan 20120607 end
		try
		{
			logInfo.setTransCode(NameRef.getContractNoByID(info.getContractID()));  //操作日志-合同编号
			// info.setNextCheckLevel(1); 
			RepayPlanDao repayPlanDao = new RepayPlanDao();
			InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
 
			this.createPlanVersion(info.getPlanVersion(), info.getContractID(), info.getInputUserID(), info
					.getOfficeID(), info.getCurrencyID());
			
			PlanModifyDao planModifyDao = new PlanModifyDao();
			info = planModifyDao.findPlanModifyByContractID(info.getContractID());
			//inutParameterInfo.setDataEntity(info);
			
			
			//取得最大的计划版本号和ID
			long versionCode = this.findMaxVersionCode(info.getContractID());
			long versionID = this.findMaxVersionID(info.getContractID());
			
			
			//由于可能生成一条新的计划，重新插入transID,
			inutParameterInfo.setTransID(String.valueOf(info.getID()));
			inutParameterInfo.setUrl(inutParameterInfo.getUrl() + "&nModifyID=" +info.getID()+"&srPlanVersion=" + versionCode + "&nrVerID=" + versionID  ); 
//			 提交审批
			
			FSWorkflowManager.initApproval(inutParameterInfo);
			// 更新状态到"审批中"
			info.setStatusID(LOANConstant.LoanStatus.APPROVALING);
			repayPlanDao.updatePlanModifyStatus(info);
			this.insertInitAppValues(info.getID());
			//this.savePlanModify(info);
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, "", e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}

	/**
	 * 审批
	 * 
	 * @param cInfo
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long doApproval(PlanModifyInfo Info) throws RemoteException, IRollbackException
	{

		long lResult = -1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
		logInfo.setBusinessType("合同执行计划更改");
        // add by jbpan 20120607 end
		try
		{
			logInfo.setTransCode(NameRef.getContractNoByID(Info.getContractID()));  //操作日志-合同编号
//			PlanModifyInfo planModifyInfo = new PlanModifyInfo();
//
//			PlanModifyInfo pInfo1 = new PlanModifyInfo();
			
			RepayPlanDao repayPlanDao = new RepayPlanDao();

			// ---- added by mzh_fu 2007/06/11 审批流 begin

			InutParameterInfo inutParameterInfo = Info.getInutParameterInfo();
			InutParameterInfo returnInfo = new InutParameterInfo();

			// 将业务记录置入cInfo1,转换成标准map传递到审批流引擎
			
			PlanModifyDao planModifyDao = new PlanModifyDao();
			Info = planModifyDao.findPlanModifyByContractID(Info.getContractID());
			inutParameterInfo.setDataEntity(Info);

			// 提交审批
			returnInfo = FSWorkflowManager.doApproval(inutParameterInfo);

			PlanModifyInfo cInfo2 = new PlanModifyInfo();

			// 如果是最后一级,且为审批通过,更新状态为已审批
			if (returnInfo.isLastLevel())
			{
				cInfo2.setContractID(Info.getContractID());
				cInfo2.setStatusID(LOANConstant.PlanModifyStatus.CHECK);

				lResult = repayPlanDao.updatePlanModifyStatus(cInfo2);
//				 审批完成后需要做的操作
				this.insertValues(Info.getID());
			}
			// 如果是最后一级,且为审批拒绝,更新状态为已保存
			else if (returnInfo.isRefuse())
			{
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				cInfo2.setContractID(Info.getContractID());
				cInfo2.setStatusID(LOANConstant.LoanStatus.SAVE);
				lResult = repayPlanDao.updatePlanModifyStatus(cInfo2);
				//String strSQL = "update loan_loancontractplan set nPlanVersion = null where id = (select nPlanID from loan_planmodifyform where id = "
					//+ Info.getID() + ")";
				this.insertAppRefValues(Info.getID());
				
			}

			// ---- added by mzh_fu 2007/06/11 审批流 end
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			System.out.println(e.toString());
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}

	// 计算计划余额：lID：合同标识 lVersionID: 版本标识 lPlanListID 计划明细标示
	private static double getPlanBalance(long lContractID, long lVersionID, long lPlanListID) throws RemoteException
	{

		double dResult = 0;
		double dRepayTotal = -1;
		double dPlanTotal = -1;
		double dTmp = 0;
		double dListAmount = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try
		{
			conn = Database.getConnection();
			sb
					.append(" select sum(mOpenAmount-mBalance) MREPAYTOTAL from sett_subAccount where AL_nLoanNoteID in (select id from loan_payform where nContractID = "
							+ lContractID + " ) and nStatusID = " + SETTConstant.SubAccountStatus.NORMAL);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dRepayTotal = rs.getDouble("MREPAYTOTAL");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			sb
					.append("select nContractPlanID,sum(MAMOUNT) MPLANTOTAL from loan_loanContractPlanDetail where NPAYTYPEID = "
							+ LOANConstant.PlanType.REPAY
							+ " and nContractPlanID = "
							+ lVersionID
							+ " group by nContractPlanID");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dPlanTotal = rs.getDouble("MPLANTOTAL");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			sb.append("select sum(mAmount) from loan_loanContractPlanDetail where nPayTypeID = "
					+ LOANConstant.PlanType.REPAY + " and nContractPlanID = " + lVersionID
					+ " and dtPlanDate < (select dtplandate from loan_loanContractPlanDetail where id =" + lPlanListID
					+ " )");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dTmp = rs.getDouble(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			sb.append("select mAmount from loan_loanContractPlanDetail where id =" + lPlanListID);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dListAmount = rs.getDouble(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);

			System.out.println("dResult is :" + dResult);
			System.out.println("dRepayTotal is :" + dRepayTotal);
			System.out.println("dPlanTotal is :" + dPlanTotal);
			System.out.println("dTmp is :" + dTmp);
			System.out.println("dListAmount is :" + dListAmount);

			if ((dRepayTotal - dTmp) > 0)
			{
				if (dListAmount > (dRepayTotal - dTmp))
				{
					dResult = dListAmount - (dRepayTotal - dTmp);
				}
				else
				{
					dResult = 0;
				}

			}
			else
			{
				dResult = dListAmount;
			}

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return dResult;
	}
	
	/**
	 * Modify by leiyang date 2007/07/12
	 * 审批流：取消审批方法（合同计划变更）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(PlanModifyInfo Info)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = Info.getInutParameterInfo();
		RepayPlanDao repayPlanDao = new RepayPlanDao();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
		logInfo.setBusinessType("合同执行计划更改");
        // add by jbpan 20120607 end
		try
		{
			logInfo.setTransCode(NameRef.getContractNoByID(Info.getContractID()));  //操作日志-合同编号
			//取消审批
			Info.setStatusID(LOANConstant.LoanStatus.SAVE);
			insertAppRefValues(Info.getID());
			lReturn = repayPlanDao.updateStatusAndCheckStatus(Info);
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}				
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lReturn;
	}
	
    /**
     * @author yunchang
     * @date 2010-06-03
     * @function:
     * upRepayPlanRate  融资租赁利率调整
     * 操作 LOAN_RATEADJUSTPAYCONDITION 数据表
     * 更新表中利率
     * 返回值为-1标识失败，n>0标识更新的条数
     * @return long  成功返回ID标识，失败返回0
     * @throws RemoteException
     */
    public Collection adjustRzzlRate (AdjustPayConditionInfo adjustPayConditionInfo,Collection repayColl,ContractInfo contractInfo,long planID) throws RemoteException, IRollbackException
    {
    	long nPayType = -1;//付款方式
    	long lRepayNum = -1;//付款月数
    	long lInterestCountType = contractInfo.getInterestCountTypeID();//还贷方式
    	double principalsBalace = 0.0;//合同本金余额(截止到生效日期)
    	double adjustInterest = 0.0;//调整后的每期利息
    	double adjustPrincipal = 0.0;//调整后的每期本金
    	double adjustPrincipalTemp = 0.0;//用于计算等额本息，每期本金和利息之和
    	Collection reasultColl = null;
    	long remainIssue = -1;//剩下期数
        /*
         * add by yunchang
         * date 2010-08-27 11点26分
         * 增加   租赁物到期残值(融资租赁)
         * 增加   租赁物到期残值(融资租赁)所产生的利息
         */
        double mMatureNominalAmount = 0.0d; 
        double mMatureNominalRateAmount = 0.0d;	    	
    	
		try
		{
			nPayType = contractInfo.getAssureChargeTypeID();
			/*
			 * 判断类型
			 */
			switch((int)nPayType)
			{
				case (int)LOANConstant.ChargeRatePayType.YEAR :
					lRepayNum = 12;
					break;
				case (int)LOANConstant.ChargeRatePayType.HALFYEAR :
					lRepayNum = 6;
					break;
				case (int)LOANConstant.ChargeRatePayType.QUARTER : 
					lRepayNum = 3;
					break;
				case (int)LOANConstant.ChargeRatePayType.MONTH :
					lRepayNum = 1;
					break;	
			}
			LoanPayNoticeDao payNoticeDao = new LoanPayNoticeDao();
			String temp = payNoticeDao.getPrincipalsBalace(planID, adjustPayConditionInfo);//得到融资租赁的合同剩余本金金额
			remainIssue = Long.valueOf(temp.split(",")[0]).longValue();
			principalsBalace = Double.valueOf(temp.split(",")[1]).doubleValue();
			/*
			 * add by yunchang
			 * date 2010-08-27
			 * function 查询出到期残值
			 */
			mMatureNominalAmount = contractInfo.getMatureNominalAmount();
			//供等额本息使用
			//double payment_interest_rate = 1 / (1 + adjustPayConditionInfo.getMrate()/12/100); 
			//adjustPrincipalTemp = ((1 - payment_interest_rate) * principalsBalace) / (payment_interest_rate * (1 - Math.pow(payment_interest_rate,remainIssue))); 
			//等本每次还款的金额，包含有本金和利息
			double payment_interest_rate = adjustPayConditionInfo.getMrate()*lRepayNum/12/100; 
			/*
             * add by yunchang
             * date 2010-08-27 11点26分
             * 增加   租赁物到期残值(融资租赁) 每期所产生的利息
             */
			mMatureNominalRateAmount = mMatureNominalAmount * payment_interest_rate;
			double principalTemp = principalsBalace*payment_interest_rate*Math.pow((1+payment_interest_rate),remainIssue)/(Math.pow((1+payment_interest_rate),remainIssue)-1);
		    /*
		     * add by yunchang
		     * date 2010-08-27 13:27
		     * function 等本每次还款的金额   添加上到期残值所产生的利息
		     *          在计算的时候先进行相加，然后再四舍五入
		     */
		    principalTemp = principalTemp + mMatureNominalRateAmount ;			
		    principalTemp = DataFormat.formatDouble(principalTemp);
			    
			double principalsum =0.00;//等额本息使用，累计计算已经计划过的金额金额
			Iterator iterator = repayColl.iterator();
			long lCount = repayColl.size();
			long lIndex = 0;
			reasultColl = new ArrayList();
			while(iterator.hasNext()){
				RepayPlanInfo repayPlanInfo = (RepayPlanInfo)iterator.next();
				if(repayPlanInfo.getTsPlanDate().after(adjustPayConditionInfo.getDtvalidate())){
					if(lInterestCountType == LOANConstant.InterestCountType.AVERAGEAMOUNT)//等额本息
					{
						if(lIndex == lCount-1){//如果是最后一期，就特殊处理一下，处理逻辑：1.每期的金额相加为总和为合同金额 2.每期的还款的金额相同 3.如果存在最后剩下几分钱的本期的情况就调整本金在调整利息
							adjustPrincipal = principalsBalace - principalsum;
							adjustInterest = principalTemp - adjustPrincipal;
						}else{
							//adjustInterest = DataFormat.formatDouble(((principalsBalace-principalsum)*adjustPayConditionInfo.getMrate()/12/100) * lRepayNum) ;
							/*
							 * add by yunchang
							 * date 2010-08-27
							 * function 这个是在等额本息计算利息的时候加上 融资租赁（到期残值）所产生的利息
							 *          计算时，一定要先相加，然后再格式化。
							 */
							adjustInterest = ((principalsBalace-principalsum)*adjustPayConditionInfo.getMrate()/12/100) * lRepayNum ;
							adjustInterest = adjustInterest + mMatureNominalRateAmount ;
							adjustPrincipal = DataFormat.formatDouble(principalTemp - adjustInterest);
						}
					}else if(lInterestCountType == LOANConstant.InterestCountType.AVERAGEPRINCIPAL)//等额本金
					{
						/*
						 * add by yunchang
						 * date 2010-08-27
						 * function 这个是在等额本息计算利息的时候加上 融资租赁（到期残值）所产生的利息
						 */						
						adjustInterest = ((principalsBalace-principalsum)*adjustPayConditionInfo.getMrate()/12/100) * lRepayNum ;
						adjustInterest = adjustInterest + mMatureNominalRateAmount;		
						adjustPrincipal = DataFormat.formatDouble(principalsBalace/remainIssue);
					}
					adjustInterest = DataFormat.formatDouble(adjustInterest) ;
					principalsum+=adjustPrincipal;
					repayPlanInfo.setMINTERESTAMOUNT(adjustInterest);
					repayPlanInfo.setDAmount(adjustPrincipal);
					repayPlanInfo.setLateRateString(DataFormat.formatRate(adjustPayConditionInfo.getMrate()) );
				}
				reasultColl.add(repayPlanInfo);
				lIndex++;
			}
		}
		catch (Exception e)
		{
			/*
			 * 捕获异常并且抛出
			 */
			throw new IRollbackException(context, e.getMessage(), e);
		}	
		/*
		 * 返回值
		 */
    	return reasultColl;
    }
    
    
    /**
	 * 修改合同执行计划并提交审批 add by zwxiao 2010-06-23
	 * @param RepayPlanInfo 合同信息
	 * @return long 如大于0表示成功，小于等于0表示失败
	 * @exception Exception
	 */
	private long newApprovalInit(AdjustPayConditionInfo info) throws RemoteException, IRollbackException
	{
        long lReturn = -1;
		try
		{
			InutParameterInfo pInfo = info.getInutParameterInfo();
			pInfo.setUrl(pInfo.getUrl()+"&nModifyID=" +info.getLModifyID()+"&adjustID="+info.getId()+"&contractID="+info.getNcontractid());
			//提交审批
			lReturn = FSWorkflowManager.initApproval(pInfo);
			if(lReturn > 0){
				//更新状态到审批中
				this.updateCheckStatus(info.getId(),LOANConstant.InterestRateSettingStatus.APPROVALING);
			}
		}
		catch (Exception e)
		{
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return info.getId();		

 }
	
	//add by zwxiao 2010-07-03 更新调整利率的状态
	   private long updateCheckStatus(long lID,long lCheckStatus) throws RemoteException, IRollbackException
	   {
		    PreparedStatement ps = null;
			Connection conn = null;
			String strSQL = null;
			int lReturn = 0;
			try
			{
			    conn = Database.getConnection();
				strSQL = " Update loan_rateadjustpaycondition Set nstatusid=?  Where ID=?" ;
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1,lCheckStatus);
				ps.setLong(2,lID);
				lReturn = ps.executeUpdate();
				ps.close();
				ps = null;
				conn.close();
				conn = null;
			}
			catch (Exception e)
			{
				e.printStackTrace();
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException("remote updateCheckStatus exception : " + e.toString());
				throw new IRollbackException(context, e.getMessage(), e);
			}
			finally
			{
				try
				{
					if (ps != null)
						ps.close();
						ps = null;
					if (conn != null)
						conn.close();
						conn = null;
				}
				catch (Exception ex)
				{
					//modified by mzh_fu 2007/08/07
					//throw new RemoteException("remote updateCheckStatus exception : " + ex.toString());
					throw new IRollbackException(context, ex.getMessage(), ex);
				}
			}
		   return new Long(lReturn).longValue();
	   }
	
    /**
     * @author zwxiao
     * @date 2010-06-20
     * @function:
     * 保存融资租赁的利率和还款计划
     * 返回值为-1标识失败，n>0标识更新的条数
     * @return long  成功返回ID标识，失败返回0
     * @throws RemoteException
     */
    public long saveAdjustPlanAndRate (PlanModifyInfo pinfo,Collection repayColl,AdjustPayConditionInfo conditionInfo,ContractInfo contractInfo,long planID) throws java.rmi.RemoteException, IRollbackException
    {
    	long lReturn = -1;
    	long lModifyID = -1;
    	long lPlanID = -1;
    	long adjustID = -1;
    	try{
    		//0.先删除这些表中的数据
    		LoanInterestSettingDao interestSettingDao = new LoanInterestSettingDao();
    		//1.先删利率调整
    		lReturn = interestSettingDao.deleteLoanInterestSetting(conditionInfo.getId());
    		if(lReturn <= 0 && conditionInfo.getId() > 0){
    			System.out.println("============取消时删除利率调整表中信息发生失败====利率调整id为====:"+conditionInfo.getId());
    			throw new IRollbackException(context, "保存失败", "");
    		}
    		//2.再删合同计划明细
    		lReturn = interestSettingDao.deleteByPlandetailID(planID);
    		if(lReturn <= 0 && planID > 0){
    			System.out.println("============取消时删除合同计划明细表中信息发生失败====合同计划id为====:"+planID);
    			throw new IRollbackException(context, "保存失败", "");
    		}
    		//3.再删合同计划
    		lReturn = interestSettingDao.deleteByPlanID(planID);
    		if(lReturn <= 0 && planID > 0){
    			System.out.println("============取消时删除合同计划主表中信息发生失败====合同计划id为====:"+planID);
    			throw new IRollbackException(context, "保存失败", "");
    		}
    		//4.最后删除loan_PlanModifyForm表信息
    		lReturn = interestSettingDao.deleteByPlanModifyID(contractInfo.getContractID(),planID);
    		if(lReturn <= 0 && planID > 0 && contractInfo.getContractID() > 0){
    			System.out.println("============取消时删除合同计划修改表中信息发生失败==合同id=="+contractInfo.getContractID()+"==合同计划id为====:"+planID);
    			throw new IRollbackException(context, "保存失败", "");
    		}
    		//5.先保存利率更改
    		conditionInfo.setId(-1);//将id清空
    		adjustID = interestSettingDao.adjustInterestRate(conditionInfo);
    		if(lReturn == -2){//如果返回的是-2,说明这次的调整生效日期后已经调整过了
    			throw new IRollbackException(context, "此生效日期之后已经存在调整利率的生效日，请检查!", "");
    		}
    		//6.再保存更改后的合同计划
    		lPlanID = interestSettingDao.saveFinancePlan(repayColl,contractInfo);
    		pinfo.setPlanID(lPlanID);
    		//7.保存loan_PlanModifyForm表信息,新增合同执行计划修改记录
    		lModifyID = interestSettingDao.savePlanModify(pinfo);
    		//8.如果是提交审批
    		if(conditionInfo.getInutParameterInfo() != null){
    			conditionInfo.getInutParameterInfo().setTransID(String.valueOf(adjustID));
    			conditionInfo.setId(adjustID);
    			conditionInfo.setLModifyID(lModifyID);
    			newApprovalInit(conditionInfo);
    		}
    		lReturn = adjustID;
    	}catch (Exception e){
			/*
			 * 捕获异常并且抛出
			 */
			throw new IRollbackException(context, e.getMessage(), e);
		}
    	return lReturn;
    }
    
    /**
     * @author zwxiao
     * @date 2010-06-20
     * @function:
     * 删除融资租赁的利率和还款计划
     * 返回值为-1标识失败，n>0标识更新的条数
     * @return long  成功返回ID标识，失败返回0
     * @throws RemoteException
     */
    public long deleteAdjustPlanAndRate(AdjustPayConditionInfo conditionInfo,ContractInfo contractInfo,long planID) throws java.rmi.RemoteException, IRollbackException
    {
    	long lReturn = -1;
    	try{
    		LoanInterestSettingDao interestSettingDao = new LoanInterestSettingDao();
    		//1.先删利率调整
    		lReturn = interestSettingDao.deleteLoanInterestSetting(conditionInfo.getId());
    		if(lReturn <= 0){
    			System.out.println("============取消时删除利率调整表中信息发生失败====利率调整id为====:"+conditionInfo.getId());
    			throw new IRollbackException(context, "取消失败", "");
    		}
    		//2.再删合同计划明细
    		lReturn = interestSettingDao.deleteByPlandetailID(planID);
    		if(lReturn <= 0){
    			System.out.println("============取消时删除合同计划明细表中信息发生失败====合同计划id为====:"+planID);
    			throw new IRollbackException(context, "取消失败", "");
    		}
    		//3.再删合同计划
    		lReturn = interestSettingDao.deleteByPlanID(planID);
    		if(lReturn <= 0){
    			System.out.println("============取消时删除合同计划主表中信息发生失败====合同计划id为====:"+planID);
    			throw new IRollbackException(context, "取消失败", "");
    		}
    		//4.最后删除loan_PlanModifyForm表信息
    		lReturn = interestSettingDao.deleteByPlanModifyID(contractInfo.getContractID(),planID);
    		if(lReturn <= 0){
    			System.out.println("============取消时删除合同计划修改表中信息发生失败==合同id=="+contractInfo.getContractID()+"==合同计划id为====:"+planID);
    			throw new IRollbackException(context, "取消失败", "");
    		}
    	}catch (Exception e){
    		e.printStackTrace();
			/*
			 * 捕获异常并且抛出
			 */
			throw new IRollbackException(context, "取消失败", e);
		}
    	return lReturn;
    }
    
	/**
	 * 根据合同标示查询最大版本计划的标示
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>根据合同标示查询最大版本计划的标示</b>
	 * <ul>
	 * <li>操作数据库表loan_loanContractPlan
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long lContractID 合同标示
	 * 
	 * @return long 删除成功，返回值 等于 删除的记录数，失败，返回值 == -1。
	 * 
	 * @exception Exception
	 */
	public long findNewMaxVersionID(long lContractID,long planID) throws java.rmi.RemoteException, IRollbackException
	{

		long lResult = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try
		{
			conn = Database.getConnection();
			sb.append("select ID from loan_loancontractplan  where nPlanVersion>0 and nContractID = ? and id != ? order by nPlanVersion DESC");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			ps.setLong(2, planID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lResult = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			sb.setLength(0);

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lResult;
	}
    
	//add by zwxiao 2010-07-08 取得利率调整的最原始的版本ID
	public long findOldMaxVersionID(long lContractID) throws java.rmi.RemoteException, IRollbackException
	{

		long lResult = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try
		{
			conn = Database.getConnection();
			
			sb.append("select decode(maxval,null,minval,maxval) as id from \n");
			sb.append("(select min(id) minval,ncontractid \n");
			sb.append("   from loan_loancontractplan where NSTATUSID = "+Constant.TRUE+" and NLOANID != 0 \n");
			sb.append("  group by ncontractid) a,(select max(NPLANID) maxval,ncontractid \n");
			sb.append("    from loan_planmodifyform where NSTATUSID = "+LOANConstant.LoanStatus.CHECK+" \n");
			sb.append("   group by ncontractid) b \n");
			sb.append("where a.ncontractid = b.ncontractid(+) \n");
			sb.append(" and a.ncontractid = ? \n");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lResult = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			sb.setLength(0);

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lResult;
	}

	//add by zwxiao 2010-07-08 取得利率调整的最原始的版本code
	public long findOldMaxVersionCode(long planID) throws java.rmi.RemoteException, IRollbackException
	{

		long lResult = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try
		{
			conn = Database.getConnection();
			sb.append("select nPlanVersion from loan_loancontractplan  where ID = ?  order by nPlanVersion DESC");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, planID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lResult = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			sb.setLength(0);

		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
					rs.close();
				if (ps != null)
					ps.close();
				if (conn != null)
					conn.close();
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lResult;
	}
	
}
