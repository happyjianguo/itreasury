package com.iss.itreasury.loan.extendapply.bizlogic;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.ebank.util.OBConstant;
import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.contract.dataentity.RateInfo;
import com.iss.itreasury.loan.contractcontent.dao.ContractContentDao;
import com.iss.itreasury.loan.contractcontent.dataentity.ContractContentInfo;
import com.iss.itreasury.loan.extendapply.dao.ExtendApplyDao;
import com.iss.itreasury.loan.extendapply.dataentity.ExtendApplyInfo;
import com.iss.itreasury.loan.extendapply.dataentity.ExtendContractInfo;
import com.iss.itreasury.loan.leasehold.dao.LoanAssureChargeFormDao;
import com.iss.itreasury.loan.leasehold.dataentity.LeaseholdRepayNoticeInfo;
import com.iss.itreasury.loan.loanapply.dao.LoanApplyDao;
import com.iss.itreasury.loan.loanapply.dataentity.LoanExaminePassInfo;
import com.iss.itreasury.loan.obinterface.dao.OBExtendDao;
import com.iss.itreasury.loan.obinterface.dataentity.ContractPlanInfo;
import com.iss.itreasury.loan.obinterface.dataentity.OBExtendInfo;
import com.iss.itreasury.loan.repayplan.dataentity.RepayPlanInfo;
import com.iss.itreasury.loan.setting.dao.LoanTypeRelationDao;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.settlement.transfixeddeposit.dataentity.TransFixedContinueInfo;
import com.iss.itreasury.settlement.transfixeddeposit.dataentity.TransFixedOpenInfo;
import com.iss.itreasury.settlement.util.NameRef;
import com.iss.itreasury.settlement.util.SETTConstant;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.system.logger.dataentity.LoggerBtnLevelInfo;
import com.iss.itreasury.system.logger.dataentity.LoggerResults;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.CreateCodeManager;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public class ExtendApplyEJB implements SessionBean
{
	private Log4j log4j = new Log4j(Constant.ModuleType.LOAN, this);
	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */
	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */ 
	public void setSessionContext(SessionContext context)
	{
		this.context = context;
	}
	private SessionContext context;
	/**
	 * No argument constructor required by container.
	 */
	public ExtendApplyEJB()
	{
	}
	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove()
	{
	}
	/**
	 * 新增/修改展期申请
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol><b>新增/修改展期申请</b>
	 * <br>将对应的计划版本的nIsUsed置为“是”，使该计划版本暂不能被其他途径修改,只能被展期中的“修改执行计划”修改
	 * <ul>
	 * <li>操作数据库表Loan_ExtendForm和Loan_ExtendDetail
	 * <li>延期申请标示等于0，新增，大于0，修改
	 * <li>新增展期申请时，随实际展期情况，生成一个版本号为空的还款计划
	 * <li>修改展期申请时，要随之修改新增时生成的还款计划
	 * <li>Collection结构:
	 *         long        lExtendListID         展期明细标示
	 *         long        lPlanID               计划明细标示
	 *         double      dLoanBalance          贷款余额
	 *         double      dExtendAmount         展期金额
	 *         Timestamp   dtExtendBeginDate     展期起始日期
	 *         Timestamp   dtExtendEndDate       展期截止日期
	 *         int         nExtendIntervalNum    展期月份
	 * </ul>
	 * </ol>
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 *
	 * @param     long        lID                     延期申请标示
	 * @param     long        lContractID             贷款合同标示
	 * @param     long        lPlanVersionID          计划版本标示
	 * @param     Collection  cExtendList             展期明细集合
	 * @param     long        lExtendTypeID           展期类型（展期、转期）
	 * @param     long        lInterestTyepID         利率类型（普通 or Libor）
	 * @param     double      dExtendRate             展期利率
	 * @param     long        lLiborRateID            Libor利率类型
	 * @param     double      dAdjustValue            调整值
     * @param     double      dAdjustRate             浮动比例
     * @param     double      dStaidAdjustRate        固定浮动利率
	 * @param     String      strExtendReason         展期原因
	 * @param     String      strReturnPostPend       归还延期还款本息资金
	 * @param     String      strOtherContent         其他事项
	 * @param     long        lUserID              录入人标示
	 *
	 * @return    long     操作成功，返回值 == 1，失败，返回值 == 0。
	 * @throws IRollbackException 
	 *
	 * @exception Exception
	 **/
	public long saveExtendApply(
		long lID,
		long lContractID,
		long lPlanVersionID,
		Collection cExtendList,
		long lExtendTypeID,
		long lInterestTypeID,
		long lBankRateTypeID,
		double dBasicExtendRate,
		long lLiborRateID,
		double dAdjustValue,
        double dAdjustRate,
        double dStaidAdjustRate,
		String strExtendReason,
		String strReturnPostPend,
		String strOtherContent,
		long lUserID,
		long lCurrencyID,
		long lOfficeID,
		InutParameterInfo pInfo)
		throws RemoteException, IRollbackException
	{
		long lResult = -1;
		long lStatusID = -1;
		long lMaxID = -1;
		long lMAXEXID = -1;
		long lPlanID = -1;
		long lserialID = -1;
		long lNewVer = -1;
		long lLastVerID = -1;
		double dExtendRate = 0;
		double dBalance = 0;
		double dAmountTotal = 0;
		double dOldPlanAmount = 0;
		
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		String sql = "";
		Timestamp tsStartDate = null;
		Timestamp tsEndDate = null;
		RepayPlanInfo rp_info = new RepayPlanInfo();
		ArrayList alist = new ArrayList();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setBusinessType("贷款展期申请");
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
        // add by jbpan 20120606 end
		try
		{	
			logInfo.setTransCode(NameRef.getContractNoByID(lContractID));  //操作日志-业务主键-交易号
			//得到INFO
			ExtendApplyInfo eInfo = new ExtendApplyInfo();
			eInfo.m_lID = lID;
			eInfo.m_lContractID = lContractID;
			eInfo.m_lPlanVersionID = lPlanVersionID;
			eInfo.cExtendList = cExtendList;
			eInfo.m_lextendtype = lExtendTypeID;
			eInfo.m_lInterestTypeID =lInterestTypeID;
			eInfo.lBankRateTypeID = lBankRateTypeID;
			eInfo.m_dBasicInterestRate = dBasicExtendRate;
			eInfo.m_lLiborRateID = lLiborRateID;
			eInfo.m_dLiborAdjust = dAdjustValue;
			eInfo.dAdjustRate = dAdjustRate;
			eInfo.dStaidAdjustRate = dStaidAdjustRate;
			eInfo.m_strExtendReason = strExtendReason;
			eInfo.m_strReturnPostPend = strReturnPostPend;
			eInfo.m_strOtherContent = strOtherContent;
			eInfo.m_nCurrencyID = lCurrencyID;
			eInfo.m_lInputUserID = lUserID;
			//
			log4j.info("\n==============保存展期申请========\n");
			conn = Database.getConnection();
			long lLoanID = 0;
            /*
			sb.append("select nvl(MADJUSTRATE,0) from loan_ContractForm where id = " + lContractID);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dExtendRate = dBasicExtendRate * (1 + rs.getDouble(1) / 100);
			}
			else
			{
				dExtendRate = dBasicExtendRate;
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			System.out.println("---------------------------dBasicExtendRate =" + dBasicExtendRate);
			System.out.println("-----------------------------dExtendRate =" + dExtendRate);
			//*/
            dExtendRate = dBasicExtendRate*(1+dAdjustRate/100)+dStaidAdjustRate;
            System.out.println("-----------------------------dExtendRate =" + dExtendRate);
            // 新增
			if (lID <= 0)
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
				// 得到最大ID（contractpayplanversion)
				sb.append("select nvl(max(ID)+1,1) from loan_LoanContractPlan");
				ps = conn.prepareStatement(sb.toString());
				rs = ps.executeQuery();
				if (rs.next())
				{
					lMaxID = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				// 新增版本取值
				sb.append("select nvl(max(NPLANVERSION)+1,1) from loan_LoanContractPlan where NCONTRACTID = ?");
				log4j.info(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lContractID);
				rs = ps.executeQuery();
				if (rs.next())
				{
					lNewVer = rs.getLong(1);
				}
				System.out.println("ejb-------------.lNewVer: " + lNewVer);
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				// 展期版本来原(最大旧版本对应的ID)
				sb.append(
					"select ID from loan_LoanContractPlan where NCONTRACTID = ? and NPLANVERSION in (select max(NPLANVERSION) from loan_LoanContractPlan where NCONTRACTID = ?)");
				log4j.info(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lContractID);
				ps.setLong(2, lContractID);
				rs = ps.executeQuery();
				if (rs.next())
				{
					lLastVerID = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				// 得到最大ID   loan_ExtendForm
				sb.append("select nvl(max(ID)+1,1) from loan_ExtendForm");
				ps = conn.prepareStatement(sb.toString());
				rs = ps.executeQuery();
				if (rs.next())
				{
					lMAXEXID = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				// 取nserialID值，
				sb.append("select nvl(max(NSERIALNO)+1,1) from loan_ExtendForm where NCONTRACTID = ? and NSTATUSID > ?");
				log4j.info("LoanExamineEJB: " + sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lContractID);
				ps.setLong(2, Constant.RecordStatus.INVALID);
				rs = ps.executeQuery();
				while (rs.next())
				{
					if ((lserialID = rs.getLong(1)) != 1)
					{
						System.out.println("合同已做过展期了");
					}
					else
					{
						System.out.println("合同第一次做展期");
					}
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				// 取得申请书编号
				sb.append("select distinct nLoanID from loan_ContractForm  where id = ?");
				log4j.info(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lContractID);
				rs = ps.executeQuery();
				if (rs.next())
				{
					lLoanID = rs.getLong("nLoanID");
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				// 新增一条版本
				sb.append("insert into loan_LoanContractPlan (ID, NLOANID, NCONTRACTID, NSTATUSID,NISUSED,NUSERTYPE,NPLANVERSION,DTINPUTDATE) values (?,?,?,?,?,?,?,sysdate)");
				log4j.info(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lMaxID);
				ps.setLong(2, lLoanID);
				ps.setLong(3, lContractID);
				ps.setLong(4, Constant.RecordStatus.INVALID);
				ps.setLong(5, Constant.YesOrNo.YES);
				ps.setLong(6, LOANConstant.PlanModifyType.EXTEND);
				ps.setLong(7, lNewVer);
				if ((lResult = ps.executeUpdate()) < 1)
				{
					System.out.println("error.update.CONTRACTPAYPLANVERSION");
				}
				ps.close();
				ps = null;
				sb.setLength(0);
				// 复制明细
				sb.append(
					"select * from loan_loancontractplanDetail where NCONTRACTPLANID in (select ID from loan_LoanContractPlan where NPLANVERSION = ? and NCONTRACTID = ?) order by ID");
				log4j.info(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lNewVer - 1);
				ps.setLong(2, lContractID);
				rs = ps.executeQuery();
				while (rs.next())
				{
					rp_info = new RepayPlanInfo();
					rp_info.lID = rs.getLong("ID");
					rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
					rp_info.nLoanOrRepay = rs.getInt("NPAYTYPEID");
					rp_info.dAmount = rs.getDouble("MAMOUNT");
					rp_info.sType = rs.getString("STYPE");
					rp_info.lLastExtendID = rs.getLong("NLASTEXTENDID");
					rp_info.lLastOverDueID = rs.getLong("NLASTOVERDUEID");
					rp_info.tsInputDate = rs.getTimestamp("DTMODIFYDATE");
					alist.add(rp_info);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				// Copy
				if (alist.size() != 0)
				{
					sb.append(
						"insert into loan_loancontractplanDetail (ID, NCONTRACTPLANID, DTPLANDATE, NPAYTYPEID, MAMOUNT, STYPE, DTMODIFYDATE, NLASTEXTENDID, NLASTOVERDUEID,NLASTVERSIONPLANID) values (nvl((select max(id) from loan_loancontractplanDetail),0)+1,?,?,?,?,?,?,?,?,?)");
					log4j.info(sb.toString());
					Iterator iter = alist.iterator();
					while (iter.hasNext())
					{
						rp_info = (RepayPlanInfo) iter.next();
						ps = conn.prepareStatement(sb.toString());
						ps.setLong(1, lMaxID);
						ps.setTimestamp(2, rp_info.tsPlanDate);
						ps.setLong(3, (long) rp_info.nLoanOrRepay);
						ps.setDouble(4, rp_info.dAmount);
						ps.setString(5, rp_info.sType);
						ps.setTimestamp(6, rp_info.tsInputDate);
						ps.setLong(7, rp_info.lLastExtendID);
						ps.setLong(8, rp_info.lLastOverDueID);
						ps.setLong(9, rp_info.lID);
						if (ps.executeUpdate() < 1)
						{
							System.out.println("error.copy.loan_loancontractplanDetail");
						}
						log4j.info("success.copy.loan_loancontractplanDetail");
						ps.close();
						ps = null;
					}
					sb.setLength(0);
				} // copy.end
				// 展期表
				sb.append("insert into loan_ExtendForm (ID,NCONTRACTID,");		
				sb.append(" NPLANVERSIONID,NSERIALNO,SEXTENDREASON,");
				sb.append(" SRETURNPOSTPEND,SOTHERCONTENT,MINTERESTADJUST,");
				sb.append(" NSTATUSID,NNEXTCHECKUSERID,NINPUTUSERID,");
				sb.append(" NINTERESTTYPEID,DTINPUTDATE,NEXTENDTYPEID,");
				sb.append(" NLASTPLANVERSIONID,NBANKINTERESTID,MINTERESTRATE,mAdjustRate,mStaidAdjustRate,nNextCheckLevel, ");
				sb.append("NCURRENCYID, NOFFICEID");
				
				//added by mzh_fu 2007/10/16 增加业务编号
				sb.append(" ,SAPPLYCODE )");
				
				sb.append(" values (?,?,?,?,?,?,?,?,?,?,?,?,sysdate,?,?,?,?,?,?,1,?,?,?)");
				
				System.out.println(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lMAXEXID);
				ps.setLong(2, lContractID);
				ps.setLong(3, lMaxID);
				ps.setLong(4, lserialID);
				ps.setString(5, strExtendReason);
				ps.setString(6, strReturnPostPend);
				ps.setString(7, strOtherContent);
				ps.setDouble(8, dExtendRate);//展期执行利率
                //ps.setDouble(8, dAdjustValue);//展期执行利率
				//当pInfo不为空时，说明前台动作是提交审批动作 
				if(pInfo!=null)
				{
					ps.setLong(9, LOANConstant.ExtendStatus.APPROVALING);
				}
				else
				{
					ps.setLong(9, LOANConstant.ExtendStatus.SAVE);
				}
				ps.setLong(10, lUserID);
				ps.setLong(11, lUserID);
				ps.setLong(12, lInterestTypeID);
				ps.setLong(13, lExtendTypeID);
				ps.setLong(14, lLastVerID);
				ps.setLong(15, lBankRateTypeID);
				ps.setDouble(16, dBasicExtendRate);
                //======ninh 2004-06-22 需求变更 增加固定浮动利率======//
                //======浮动比例也要变更为能更改=====//    
                ps.setDouble(17, dAdjustRate);
                ps.setDouble(18, dStaidAdjustRate);
                ps.setLong(19,lCurrencyID);
                ps.setLong(20,lOfficeID);
                
                //added by mzh_fu 2007/10/16 增加业务编号                
                String strApplyCode = "";
                ContractInfo _contractInfo=new ContractDao().findContractBasicInfoByID(lContractID);
                
				HashMap map = new HashMap();
				map.put("officeID",String.valueOf(lOfficeID));
				map.put("currencyID",String.valueOf(lCurrencyID));
				map.put("moduleID",String.valueOf(Constant.ModuleType.LOAN));
				map.put("transTypeID",String.valueOf(_contractInfo.getLoanTypeID()));
				map.put("actionID",String.valueOf(Constant.CodingruleAction.EXTEND_APPLY));
				map.put("subTransTypeID",String.valueOf(_contractInfo.getSubTypeID()));
				map.put("contractID",String.valueOf(lContractID));
				strApplyCode = CreateCodeManager.createCode(map);
				ps.setString(21,strApplyCode);
                
				if ((lResult = ps.executeUpdate()) < 1)
				{
					System.out.println("error.insert.loan_ExtendForm");
				}
				ps.close();
				ps = null;
				sb.setLength(0);
				// 计划明细表
				if (cExtendList.size() > 0)
				{
					Log.print("\n\n=====计划明细表 not null======\n\n");
					/*   // 取明细ID
					       sb.append("select nvl(max(ID)+1,1) from loan_loancontractplanDetail");
					       ps = conn.prepareStatement(sb.toString());
					                         rs = ps.executeQuery();
					                         if (rs.next()) {
					        lPlanID = rs.getLong(1);
					                         }
					                         rs.close();	rs = null;
					                         ps.close(); ps = null;
					                         sb.setLength(0); */
					/*****
					 * 需求变更：展期时，计划金额不随展期金额而变化
					 *****/
					sb.append(
						"update loan_loancontractplanDetail set DTPLANDATE = ?, NLASTEXTENDID = ?,dtmodifydate = sysdate,mAmount = ? where nLastVersionPlanID = ? and nContractPlanID = ?");
					log4j.info(sb.toString());
					Iterator iter = cExtendList.iterator();
					while (iter.hasNext())
					{
						rp_info = (RepayPlanInfo) iter.next();
						//取出对应计划明细的原金额，确定是否要新增一条纪录
						sql = "select mAmount from loan_loancontractplanDetail where nLastVersionPlanID = ? and nContractPlanID = ?";
						ps = conn.prepareStatement(sql);
						ps.setLong(1, rp_info.lID);
						ps.setLong(2, lMaxID);
						System.out.println("rp_info.lID = " + rp_info.lID);
						System.out.println("lMaxID = " + lMaxID);
						rs = ps.executeQuery();
						if (rs != null && rs.next())
						{
							dOldPlanAmount = rs.getDouble("mAmount");
						}
						rs.close();
						rs = null;
						ps.close();
						ps = null;
						if (dOldPlanAmount > rp_info.dAmount)
						{
							//如果展期金额不足计划余额，新增一条纪录
							sql =
								"insert into loan_loancontractplanDetail (ID, NCONTRACTPLANID, DTPLANDATE, NPAYTYPEID, STYPE, DTMODIFYDATE,MAMOUNT ) "
									+ " values (nvl((select max(id) from loan_loancontractplanDetail),0)+1,?,?,?,?,sysdate,?)";
							System.out.println(sql);
							ps = conn.prepareStatement(sql);
							ps.setLong(1, lMaxID);
							ps.setTimestamp(2, rp_info.tsExtendStartDate);
							ps.setLong(3, LOANConstant.PlanType.REPAY);
							ps.setString(4, "本金");
							ps.setDouble(5, dOldPlanAmount - rp_info.dAmount);
							ps.executeUpdate();
							System.out.println("success.copy.loan_loancontractplanDetail");
							ps.close();
							ps = null;
						}
						ps = conn.prepareStatement(sb.toString());
						ps.setTimestamp(1, rp_info.tsExtendEndDate);
						ps.setLong(2, lMAXEXID);
						ps.setDouble(3, rp_info.dAmount);
						ps.setLong(4, rp_info.lID);
						ps.setLong(5, lMaxID);
						if ((lResult = ps.executeUpdate()) < 1)
						{
							System.out.println("error.update.loan_loancontractplanDetail");
						}
						System.out.println("ejb--------------------lPlanID: " + lPlanID);
						ps.close();
						ps = null;
						// 展期明细表
						sql =
							"insert into loan_ExtendDetail (ID, NEXTENDFORMID, NPLANID, MPLANBALANCE, MEXTENDAMOUNT, DTEXTENDBEGINDATE, DTEXTENDENDDATE,NEXTENDINTERVALNUM) values (nvl((select max(id) from loan_ExtendDetail),0)+1,?,?,?,?,?,?,?)";
						System.out.println(sql);
						ps = conn.prepareStatement(sql);
						ps.setLong(1, lMAXEXID);
						ps.setLong(2, rp_info.lID);
						ps.setDouble(3, rp_info.dPlanBalance);
						ps.setDouble(4, rp_info.dAmount);
						ps.setTimestamp(5, rp_info.tsExtendStartDate);
						ps.setTimestamp(6, rp_info.tsExtendEndDate);
						ps.setLong(7, rp_info.lExtendPeriod);
						if ((lResult = ps.executeUpdate()) < 1)
						{
							System.out.println("error.insert.loan_ExtendDetail");
						}
						System.out.println("ejb-----------------ext2");
						ps.close();
						ps = null;
					}
					sb.setLength(0);
				}
				lResult = (lResult == 1) ? lMAXEXID : lResult;
			}
			// 修改
			else
				if (lID > 0)
				{	
					// add by jbpan 20120606 操作日志-操作类型-
					logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
					Log.print("\n\n=====修改======\n\n");
					sb.append("select NSTATUSID,NPLANVERSIONID,NLASTPLANVERSIONID from loan_ExtendForm where ID = " + lID);
					System.out.println(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					rs = ps.executeQuery();
					if (rs.next())
					{
						lStatusID = rs.getLong(1);
						lMaxID = rs.getLong(2);
						lLastVerID = rs.getLong(3);
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					sb.setLength(0);
					// del 明细
					sb.append("delete from loan_loancontractplanDetail where NCONTRACTPLANID = ?");
					System.out.println(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					ps.setLong(1, lMaxID);
					if ((lResult = ps.executeUpdate()) < 1)
					{
						System.out.println("error.delete.loan_loancontractplanDetail");
					}
					ps.close();
					ps = null;
					sb.setLength(0);
					// 复制明细
					sb.append("select * from loan_loancontractplanDetail where NCONTRACTPLANID = ? order by ID");
					log4j.info(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					ps.setLong(1, lLastVerID);
					rs = ps.executeQuery();
					while (rs.next())
					{
						rp_info = new RepayPlanInfo();
						rp_info.lID = rs.getLong("ID");
						rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
						rp_info.nLoanOrRepay = rs.getInt("NPAYTYPEID");
						rp_info.dAmount = rs.getDouble("MAMOUNT");
						rp_info.sType = rs.getString("STYPE");
						rp_info.lLastExtendID = rs.getLong("NLASTEXTENDID");
						rp_info.lLastOverDueID = rs.getLong("NLASTOVERDUEID");
						rp_info.tsInputDate = rs.getTimestamp("DTMODIFYDATE");
						alist.add(rp_info);
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					sb.setLength(0);
					// Copy
					if (alist.size() != 0)
					{
						sb.append(
							"insert into loan_loancontractplanDetail (ID, NCONTRACTPLANID, DTPLANDATE, NPAYTYPEID, MAMOUNT, STYPE, DTMODIFYDATE, NLASTEXTENDID, NLASTOVERDUEID,NLASTVERSIONPLANID) values (nvl((select max(id) from loan_loancontractplanDetail),0)+1,?,?,?,?,?,?,?,?,?)");
						log4j.info(sb.toString());
						Iterator iter = alist.iterator();
						while (iter.hasNext())
						{
							rp_info = (RepayPlanInfo) iter.next();
							ps = conn.prepareStatement(sb.toString());
							ps.setLong(1, lMaxID);
							ps.setTimestamp(2, rp_info.tsPlanDate);
							ps.setLong(3, (long) rp_info.nLoanOrRepay);
							ps.setDouble(4, rp_info.dAmount);
							ps.setString(5, rp_info.sType);
							ps.setTimestamp(6, rp_info.tsInputDate);
							ps.setLong(7, rp_info.lLastExtendID);
							ps.setLong(8, rp_info.lLastOverDueID);
							ps.setLong(9, rp_info.lID);
							if (ps.executeUpdate() < 1)
							{
								System.out.println("error.copy.loan_loancontractplanDetail");
							}
							log4j.info("success.copy.loan_loancontractplanDetail");
							ps.close();
							ps = null;
						}
						sb.setLength(0);
					} // copy.end
					sb.append("update loan_ExtendForm set SEXTENDREASON = ?,");
					sb.append(" SRETURNPOSTPEND = ?,SOTHERCONTENT = ?,");
					sb.append(" MINTERESTADJUST = ?,NSTATUSID = ?,");
					sb.append(" NNEXTCHECKUSERID = ?,NINTERESTTYPEID = ?,");
					sb.append(" NBANKINTERESTID = ?,MINTERESTRATE = ? ");
                    sb.append(" ,mAdjustRate = ?,mStaidAdjustRate = ? ");
					sb.append(" where ID = ?");
					sb.append(" AND NCURRENCYID= ?");
					sb.append(" AND NOFFICEID= ?");
					System.out.println(sb.toString());
					ps = conn.prepareStatement(sb.toString());
					ps.setString(1, strExtendReason);
					ps.setString(2, strReturnPostPend);
					ps.setString(3, strOtherContent);
					ps.setDouble(4, dExtendRate);//展期执行利率
                    //ps.setDouble(4, dAdjustValue);//展期执行利率
					//		当pInfo不为空时，说明前台动作是提交审批动作
					if(pInfo!=null)
					{
						ps.setLong(5, LOANConstant.ExtendStatus.APPROVALING);
					}
					else 
					{
						ps.setLong(5, LOANConstant.ExtendStatus.SAVE);
					}
					ps.setLong(6, lUserID);
					ps.setLong(7, lInterestTypeID);
					ps.setLong(8, lBankRateTypeID);
					ps.setDouble(9, dBasicExtendRate);
                    //======ninh 2004-06-22 需求变更 增加固定浮动利率======//
                    //======浮动比例也要变更为能更改=====//    
                    ps.setDouble(10, dAdjustRate);
                    ps.setDouble(11, dStaidAdjustRate);
					ps.setLong(12, lID);
					ps.setLong(13, lCurrencyID);
					ps.setLong(14, lOfficeID);
					if (ps.executeUpdate() == 1)
					{
						lResult = lID;
						System.out.println("success.update.loan_ExtendForm: " + lID);
						//***********added by gqzhang
						//对网银指令进行回填内部指令
						OBExtendDao obExtendDao = new OBExtendDao();
						if (obExtendDao.updateOBStatus(lID, OBConstant.LoanInstrStatus.ACCEPT) > 0)
						{
							System.out.println("\n=========saveextendapply接受网银指令状态成功===========\n");
						}
						//***********added by gqzhang
					}
					else
					{
						System.out.println("error.update.loan_ExtendForm");
					}
					ps.close();
					ps = null;
					sb.setLength(0);
					// 计划明细表
					if (cExtendList.size() > 0)
					{
						Log.print("\n\n=====计划明细表 not null======\n\n");
						/*****
						 * 需求变更：展期时，计划金额不随展期金额而变化
						 *****/
						sb.append(
							"update loan_loancontractplanDetail set DTPLANDATE = ?,"
								+ " DTMODIFYDATE = sysdate, "
								+ " NLASTEXTENDID = ?,mAmount = ? where "
								+ " nLastVersionPlanID = (select nPlanID "
								+ " from loan_ExtendDetail where id = ?) "
								+ " and NCONTRACTPLANID = ?");
						log4j.info(sb.toString());
						Iterator iter = cExtendList.iterator();
						while (iter.hasNext())
						{
							rp_info = (RepayPlanInfo) iter.next();
							//取出对应计划明细的原金额，确定是否要新增一条纪录
							sql = "select mAmount from loan_loancontractplanDetail " + " where nLastVersionPlanID = ? " + " and NCONTRACTPLANID = ?";
							ps = conn.prepareStatement(sql);
							ps.setLong(1, rp_info.lID);
							ps.setLong(2, lMaxID);
							rs = ps.executeQuery();
							if (rs != null && rs.next())
							{
								dOldPlanAmount = rs.getDouble("mAmount");
							}
							rs.close();
							rs = null;
							ps.close();
							ps = null;
							if (dOldPlanAmount > rp_info.dAmount)
							{
								//如果展期金额不足计划余额，新增一条纪录
								sql =
									"insert into loan_loancontractplanDetail (ID, NCONTRACTPLANID, DTPLANDATE, NPAYTYPEID, STYPE, DTMODIFYDATE,MAMOUNT ) "
										+ " values (nvl((select max(id) from loan_loancontractplanDetail),0)+1,?,?,?,?,sysdate,?)";
								System.out.println(sql);
								ps = conn.prepareStatement(sql);
								ps.setLong(1, lMaxID);
								ps.setTimestamp(2, rp_info.tsExtendStartDate);
								ps.setLong(3, LOANConstant.PlanType.REPAY);
								ps.setString(4, "本金");
								ps.setDouble(5, dOldPlanAmount - rp_info.dAmount);
								ps.executeUpdate();
								System.out.println("success.copy.loan_loancontractplanDetail");
								ps.close();
								ps = null;
							}
							Log.print("\n\n=====修改计划明细======\n\n");
							ps = conn.prepareStatement(sb.toString());
							Log.print(sb.toString());
							ps.setTimestamp(1, rp_info.tsExtendEndDate);
							ps.setLong(2, lID);
							ps.setDouble(3, rp_info.dAmount);
							ps.setLong(4, rp_info.lExtendListID);
							ps.setLong(5, lMaxID);
							Log.print("=====tsExtendEndDate："+rp_info.tsExtendEndDate);
							Log.print("=====lID："+lID);
							Log.print("=====dAmount："+rp_info.dAmount);
							Log.print("=====lExtendListID："+rp_info.lExtendListID);
							Log.print("=====lMaxID："+lMaxID);
							
							if ((lResult = ps.executeUpdate()) < 1)
							{
								System.out.println("error.update.CONTRACTPAYPLAN");
							}
							ps.close();
							ps = null;
							// 展期明细表
							sql = "update loan_ExtendDetail set MEXTENDAMOUNT = ?, DTEXTENDENDDATE = ?,NEXTENDINTERVALNUM = ? where ID = ?";
							System.out.println(sql);
							ps = conn.prepareStatement(sql);
							ps.setDouble(1, rp_info.dAmount);
							dAmountTotal += rp_info.dAmount;
							ps.setTimestamp(2, rp_info.tsExtendEndDate);
							ps.setLong(3, rp_info.lExtendPeriod);
							ps.setLong(4, rp_info.lExtendListID);
							if ((lResult = ps.executeUpdate()) < 1)
							{
								System.out.println("error.update.loan_ExtendDetail");
							}
							ps.close();
							ps = null;
						}
						sb.setLength(0);
					}
					sb.setLength(0);
					lResult = (lResult == 1) ? lID : lResult;
				}
			
			/**
			 * 如果Info中的InutParameterInfo不为空,则需要提交审批 add by 刘琰 2007-04-17
			 */
				if(pInfo!=null)
				{
					Log.print("------提交审批--------");
					logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
				pInfo.setUrl(pInfo.getUrl()+lResult);
				pInfo.setTransID(String.valueOf(lResult));//这里保存的是id
				pInfo.setDataEntity(eInfo);
				//提交审批
				FSWorkflowManager.initApproval(pInfo);
				Log.print("------提交审批成功--------");
				
				}
				//add by jbpan 20120606 加上操作日志-操作结果-成功        
	            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			//add by jbpan 20120606 start
			  
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}
	/**
	 * 合同查找，根据条件查询loan_ContractForm和loan_LoanForm表。
	 * <br>lContractIDFrom和lContractIDTo，同一类型的合同的流水号的部分作为查询范围
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lCurrencyID 币种标识
	 * @param lOfficeID 办事处标识
	 * @param lTypeID 贷款申请类型标识
	 * @param lContractIDFrom 合同编号起始
	 * @param lContractIDTo 合同编号结束
	 * @param lClientID 借款单位标识
	 * @return Collection loan_ContractForm
	 * @exception Exception
	 */
	public Collection findContractByMultiOption(
		long lUserID,
		long lCurrencyID,
		long lOfficeID,
		long lTypeID,
		long lContractIDFrom,
		long lContractIDTo,
		long lClientID,
		long lPageLineCount,
		long lPageNo,
		long lOrderParam,
		long lDesc)
		throws RemoteException
	{
		ArrayList alist = new ArrayList();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		String sCondition = "";
		ExtendApplyInfo e_info = new ExtendApplyInfo();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		try
		{
			log4j.info("\n=============合同查找========\n");
			conn = Database.getConnection();
			sCondition =
				"from loan_ContractForm aa,CLIENT cc "
					+ " where aa.NSTATUSID in ("
					+ LOANConstant.ContractStatus.ACTIVE
					+ ","
					+ LOANConstant.ContractStatus.EXTEND
					+ ") and cc.ID = aa.NBORROWCLIENTID "
                    + " and aa.NTYPEID <> " + LOANConstant.LoanType.TX
                    + " and aa.NTYPEID <> " + LOANConstant.LoanType.ZTX
                    + " and aa.NTYPEID <> " + LOANConstant.LoanType.DB
                    +" ";
			if (lUserID > 0)
			{
				sCondition += " and aa.NINPUTUSERID = " + lUserID;
			}
			if (lCurrencyID > 0)
			{
				sCondition += " and aa.NCURRENCYID = " + lCurrencyID;
			}
			if (lTypeID > 0)
			{
				sCondition += " and aa.NTYPEID = " + lTypeID;
			}
			if (lContractIDFrom > 0)
			{
				sCondition += " and aa.ID >= " + lContractIDFrom;
			}
			if (lContractIDTo > 0)
			{
				sCondition += " and aa.ID <= " + lContractIDTo;
			}
			if (lClientID > 0)
			{
				sCondition += " and aa.NBORROWCLIENTID = " + lClientID;
			}
			if (lOfficeID > 0)
			{
				sCondition += " and aa.NOFFICEID = " + lOfficeID;
			}
			switch ((int) lOrderParam)
			{
				case 1 :
					sCondition += " order by SCONTRACTCODE";
					break;
				case 2 :
					sCondition += " order by SNAME";
					break;
				case 3 :
					sCondition += " order by aa.MEXAMINEAMOUNT";
					break;
				case 4 :
					sCondition += " order by aa.DTSTARTDATE";
					break;
				case 5 :
					sCondition += " order by aa.NINTERVALNUM";
					break;
				case 6 :
					sCondition += " order by ISEXTEND";
					break;
				case 7:
					sCondition+=" order by aa.NTYPEID";
					break;
				default :
					sCondition += " order by SCONTRACTCODE";
			}
			if(lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				sCondition += " DESC ";
			}
			else
			{
				sCondition += " asc ";
			}
			sb.append("select count(*)" + sCondition);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			// ...
			rs = ps.executeQuery();
			while (rs.next())
			{
				lRecordCount = rs.getLong(1);
				log4j.info("RecordCount: " + lRecordCount);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			lPageCount = lRecordCount / lPageLineCount;
			if (lRecordCount % lPageLineCount != 0)
			{
				lPageCount++;
			}
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;
			sb.append("select * from ( select a.*, rownum num from (");
			sb.append("select aa.*,cc.SNAME " + sCondition);
			sb.append(" )  a) where num between  " + lRowNumStart + " and " + lRowNumEnd);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			// ...
			rs = ps.executeQuery();
			while (rs.next())
			{
				e_info = new ExtendApplyInfo();
				e_info.m_lContractID = rs.getLong("ID");
				e_info.m_lStatusID = getExtendStatus(e_info.m_lContractID); //如果合同有展期并状态为提交则值为2
				e_info.m_strContractCode = rs.getString("SCONTRACTCODE");
				e_info.m_strClientName = rs.getString("SNAME");
				e_info.m_dLoanAmount = rs.getDouble("MEXAMINEAMOUNT");
				e_info.m_tsLoanDate = rs.getTimestamp("DTSTARTDATE");
				e_info.m_lLoanIntervalNum = rs.getLong("NINTERVALNUM");
				e_info.m_lisExtend = rs.getLong("ISEXTEND");
				e_info.m_lPageCount = lPageCount;
				e_info.m_typeId=rs.getLong("NTYPEID");
				alist.add(e_info);
			}
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return (alist.size() > 0 ? alist : null);
	}
	/**
	 * 查找合同的最新版本还款计划。不翻页
	 * 最新的计划版本，
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lID 合同标识
	 * @return Collection  (if 合同计划正在修改返回null)
	 * @exception RemoteException
	 */
	public Collection findPlanByContract(long lID) throws RemoteException
	{
		long lLoanID = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		ArrayList alist = new ArrayList();
		String strCondition = "";		
		long lRecordCount = -1; // 这里用做计数器
		long lhasMAX = -1;
		double dPlanBalance = 0;
		long lstatusid = -1, nisused = -1;
		try
		{
			log4j.info("\n=============查找合同的最新版本还款计划========\n");
			conn = Database.getConnection();
			//查最新计划是否可以做展期
			sb.append(
				"select NSTATUSID,NISUSED,NUSERTYPE from loan_LoanContractPlan where NCONTRACTID = ? and NPLANVERSION in (select max(NPLANVERSION) from loan_LoanContractPlan where NCONTRACTID = ?)");
			//sb.append("select NSTATUSID,NISUSED,NUSERTYPE from loan_LoanContractPlan where NCONTRACTID = ? and NPLANVERSION is null");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lID);
			ps.setLong(2, lID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				lstatusid = rs.getLong("NSTATUSID");
				nisused = rs.getLong("NISUSED");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			log4j.info("ejb----------------lstatusid/nisused: " + lstatusid + "/" + nisused);
			if (lstatusid == Constant.RecordStatus.VALID && nisused != Constant.YesOrNo.YES)
			{
				sb.append("select max(NPLANVERSION) from loan_loancontractplan where nContractID = ?");
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lID);
				rs = ps.executeQuery();
				if (rs.next())
				{
					lhasMAX = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				sb.setLength(0);
				System.out.println("------------------lhasMAX:" + lhasMAX);
				if (lhasMAX > 0)
				{
					strCondition =
						" from  loan_loancontractplanDetail aa,"
							+ " loan_loancontractplan bb "
							+ " where bb.nContractID = ? "
							+ " and aa.nPayTypeID = "
							+ LOANConstant.PlanType.REPAY
							+ " and aa.nContractPlanID = bb.ID and bb.NPLANVERSION "
							+ " in(select max(NPLANVERSION) "
							+ " from loan_loancontractplan where nContractID = "
							+ lID
							+ ")";
				}
				else
				{
					strCondition =
						" from  loan_loancontractplanDetail aa,"
							+ " loan_loancontractplan bb where bb.nContractID = ? "
							+ " and aa.nPayTypeID = "
							+ LOANConstant.PlanType.REPAY
							+ " and aa.nContractPlanID = bb.ID";
				}
				strCondition += " order by DTPLANDATE";
				sb.append("select aa.* " + strCondition);
				Log.print(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.setLong(1, lID);
				//ps.setLong(2,lLoanID);
				rs = ps.executeQuery();
				ContractDao contractDao = new ContractDao();
				long lPageCount = 0;
				while (rs.next())
				{
					RepayPlanInfo rp_info = new RepayPlanInfo();
					rp_info.lID = rs.getLong("ID");
					rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
					RateInfo info = contractDao.getLatelyRate(0, lID, rp_info.tsPlanDate);
					rp_info.sExecuteInterestRate = info.getFormatLateBasicRate(); //调整后的基准利率
					rp_info.fExecuteInterestRate = info.getLateRate(); //调整后的利率
					rp_info.nLoanOrRepay = rs.getInt("NPAYTYPEID");
					rp_info.dAmount = rs.getDouble("MAMOUNT");
					rp_info.sType = rs.getString("STYPE");
					rp_info.tsInputDate = rs.getTimestamp("DTMODIFYDATE");
					rp_info.lContractPayPlanVersionID = rs.getLong("nContractPlanID");
					rp_info.lCount = ++lPageCount;
					rp_info.lLastExtendID = rs.getLong("NLASTEXTENDID");
					rp_info.lLastOverDueID = rs.getLong("NLASTOVERDUEID");
					rp_info.lLastVersionPlanID = rs.getLong("nLastVersionPlanID");
					rp_info.dPlanBalance = getPlanBalance(lID, rp_info.lContractPayPlanVersionID, rp_info.lID);
					alist.add(rp_info);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				conn.close();
				conn = null;
			}
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return (alist.size() > 0 ? alist : null);
	}
	/**
	 * 查找延期申请
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol><b>根据申请标示查找延期申请</b>
	 * <ul>
	 * <li>操作数据库表ReviewOpinion
	 * </ul>
	 * </ol>
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 *
	 * @param     long        lID              延期申请标示
	 *
	 *
	 * @return    ExtendApplyInfo
	 *
	 * @exception Exception
	 **/
	public ExtendApplyInfo findExtendByID(long lID) throws RemoteException
	{
		ExtendApplyInfo e_info = new ExtendApplyInfo();
		RepayPlanInfo r_info = new RepayPlanInfo();
		ExtendContractInfo ec_info = new ExtendContractInfo();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		String sql = "";
		ArrayList alist = new ArrayList();
		ArrayList alist2 = new ArrayList();
		double dTemp = 0;
		try
		{
			log4j.info("\n=============查找展期申请========\n");
			conn = Database.getConnection();
			sb.append(
				"select aa.*,bb.SCONTRACTCODE,bb.nTypeID,bb.NLOANID,bb.NSUBTYPEID" + " from loan_ExtendForm aa,loan_ContractForm bb" + " where aa.ID = ? " + " and aa.NCONTRACTID = bb.ID ");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.setLong(1, lID);
			
			rs = ps.executeQuery();
			if (rs.next())
			{
				e_info.m_lContractID = rs.getLong("NCONTRACTID"); //贷款合同标示
				e_info.m_lPlanVersionID = rs.getLong("NPLANVERSIONID"); //贷款ID
				e_info.loanID = rs.getLong("NLOANID"); //贷款ID
				e_info.m_lSerialNo = rs.getLong("NSERIALNO"); //展期序号
				e_info.lLoanTypeID = rs.getLong("NTYPEID");
				e_info.lLoanSubTypeID = rs.getLong("NSUBTYPEID");
				e_info.m_strExtendReason = rs.getString("SEXTENDREASON"); //展期原因
				e_info.m_strExtendReason = e_info.m_strExtendReason == null ? "" : e_info.m_strExtendReason;
				e_info.m_strReturnPostPend = rs.getString("SRETURNPOSTPEND"); //归还延期还款本息资金
				e_info.m_strReturnPostPend = e_info.m_strReturnPostPend == null ? "" : e_info.m_strReturnPostPend;
				e_info.m_strOtherContent = (rs.getString("SOTHERCONTENT") == null) ? "" : rs.getString("SOTHERCONTENT"); //其他事项
				//e_info.m_dInterestRate = Double.parseDouble( getTheRate( rs.
				//getLong( "NBANKINTERESTID" ) , rs.getLong( "NCONTRACTID" ) ) ) ; //利率
				e_info.m_dInterestRate = rs.getDouble("MINTERESTADJUST"); //执行利率
				e_info.m_lStatusID = rs.getLong("NSTATUSID"); //状态
				e_info.m_lInputUserID = rs.getLong("NINPUTUSERID"); // 展期录入人标识
				e_info.m_sInputUserName = getInputUserName(e_info.m_lInputUserID);
				e_info.m_tsInputDate = rs.getTimestamp("DTINPUTDATE"); // 录入日期
				e_info.m_strContractCode = rs.getString("SCONTRACTCODE");
				e_info.lBankRateTypeID = rs.getLong("NBANKINTERESTID"); //利率ID
				e_info.m_dBasicInterestRate = rs.getDouble("MINTERESTRATE"); //基准利率
				e_info.m_lNextCheckLevel = rs.getLong("nNextCheckLevel");	//下一个审核级别
                //======ninh 2004-06-22 需求变更 增加固定浮动利率======// 
                e_info.dStaidAdjustRate = rs.getDouble("MStaidAdjustRate"); //固定浮动利率
                e_info.dAdjustRate = rs.getDouble("MAdjustRate"); //浮动比例
                e_info.isLowLevel = rs.getLong("isLowLevel"); //
                
                //added by mzh_fu 2007/10/16 增加业务编号
                e_info.sExtendApplyCode = rs.getString("sApplyCode"); 
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			// 查展期明细 -> RapayPlanInfo
			sql =
				"select id,nPlanID,mPlanBalance,mExtendAmount,"
					+ " dtExtendBeginDate,dtExtendEndDate,NEXTENDINTERVALNUM,"
					+ " DTEXTENDBEGINDATE dtPlanEndDate from loan_ExtendDetail "
					+ " where NEXTENDFORMID = "
					+ lID;
			System.out.println(sql);
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next())
			{
				r_info = new RepayPlanInfo();
				r_info.lExtendListID = rs.getLong("ID");
				r_info.lID = rs.getLong("NPLANID");
				r_info.dPlanBalance = rs.getDouble("MPLANBALANCE");
				r_info.dAmount = rs.getDouble("MEXTENDAMOUNT");
				r_info.tsExtendStartDate = rs.getTimestamp("DTEXTENDBEGINDATE");
				r_info.tsExtendEndDate = rs.getTimestamp("DTEXTENDENDDATE");
				r_info.lExtendPeriod = rs.getLong("NEXTENDINTERVALNUM");
				r_info.tsPlanDate = rs.getTimestamp("dtPlanEndDate");
				alist.add(r_info);
			}
			e_info.cExtendList = alist;
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			// 查展期合同 -> ExtendContractInfo
			sql =
				"select a.*,b.ID as ContractContentID,b.SDOCNAME "
					+ " from loan_extendcontract a,loan_contractcontent b"
					+ " where a.nextendid = "
					+ lID
					+ " and b.nparentid(+) = a.nextendid "
					+ " and b.ncontractid(+) = "
					+ e_info.m_lContractID
					+ " and b.ncontracttypeid(+) = "
					+ LOANConstant.ContractType.EXTEND
					+ " and a.nstatusid > "
					+ Constant.RecordStatus.INVALID;
			System.out.println(sql);
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			if (rs.next())
			{
				ec_info = new ExtendContractInfo();
				ec_info.m_lExtendID = rs.getLong("ID"); //展期合同ID
				ec_info.m_lClientID = rs.getLong("ContractContentID"); //展期合同文本ID
				ec_info.m_lExtendApplyID = lID; //展期申请的ID
				ec_info.m_strExtendCode = rs.getString("SCODE"); //展期合同编号
				e_info.m_sExCode = ec_info.m_strExtendCode;
				ec_info.m_lStatusID = rs.getLong("NSTATUSID"); //展期合同状态
				ec_info.m_lInputUserID = rs.getLong("NINPUTUSERID"); //录入人姓名
				ec_info.m_sInputUserName = getInputUserName(ec_info.m_lInputUserID); //录入人姓名
				ec_info.m_lCheckUserID = rs.getLong("NNEXTCHECKUSERID"); ////复核人姓名
				ec_info.m_sCheckUserName = getInputUserName(ec_info.m_lCheckUserID); //复核人姓名
				ec_info.m_tsExtendStart = rs.getTimestamp("DTINPUTDATE"); //录入时间
				ec_info.m_sDocName = rs.getString("SDOCNAME");
				ec_info.m_lNextCheckLevel = rs.getLong("nNextCheckLevel");	//下一个审核级别
				alist2.add(ec_info);
			}
			e_info.cExtendContractList = alist2;
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return e_info;
	}
	/**
	 * 组合查找贷款展期信息
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol><b>根据组合条件查找贷款展期信息</b>
	 * <ul>
	 * <li>操作数据库表Loan_ExtendForm及相关表
	 * </ul>
	 * </ol>
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 *
	 * @param     int      nType                  贷款类型
	 * @param     long     lCurrencyID            币种
	 * @param     long     lStartContractID       起始合同号
	 * @param     long     lEndContractID         截至合同号
	 * @param     long     lClientID              贷款单位
	 * @param     double   dStartAmount           起始展期金额
	 * @param     double   dEndAmount             且值展期金额
	 * @param     Timestamp  tsStartDate          起始展期日
	 * @param     Timestamp  tsEndDate            截至展期日
	 * @param     int      nStatusID              状态
	 *
	 * @param     long     lPageLineCount          每页页行数条件
	 * @param     long     lPageNo                 第几页条件
	 * @param     long     lOrderParam             排序条件，根据此参数决定结果集排序条件
	 * @param     long     lDesc                   升序或降序
	 *
	       * @param     long     lOfficeID          办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
	 *
	 * @return    Collection
	 *
	 * @exception Exception
	 **/
	public Collection findExtendByMultiOption(
		long lAction,
		long lUserID,
		long lCurrencyID,
		long lOfficeID,
		long lLoanTypeID,
		long lStartContractID,
		long lEndContractID,
		long lClientID,
		double dStartAmount,
		double dEndAmount,
		Timestamp tsStartDate,
		Timestamp tsEndDate,
		int nStatusID,
		long lPageLineCount,
		long lPageNo,
		long lOrderParam,
		long lDesc)
		throws RemoteException
	{
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		ArrayList alist = new ArrayList();
		String strCondition = "";
		String strNextSql = "";
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		try
		{
			log4j.info("\n=============组合查找贷款展期信息========\n");
			conn = Database.getConnection();
			if (lAction == 1)
			{
				log4j.info("\n=============组合查找贷款展期信息：lAction =1：修改 ========\n");
				// 修改
				strCondition =
					" from loan_ExtendForm aa,loan_ContractForm bb,"
						+ " CLIENT dd, USERINFO ee,"
						+ " loan_extenddetail gg"
						+ " where aa.id = gg.nextendformid"
						+ " and bb.ID = aa.NCONTRACTID "
						+ " and dd.ID = bb.NBORROWCLIENTID "
						+ " and aa.NINPUTUSERID = ee.ID(+) ";
				//and bb.NSTATUSID = " + Notes.CODE_CONTRACT_STATUS_ACTIVE;
			}
			if (lAction == 2)
			{
				log4j.info("\n=============组合查找贷款展期信息：lAction =2：审核 ========\n");
				// 审核
				strCondition =
					" from loan_ExtendForm aa,loan_ContractForm bb,"
						+ " CLIENT dd, USERINFO ee,"
						+ " loan_extenddetail gg"
						+ " where aa.id = gg.nextendformid"
						+ " and bb.ID = aa.NCONTRACTID "
						+ " and dd.ID = bb.NBORROWCLIENTID "
						+ " and aa.NNEXTCHECKUSERID = ee.ID(+) ";
			}
			if (lLoanTypeID > 0)
			{
				strCondition += " and bb.NTYPEID = " + lLoanTypeID;
			}
			if (lOfficeID > 0)
			{
				strCondition += " and aa.NOFFICEID = " + lOfficeID;
			}
			if (lCurrencyID > 0)
			{
				strCondition += " and aa.NCURRENCYID = " + lCurrencyID;
			}
			if (lStartContractID > 0)
			{
				strCondition += " and bb.ID >= " + lStartContractID;
			}
			if (lEndContractID > 0)
			{
				strCondition += " and bb.ID <= " + lEndContractID;
			}
			if (lClientID > 0)
			{
				strCondition += " and bb.NBORROWCLIENTID = " + lClientID;
			}
			if (dStartAmount > 0)
			{
				strCondition += " and gg.MEXTENDAMOUNT >= " + dStartAmount;
			}
			if (dEndAmount > 0)
			{
				strCondition += " and gg.MEXTENDAMOUNT <= " + dEndAmount;
			}
			if (tsStartDate != null)
			{
				strCondition += " and trunc(aa.DTINPUTDATE) >= To_Date('" + DataFormat.formatDate(tsStartDate) + "','yyyy-mm-dd') ";
			}
			if (tsEndDate != null)
			{
				if (tsStartDate.equals(tsEndDate))
				{
					tsEndDate.setHours(24);
					strCondition += " and trunc(aa.DTINPUTDATE)<= To_Date('" + DataFormat.formatDate(tsEndDate) + "','yyyy-mm-dd') ";
				}
				else
				{
					strCondition += " and trunc(aa.DTINPUTDATE)<= To_Date('" + DataFormat.formatDate(tsEndDate) + "','yyyy-mm-dd') ";
				}
			}
			if (lAction == 1)
			{
				if (lUserID > 0)
				{
					strCondition += " and aa.NINPUTUSERID = " + lUserID;
					strCondition += " and aa.nNextCheckLevel = 1 ";
				}
				if (nStatusID > 0)
				{
					strCondition += " and aa.NSTATUSID = " + nStatusID;
				}
			}
			else
				if (lAction == 2)
				{
					ApprovalDelegation appBiz = new ApprovalDelegation();
					long lModule = Constant.ModuleType.LOAN;
					//long lLoanType = Constant.ApprovalLoanType.OTHER ;
					long lActionID = Constant.ApprovalAction.EXTEND_APPLY;
					//获得真正来审批这个记录的人（真实或传给的虚拟的人！）
					//String strUser = appBiz.findTheVeryUser(lModule, lLoanTypeID, lActionID,lOfficeID,lCurrencyID, lUserID);
					            //获得真正来审批这个记录的人（真实或传给的虚拟的人！）
					//自营贷款,委托贷款,最高限额,银团贷款,买方信贷,其他
					LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
					long[] loanTypeId = loanTypeDao.getAllSetLoanTypeID(lOfficeID,lCurrencyID); 
					String strUser = null;
					long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(
					lOfficeID,lCurrencyID, loanTypeId );
					if (a_SubLoanType != null && a_SubLoanType.length > 0) 
					{
						strNextSql += " ( ";
						for (int i = 0; i < a_SubLoanType.length; i++) 
						{
							strUser  =	appBiz.findTheVeryUser(lModule,a_SubLoanType[i], lActionID,lOfficeID,lCurrencyID,lUserID);
							if (strUser != null )
							{
								strNextSql += " ( bb.NSUBTYPEID = " + a_SubLoanType[i] + " and aa.NNEXTCHECKUSERID in " + strUser+" ) ";
							}							
							if (i < a_SubLoanType.length - 1)
								strNextSql += " or ";
							else
								strNextSql += " ) ";
							}
					}
					else
					{
						return null;
					}
					
					if(nStatusID == LOANConstant.ExtendStatus.SUBMIT)
					{
						strCondition += " and aa.nStatusID = "
								+ LOANConstant.ExtendStatus.SUBMIT
								+ " and " + strNextSql;
					}
					else if(nStatusID == LOANConstant.ExtendStatus.CHECK)
					{
						strCondition += " and aa.nStatusID = "
							+ LOANConstant.ExtendStatus.CHECK;
					}
					else
					{
						strCondition += " and ("
							+"  (aa.nStatusID = "
							+ LOANConstant.ExtendStatus.SUBMIT
							+ " and " + strNextSql
							+ " ) or ( "
							+ " aa.nStatusID = "
							+ LOANConstant.ExtendStatus.CHECK
							+"))";
					}
				}
			sb.append("select count(distinct aa.id)" + strCondition);
			log4j.info(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next())
			{
				lRecordCount = rs.getLong(1);
				log4j.info("RecordCount: " + lRecordCount);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			lPageCount = lRecordCount / lPageLineCount;
			if (lRecordCount % lPageLineCount != 0)
			{
				lPageCount++;
			}
			strCondition += " group by aa.id,aa.NCONTRACTID,aa.DTINPUTDATE,"
				+ " aa.NINPUTUSERID,aa.NSTATUSID,aa.NNEXTCHECKUSERID,aa.nNextCheckLevel,"
				+ " aa.NSERIALNO,bb.SCONTRACTCODE,bb.ID,"
				+ " dd.SNAME,ee.SNAME";
			switch ((int) lOrderParam)
			{
				case 1 :
					strCondition += " order by bb.SCONTRACTCODE ";
					break;
				case 2 :
					strCondition += " order by aa.ID";
					break;
				case 3 :
					strCondition += " order by dd.SNAME";
					break;
				case 4 :
					strCondition += " order by gg.mplanbalance";
					break;
				case 5 :
					strCondition += " order by gg.MEXTENDAMOUNT";
					break;
				case 6 :
					strCondition += " order by aa.DTINPUTDATE";
					break;
				case 7 :
					strCondition += " order by aa.NSTATUSID";
					break;					
				case 8 :
					strCondition += " order by ee.SNAME";
					break;
				case 9 :
					strCondition += " order by aa.NNEXTCHECKUSERID";
					break;
				default :
					strCondition += " order by bb.SCONTRACTCODE,aa.ID";
			}
			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				strCondition += " desc";
			}
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;
			sb.append("select * from ( select a.*, rownum num from (");
			sb.append(
				"select aa.id,aa.NCONTRACTID,aa.DTINPUTDATE,"
					+ " aa.NINPUTUSERID,aa.NSTATUSID,aa.NNEXTCHECKUSERID,nvl(aa.nNextCheckLevel,1) nNextCheckLevel,"
					+ " aa.NSERIALNO,sum(gg.mplanbalance) as mplanbalance,"
					+ " sum(gg.mextendamount) as mextendamount,bb.SCONTRACTCODE,"
					+ " bb.ID as CI_ID,dd.SNAME,ee.SNAME as UI_SNAME "
					+ strCondition);
			sb.append(" )  a) where num between  " + lRowNumStart + " and " + lRowNumEnd);
			log4j.info(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			
			while (rs.next())
			{
				ExtendApplyInfo le_info = new ExtendApplyInfo();
				le_info.m_lID = rs.getLong("ID"); // 展期申请标识
				le_info.m_strContractCode = rs.getString("SCONTRACTCODE"); // 合同编号
				le_info.m_lContractID = rs.getLong("NCONTRACTID"); // 合同标识
				le_info.m_dLoanBalance = rs.getDouble("mplanbalance"); // 展期余额
				le_info.m_dExtendAmount = rs.getDouble("MEXTENDAMOUNT"); // 展期金额
				le_info.m_tsExtendBeginDate = rs.getTimestamp("DTINPUTDATE"); // 展期起始日期
				le_info.m_lInputUserID = rs.getLong("NINPUTUSERID"); // 录入人标识
				le_info.m_lStatusID = rs.getLong("NSTATUSID"); // 展期状态
				le_info.m_lCheckUserID = rs.getLong("NNEXTCHECKUSERID"); // 最后审批人标识
				//le_info.lCheckNum = rs.getLong( "NCHECKNUM" ) ; // 修改次数
				//le_info.m_dtCheckDate = rs.getTimestamp( "DTCHECKDATE" ) ; // 最后审批日期
				le_info.sClientName = rs.getString("SNAME"); // 客户名称
				le_info.sLastUserName = rs.getString("UI_SNAME"); // 最后审批人名称
				le_info.m_lSerialNo = rs.getLong("NSERIALNO"); // 展期编号
				le_info.m_lPageCount = lPageCount;
				le_info.m_lNextCheckLevel = rs.getLong("nNextCheckLevel");
				alist.add(le_info);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return (alist.size() > 0 ? alist : null);
		
	}
	/**
	 * 组合查找贷款展期合同信息
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol><b>根据组合条件查找贷款展期合同信息</b>
	 * <ul>
	 * <li>操作数据库表Loan_ExtendForm及相关表
	 * </ul>
	 * </ol>
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 *
	 * @return    Collection
	 *
	 * @exception Exception
	 **/
	public Collection findExtendContractByMultiOption(
		long lTypeID,
		long lCurrencyID,
		long lOfficeID,
		long lActionID,
		long lUserID,
		long lContractIDFrom,
		long lContractIDTo,
		long lClientID,
		long lStatusID,
		long lSignID,
		long lPageLineCount,
		long lPageNo,
		long lOrderParam,
		long lDesc)
		throws RemoteException
	{
		Vector v = new Vector();
		//分页变量
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		int lIndex = 1;
		String strSQL = "";
		String strSQL_pre = "";
		String strSQL_con = "";
		String strSQL_order = "";
		String strNextSql = "";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try
		{
			log4j.info("\n=============   组合查找贷款展期合同信息   ========\n");
			con = Database.getConnection();
			if (1 == lActionID) //修改查询,需要查录入人是lUserID的
			{
				log4j.info("\n=============组合查找贷款展期信息：lAction =1：修改查询 ========\n");
				//计算记录总数
				strSQL_pre = "SELECT COUNT(distinct Ex_Con.id) FROM loan_extendcontract Ex_Con, " + " loan_ContractForm,loan_ExtendDetail, loan_ExtendForm";
				strSQL_con =
					" WHERE Ex_Con.NEXTENDID=loan_ExtendForm.ID(+) "
						+ " AND loan_ExtendForm.NCONTRACTID=loan_ContractForm.ID(+) "
						+ " and loan_ExtendForm.id = loan_ExtendDetail.Nextendformid(+)"
						+ " AND Ex_Con.NINPUTUSERID="
						+ lUserID
						+ " AND Ex_Con.nStatusID >= "
						+ LOANConstant.ExtendStatus.SAVE
						+ " AND Ex_Con.nStatusID <= "
						+ LOANConstant.ExtendStatus.SUBMIT
						+ " AND Ex_Con.nNextCheckLevel = 1 "
						+" AND loan_ContractForm.NCURRENCYID= "//4-11
						+ lCurrencyID
						+" AND loan_ContractForm.NOFFICEID= "//4-11
						+ lOfficeID;
				//lContractIDFrom 合同编号起
				if (lContractIDFrom > 0)
				{
					strSQL_con += " and loan_ContractForm.ID >=" + lContractIDFrom;
				}
				//lContractIDTo 合同编号止
				if (lContractIDTo > 0)
				{
					strSQL_con += " and loan_ContractForm.ID <=" + lContractIDTo;
				}
				//lClientID借款单位编号
				if (lClientID > 0)
				{
					strSQL_con += " and loan_ContractForm.NBORROWCLIENTID =" + lClientID;
				}
				//lStatusID　展期合同类型
				if (lStatusID > 0)
				{
					strSQL_con += " and Ex_Con.NSTATUSID =" + lStatusID;
				}
				// lType合同贷款类型
				if (lTypeID > 0) // >0表明为查某一类贷款类型的展期合同
				{
					strSQL_con += " AND loan_ContractForm.NTYPEID=" + lTypeID;
				}
				else //展期合同全部查询状态 分一般贷款业务状态 和股份公司的状态
					{
					strSQL_con += " AND loan_ContractForm.NTYPEID != " + LOANConstant.LoanType.TX;
				}
				//************************************
				//test set, wait to del
				System.out.println("*************   Test by LW " + strSQL_pre + strSQL_con);
				//************************************
				strSQL = strSQL_pre + strSQL_con;
				ps = con.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs != null && rs.next())
				{
					lRecordCount = rs.getLong(1);
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				//计算总页数
				lPageCount = lRecordCount / lPageLineCount;
				if ((lRecordCount % lPageLineCount) != 0)
				{
					lPageCount++;
				}
				//返回需求的结果集
				//分页显示，显示下一页
				lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
				lRowNumEnd = lRowNumStart + lPageLineCount - 1;
				//strTmpSQL = "";
				switch ((int) lOrderParam)
				{
					case 1 : //按合同编号排序
						strSQL_order += " order by loan_ContractForm.SCONTRACTCODE";
						break;
					case 2 : //按展期申请编号排序
						strSQL_order += " order by loan_ExtendForm.NSERIALNO";
						break;
					case 3 : //按展期合同编号排序
						strSQL_order += " order by Ex_Con.SCODE";
						break;
					case 4 : //按借款单位排序
						strSQL_order += " order by CLIENT.ID";
						break;
					case 5 : //按展期金额排序
						strSQL_order += " order by loan_ExtendDetail.Mextendamount";
						break;
					case 6 : //按展期日期排序
						strSQL_order += " order by loan_ExtendDetail.Dtextendbegindate";
						break;
					case 7 : //按期限排序
						strSQL_order += " order by loan_ExtendDetail.Nextendintervalnum";
						break;
					case 8 : //按展期利率排序
						strSQL_order += " order by loan_ExtendForm.Minterestadjust";
						break;
					case 9 : //按展期合同状态排序
						strSQL_order += " order by Ex_Con.NSTATUSID";
						break;
					default :
						strSQL_order += "";
				}
				if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
				{
					strSQL_order += " desc";
				}
				else
				{
					strSQL_order += " asc";
				}
				//got the sql sentence
				strSQL_pre =
					"SELECT * FROM "
						+ " ( SELECT all_record.*,ROWNUM num FROM "
						+ " ( SELECT loan_ContractForm.SCONTRACTCODE, "
						+ " loan_ContractForm.ID CON_ID, "
						+ " loan_ExtendForm.NSERIALNO, "
						+ " loan_ContractForm.nLoanID LOAN_ID, "
						+ " loan_ContractForm.NTYPEID LOANTYPEID, "
						+ " Ex_Con.ID EX_ID, Ex_Con.SCODE EX_CODE, "
						+ " sum(loan_ExtendDetail.Mextendamount) EX_DAMOUNT, "
						+ " max(loan_ExtendDetail.Nextendintervalnum) Nextendintervalnum, "
						+ " loan_ExtendForm.Minterestadjust, "
                        + " loan_ExtendForm.mStaidAdjustRate, "//需求变更 增加固定浮动利率
						+ " Ex_Con.NSTATUSID,loan_ExtendForm.ID EXTENDAPPLY_ID, "
						+ " min(loan_ExtendDetail.Dtextendbegindate) Dtextendbegindate, "
						+ " max(loan_ExtendDetail.Dtextendenddate) Dtextendenddate,"
						+ " CLIENT.ID CLIENT_ID, CLIENT.SNAME CLIENTNAME, "
						+ " nvl(Ex_Con.nNextCheckLevel,1) nNextCheckLevel "
						+ " FROM loan_extendcontract Ex_Con, "
						+ " loan_ExtendForm,loan_ExtendDetail, "
						+ " loan_ContractForm, CLIENT";
				strSQL_con += " AND loan_ContractForm.NBORROWCLIENTID=CLIENT.ID(+)" + " and loan_ExtendForm.id = " + " loan_ExtendDetail.Nextendformid";
				strSQL_con += " group by loan_ContractForm.SCONTRACTCODE, "
					+ " loan_ContractForm.ID, "
					+ " loan_ExtendForm.NSERIALNO, "
					+ " loan_ContractForm.nLoanID, "
					+ " loan_ContractForm.NTYPEID, "
					+ " loan_ExtendDetail.Mextendamount, "
					+ " loan_ExtendDetail.Dtextendbegindate, "
					+ " Ex_Con.ID, Ex_Con.SCODE, " //+ " loan_ExtendDetail.Mextendamount, "
				//+ " loan_ExtendDetail.Nextendintervalnum, "
				+" loan_ExtendForm.Minterestadjust, " + " Ex_Con.NSTATUSID,loan_ExtendForm.ID, " //+ " loan_ExtendDetail.Dtextendbegindate, "
				//+ " loan_ExtendDetail.Dtextendenddate,"
				+" CLIENT.ID, CLIENT.SNAME"
                +" ,loan_ExtendForm.mStaidAdjustRate,Ex_Con.nNextCheckLevel ";
				strSQL_con += strSQL_order;
				strSQL_con += ")all_record ";
				strSQL_con += ") WHERE num BETWEEN ? AND ?";
				/*
				           //From loan_ContractForm
				   合同编号  合同ID
				   loan_ContractForm.SCONTRACTCODE, loan_ContractForm.ID CON_ID
				           //From LOANINFO
				   借款申请ID
				   LOANINFO.ID LOAN_ID
				           //From loan_extendcontract Ex_Con
				   展期合同ID  展期合同编号 展期金额  期限   展期利率   展期合同状态
				   Ex_Con.ID EX_ID, Ex_Con.SCODE EX_CODE, Ex_Con.DAMOUNT EX_DAMOUNT, Ex_Con.NPERIOD, Ex_Con.DRATE, Ex_Con.NSTATUSID
				           //From EXTENDAPPLY
				  展期日期 展期申请ID  展期申请编号
				       EXTENDAPPLY.DTEXTENDSTART， EXTENDAPPLY.ID EXTENDAPPLY_ID  EXTENDAPPLY.NSERIALNO
				           //From CLIENT
				   借款单位ID  借款单位名称
				   CLIENT.ID CLIENT_ID, CLIENT.SNAME CLIENTNAME
				 */
				strSQL = strSQL_pre + strSQL_con;
				//************************************
				//test set, wait to del
				System.out.println("*************   Test by LW, get the total SQL Record " + strSQL);
				//************************************
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lRowNumStart); //给入起始行号
				ps.setLong(2, lRowNumEnd); //给入结束行号
				rs = ps.executeQuery();
				while (rs != null && rs.next())
				{
					ExtendApplyInfo info = new ExtendApplyInfo();
					info.m_lContractID = rs.getLong("CON_ID"); //合同ID
					info.m_strContractCode = rs.getString("SCONTRACTCODE"); //合同编号
					info.m_lSerialNo = rs.getLong("NSERIALNO"); //展期申请编号
					info.m_lID = rs.getLong("EXTENDAPPLY_ID"); // 展期申请ID
					info.m_lExContractID = rs.getLong("EX_ID"); // 展期合同ID
					info.m_sExCode = rs.getString("EX_CODE"); //展期合同编号
					info.m_dExtendAmount = rs.getDouble("EX_DAMOUNT"); //展期金额
					info.m_lExtendIntervalNum = rs.getLong("Nextendintervalnum"); //期限
					info.m_dInterestRate = rs.getDouble("Minterestadjust"); //展期利率
					info.m_lStatusID = rs.getLong("NSTATUSID"); //展期合同状态
					info.m_tsExtendBeginDate = rs.getTimestamp("Dtextendbegindate"); //展期起始日期
					info.m_tsExtendEndDate = rs.getTimestamp("Dtextendenddate"); //展期结束日期
					info.lConsignClientID = rs.getLong("CLIENT_ID"); //借款单位ID
					info.m_strClientName = rs.getString("CLIENTNAME"); //借款单位名称
					info.lLoanTypeID = rs.getLong("LOANTYPEID"); //借款类型

                    //======ninh 2004-06-22 需求变更 增加固定浮动利率======// 
                    info.dStaidAdjustRate = rs.getDouble("MStaidAdjustRate"); //固定浮动利率
                    
					info.m_lPageCount = lPageCount; //记录总的页面数
					v.addElement(info);
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
				//************************************
				//test set, wait to del
				// System.out.println("*************   Test by LW to get Exception message修改查询:  findExtendContractByMultiOption() success!");
				//************************************
			}
			else //复核合同查询，需要查录入人不是lUserID的并且复核人是lUserID的
				{
				log4j.info("\n=============组合查找贷款展期信息：lAction !=1：复核合同查询 ========\n");
				ApprovalDelegation appBiz = new ApprovalDelegation();
				long lModule = Constant.ModuleType.LOAN;
				//long lLoanType = Constant.ApprovalLoanType.OTHER ;
				long lAction = Constant.ApprovalAction.EXTEND_CONTRACT;
				//获得真正来审批这个记录的人（真实或传给的虚拟的人！）
				//String strUser = appBiz.findTheVeryUser(lModule, lTypeID, lAction,lOfficeID,lCurrencyID, lUserID);
				//自营贷款,委托贷款,最高限额,银团贷款,买方信贷,其他
				LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
				long[] loanTypeId = loanTypeDao.getAllSetLoanTypeID(lOfficeID,lCurrencyID); 
				String strUser = null;
				long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(lOfficeID,lCurrencyID, loanTypeId );

				
				//计算记录总数
				strSQL_pre = "SELECT COUNT(distinct Ex_Con.id) FROM loan_extendcontract Ex_Con, " + " loan_ContractForm,loan_ExtendDetail, loan_ExtendForm";
				strSQL_con =
					" WHERE Ex_Con.NEXTENDID=loan_ExtendForm.ID(+) "
				        +" AND LOAN_EXTENDFORM.NCURRENCYID= "//4-11
				        + lCurrencyID
				        + " AND LOAN_EXTENDFORM.NOFFICEID= "//4-11
				        + lOfficeID
						+ " AND loan_ExtendForm.NCONTRACTID=loan_ContractForm.ID(+) "
						+ " and loan_ExtendForm.id = loan_ExtendDetail.Nextendformid";
				if (a_SubLoanType != null && a_SubLoanType.length > 0) 
				{
					strNextSql += " ( ";
					for (int i = 0; i < a_SubLoanType.length; i++) 
					{
						strUser  =	appBiz.findTheVeryUser(lModule,a_SubLoanType[i], lActionID,lOfficeID,lCurrencyID,lUserID);
						if (strUser != null )
						{
							strNextSql += " ( loan_ContractForm.NSUBTYPEID = " + a_SubLoanType[i] + " and Ex_Con.NNEXTCHECKUSERID in " + strUser+" ) ";
						}							
						if (i < a_SubLoanType.length - 1)
							strNextSql += " or ";
						else
							strNextSql += " ) ";
						}
				}
				else
				{
					return null;
				}
				
				if(lStatusID == LOANConstant.ExtendStatus.SUBMIT)
				{
					strSQL_con += " and Ex_Con.nStatusID = "
							+ LOANConstant.ExtendStatus.SUBMIT
							+ " and " + strNextSql;
				}
				else if(lStatusID == LOANConstant.ExtendStatus.CHECK)
				{
					strSQL_con += " and Ex_Con.nStatusID = "
						+ LOANConstant.ExtendStatus.CHECK;
				}
				else
				{
					strSQL_con += " and ("
						+"  (Ex_Con.nStatusID = "
						+ LOANConstant.ExtendStatus.SUBMIT
						+ " and " + strNextSql
						+ " ) or ( "
						+ " Ex_Con.nStatusID = "
						+ LOANConstant.ExtendStatus.CHECK
						+")) ";
				}
				//查询条件　合同状态为已提交、已复核、已审核　
				/*
				 * 根据用户的权限：高中低，查询记录的条件不同
				 *     高：所有已复核的和已激活的合同
				 *     中：不是本人录入的所有已提交的合同和全部已复核已激活的合同
				 *     低：所有已复核和已激活的合同
				 */
				/*
				                 String strPriv = getUserPriv( lUserID ) ;
				       System.out.println( "===============" + strPriv ) ;
				       if ( strPriv.equals( "h" ) || strPriv.equals( "l" ) )
				                 {
				 strSQL_con += " and Ex_Con.NSTATUSID = "
				       + LOANConstant.ExtendStatus.CHECK ;
				                 }
				                 else
				                 {
				 strSQL_con += " and (( Ex_Con.NINPUTUSERID !=" + lUserID
				       + " AND ( Ex_Con.NCHECKUSERID =" + lUserID
				       + " OR Ex_Con.NNEXTCHECKUSERID IS NULL )) " ;
				 strSQL_con += " or (Ex_Con.NSTATUSID ="
				       + LOANConstant.ExtendStatus.CHECK + "))" ;
				                 }*/
				//lStatusID　展期合同状态
				if (lStatusID > 0)
				{
					//strSQL_con += " and Ex_Con.NINPUTUSERID!="+lUserID+" AND ( Ex_Con.NCHECKUSERID ="+lUserID+" OR Ex_Con.NCHECKUSERID IS NULL ) ";
					strSQL_con += " and Ex_Con.NSTATUSID =" + lStatusID;
				}
				//lContractIDFrom 合同编号起
				if (lContractIDFrom > 0)
				{
					strSQL_con += " and loan_ContractForm.ID >=" + lContractIDFrom;
				}
				//lContractIDTo 合同编号止
				if (lContractIDTo > 0)
				{
					strSQL_con += " and loan_ContractForm.ID <=" + lContractIDTo;
				}
				//lClientID借款单位编号
				if (lClientID > 0)
				{
					strSQL_con += " and loan_ContractForm.NBORROWCLIENTID =" + lClientID;
				}
				// lType合同贷款类型
				if (lTypeID > 0) // >0表明为查某一类贷款类型的展期合同
				{
					strSQL_con += " AND loan_ContractForm.NTYPEID=" + lTypeID;
				}
				else //展期合同全部查询状态 分一般贷款业务状态 和股份公司的状态
					{
					strSQL_con += " AND loan_ContractForm.NTYPEID != " + LOANConstant.LoanType.TX;
				}
				//************************************
				//test set, wait to del
				System.out.println("*************   Test by LW " + strSQL_pre + strSQL_con);
				//************************************
				strSQL = strSQL_pre + strSQL_con;
				ps = con.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs != null && rs.next())
				{
					lRecordCount = rs.getLong(1);
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				//计算总页数
				lPageCount = lRecordCount / lPageLineCount;
				if ((lRecordCount % lPageLineCount) != 0)
				{
					lPageCount++;
				}
				//返回需求的结果集
				//分页显示，显示下一页
				lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
				lRowNumEnd = lRowNumStart + lPageLineCount - 1;
				//strTmpSQL = "";
				switch ((int) lOrderParam)
				{
					case 1 : //按合同编号排序
						strSQL_order += " order by loan_ContractForm.SCONTRACTCODE";
						break;
					case 2 : //按展期申请编号排序
						strSQL_order += " order by loan_ExtendForm.NSERIALNO";
						break;
					case 3 : //按展期合同编号排序
						strSQL_order += " order by Ex_Con.SCODE";
						break;
					case 4 : //按借款单位排序
						strSQL_order += " order by CLIENT.ID";
						break;
					case 5 : //按展期金额排序
						strSQL_order += " order by loan_ExtendDetail.Mextendamount";
						break;
					case 6 : //按展期日期排序
						strSQL_order += " order by loan_ExtendDetail.Dtextendbegindate";
						break;
					case 7 : //按期限排序
						strSQL_order += " order by loan_ExtendDetail.Nextendintervalnum";
						break;
					case 8 : //按展期利率排序
						strSQL_order += " order by loan_ExtendForm.Minterestadjust";
						break;
					case 9 : //按展期合同状态排序
						strSQL_order += " order by Ex_Con.NSTATUSID";
						break;
					default :
						strSQL_order += "";
				}
				if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
				{
					strSQL_order += " desc";
				}
				//got the sql sentence
				strSQL_pre =
					"SELECT * FROM "
						+ " ( SELECT all_record.*,ROWNUM num FROM "
						+ " ( SELECT loan_ContractForm.SCONTRACTCODE, "
						+ " loan_ContractForm.ID CON_ID, "
						+ " loan_ExtendForm.NSERIALNO, "
						+ " loan_ContractForm.nLoanID LOAN_ID, "
						+ " loan_ContractForm.NTYPEID LOANTYPEID, "
						+ " Ex_Con.ID EX_ID, Ex_Con.SCODE EX_CODE, "
						+ " sum(loan_ExtendDetail.Mextendamount) EX_DAMOUNT, "
						+ " max(loan_ExtendDetail.Nextendintervalnum) Nextendintervalnum, "
						+ " loan_ExtendForm.Minterestadjust, "
						+ " Ex_Con.NSTATUSID,loan_ExtendForm.ID EXTENDAPPLY_ID, "
						+ " min(loan_ExtendDetail.Dtextendbegindate) Dtextendbegindate, "
						+ " max(loan_ExtendDetail.Dtextendenddate) Dtextendenddate,"
						+ " CLIENT.ID CLIENT_ID, CLIENT.SNAME CLIENTNAME "
						+ " FROM loan_extendcontract Ex_Con, "
						+ " loan_ExtendForm,loan_ExtendDetail, "
						+ " loan_ContractForm, CLIENT";
				strSQL_con += " AND loan_ContractForm.NBORROWCLIENTID=CLIENT.ID(+)" + " and loan_ExtendForm.id = " + " loan_ExtendDetail.Nextendformid"+" and loan_ExtendForm.NCURRENCYID= "+lCurrencyID+" and loan_ExtendForm.NOFFICEID= "+lOfficeID;
				strSQL_con += " group by loan_ContractForm.SCONTRACTCODE, "
					+ " loan_ContractForm.ID, "
					+ " loan_ExtendForm.NSERIALNO, "
					+ " loan_ContractForm.nLoanID, "
					+ " loan_ContractForm.NTYPEID, "
					+ " loan_ExtendDetail.Mextendamount, "
					+ " loan_ExtendDetail.Dtextendbegindate, "
					+ " Ex_Con.ID, Ex_Con.SCODE, " //+ " loan_ExtendDetail.Mextendamount, "
				//+ " loan_ExtendDetail.Nextendintervalnum, "
				+" loan_ExtendForm.Minterestadjust, " + " Ex_Con.NSTATUSID,loan_ExtendForm.ID, " //+ " loan_ExtendDetail.Dtextendbegindate, "
				//+ " loan_ExtendDetail.Dtextendenddate,"
				+" CLIENT.ID, CLIENT.SNAME";
				strSQL_con += strSQL_order;
				strSQL_con += ")all_record ";
				strSQL_con += ") WHERE num BETWEEN ? AND ?";
				/*
				           //From loan_ContractForm
				   合同编号  合同ID
				   loan_ContractForm.SCONTRACTCODE, loan_ContractForm.ID CON_ID
				           //From LOANINFO
				   展期申请ID
				   LOANINFO.ID LOAN_ID
				           //From loan_extendcontract Ex_Con
				   展期合同ID  展期合同编号 展期金额  期限   展期利率   展期合同状态 展期申请编号
				   EXTENDAPPLY.NSERIALNO, Ex_Con.ID EX_ID, Ex_Con.SCODE EX_CODE, Ex_Con.DAMOUNT EX_DAMOUNT, Ex_Con.NPERIOD, Ex_Con.DRATE, Ex_Con.NSTATUSID
				           //From EXTENDAPPLY
				  展期日期
				  EXTENDAPPLY.DTEXTENDBEGAINDATE
				           //From CLIENT
				   借款单位ID  借款单位名称
				   CLIENT.ID CLIENT_ID, CLIENT.SNAME CLIENTNAME
				 */
				strSQL = strSQL_pre + strSQL_con;
				//************************************
				//test set, wait to del
				System.out.println("*************   Test by LW, get the total SQL Record " + strSQL);
				//************************************
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lRowNumStart); //给入起始行号
				ps.setLong(2, lRowNumEnd); //给入结束行号
				rs = ps.executeQuery();
				while (rs != null && rs.next())
				{
					ExtendApplyInfo info = new ExtendApplyInfo();
					info.m_lContractID = rs.getLong("CON_ID"); //合同ID
					info.m_strContractCode = rs.getString("SCONTRACTCODE"); //合同编号
					info.m_lSerialNo = rs.getLong("NSERIALNO"); //展期申请编号
					info.m_lExContractID = rs.getLong("EX_ID"); // 展期合同ID
					info.m_lID = rs.getLong("EXTENDAPPLY_ID"); // 展期申请ID
					info.m_sExCode = rs.getString("EX_CODE"); //展期合同编号
					info.m_dExtendAmount = rs.getDouble("EX_DAMOUNT"); //展期金额
					info.m_lExtendIntervalNum = rs.getLong("Nextendintervalnum"); //期限
					info.m_dInterestRate = rs.getDouble("Minterestadjust"); //展期利率
					info.m_lStatusID = rs.getLong("NSTATUSID"); //展期合同状态
					info.m_tsExtendBeginDate = rs.getTimestamp("Dtextendbegindate"); //展期起始日期
					info.m_tsExtendEndDate = rs.getTimestamp("Dtextendenddate"); //展期结束日期
					info.lConsignClientID = rs.getLong("CLIENT_ID"); //借款单位ID
					info.m_strClientName = rs.getString("CLIENTNAME"); //借款单位名称
					info.lLoanTypeID = rs.getLong("LOANTYPEID"); //借款类型
					info.m_lPageCount = lPageCount; //记录总的页面数
					v.addElement(info);
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
				//************************************
				//test set, wait to del
				// System.out.println("*************   Test by LW to get Exception message修改查询:  findExtendContractByMultiOption() success!");
				//************************************
			} //if(1==lActionID)
		}
		catch (Exception e)
		{
			//************************************
			//test set, wait to del
			// System.out.println("*************   Test by LW to get Exception message:  "+ e.toString());
			//************************************
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}
		}
		return (v.size() > 0 ? v : null);
	}
	/**
	 * 取消展期申请。
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lExtendApplyID 展期申请标识
	 * @return 1-成功，
	 * 0-操作失败
	 * －1 状态不对
	 * @exception RemoteException
	 * @throws IRollbackException 
	 */
	public long cancelExtendApply(long lExtendApplyID) throws RemoteException, IRollbackException
	{
		long lResult = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		// add by jbpan 20120606 初始化操作日志 start
		LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPLY);
		logInfo.setBusinessType("贷款展期申请");
		// add by jbpan 20120606 end
		try
		{
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(lExtendApplyID));  //操作日志-业务主键-交易号
			conn = Database.getConnection();
			// loan_loancontractplanDetail
			sb.append("delete from loan_loancontractplanDetail where NCONTRACTPLANID in (select NPLANVERSIONID from loan_ExtendForm where ID = " + lExtendApplyID + ")");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.executeUpdate();
			ps.close();
			ps = null;
			sb.setLength(0);
			// loan_LoanContractPlan
			sb.append("delete from loan_LoanContractPlan where ID in (select NPLANVERSIONID from loan_ExtendForm where ID = " + lExtendApplyID + ")");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.executeUpdate();
			ps.close();
			ps = null;
			sb.setLength(0);
			// loan_ExtendDetail
			sb.append("delete from loan_ExtendDetail where NEXTENDFORMID = " + lExtendApplyID);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			lResult = ps.executeUpdate();
			ps.close();
			ps = null;
			sb.setLength(0);
			// loan_ExtendForm
			sb.append("update loan_ExtendForm set NSTATUSID = " + Constant.RecordStatus.INVALID + " where ID = " + lExtendApplyID);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			lResult = ps.executeUpdate();
			ps.close();
			ps = null;
			sb.setLength(0);
			// 当合同下没有展期时，nIsExtend为否;
			sb.append(
				"update loan_ContractForm set ISEXTEND = "
					+ Constant.YesOrNo.NO
					+ ",NSTATUSID = "
					+ LOANConstant.ContractStatus.ACTIVE
					+ " where not exists (select ID from loan_ExtendForm where  (NSTATUSID = "
					+ LOANConstant.ExtendStatus.CHECK
					+ " or NSTATUSID = "
					+ LOANConstant.ExtendStatus.SAVE
					+ ") and ID <> "
					+ lExtendApplyID
					+ ")"
					+ " and ID = (select distinct NCONTRACTID from loan_ExtendForm where ID = "
					+ lExtendApplyID
					+ ") ");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			lResult = ps.executeUpdate();
			ps.close();
			ps = null;
			sb.setLength(0);
			lResult = 1;
			//***********added by gqzhang
			//对网银指令进行回填内部指令
			log4j.info("==========开始回填网银指令状态===========");
			OBExtendDao obExtendDao = new OBExtendDao();
			if (obExtendDao.updateOBStatus(lExtendApplyID, OBConstant.LoanInstrStatus.CANCEL) > 0)
			{
				System.out.println("\n=========cancelExtendApply 取消网银指令状态成功===========\n");
			}
			//根据内部指令查找展期申请信息
			log4j.info("==========开始回填网合同计划状态===========");
			OBExtendInfo extendInfo = obExtendDao.findOBExtendByInID(lExtendApplyID);
			if (extendInfo != null)
			{
				ContractPlanInfo contractPlanInfo = extendInfo.getContractPlanInfo();
				if (contractPlanInfo != null)
				{
					if (obExtendDao.updateOBContractPlanStatus(contractPlanInfo.getID(), Constant.RecordStatus.INVALID, Constant.YesOrNo.NO) <= 0)
					{
						throw new IException("回填网银指令合同计划状态失败！");
					}
				}
			}
			log4j.info("==========结束回填网合同计划状态");
			//***********added by gqzhang
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			lResult = -1;
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
			
		}
		finally
		{
			//add by jbpan 20120606 start
        	  
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
	        //add by jbpan 20120606 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}
	/**
	 * 取消展期合同。
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lID 展期合同标示标识
	 * @param lExtendContractID 展期合同标识
	 * @return 1-成功，
	 * 0-操作失败
	 * －1 状态不对
	 * @throws IRollbackException 
	 */
	public long cancelExtendContract(long lExtendContractID) throws RemoteException, IRollbackException
	{
		long lResult = -1;
		long lStatus = -1;
		long lExtendApplyID = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		// add by jbpan 20120606 操作日志 start
		ExtendApplyDao dao = new ExtendApplyDao();
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCEL);
		logInfo.setBusinessType("贷款展期合同");
        // add by jbpan 20120606 end
		try
		{
			//modify by jbpan 20120627 获取业务主键方法变更
			long extendID = dao.getExtendApplyIdByExtendContractId(lExtendContractID);
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(extendID));  //操作日志-业务主键-交易号  
			conn = Database.getConnection();
			sb.append("select * from loan_extendcontract where id = " + lExtendContractID);
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				lExtendApplyID = rs.getLong("NEXTENDID");
				lStatus = rs.getLong("NSTATUSID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			if (lStatus == LOANConstant.ExtendStatus.SUBMIT || lStatus == LOANConstant.ExtendStatus.SAVE)
			{
				sb.append("delete from LOAN_CONTRACTCONTENT where NPARENTID = " + lExtendApplyID + " and NCONTRACTTYPEID = " + LOANConstant.ContractType.EXTEND);
				System.out.println(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.executeUpdate();
				ps.close();
				ps = null;
				sb.setLength(0);
				sb.append("update LOAN_EXTENDCONTRACT set NSTATUSID = " + Constant.RecordStatus.INVALID + " where NEXTENDID = " + lExtendApplyID);
				System.out.println(sb.toString());
				ps = conn.prepareStatement(sb.toString());
				ps.executeUpdate();
				ps.close();
				ps = null;
				sb.setLength(0);
				//取消合同，不修改申请状态
				//lResult = cancelExtendApply(lExtendApplyID);
				lResult = 1;
			}
			else
			{
				lResult = -2;
			}
			if (lResult > 0)
			{
				//***********added by gqzhang
				//对网银指令进行回填内部指令
				log4j.info("==========开始回填网银指令状态===========");
				OBExtendDao obExtendDao = new OBExtendDao();
				if (obExtendDao.updateOBStatus(lExtendApplyID, OBConstant.LoanInstrStatus.CANCEL) > 0)
				{
					System.out.println("\n=========cancelExtendApply 取消网银指令状态成功===========\n");
				}
				//根据内部指令查找展期申请信息
				log4j.info("==========开始回填网合同计划状态===========");
				OBExtendInfo extendInfo = obExtendDao.findOBExtendByInID(lExtendApplyID);
				if (extendInfo != null)
				{
					ContractPlanInfo contractPlanInfo = extendInfo.getContractPlanInfo();
					if (contractPlanInfo != null)
					{
						if (obExtendDao.updateOBContractPlanStatus(contractPlanInfo.getID(), Constant.RecordStatus.INVALID, Constant.YesOrNo.NO) <= 0)
						{
							throw new IException("回填网银指令合同计划状态失败！");
						}
					}
				}
				log4j.info("==========结束回填网合同计划状态");
				//***********added by gqzhang
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex)
		{
			//add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			lResult = -1;
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			//add by jbpan 20120606 start
			  
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
    		//add by jbpan 20120606 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	} 
	/**
	 * 审核展期申请，操作Loan_ExtendForm表
	 * <br>最后一级审核后，将对应的计划版本的nIsUsed置为“否”
	 * @param     long        nReviewContentID      审批内容类型
	 * @param     String      sOpinion              审批意见
	 * @param     long        nUserID               审批人标示
	 * @param     long        nNextUserID           下一个审批人标示
	 * @param     long        lAction               审批，拒绝，修改，最后审批
	 * @return    long        成功，返回值 == 1，失败，返回值 == -1
	 * @throws IRollbackException 
	 */
	public long checkExtendApply(long lExtendApplyID, String sOpinion, long lUserID, long lNextUserID, long lAction,long lCurrencyID,long lOfficeID) throws RemoteException, IRollbackException
	{
		System.out.println("here");
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		//定义相应操作常量
		//贷款
		long lModuleID = Constant.ModuleType.LOAN;
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		//模块类型
		long lActionID = Constant.ApprovalAction.EXTEND_APPLY;
		long lStatusID = -1;
		long lOBStatusID = -1;
		long lResultID = -1;
		long lApprovalID = -1;
		long lLevel = -1;
		String strSQL = "";
		ExtendApplyInfo e_info = new ExtendApplyInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        try {
			logInfo.setBusinessType("贷款展期申请");
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(lExtendApplyID));  //操作日志-业务主键-交易号  
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try
		{
			log4j.info("\n==========审核展期=========\n");
			e_info = findExtendByID(lExtendApplyID);
			lLoanTypeID = e_info.lLoanTypeID;
			//获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID, lActionID,lOfficeID,lCurrencyID);
			//下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			//审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);
			
			conn = Database.getConnection();
			strSQL = "";
			System.out.println("laction=" + lAction);
			if (lAction == 1) //拒绝
			{
				log4j.info("\n==========审核展期：拒绝=========\n");
				// add by jbpan 20120606 操作日志-展期申请-拒绝
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				//逻辑删除
				appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID, lExtendApplyID, 2);
				lStatusID = Constant.RecordStatus.INVALID;
				lResultID = Constant.ApprovalDecision.REFUSE;
				
				cancelExtendApply(lExtendApplyID);
				strSQL = "update loan_ExtendForm  set nStatusID=" + LOANConstant.ExtendStatus.REFUSE + " where ID=" + lExtendApplyID;
				lOBStatusID = OBConstant.LoanInstrStatus.REFUSE;
			}
			if (lAction == 2) //审批
			{
				log4j.info("\n==========审核展期：审批=========\n");
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				// add by jbpan 20120606 操作日志-展期申请-审批
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
				{
				    strSQL = "update loan_ExtendForm set NNEXTCHECKUSERID=" + lNextUserID + ", nNextCheckLevel=" + lLevel + " where ID=" + lExtendApplyID;
					Log.print("更新下一个审核级别（可越级）：" + lLevel);
				}
				else
				{
				    strSQL = "update loan_ExtendForm set NNEXTCHECKUSERID=" + lNextUserID + ", nNextCheckLevel=nNextCheckLevel+1 where ID=" + lExtendApplyID;
					Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
				lOBStatusID = OBConstant.LoanInstrStatus.ACCEPT;
			}
			if (lAction == 3) //审批&&最后
			{
				log4j.info("\n==========审核展期：审批&&最后=========\n");
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.FINISH;
				// add by jbpan 20120606 操作日志-展期申请-审批
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				strSQL = "update loan_ExtendForm set nnextcheckuserid=" + lNextUserID + ", nStatusID=" + LOANConstant.ExtendStatus.CHECK + " where ID=" + lExtendApplyID;
				lOBStatusID = OBConstant.LoanInstrStatus.APPROVE;
				//审批完成后需要做的操作
				//向ExtendContract插入新值
				long lFlag = insertExtendContract(lExtendApplyID, e_info.m_strContractCode, e_info.m_strExtendReason, e_info.m_lInputUserID,lCurrencyID,lOfficeID);
				if (lFlag >= 1)
				{
					ContractContentDao contractContentDao = new ContractContentDao();
					String strFileName = "";
					if (e_info.lLoanTypeID == LOANConstant.LoanType.WT)
					{
						strFileName = contractContentDao.addWTDKZQXY(lExtendApplyID);
					}
					else
					{
						strFileName = contractContentDao.addJKZQXY(lExtendApplyID);
					}
					if (strFileName != null && !strFileName.equals(""))
					{
						ContractContentInfo contractContentInfo = new ContractContentInfo();
						contractContentInfo.setContractTypeID(LOANConstant.ContractType.EXTEND);
						contractContentInfo.setContractID(e_info.m_lContractID);
						contractContentInfo.setParentID(lExtendApplyID);
						contractContentInfo.setDocName(strFileName);
						lFlag = contractContentDao.saveContractContent(contractContentInfo);
					}
				}
			}
			if (lAction == 4) //修改
			{
				log4j.info("\n==========审核展期：审批&&修改=========\n");
				lStatusID = Constant.RecordStatus.VALID;
				//装态也置为已提交
				lResultID = Constant.ApprovalDecision.RETURN;
				// add by jbpan 20120606 操作日志-展期申请-审批
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
				strSQL = "update loan_ExtendForm set nnextcheckuserid=ninputuserid, nStatusID=" + LOANConstant.ExtendStatus.SUBMIT + ", nNextCheckLevel=1 where ID=" + lExtendApplyID;
				lOBStatusID = OBConstant.LoanInstrStatus.ACCEPT;
			}
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.executeUpdate();
			ps.close();
			ps = null;
			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lExtendApplyID);
			//info.setSerialID(lSerialID);
			info.setUserID(lUserID);
			info.setNextUserID(lNextUserID);
			info.setOpinion(sOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			appbiz.saveApprovalTracing(info);
			if (conn != null)
			{
				conn.close();
			}
			conn = null;
			//***********added by gqzhang
			//对网银指令进行回填内部指令
			OBExtendDao obExtendDao = new OBExtendDao();
			if (lOBStatusID > 0)
			{
				if (obExtendDao.updateOBStatus(lExtendApplyID, lOBStatusID) > 0)
				{
					System.out.println("\n=========checkExtendApply 修改网银指令状态成功===========\n");
				}
			}
			//***********added by gqzhang
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			//add by jbpan 20120606 start
			
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
    		//add by jbpan 20120606 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return 1;
	}
	/**
	 * 审核展期合同，操作Loan_ExtendForm表
	 * <br>最后一级审核后，将对应的计划版本的nIsUsed置为“否”
	 * @param     long        nReviewContentID      审批内容类型
	 * @param     String      sOpinion              审批意见
	 * @param     long        nUserID               审批人标示
	 * @param     long        nNextUserID           下一个审批人标示
	 * @param     long        lAction               审批，拒绝，修改，最后审批
	 * @return    long        成功，返回值 == 1，失败，返回值 == -1
	 * @throws IRollbackException 
	 */
	public long checkExtendContract(long lExtendApplyID, String sOpinion, long lUserID, long lNextUserID, long lAction,long lCurrencyID,long lOfficeID) throws RemoteException, IRollbackException
	{
		System.out.println("here");
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		//定义相应操作常量
		//贷款
		long lModuleID = Constant.ModuleType.LOAN;
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		//模块类型
		long lActionID = Constant.ApprovalAction.EXTEND_CONTRACT;
		long lStatusID = -1;
		long lResultID = -1;
		long lApprovalID = -1;
		long lResult = -1;
		long lExtendContractID = -1;
		long lLevel = -1;
		String strSQL = "";
		ExtendApplyInfo e_info = new ExtendApplyInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        try {
			logInfo.setBusinessType("贷款展期合同");
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(lExtendApplyID));  //操作日志-业务主键-交易号  
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try
		{
			e_info = findExtendByID(lExtendApplyID);
			lLoanTypeID = e_info.lLoanTypeID;
			Collection c2 = e_info.cExtendContractList;
			Iterator iter2 = c2.iterator();
			ExtendContractInfo ec_info = new ExtendContractInfo();
			while (iter2.hasNext())
			{
				ec_info = (ExtendContractInfo) iter2.next();
				lStatusID = ec_info.m_lStatusID;
				lExtendContractID = ec_info.m_lExtendID;
			}
			if (lAction < 0)
			{
				log4j.info("\n\nlAction 小于零\n\n");
				if (lStatusID == LOANConstant.ExtendStatus.SUBMIT || lStatusID == LOANConstant.ExtendStatus.SAVE)
				{
					conn = Database.getConnection();
					strSQL = "update LOAN_EXTENDCONTRACT set nStatusID = " + LOANConstant.ExtendStatus.SUBMIT + " where ID = " + lExtendContractID;
					System.out.println(strSQL);
					ps = conn.prepareStatement(strSQL);
					ps.executeUpdate();
					ps.close();
					ps = null;
					lResult = 1;
				}
				else
				{
					lResult = -2;
				}
			}
			else
			{
				log4j.info("\n\nlAction 大于零\n\n");
				//获得ApprovalID
				lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID, lActionID,lOfficeID,lCurrencyID);
				//下一级审核人级别
				lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
				Log.print("下一级审核人级别：" + lLevel);
				//审批设置
				appInfo = appbiz.findApprovalSetting(lApprovalID);
				
				conn = Database.getConnection();
				strSQL = "";
				System.out.println("laction=" + lAction);
				if (lAction == 1) //拒绝
				{
					log4j.info("\n\nlAction 拒绝\n\n");
					logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
					//逻辑删除
					appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID, lExtendContractID, 2);
					lStatusID = Constant.RecordStatus.INVALID;
					lResultID = Constant.ApprovalDecision.REFUSE;
					
					cancelExtendContract(lExtendContractID);
					strSQL = "update LOAN_EXTENDCONTRACT set nStatusID=" + LOANConstant.ExtendStatus.REFUSE + " where ID=" + lExtendContractID;
					//同时拒绝对应的展期申请
					checkExtendApply(lExtendApplyID, sOpinion, lUserID, lNextUserID, lAction,lCurrencyID,lOfficeID);
				}
				else
					if (lAction == 2) //审批
					{
						log4j.info("\n\nlAction 审批\n\n");
						lStatusID = Constant.RecordStatus.VALID;
						lResultID = Constant.ApprovalDecision.PASS;
						logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
						if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
						{
						    strSQL = "update LOAN_EXTENDCONTRACT set NNEXTCHECKUSERID=" + lNextUserID + ", nNextCheckLevel=" + lLevel + " where ID=" + lExtendContractID;
							Log.print("更新下一个审核级别（可越级）：" + lLevel);
						}
						else
						{
						    strSQL = "update LOAN_EXTENDCONTRACT set NNEXTCHECKUSERID=" + lNextUserID + ", nNextCheckLevel=nNextCheckLevel+1 where ID=" + lExtendContractID;
							Log.print("更新下一个审核级别（不可越级）：" + lLevel);
						}
					}
					else
						if (lAction == 3) //审批&&最后
						{
							log4j.info("\n\nlAction 审批&&最后\n\n");
							lStatusID = Constant.RecordStatus.VALID;
							lResultID = Constant.ApprovalDecision.FINISH;
							logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
							strSQL =
								"update LOAN_EXTENDCONTRACT set NNEXTCHECKUSERID="
									+ lNextUserID
									+ ", nStatusID="
									+ LOANConstant.ExtendStatus.CHECK
									+ " where ID="
									+ lExtendContractID;
							//审批完成后需要做的操作
							//向ExtendContract插入新值
							Timestamp tsExtendStartDate = null;
							Timestamp tsExtendEndDate = null;
							Collection c1 = e_info.cExtendList;
							Iterator iter1 = c1.iterator();
							RepayPlanInfo r_info = new RepayPlanInfo();
							int iFlag = 0;
							while (iter1.hasNext())
							{
								r_info = (RepayPlanInfo) iter1.next();
								if (iFlag > 0)
								{
									tsExtendStartDate = tsExtendStartDate.before(r_info.tsExtendStartDate) ? tsExtendStartDate : r_info.tsExtendStartDate;
									tsExtendEndDate = tsExtendEndDate.after(r_info.tsExtendEndDate) ? tsExtendEndDate : r_info.tsExtendEndDate;
								}
								else
								{
									tsExtendStartDate = r_info.tsExtendStartDate;
									tsExtendEndDate = r_info.tsExtendEndDate;
								}
							}
							long lFlag =
								checkOverExtendContract(
									lUserID,
									lExtendApplyID,
									e_info.m_lContractID,
									e_info.lBankRateTypeID,
									e_info.m_lPlanVersionID,
									tsExtendStartDate,
									tsExtendEndDate,
									e_info.m_dBasicInterestRate);
							//对网银合同计划状态进行更新
							//*********added by gqzhang
							log4j.info("\n========开始对网银合同计划状态进行更新==========\\n");
							if (lFlag > 0)
							{
								log4j.info("==========开始回填网合同计划状态===========");
								OBExtendDao obExtendDao = new OBExtendDao();
								OBExtendInfo extendInfo = obExtendDao.findOBExtendByInID(lExtendApplyID);
								if (extendInfo != null)
								{
									ContractPlanInfo contractPlanInfo = extendInfo.getContractPlanInfo();
									if (contractPlanInfo != null)
									{
										if (obExtendDao.updateOBContractPlanStatus(contractPlanInfo.getID(), Constant.RecordStatus.VALID, Constant.YesOrNo.NO) <= 0)
										{
											throw new IException("回填网银指令合同计划状态失败！");
										}
									}
								}
								log4j.info("==========结束回填网合同计划状态");
							}
							log4j.info("\n========结束对网银合同计划状态进行更新==========\\n");
							//*********added by gqzhang
						}
						else
							if (lAction == 4) //修改
							{
								log4j.info("\n\nlAction 修改\n\n");
								lStatusID = Constant.RecordStatus.VALID;
								//装态也置为已提交
								lResultID = Constant.ApprovalDecision.RETURN;
								logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
								strSQL =
									"update LOAN_EXTENDCONTRACT set nnextcheckuserid=ninputuserid, nStatusID="
										+ LOANConstant.ExtendStatus.SUBMIT
										+ ", nNextCheckLevel=1 where ID="
										+ lExtendContractID;
							}
				System.out.println(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.executeUpdate();
				ps.close();
				ps = null;
				info.setModuleID(lModuleID);
				info.setLoanTypeID(lLoanTypeID);
				info.setActionID(lActionID);
				info.setApprovalContentID(lExtendContractID);
				//info.setSerialID(lSerialID);
				info.setUserID(lUserID);
				info.setNextUserID(lNextUserID);
				info.setOpinion(sOpinion);
				info.setResultID(lResultID);
				info.setStatusID(lStatusID);
				info.setOfficeID(lOfficeID);
				info.setCurrencyID(lCurrencyID);
				appbiz.saveApprovalTracing(info);
				lResult = 1;
			}
			if (conn != null)
			{
				conn.close();
			}
			conn = null;
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex)
		{
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
			logInfo.setFailReason(ex.getMessage());
			lResult = -1;
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			//add by jbpan 20120606 start
			
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
    		//add by jbpan 20120606 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}
	
	/**
	 * 审核展期合同，操作Loan_ExtendForm表
	 * <br>最后一级审核后，将对应的计划版本的nIsUsed置为“否”
	 * @param     long        nReviewContentID      审批内容类型
	 * @param     String      sOpinion              审批意见
	 * @param     long        nUserID               审批人标示
	 * @param     long        nNextUserID           下一个审批人标示
	 * @param     InutParameterInfo        pInfo     审批INFO
	 * @param     long        lAction               审批，拒绝，修改，最后审批
	 * @return    long        成功，返回值 == 1，失败，返回值 == -1
	 * @throws IRollbackException 
	 */
	public long checkExtendContract(long lExtendApplyID, String sOpinion, long lUserID, long lNextUserID, long lAction,long lCurrencyID,long lOfficeID,InutParameterInfo pInfo, String sExCode) throws RemoteException, IRollbackException
	{
		System.out.println("here");
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		//定义相应操作常量
		//贷款
		long lModuleID = Constant.ModuleType.LOAN;
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		//模块类型
		long lActionID = Constant.ApprovalAction.EXTEND_CONTRACT;
		long lStatusID = -1;
		long lResultID = -1;
		long lApprovalID = -1;
		long lResult = -1;
		long lExtendContractID = -1;
		long lLevel = -1;
		String strSQL = "";
		ExtendApplyInfo e_info = new ExtendApplyInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
        try {
			logInfo.setBusinessType("贷款展期合同");
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(lExtendApplyID));  //操作日志-业务主键-交易号  
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try
		{
			e_info = findExtendByID(lExtendApplyID);
			lLoanTypeID = e_info.lLoanTypeID;
			Collection c2 = e_info.cExtendContractList;
			Iterator iter2 = c2.iterator();
			ExtendContractInfo ec_info = new ExtendContractInfo();
			while (iter2.hasNext())
			{
				ec_info = (ExtendContractInfo) iter2.next();
				lStatusID = ec_info.m_lStatusID;
				lExtendContractID = ec_info.m_lExtendID;
			}
			if (lAction < 0)
			{
				log4j.info("\n\nlAction 小于零\n\n");
				if (lStatusID == LOANConstant.ExtendStatus.SUBMIT || lStatusID == LOANConstant.ExtendStatus.SAVE)
				{
					lStatusID=LOANConstant.ExtendStatus.SAVE;
					logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
					if(pInfo!=null)
					{
						Log.print("------提交审批--------");
						logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
						pInfo.setTransID(String.valueOf(lExtendContractID));//这里保存的是id
						//提交审批
						FSWorkflowManager.initApproval(pInfo);
						Log.print("------提交审批成功--------");
						lStatusID=LOANConstant.ExtendStatus.APPROVALING;
						
						
					}
					conn = Database.getConnection();
					strSQL = "update LOAN_EXTENDCONTRACT set nStatusID = " + lStatusID + ", scode = '"+ sExCode +"' where ID = " + lExtendContractID;
					System.out.println(strSQL);
					ps = conn.prepareStatement(strSQL);
					ps.executeUpdate();
					ps.close();
					ps = null;
					lResult = 1;
				}
				else
				{
					lResult = -2;
				}
			}
			else
			{
				log4j.info("\n\nlAction 大于零\n\n");
				//获得ApprovalID
				lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID, lActionID,lOfficeID,lCurrencyID);
				//下一级审核人级别
				lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
				Log.print("下一级审核人级别：" + lLevel);
				//审批设置
				appInfo = appbiz.findApprovalSetting(lApprovalID);
				
				conn = Database.getConnection();
				strSQL = "";
				System.out.println("laction=" + lAction);
				if (lAction == 1) //拒绝
				{
					log4j.info("\n\nlAction 拒绝\n\n");
					logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
					//逻辑删除
					appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID, lExtendContractID, 2);
					lStatusID = Constant.RecordStatus.INVALID;
					lResultID = Constant.ApprovalDecision.REFUSE;
					
					cancelExtendContract(lExtendContractID);
					strSQL = "update LOAN_EXTENDCONTRACT set nStatusID=" + LOANConstant.ExtendStatus.REFUSE + " where ID=" + lExtendContractID;
					//同时拒绝对应的展期申请
					checkExtendApply(lExtendApplyID, sOpinion, lUserID, lNextUserID, lAction,lCurrencyID,lOfficeID);
				}
				else
					if (lAction == 2) //审批
					{
						log4j.info("\n\nlAction 审批\n\n");
						lStatusID = Constant.RecordStatus.VALID;
						lResultID = Constant.ApprovalDecision.PASS;
						logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
						if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
						{
						    strSQL = "update LOAN_EXTENDCONTRACT set NNEXTCHECKUSERID=" + lNextUserID + ", nNextCheckLevel=" + lLevel + " where ID=" + lExtendContractID;
							Log.print("更新下一个审核级别（可越级）：" + lLevel);
						}
						else
						{
						    strSQL = "update LOAN_EXTENDCONTRACT set NNEXTCHECKUSERID=" + lNextUserID + ", nNextCheckLevel=nNextCheckLevel+1 where ID=" + lExtendContractID;
							Log.print("更新下一个审核级别（不可越级）：" + lLevel);
						}
					}
					else
						if (lAction == 3) //审批&&最后
						{
							log4j.info("\n\nlAction 审批&&最后\n\n");
							lStatusID = Constant.RecordStatus.VALID;
							lResultID = Constant.ApprovalDecision.FINISH;
							logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
							strSQL =
								"update LOAN_EXTENDCONTRACT set NNEXTCHECKUSERID="
									+ lNextUserID
									+ ", nStatusID="
									+ LOANConstant.ExtendStatus.CHECK
									+ " where ID="
									+ lExtendContractID;
							//审批完成后需要做的操作
							//向ExtendContract插入新值
							Timestamp tsExtendStartDate = null;
							Timestamp tsExtendEndDate = null;
							Collection c1 = e_info.cExtendList;
							Iterator iter1 = c1.iterator();
							RepayPlanInfo r_info = new RepayPlanInfo();
							int iFlag = 0;
							while (iter1.hasNext())
							{
								r_info = (RepayPlanInfo) iter1.next();
								if (iFlag > 0)
								{
									tsExtendStartDate = tsExtendStartDate.before(r_info.tsExtendStartDate) ? tsExtendStartDate : r_info.tsExtendStartDate;
									tsExtendEndDate = tsExtendEndDate.after(r_info.tsExtendEndDate) ? tsExtendEndDate : r_info.tsExtendEndDate;
								}
								else
								{
									tsExtendStartDate = r_info.tsExtendStartDate;
									tsExtendEndDate = r_info.tsExtendEndDate;
								}
							}
							long lFlag =
								checkOverExtendContract(
									lUserID,
									lExtendApplyID,
									e_info.m_lContractID,
									e_info.lBankRateTypeID,
									e_info.m_lPlanVersionID,
									tsExtendStartDate,
									tsExtendEndDate,
									e_info.m_dBasicInterestRate);
							//对网银合同计划状态进行更新
							//*********added by gqzhang
							log4j.info("\n========开始对网银合同计划状态进行更新==========\\n");
							if (lFlag > 0)
							{
								log4j.info("==========开始回填网合同计划状态===========");
								OBExtendDao obExtendDao = new OBExtendDao();
								OBExtendInfo extendInfo = obExtendDao.findOBExtendByInID(lExtendApplyID);
								if (extendInfo != null)
								{
									ContractPlanInfo contractPlanInfo = extendInfo.getContractPlanInfo();
									if (contractPlanInfo != null)
									{
										if (obExtendDao.updateOBContractPlanStatus(contractPlanInfo.getID(), Constant.RecordStatus.VALID, Constant.YesOrNo.NO) <= 0)
										{
											throw new IException("回填网银指令合同计划状态失败！");
										}
									}
								}
								log4j.info("==========结束回填网合同计划状态");
							}
							log4j.info("\n========结束对网银合同计划状态进行更新==========\\n");
							//*********added by gqzhang
						}
						else
							if (lAction == 4) //修改
							{
								log4j.info("\n\nlAction 修改\n\n");
								lStatusID = Constant.RecordStatus.VALID;
								//装态也置为已提交
								lResultID = Constant.ApprovalDecision.RETURN;
								logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
								strSQL =
									"update LOAN_EXTENDCONTRACT set nnextcheckuserid=ninputuserid, nStatusID="
										+ LOANConstant.ExtendStatus.SUBMIT
										+ ", nNextCheckLevel=1 where ID="
										+ lExtendContractID;
							}
				System.out.println(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.executeUpdate();
				ps.close();
				ps = null;
				info.setModuleID(lModuleID);
				info.setLoanTypeID(lLoanTypeID);
				info.setActionID(lActionID);
				info.setApprovalContentID(lExtendContractID);
				//info.setSerialID(lSerialID);
				info.setUserID(lUserID);
				info.setNextUserID(lNextUserID);
				info.setOpinion(sOpinion);
				info.setResultID(lResultID);
				info.setStatusID(lStatusID);
				info.setOfficeID(lOfficeID);
				info.setCurrencyID(lCurrencyID);
				appbiz.saveApprovalTracing(info);
				lResult = 1;
			}
			if (conn != null)
			{
				conn.close();
			}
			conn = null;
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex)
		{
			//add by jbpan 20120606 加上操作日志-操作结果-失败       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
            logInfo.setFailReason(ex.getMessage());
			lResult = -1;
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			//add by jbpan 20120606 start
			
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
    		//add by jbpan 20120606 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}
	
	//如果合同有展期并状态为提交则值为2
	private long getExtendStatus(long lContractID) throws RemoteException
	{
		long lResult = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		try
		{
			conn = Database.getConnection();
			sb.append("select ID from loan_ExtendForm where ncontractid = " + lContractID + " and nstatusid = 2");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				if (rs.getLong(1) > 0)
				{
					lResult = 2;
				}
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lResult;
	}
	/*
	    private String getPlanRate( long lContractID ,
	          Timestamp tsDate ) throws RemoteException
	    {
	        PreparedStatement ps = null ;
	        ResultSet rs = null ;
	        Connection conn = null ;
	        StringBuffer sb = new StringBuffer() ;
	        String sInterestRate = "" ; // for Libor  因为Libor没有值
	        //查找银行利率
	        long lRateType = LOANConstant.InterestRateType.BANK ; // bank rate
	        double dInterestRate = 0 ;
	        try
	        {
	            conn = Database.getConnection() ;
	            sb.append(
	       "select NINTERESTTYPEID from loan_contractform where ID = "
	                  + lContractID ) ;
	            System.out.println( sb.toString() ) ;
	            System.out.println( "1-------------" ) ;
	            ps = conn.prepareStatement( sb.toString() ) ;
	            rs = ps.executeQuery() ;
	            if ( rs.next() )
	            {
	                lRateType = rs.getLong( 1 ) ;
	            }
	            rs.close() ;
	            rs = null ;
	            ps.close() ;
	            ps = null ;
	            sb.setLength( 0 ) ;
	            if ( lRateType == LOANConstant.InterestRateType.LIBOR )
	            { // is Libor Rate
	                                        sb.append("select cc.SNAME,aa.FLIBORADJUST from LOANINFO aa,LIBORINTERESTRATE cc where aa.ID = ? and cc.ID = aa.NLIBORRATEID");
	                                        System.out.println(sb.toString());
	                       ps = conn.prepareStatement(sb.toString());
	                                        ps.setLong(1,lLoanID);
	                                        rs = ps.executeQuery();
	                                        if (rs.next()) {
	                       sInterestRate = rs.getString(1) + " ";
	                                                if (rs.getDouble(2)>=0)
	       sInterestRate = sInterestRate + "+" + rs.getDouble(2);
	                                                else
	                       sInterestRate = sInterestRate + rs.getDouble(2);
	                                        }
	       System.out.println ("ejb---------------libor1.sInterestRate" + sInterestRate);
	                                        rs.close(); rs = null;
	                                        ps.close(); ps = null;
	                                        sb.setLength(0);
	            }
	            else
	            { // is Bank Rate
	                ContractDao contractDao = new ContractDao() ;
	       dInterestRate = contractDao.getLatelyRate( 0 , lContractID ,
	                      tsDate ) ;
	                //dInterestRate = getDefaultBankRate(lLoanID,lContractID,lRateType,dRate);
	                String strSQLInterestRate =
	                      "select mAdjustRate from loan_contractform "
	                      + " where ID = " + lContractID ;
	                ps = conn.prepareStatement( strSQLInterestRate ) ;
	       System.out.println( "3-------------" + strSQLInterestRate ) ;
	                rs = ps.executeQuery() ;
	                if ( rs.next() )
	                {
	                    if ( lRateType == LOANConstant.InterestRateType.BANK )
	                    { // is FX
	       sInterestRate = String.valueOf( DataFormat.formatDouble(
	       dInterestRate + rs.getDouble( "mAdjustRate" ) , 6 ) ) ;
	                    }
	                    else
	                    {
	                        sInterestRate = DataFormat.formatRate( ( float )
	                              dInterestRate ) ;
	                    }
	                }
	                System.out.println( "3-------------" ) ;
	                rs.close() ;
	                rs = null ;
	                ps.close() ;
	                ps = null ;
	            }
	            // -----------------------------------------------------------end
	        }
	        catch ( Exception e )
	        {
	            Log.print( e.toString() ) ;
	       throw new RemoteException( "remote exception : " + e.toString() ) ;
	        }
	        finally
	        {
	            try
	            {
	                if ( rs != null )
	                {
	                    rs.close() ;
	                    rs = null ;
	                }
	                if ( ps != null )
	                {
	                    ps.close() ;
	                    ps = null ;
	                }
	                if ( conn != null )
	                {
	                    conn.close() ;
	                    conn = null ;
	                }
	            }
	            catch ( Exception e )
	            {
	       throw new RemoteException( "remote exception : " + e.toString() ) ;
	            }
	        }
	        return sInterestRate ;
	    }*/
	/*
	    private long getInterestRateID( long lContractID ,
	          Timestamp tsDate ) throws RemoteException
	    {
	        PreparedStatement ps = null ;
	        ResultSet rs = null ;
	        Connection conn = null ;
	        StringBuffer sbSQL = new StringBuffer() ;
	        //查找银行利率ID
	        long lID = -1 ;
	        try
	        {
	            conn = Database.getConnection() ;
	            if ( tsDate == null || tsDate.equals( "" ) )
	            {
	                tsDate = DataFormat.getDateTime( conn ) ;
	            }
	            sbSQL.append(
	       " SELECT b.id FROM loan_rateAdjustContractDetail a ,loan_interestRate b  " ) ;
	            sbSQL.append( " WHERE a.nContractID = ?  " ) ;
	            sbSQL.append(
	       " AND TO_CHAR(a.dtStartDate,'yyyymmdd')<= TO_CHAR(?,'yyyymmdd')" ) ;
	            sbSQL.append( " and a.nBankInterestID = b.id(+) " ) ;
	            sbSQL.append( " ORDER BY  a.dtStartDate DESC " ) ;
	            ps = conn.prepareStatement( sbSQL.toString() ) ;
	            ps.setLong( 1 , lContractID ) ;
	            ps.setTimestamp( 2 , tsDate ) ;
	            rs = ps.executeQuery() ;
	            if ( rs.next() )
	            {
	                lID = rs.getLong( 1 ) ;
	            }
	            rs.close() ;
	            rs = null ;
	            ps.close() ;
	            ps = null ;
	            sbSQL.setLength( 0 ) ;
	        }
	        catch ( Exception e )
	        {
	            Log.print( e.toString() ) ;
	       throw new RemoteException( "remote exception : " + e.toString() ) ;
	        }
	        finally
	        {
	            try
	            {
	                if ( rs != null )
	                {
	                    rs.close() ;
	                    rs = null ;
	                }
	                if ( ps != null )
	                {
	                    ps.close() ;
	                    ps = null ;
	                }
	                if ( conn != null )
	                {
	                    conn.close() ;
	                    conn = null ;
	                }
	            }
	            catch ( Exception e )
	            {
	       throw new RemoteException( "remote exception : " + e.toString() ) ;
	            }
	        }
	        return lID ;
	    }
	    private String getTheRate( long lBankRateTypeID ,
	          long lContractID ) throws RemoteException
	    {
	        PreparedStatement ps = null ;
	        ResultSet rs = null ;
	        Connection conn = null ;
	        StringBuffer sb = new StringBuffer() ;
	        String sInterestRate = "" ; // for Libor  因为Libor没有值
	        //查找银行利率
	        long lRateType = LOANConstant.InterestRateType.BANK ; // bank rate
	        double dInterestRate = 0 ;
	        try
	        {
	            conn = Database.getConnection() ;
	            sb.append(
	                  "select mrate from loan_interestRate where ID = "
	                  + lBankRateTypeID ) ;
	            ps = conn.prepareStatement( sb.toString() ) ;
	            rs = ps.executeQuery() ;
	            if ( rs.next() )
	            {
	                dInterestRate = rs.getDouble( 1 ) ;
	            }
	            rs.close() ;
	            rs = null ;
	            ps.close() ;
	            ps = null ;
	            sb.setLength( 0 ) ;
	            String strSQLInterestRate =
	                  "select nvl(mAdjustRate,0) from loan_contractform "
	                  + " where ID = " + lContractID ;
	            ps = conn.prepareStatement( strSQLInterestRate ) ;
	            rs = ps.executeQuery() ;
	            if ( rs.next() )
	            {
	                sInterestRate = String.valueOf( DataFormat.formatDouble(
	                      dInterestRate + rs.getDouble( 1 ) , 6 ) ) ;
	            }
	            rs.close() ;
	            rs = null ;
	            ps.close() ;
	            ps = null ;
	        }
	        catch ( Exception e )
	        {
	            Log.print( e.toString() ) ;
	       throw new RemoteException( "remote exception : " + e.toString() ) ;
	        }
	        finally
	        {
	            try
	            {
	                if ( rs != null )
	                {
	                    rs.close() ;
	                    rs = null ;
	                }
	                if ( ps != null )
	                {
	                    ps.close() ;
	                    ps = null ;
	                }
	                if ( conn != null )
	                {
	                    conn.close() ;
	                    conn = null ;
	                }
	            }
	            catch ( Exception e )
	            {
	       throw new RemoteException( "remote exception : " + e.toString() ) ;
	            }
	        }
	        return sInterestRate ;
	    }
	 */
	private static String getInputUserName(long lID) throws RemoteException
	{
		String sResult = "";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		try
		{
			conn = Database.getConnection();
			sb.append("select * from USERINFO where ID = " + lID);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			//log4j.info("came here =--------------");
			if (rs.next())
			{
				sResult = rs.getString("SNAME");
			}
			ps.close();
			ps = null;
			sb.setLength(0);
			//log4j.info("came here =--------------");
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return sResult;
	}
	// 计算计划余额：lID：合同标识  lVersionID: 版本标识  lPlanListID  计划明细标示
	private static double getPlanBalance(long lContractID, long lVersionID, long lPlanListID) throws RemoteException
	{
		double dResult = 0;
		double dRepayTotal = -1;
		double dPlanTotal = -1;
		double dTmp = 0;
		double dListAmount = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		try
		{
			conn = Database.getConnection();
			sb.append(
				" select sum(mOpenAmount-mBalance) MREPAYTOTAL from sett_subAccount where AL_nLoanNoteID in (select id from loan_payform where nContractID = "
					+ lContractID
					+ " ) and nStatusID = "
					+ SETTConstant.SubAccountStatus.NORMAL);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dRepayTotal = rs.getDouble("MREPAYTOTAL");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			sb.append(
				"select nContractPlanID,sum(MAMOUNT) MPLANTOTAL from loan_loanContractPlanDetail where NPAYTYPEID = "
					+ LOANConstant.PlanType.REPAY
					+ " and nContractPlanID = "
					+ lVersionID
					+ " group by nContractPlanID");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dPlanTotal = rs.getDouble("MPLANTOTAL");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			sb.append(
				"select sum(mAmount) from loan_loanContractPlanDetail where nPayTypeID = "
					+ LOANConstant.PlanType.REPAY
					+ " and nContractPlanID = "
					+ lVersionID
					+ " and dtPlanDate < (select dtplandate from loan_loanContractPlanDetail where id ="
					+ lPlanListID
					+ " )");
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dTmp = rs.getDouble(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			sb.append("select mAmount from loan_loanContractPlanDetail where id =" + lPlanListID);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next())
			{
				dListAmount = rs.getDouble(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			sb.setLength(0);
			System.out.println("dResult is :" + dResult);
			System.out.println("dRepayTotal is :" + dRepayTotal);
			System.out.println("dPlanTotal is :" + dPlanTotal);
			System.out.println("dTmp is :" + dTmp);
			System.out.println("dListAmount is :" + dListAmount);
			if ((dRepayTotal - dTmp) > 0)
			{
				if (dListAmount > (dRepayTotal - dTmp))
				{
					dResult = dListAmount - (dRepayTotal - dTmp);
				}
				else
				{
					dResult = 0;
				}
			}
			else
			{
				dResult = dListAmount;
			}
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return dResult;
	}
	// 计算还款总额：lContractID：合同标识
	private static double getPlanBalanceTotal(long lContractID) throws RemoteException
	{
		double dRepayTotal = 0;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";
		try
		{
			/**********（计划余额）已还金额************/
			con = Database.getConnection();
				strSQL =
					" select ncontractid,sum(mamount) repaytotal from "
						+ " ( "
						+ "    select nloancontractid as ncontractid "
						+ "    ,DTINTERESTSTART,mamount "
						+ "    from SETT_transrepaymentloan "
			//+ "    union "  TODO  ninghao 一发多收待定
		//+ "      select ncontractid,dtexecute,mamount "
		//+ "      from transmultiloanrepayment "
	+" ) " + " where ncontractid = " + lContractID + " and DTINTERESTSTART <= sysdate " + " group by ncontractid " + "";
			Log.print("SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				dRepayTotal = rs.getDouble("REPAYTOTAL");
			}
			if (rs != null)
			{
				rs.close();
				rs = null;
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return dRepayTotal;
	}
	//审批完成后需要做的操作
	private long insertExtendContract(long lExtendID, String strContractCode, String strExtendReason, long lInputUserID,
	          long lCurrencyID,
			  long lOfficeID) throws Exception
	{
		PreparedStatement ps = null;
		PreparedStatement ps1 = null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		Connection conn = null;
		long lECID = -1;
		long lSerialID = -1;
		long lReturn = -1;
		//long lOBStatusID = 0;
		String strSQL = "";
		try
		{
			conn = Database.getConnection();
			strSQL = "select id from loan_extendcontract where NEXTENDID = " + lExtendID +" and loan_extendcontract.NCURRENCYID= "+lCurrencyID+" and loan_extendcontract.NOFFICEID= "+lOfficeID+" and nstatusid > " + Constant.RecordStatus.INVALID;
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				lECID = rs.getLong("id");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			if (lECID > 0)
			{
				lReturn = -1;
				throw new RemoteException("已存在同一展期申请生成的展期合同！");
			}
			else
			{
				//得到同一合同已生成的展期合同数量+1（序列号）
				strSQL =
					"select nvl(max(NSERIALNO),0)+1 from loan_extendcontract "
						+ " where NEXTENDID in"
						+ " (select id from loan_extendform "
						+ " where NCONTRACTID in "
						+ " (select NCONTRACTID "
						+ " from loan_extendform where id = "
						+ lExtendID
						+ ")) and nstatusid > "
						+ Constant.RecordStatus.INVALID
						+" and NCURRENCYID="
						+ lCurrencyID
						+ " and NOFFICEID="
						+ lOfficeID;
						
				System.out.println(strSQL);
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs != null && rs.next())
				{
					lSerialID = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
                    
				strSQL =
					"insert into loan_extendcontract "
						+ " (ID,SCODE,NEXTENDID,NSERIALNO,NSTATUSID,NINPUTUSERID "
						+ " ,DTINPUTDATE,NNEXTCHECKUSERID,SREASON,nNextCheckLevel,MstaidAdjustRate,mAdjustRate,NCURRENCYID,NOFFICEID) values  "
						+ " (nvl((select max(id) from loan_extendcontract),0)+1, "
						+ " ?,?,?,?,?,sysdate,?,?,1" 
                        + ",(select nvl(MstaidAdjustRate,0) MstaidAdjustRate from loan_extendform where id=?)"
                        + ",(select nvl(mAdjustRate,0) mAdjustRate from loan_extendform where id=?)"
                        +",?,?)";
				System.out.println(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setString(1, strContractCode);
				ps.setLong(2, lExtendID);
				ps.setLong(3, lSerialID);
				ps.setLong(4, LOANConstant.ExtendStatus.SAVE);
				ps.setLong(5, lInputUserID);
				ps.setLong(6, lInputUserID);
				ps.setString(7, strExtendReason);
				ps.setLong(8, lExtendID);
                ps.setLong(9, lExtendID);
				ps.setLong(10,lCurrencyID);
				ps.setLong(11,lOfficeID);
                
				if ((lReturn = ps.executeUpdate()) < 1)
				{
					System.out.println("error.insert.loan_extendcontract");
				}
				ps.close();
				ps = null;
			}
			if (conn != null)
			{
				conn.close();
			}
			conn = null;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw ex;
		}
		finally
		{
			try
			{
				if (rs1 != null)
				{
					rs1.close();
					rs1 = null;
				}
				if (ps1 != null)
				{
					ps1.close();
					ps1 = null;
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		return lReturn;
	}
	//审批完成后需要做的操作
	private long checkOverExtendContract(
		long lUserID,
		long lExtendApplyID,
		long lContractID,
		long lBankRateTypeID,
		long lPlanVersionID,
		Timestamp tsExtendStartDate,
		Timestamp tsExtendEndDate,
		double dInterestRate)
		throws Exception
	{
		log4j.info("\n=============   审批完成后需要做的操作   ========\n");
		PreparedStatement ps = null;
		PreparedStatement ps1 = null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		Connection conn = null;
		long lECID = -1;
		long lSerialID = -1;
		long lReturn = -1;
		Timestamp tsEndDate = null;
		//add by zcwang 2008-4-17
		Timestamp tsEndDate1 = null;
		//
		//long lOBStatusID = 0;
		String strSQL = "";
		try
		{
			conn = Database.getConnection();
			if (lBankRateTypeID > 0)
			{
				//判断在 LOAN_RATEADJUSTCONTRACTDETAIL表中是否有生效日期大于等于tsExtendStartDate的日期，如果有，则将该记录删除
				strSQL = "select id from LOAN_RATEADJUSTCONTRACTDETAIL where NCONTRACTID = " + lContractID + " and NADJUSTCONDITIONID = -1 and DTSTARTDATE >= ?";
				System.out.println(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setTimestamp(1, tsExtendStartDate);
				rs = ps.executeQuery();
				if (rs != null && rs.next())
				{
					strSQL = "delete from LOAN_RATEADJUSTCONTRACTDETAIL where NCONTRACTID = " + lContractID + " and NADJUSTCONDITIONID = -1 and DTSTARTDATE >= ?";
					System.out.println(strSQL);
					ps1 = conn.prepareStatement(strSQL);
					ps1.setTimestamp(1, tsExtendStartDate);
					if ((lReturn = ps1.executeUpdate()) < 1)
					{
						System.out.println("error.delete.LOAN_RATEADJUSTCONTRACTDETAIL");
					}
					ps1.close();
					ps1 = null;
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				//更新LOAN_RATEADJUSTCONTRACTDETAIL表，因为展期后，展期利率应影响合同利率
				strSQL =
					"INSERT INTO LOAN_RATEADJUSTCONTRACTDETAIL "
						+ " (id,nadjustconditionid,ncontractid,nbankinterestid,"
						+ " nadjustserial,dtstartdate,dtenddate,mrate,"
						+ " niscountinterest,nextendapplyid,mAdjustRate,mStaidAdjustRate) VALUES"
						+ " (nvl((select max(id) from LOAN_RATEADJUSTCONTRACTDETAIL),0)+1,"
						+ " ?, ?, ?, nvl((select max(nadjustserial) from "
						+ "LOAN_RATEADJUSTCONTRACTDETAIL where ncontractid = ?),0)+1,"
						+ " ?, ?, ?, ?, ?" 
                        + " ,(select nvl(mAdjustRate,0) mAdjustRate from loan_extendform where id=?)" 
                        + " ,(select nvl(mStaidAdjustRate,0) mStaidAdjustRate from loan_extendform where id=?)" +
                        " )";
				//************************************
				//test set, wait to del
				System.out.println("*************更新adjustedcontract表，因为展期后，展期利率应影响合同利率 checkExtendContract()   Test by LW " + strSQL);
				// System.out.println("*************ADJUSTEDCONTRACT表ID lAdjustedContractID= "+lAdjustedContractID);
				//************************************
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, -1); //nadjustconditionid
				ps.setLong(2, lContractID); //ncontractid
				ps.setLong(3, lBankRateTypeID); //nbankinterestid
				ps.setLong(4, lContractID); //nvl((select max(nadjustserial) from LOAN_RATEADJUSTCONTRACTDETAIL where ncontractid = ?
				ps.setTimestamp(5, tsExtendStartDate); //dtstartdate
				ps.setTimestamp(6, tsExtendEndDate);
				; //dtenddate
				ps.setDouble(7, dInterestRate); //mrate
				ps.setLong(8, Constant.YesOrNo.NO); //nadjustconditionid
				ps.setLong(9, lExtendApplyID); //nadjustconditionid
                ps.setLong(10, lExtendApplyID); //
                ps.setLong(11, lExtendApplyID); //
				lReturn = ps.executeUpdate();
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
			}
			//更新版本状态
			log4j.info("\n\n\n=========更新合同计划状态==========\n\n\n\n");
			strSQL = "UPDATE LOAN_LOANCONTRACTPLAN SET NSTATUSID = ?,NISUSED = ? WHERE ID =? ";
			//************************************
			//test set, wait to del
			log4j.info("合同计划id：" + lPlanVersionID);
			System.out.println("*************更新版本状态 checkExtendContract()   Test by LW " + strSQL);
			// System.out.println("*************版本ID lPayPlanVersionID= "+lPayPlanVersionID);
			//************************************
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, Constant.RecordStatus.VALID);
			ps.setLong(2, Constant.YesOrNo.NO);
			ps.setLong(3, lPlanVersionID);
			lReturn = ps.executeUpdate();
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			//判断在 LOAN_CONTRACTFORM 表中合同到期日期和展期到期日的大小
			strSQL = "select DTENDDATE from LOAN_CONTRACTFORM where ID = " + lContractID;
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				tsEndDate = rs.getTimestamp("DTENDDATE");
				//add by zcwang 2008-4-17
				tsEndDate1 = tsEndDate;
				//
				if (tsEndDate.before(tsExtendEndDate))
				{
					tsEndDate = tsExtendEndDate;
				}
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			//更新合同为是展期，更新合同到期日
			strSQL = "UPDATE LOAN_CONTRACTFORM SET ISEXTEND = ?,DTENDDATE = ?,NSTATUSID = ? WHERE ID =? ";
			//************************************
			//test set, wait to del
			System.out.println("*************更新合同为是展期，更新合同到期日 checkExtendContract()   Test by FYM " + strSQL);
			// System.out.println("*************版本ID lPayPlanVersionID= "+lPayPlanVersionID);
			//************************************
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, Constant.YesOrNo.YES);
			ps.setTimestamp(2, tsEndDate);
			ps.setLong(3, LOANConstant.ContractStatus.EXTEND);
			ps.setLong(4, lContractID);
			lReturn = ps.executeUpdate();
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			//add by zcwang 2008-4-17  更新放款通知单结束日期后延,展期和合同结束的时间差
			long days = DataFormat.getIntervalDays(tsEndDate1,tsExtendEndDate)-1;
			strSQL ="update loan_payform t  set t.dtend = t.dtend + "+ days +"  where t.ncontractid = ?  and t.nstatusid= ? ";
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lContractID);
			ps.setLong(2, LOANConstant.LoanPayNoticeStatus.USED);
			lReturn = ps.executeUpdate();
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			//end
			if (conn != null)
			{
				conn.close();
			}
			conn = null;
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw ex;
		}
		finally
		{
			try
			{
				if (rs1 != null)
				{
					rs1.close();
					rs1 = null;
				}
				if (ps1 != null)
				{
					ps1.close();
					ps1 = null;
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		return lReturn;
	}
	private String getUserPriv(long lUserID) throws RemoteException
	{
		StringBuffer sb = new StringBuffer();
		String strResult = "";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try
		{
			con = Database.getConnection();
			// get the whole content
			sb.append(" SELECT sPrivLevel FROM userinfo Where ID = ?");
			ps = con.prepareStatement(sb.toString());
			ps.setLong(1, lUserID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				strResult = rs.getString(1);
			}
			else
			{
				strResult = "";
			}
			if (rs != null)
			{
				rs.close();
				rs = null;
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			sb.setLength(0);
		}
		catch (Exception e)
		{
			strResult = "";
			// System.out.println(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}
		}
		return strResult;
	}
	
    /**
     * 更新展期申请是否走最小审核级别字段
     * @param extendID
     * @param isLowLevel
     * @return
     * @throws RemoteException
     * @throws IException
     */    
	public long updateExtendCheckLevel(long extendID, long isLowLevel) throws RemoteException,IException
    {
        PreparedStatement ps = null;
        Connection conn = null;
        String strSQL = null;
        long lResult = -1;
        
        try 
        {
            conn = Database.getConnection();
            strSQL = " update Loan_ExtendForm set isLowLevel = ? where ID = ? ";
            
            ps=conn.prepareStatement(strSQL);
            ps.setLong(1,isLowLevel);
            ps.setLong(2,extendID);
        
            lResult = ps.executeUpdate();
            
            ps.close();
			ps = null;
			conn.close();
			conn = null;
            
            if ( lResult<0 )
            {
                Log.print(" update loan isLowLevel error : " + lResult);
                return -1;
            }
            else
            {
                return extendID;
            }
        }
        catch (Exception e)
		{
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

    }
	
	
	public long cancelOrigContractModifyByExtendContractID(long extendID) throws RemoteException,IException
    {
        PreparedStatement ps = null;
        Connection conn = null;
        String strSQL = null;
        long lResult = -1;
        ResultSet rs = null;
        StringBuffer sb = new StringBuffer();
        Timestamp dtplandate= null;
        long ncontractid=-1;
        Timestamp tsEndDate=null;
        Timestamp tsEndDate1=null;
        try 
        {
            conn = Database.getConnection();
            sb.append( " select dtplandate from loan_loancontractplandetail c where c.npaytypeid=2 and c.ncontractplanid in(select g.nlastplanversionid from LOAN_EXTENDCONTRACT f,Loan_Extendform g where f.id=? and f.nextendid=g.id) ");
        	System.out.println(sb.toString());
        	ps = conn.prepareStatement(sb.toString());
            ps.setLong(1,extendID);
            rs = ps.executeQuery();
            if (rs.next())
			{
            	dtplandate = rs.getTimestamp("dtplandate"); // 日期
			}
            rs.close();
			rs = null;
            ps.close();
			ps = null;
			sb.setLength(0);
			strSQL =" select g.ncontractid from Loan_Extendform g , LOAN_EXTENDCONTRACT f  where  f.id=? and f.nextendid=g.id";
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1,extendID);
			rs = ps.executeQuery();
			while (rs.next())
			{
				ncontractid=rs.getLong("ncontractid");
			}
		
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			
			strSQL = "select DTENDDATE from LOAN_CONTRACTFORM where ID = " + ncontractid;
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			
			if (rs != null && rs.next())
			{
				tsEndDate = rs.getTimestamp("DTENDDATE");
				tsEndDate1 = tsEndDate;
				if (tsEndDate.after(dtplandate ))
				{
					tsEndDate = dtplandate ;
				}
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			
			
			strSQL = "UPDATE LOAN_CONTRACTFORM SET DTENDDATE = ? ,nstatusid=? WHERE ID =? ";			
			ps = conn.prepareStatement(strSQL);
		
			ps.setTimestamp(1, tsEndDate);
			ps.setLong(2, LOANConstant.ContractStatus.ACTIVE);
			ps.setLong(3, ncontractid);
			
			lResult = ps.executeUpdate();
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			
			strSQL ="update loan_payform t  set t.dtend = ?  where t.ncontractid = ?  ";
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setTimestamp(1, tsEndDate);
			ps.setLong(2, ncontractid);
        	lResult = ps.executeUpdate();
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
		
			if (conn != null)
			{
				conn.close();
			}
			conn = null;
            if ( lResult<0 )
            {
              
                return -1;
            }
            else
            {
                return lResult;
            }
        }
        catch (Exception e)
		{
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		finally
		{
			try
			{
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				log4j.error(ex.toString());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

    }
	/**
	 * 展期申请审批方法
	 * 
	 * @param pInfo
	 * @param lExtendApplyID
	 * @param sOpinion
	 * @param lUserID
	 * @param lNextUserID
	 * @param lAction
	 * @param lCurrencyID
	 * @param lOfficeID
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long doApproval(InutParameterInfo pInfo, long lExtendApplyID,
			String sOpinion, long lUserID, long lNextUserID, long lAction,
			long lCurrencyID, long lOfficeID) throws RemoteException,
			IRollbackException {
		InutParameterInfo returnInfo = new InutParameterInfo();
		ExtendApplyDao dao = new ExtendApplyDao();
		long returnid = -1;
		long lOBStatusID = -1;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setBusinessType("贷款展期申请");
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        // add by jbpan 20120606 end
		// 提交审批
		try {
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(lExtendApplyID));  //操作日志-业务主键-交易号
			returnInfo = FSWorkflowManager.doApproval(pInfo);

			lOBStatusID = OBConstant.LoanInstrStatus.ACCEPT;

			// 如果是最后一级,且为审批通过,更新状态为已审批
			if (returnInfo.isLastLevel()) {

				returnid = dao.updateStatus(lExtendApplyID,
						LOANConstant.LoanStatus.CHECK);

				ExtendApplyInfo e_info = new ExtendApplyInfo();
				e_info = findExtendByID(lExtendApplyID);

				// 审批完成后需要做的操作
				// 向ExtendContract插入新值
				// 编码规则
				HashMap map = new HashMap();
				map.put("officeID",String.valueOf(lOfficeID));
				map.put("currencyID",String.valueOf(lCurrencyID));
				map.put("moduleID",String.valueOf(Constant.ModuleType.LOAN));
				map.put("transTypeID",String.valueOf(e_info.lLoanTypeID));
				map.put("actionID",String.valueOf(Constant.CodingruleAction.EXTEND_CONTRACT));
				map.put("subTransTypeID",String.valueOf(e_info.lLoanSubTypeID));
				map.put("contractID",String.valueOf(e_info.m_lContractID));
				String strExtendConstractCode = CreateCodeManager.createCode(map);
				//
				long lFlag = insertExtendContract(lExtendApplyID,
						strExtendConstractCode, e_info.m_strExtendReason,
						e_info.m_lInputUserID, lCurrencyID, lOfficeID);

				if (lFlag >= 1) {

					ContractContentDao contractContentDao = new ContractContentDao();
					String strFileName = "";

					if (e_info.lLoanTypeID == LOANConstant.LoanType.WT) {
						strFileName = contractContentDao
								.addWTDKZQXY(lExtendApplyID);
					} else {
						strFileName = contractContentDao
								.addJKZQXY(lExtendApplyID);
					}

					if (strFileName != null && !strFileName.equals("")) {
						ContractContentInfo contractContentInfo = new ContractContentInfo();
						contractContentInfo
								.setContractTypeID(LOANConstant.ContractType.EXTEND);
						contractContentInfo.setContractID(e_info.m_lContractID);
						contractContentInfo.setParentID(lExtendApplyID);
						contractContentInfo.setDocName(strFileName);
						lFlag = contractContentDao
								.saveContractContent(contractContentInfo);
					}
				}

				lOBStatusID = OBConstant.LoanInstrStatus.APPROVE;
				//add by jbpan 20120606 加上操作日志-操作类型-审批
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
			} else if (returnInfo.isRefuse()) {
				//add by jbpan 20120606 加上操作日志-操作类型-审批拒绝
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				lOBStatusID = OBConstant.LoanInstrStatus.REFUSE;

				//cancelExtendApply(lExtendApplyID);

				returnid = dao.updateStatus(lExtendApplyID,
						LOANConstant.ExtendStatus.SAVE);
				
			}

			// 对网银指令进行回填内部指令
			OBExtendDao obExtendDao = new OBExtendDao();
			if (lOBStatusID > 0) {
				obExtendDao.updateOBStatus(lExtendApplyID, lOBStatusID);
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception e) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
        finally
        {
        	  
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120606 end
		return returnid;
	}
	
	/**
	 * 展期合同审批方法
	 * 
	 * @param lApprovalContentID
	 * @param sOpinion
	 * @param lUserID
	 * @param lNextUserID
	 * @param lAction
	 * @param lCurrencyID
	 * @param lOfficeID
	 * @param pInfo
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long doApproval(long lExtendApplyID,String sOpinion,long lUserID,long lNextUserID,long lAction,long lCurrencyID,long lOfficeID,InutParameterInfo pInfo)throws RemoteException, IRollbackException
	{
		InutParameterInfo returnInfo = new InutParameterInfo();
		ExtendApplyInfo e_info = new ExtendApplyInfo();
		ExtendApplyDao dao = new ExtendApplyDao();
		long lExtendContractID = -1;
		long returnid = -1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
		logInfo.setBusinessType("贷款展期合同");
        // add by jbpan 20120607 end
		//		提交审批
		try {
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(lExtendApplyID));  //操作日志-业务主键
			e_info = findExtendByID(lExtendApplyID);
			Collection c2 = e_info.cExtendContractList;
			Iterator iter2 = c2.iterator();
			ExtendContractInfo ec_info = new ExtendContractInfo();
			while (iter2.hasNext())
			{
			ec_info = (ExtendContractInfo) iter2.next();
			 lExtendContractID = ec_info.m_lExtendID;
			}
			
			
			returnInfo = FSWorkflowManager.doApproval(pInfo);
			//	如果是最后一级,且为审批通过,更新状态为已审批
			
			if(returnInfo.isLastLevel())
			{	
				//returnid = this.checkExtendContract(lApprovalContentID,sOpinion,lUserID,lNextUserID,lAction,lCurrencyID,lOfficeID,pInfo);
			
					
				returnid = dao.updateContractStatus(lExtendContractID, LOANConstant.LoanStatus.CHECK);
			
			
                 //审批完成后需要做的操作
				//向ExtendContract插入新值
				
				Timestamp tsExtendStartDate = null;
				Timestamp tsExtendEndDate = null;
				Collection c1 = e_info.cExtendList;
				Iterator iter1 = c1.iterator();
				RepayPlanInfo r_info = new RepayPlanInfo();
				int iFlag = 0;
				while (iter1.hasNext())
				{
					r_info = (RepayPlanInfo) iter1.next();
					if (iFlag > 0)
					{
						tsExtendStartDate = tsExtendStartDate.before(r_info.tsExtendStartDate) ? tsExtendStartDate : r_info.tsExtendStartDate;
						tsExtendEndDate = tsExtendEndDate.after(r_info.tsExtendEndDate) ? tsExtendEndDate : r_info.tsExtendEndDate;
					}
					else
					{
						tsExtendStartDate = r_info.tsExtendStartDate;
						tsExtendEndDate = r_info.tsExtendEndDate;
					}
				}
				long lFlag =
					checkOverExtendContract(
						lUserID,
						lExtendApplyID,
						e_info.m_lContractID,
						e_info.lBankRateTypeID,
						e_info.m_lPlanVersionID,
						tsExtendStartDate,
						tsExtendEndDate,
						e_info.m_dBasicInterestRate);
                //对网银合同计划状态进行更新
				//*********added by gqzhang
				log4j.info("\n========开始对网银合同计划状态进行更新==========\\n");
				if (lFlag > 0)
				{
					log4j.info("==========开始回填网合同计划状态===========");
					OBExtendDao obExtendDao = new OBExtendDao();
					OBExtendInfo extendInfo = obExtendDao.findOBExtendByInID(lExtendApplyID);
					if (extendInfo != null)
					{
						ContractPlanInfo contractPlanInfo = extendInfo.getContractPlanInfo();
						if (contractPlanInfo != null)
						{
							if (obExtendDao.updateOBContractPlanStatus(contractPlanInfo.getID(), Constant.RecordStatus.VALID, Constant.YesOrNo.NO) <= 0)
							{
								throw new IException("回填网银指令合同计划状态失败！");
							}
						}
					}
					log4j.info("==========结束回填网合同计划状态");
				}
				log4j.info("\n========结束对网银合同计划状态进行更新==========\\n");
			
			}
		
			else if(returnInfo.isRefuse())
			{
				//cancelExtendContract(lExtendContractID);
				
				/**
				pInfo=null;
				sOpinion="";
				lNextUserID=lUserID=-1;
				lAction=-1;
				returnid = this.checkExtendContract(lApprovalContentID,sOpinion,lUserID,lNextUserID,lAction,lCurrencyID,lOfficeID,pInfo);
				*/
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				returnid = dao.updateContractStatus(lExtendContractID, LOANConstant.ExtendStatus.SAVE);
			}
			else{
				returnid = LOANConstant.ExtendStatus.APPROVALING;
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return returnid;
	}
	
	
	/**
	 * Modify by leiyang date 2007/07/10
	 * 审批流：校验合同状态
	 * @param loanInfo
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long checkContract(long lExtendApplyID)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		ExtendApplyDao dao = new ExtendApplyDao();
		try
		{
			//校验合同状态
			lReturn = dao.checkContractState(lExtendApplyID);					
		}
		catch (Exception e)
		{
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return lReturn;
	}
	
	/**
	 * Modify by leiyang date 2007/07/12
	 * 审批流：取消审批方法（展期申请处理）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(InutParameterInfo inutParameterInfo,long lExtendApplyID)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		ExtendApplyDao dao = new ExtendApplyDao();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
		logInfo.setBusinessType("贷款展期申请");
        // add by jbpan 20120606 end
		try
		{
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(lExtendApplyID));  //操作日志-业务主键-交易号  
			//取消审批
			lReturn = dao.updateStatusAndCheckStatus(lExtendApplyID,LOANConstant.ExtendStatus.SAVE);
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
					
				}				
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120606 end
		return lReturn;
	}
	
	/**
	 * Modify by leiyang date 2007/07/12
	 * 审批流：取消审批方法（展期申请处理）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApprovalContract(InutParameterInfo inutParameterInfo,long lExtendContractID)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		ExtendApplyDao dao = new ExtendApplyDao();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
		logInfo.setBusinessType("贷款展期合同");
        // add by jbpan 20120606 end
		try
		{
			//modify by jbpan 20120627 获取业务主键方法变更
			long extendID = dao.getExtendApplyIdByExtendContractId(lExtendContractID);
			logInfo.setTransCode(NameRef.getContractCodeByExtendApplyID(extendID));  //操作日志-业务主键-交易号  
			//取消审批
			lReturn = dao.updateContractStatusAndCheckStatus(lExtendContractID, LOANConstant.LoanStatus.SAVE);
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}	
				
				cancelOrigContractModifyByExtendContractID(lExtendContractID);
				
				
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120606 end
		return lReturn;
	}

}
