package com.iss.itreasury.loan.loancommonsetting.bizlogic;
import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
import com.iss.itreasury.util.*;

import java.rmi.RemoteException;
//
import java.util.*;
import java.sql.*;
//
import com.iss.itreasury.loan.loancommonsetting.dataentity.*;
import javax.ejb.EJBObject;
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public interface LoanCommonSetting extends EJBObject
{
    /**
     * findContractByMultiOption 查找合同信息
     * 根据所给定的条件，查找合同信息
     * 操作LoanInfo、ContractInfo数据表
     * 查询记录
     * haoning 2003-09-01
     * @param lLoanType 贷款种类
     * @param lContractIDBeg 需查找的合同编号下限
     * @param lContractIDEnd 需查找的合同编号上限
     * @param lLoanClientID 贷款单位
     * @param dLoanSumBeg 贷款金额的下限
     * @param dLoanSumEnd 贷款金额的上限
     * @param lContractStatus 合同状态
     * @param lContractManagerID 合同管理人
     * @param lCurrencyID 币种
     * @param lOfficeID 办事处ID
     * @param long           lPageLineCount        每页页行数条件
     * @param long           lPageNo               第几页条件
     * @param long           lOrderParam           排序条件，根据此参数决定结果集排序条件
     * @param long           lDesc                 升序或降序
     * @return Collection  合同详细信息
     * @throws RemoteException
     */
    public Collection findContractByMultiOption(
        long lLoanType,
        long lContractIDBeg,
        long lContractIDEnd,
        long lLoanClientID,
        double dLoanSumBeg,
        double dLoanSumEnd,
        long lContractStatus,
        long lContractManagerID,
        long lCurrencyID,
        long lOfficeID,
        long lPageLineCount,
        long lPageNo,
        long lOrderParam,
        long lDesc)
        throws IException,RemoteException;
    
    
    /**
     * changeContractManager  合同管理人变更
     * 变更合同的管理人
     * 操作ContractInfo数据表
     * 更新表中的nInputUserID字段
     * 只对当前页中的合同进行变更。全选即当前页种的内容被全部选择。
     * haoning TODO
     * @param lContractID 合同标示
     * @param lContractManagerID 合同管理人标识
     * @return long 成功返回1，失败返回0
     * @throws RemoteException
     */
    public long changeContractManager(
        long lContractID[],
        long lContractManagerID,String reason)
        throws IException,RemoteException;
    
    
    
    /**
     * findLoanByMultiOption 查找申请书信息
     * 根据所给定的条件，查找申请书信息
     * 操作LoanInfo、ContractInfo数据表
     * 查询记录
     * haoning 2003-09-01
     * @param lLoanType 贷款种类
     * @param lLoanIDBeg 需查找的申请书编号下限
     * @param lLoanIDEnd 需查找的申请书编号上限
     * @param lLoanClientID 贷款单位
     * @param dLoanSumBeg 贷款金额的下限
     * @param dLoanSumEnd 贷款金额的上限
     * @param lLoanStatus 申请书状态
     * @param lLoanManagerID 申请书管理人
     * @param lCurrencyID 币种
     * @param lOfficeID 办事处ID
     * @param long           lPageLineCount        每页页行数条件
     * @param long           lPageNo               第几页条件
     * @param long           lOrderParam           排序条件，根据此参数决定结果集排序条件
     * @param long           lDesc                 升序或降序
     * @return Collection  申请书详细信息
     * @throws RemoteException
     */
    public Collection findLoanByMultiOption(
        long lLoanType,
        long lLoanIDBeg,
        long lLoanIDEnd,
        long lLoanClientID,
        double dLoanSumBeg,
        double dLoanSumEnd,
        long lLoanStatus,
        long lLoanManagerID,
        long lCurrencyID,
        long lOfficeID,
        long lPageLineCount,
        long lPageNo,
        long lOrderParam,
        long lDesc)
        throws IException,RemoteException;
    /**
     * changeLoanManager  申请书管理人变更
     * 变更申请书的管理人
     * 操作ContractInfo数据表
     * 更新表中的nInputUserID字段
     * 只对当前页中的申请书进行变更。全选即当前页种的内容被全部选择。
     * haoning TODO
     * @param lLoanID 申请书标示
     * @param lLoanManagerID 申请书管理人标识
     * @return long 成功返回1，失败返回0
     * @throws RemoteException
     */
    public long changeLoanManager(long lLoanID[], long lLoanManagerID)
        throws IException,RemoteException;
    /**
     * findClient 查找现有客户
     * 根据客户编号查找现有客户，返回客户详细资料
     * 操作Client数据表
     * 查询记录
     * haoning
     * @param strClientID String  客户编号
     * @return ClientInfo  详细的客户信息
     * @throws RemoteException`
     */
    public ClientInfo findClientByID(long lClientID)
        throws IException,RemoteException;
    /**
     * 新增（修改）客户详细资料
     * saveClientInfo  新增（修改）客户的详细资料
     * 操作Client数据表
     * 更新相应字段
     * lID=0,新增  lID>0,修改
     * 约定：long型参数=-1，string型参数=“”,为未使用项，不参与新增或修改
     *
     * @param clientinfo 客户信息
     * 相应字段：（包含在clientinfo类中）
     * @param lID 标识
     * @param strClientName   公司名称
     * @param strClientNo,    客户编号
     * @param strLicence,     营业执照
     * @param lOfficeID,      办事处
     * @param strOfficeAccount,     办事处账号
     * @param strBank,        开户银行
     * @param strAccount      开户银行账号
     * @param strBank1,       开户银行1
     * @param strAccount1,    账号1
     * @param strBank2,       开户银行2
     * @param strAccount2,    账号2
     * @param strBank3,       开户银行3
     * @param strAccount3,    账号3
     * @param strProvince,    省
     * @param strCity,        市
     * @param strAddress1,    地址1
     * @param strAddress2     地址2
     * @param strZipCode,     邮编
     * @param strDeputy,      法人代表
     * @param strTel,         电话
     * @param strFax,         传真
     * @param strMailAddr,    电邮
     * @param strContact,     联系人
     * @param strEconomic,    经济性质
     * @param lGovernmentID,  主管部门表示
     * @param isShareHolder,  是否股份
     * @param lClientTypeID,  客户分类
     * @param lCreditLevel,   信用等级
     * @param lVentureLevel   风险评级
     * @param strCapital        注册资本
     *
     * @return long 成功返回ID信息，失败返回0
     * @throws RemoteException
     */
    public long saveClientInfo(ClientInfo clientinfo)
        throws IException,RemoteException;
    /**
     * saveAtTermAwake  信贷部分到期业务提醒
     * 进行到期业务提醒设置，提前XX天提醒客户,提醒XX天。
     * 操作loan_attermawakesetting 数据表
     * 更新相应字段
     * 与办事处相关，与币种无关
     *
     * @param lTypeID 提醒类型
     * @param lAheadDays 提前天数
     * @param lAwakeDays 提醒天数
     * @param lOfficeID 办事处ID
     * @return long 成功返回1，失败返回0
     * @throws RemoteException
     */
    public long saveAtTermAwake(
        long lTypeID[],
        long lAheadDays[],
        long lAwakeDays[],
        long lOfficeID)
        throws java.rmi.RemoteException, IRollbackException;
    /**
     * findAtTermAwake  到期业务提醒查找
     * 根据类型（信贷/外汇）进行到期业务提醒查找
     * 操作AtTermAwake数据表
     *
     * @param lTypeID 提醒类型
     * @param lOfficeID 办事处ID
     * @return long 成功返回1，失败返回0
     * @throws RemoteException
     */
    public AtTermAwakeInfo findAtTermAwake(long lTypeID, long lOfficeID)
        throws IException,RemoteException;
    /**
     * addClientType  新增普通贷款客户类型
     * 新增客户类型
     * 操作XXXXX
     * 新增记录
     *
     * @param lInputUserID 录入人
     * @param tsInputDate 录入日期
     * @param strClientTypeCode 客户类型编号
     * @param strClientTypeName 客户类型名称
     * @param lID 标识 新增 0/修改 ！=0
     * @return long 成功返回ID标识，失败返回0
     * @throws RemoteException
     */
    public long addClientType(
        long lInputUserID,
        Timestamp tsInputDate,
        String sClientTypeCode,
        String sClientTypeName,
        long lID,
		long lOfficeID)
        throws IException,RemoteException;
    /**
     * findClientTypeByID  查询普通贷款客户分类
     * 客户分类查询
     * 操作XXXXX
     * 查询相应记录
     *
     * @param lID 客户分类编号
     * @return CostomerTypeInfo  客户分类信息
     * @throws RemoteException
     */
    public ClientTypeInfo findClientTypeByID(long lID)
        throws IException,RemoteException;
    /**
      * findClientTypeByID  查询最大普通贷款客户分类标示
      * 操作XXXXX
      * 查询相应记录
      *
      * @return long  客户分类信息
      * @throws RemoteException
      */
    public long findMaxClientTypeID(long lOfficeID) throws IException,RemoteException;
    /**
     * findClientTypeByMultiOption  查询普通贷款客户分类
     * 客户分类查询
     * 操作XXXXX
     * 查询相应记录
     *
     * @param strClientTypeCode 客户分类编号
     * @param strClientTypeName 客户分类名称
     * @return CostomerTypeInfo  客户分类信息
     * @param long           lPageLineCount        每页页行数条件
     * @param long           lPageNo               第几页条件
     * @param long           lOrderParam           排序条件，根据此参数决定结果集排序条件
     * @param long           lDesc                 升序或降序
     * @throws RemoteException
     */
    public Collection findClientTypeByMultiOption(
        String sClientTypeCode,
        String sClientTypeName,
        long lPageLineCount,
        long lPageNo,
        long lOrderParam,
        long lDesc,
		long lOfficeID)
        throws IException,RemoteException;
    /**
     * deleteClientType  删除客户类型
     * 删除客户类型
     * 操作SETT_ClientType
     * 删除记录，（逻辑删除）
     *
     * @param lID  客户类型标示
     * @param lUserID 删除人
     * @param tsDate 删除日期
     * @return long  成功返回1，失败返回0
     * @throws RemoteException
     */
    public long deleteClientType(long lID, long lUserID, Timestamp tsDate)
        throws IException,RemoteException;
    /**
     * 保存到期业务提醒设置信息
     * 操作数据库表Loan_AtTermAwakeSetting
     * @param       ASInfo  到期业务提醒设置信息
     * @return      long    成功，返回值=1；失败，返回值=-1
     */
    public long saveAtTermAwakeSetting(
        long lTypeID[],
        long lAheadDays[],
        long lAwakeDays[],
        long lOfficeID,long lCurrencyID)
        throws RemoteException, IRollbackException;
    /**
     * 查询到期业务提醒设置信息
     * 查询条件为办事处标示和到期业务提醒类型
     * 操作数据库表Loan_AtTermAwakeSetting
     * @param       lOfficeID            办事处标示
     * @param       lAwakeTypeID         到期业务提醒类型
     * @return      AtTermAwakeInfo      返回到期业务提醒设置信息
     */
    public AtTermAwakeInfo findAtTermAwakeSetting(
        long lOfficeID,
        long lAwakeTypeID,long lCurrencyID)
        throws IException,RemoteException;
    /**
     * addCurrency  增加外汇贷款币种
     * 增加外币种类
     * 操作XXXXX
     * 更新XXXX
     *
     * @param strCurrencyCode 币种编号
     * @param strCurrencyName 币种名称
     * @param nInputUserID 录入人
     * @param tsInputDate 录入日期
     * @param lInputUserID 录入人
     * @return long  成功返回1，失败返回0
     * @throws RemoteException
     */
    public long addCurrency(
        String strCurrencyCode,
        String strCurrencyName,
        long lInputUserID,
        Timestamp tsInputDate)
        throws IException,RemoteException;
    /**
     * findCurrencyByID  查询外汇贷款币种设置
     * 查询外汇贷款币种设置
     * 操作XXXXX
     * 更新XXXX
     *
     * @param lID 币种标示
     * @throws RemoteException
     */
    public CurrencyInfo findCurrencyByID(long lID) throws IException,RemoteException;
    /**
     * findCurrencyByMultiOption  查询外汇贷款币种设置
     * 查询外汇贷款币种设置
     * 操作XXXXX
     * 更新XXXX
     *
     * @param strCurrencyCode 币种编号
     * @param lCurrencyID 币种标示
     * @return Collection  外汇品种信息集合
     * @param long           lPageLineCount        每页页行数条件
     * @param long           lPageNo               第几页条件
     * @param long           lOrderParam           排序条件，根据此参数决定结果集排序条件
     * @param long           lDesc                 升序或降序
     * @throws RemoteException
     */
    public Collection findCurrencyByMultiOption(
        String strCurrencyCode,
        long lCurrencyID,
        long lPageLineCount,
        long lPageNo,
        long lOrderParam,
        long lDesc)
        throws IException,RemoteException;
}
