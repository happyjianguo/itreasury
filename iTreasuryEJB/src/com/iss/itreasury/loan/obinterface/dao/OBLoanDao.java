package com.iss.itreasury.loan.obinterface.dao;

import java.rmi.RemoteException;
import java.util.*;
import java.sql.*;

import com.iss.itreasury.util.*;
import com.iss.itreasury.loan.util.*;
import com.iss.itreasury.ebank.util.*;
import com.iss.itreasury.loan.obinterface.dataentity.*;
import com.iss.itreasury.loan.loancommonsetting.bizlogic.*;
import com.iss.itreasury.loan.loancommonsetting.dataentity.ClientInfo;
import com.iss.itreasury.loan.contractcontent.dataentity.ContractContentInfo;
import com.iss.itreasury.loan.repayplan.dataentity.PlanVersionInfo;
import com.iss.itreasury.loan.repayplan.dataentity.RepayPlanInfo;
import com.iss.itreasury.loan.contract.dao.*;

/**
 * Created 2004-2-6 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author ninh
 */

public class OBLoanDao
{

    private static Log4j log4j = null;

    private Connection m_Conn = null;
    
    //public OBLoanDao()
    //{
    //    log4j = new Log4j(Constant.ModuleType.LOAN, this);
    //}
    
    public OBLoanDao(Connection con)
    {
        log4j = new Log4j(Constant.ModuleType.LOAN, this);
        m_Conn = con;
    }

    private void cleanup(ResultSet rs) throws SQLException
    {
        try
        {
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
        }
        catch (SQLException sqle)
        {
        }
    }
    private void cleanup(PreparedStatement ps) throws SQLException
    {
        try
        {
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
        }
        catch (SQLException sqle)
        {
        }
    }
    private void cleanup(Connection con) throws SQLException
    {
        try
        {
            if (con != null)
            {
                con.close();
                con = null;
            }
        }
        catch (SQLException sqle)
        {
        }
    }
    ////////////////////////////////////////////////////////////////
    
    /**
     * findByID 
     * 操作 OB_LOAN表
     * 查询记录
     * haoning 2004-02-13
     * @param lLoanID
     * @throws RemoteException;Exception
     */
    public OBLoanInfo findByID(long lLoanID,long lOfficeID)
    throws Exception
    {
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        StringBuffer sbSQL = null;
        //PreparedStatement ps1 = null;
        //ResultSet rs1 = null;
        String strSQL = null;
        boolean bResult = false;
        long lInOfficeID = 0; //待接受的申请书所处办事处
        OBLoanInfo obInfo = null;
        ClientInfo cInfo = null;
        ClientInfo wtcInfo = null;
        ContractContentInfo odInfo = null;
        Vector vList = new Vector();
        //Collection cList = null;
        //double dTmp = 0;

        try
        {
            //conn = Database.getConnection();
            Log.print("lID = " + lLoanID);
            Log.print("======in OBLoanInfo.findByID()======"+lLoanID);
            obInfo = new OBLoanInfo();
            //验证是否是本办事处的合同
            Log.print("验证是否是本办事处的合同开始...");
            strSQL = "select distinct nOfficeID from OB_Loan where id = "+lLoanID+"";
            //ps = conn.prepareStatement(strSQL);
            System.out.println("strSQL=========="+strSQL);
            ps = m_Conn.prepareStatement(strSQL);       
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                lInOfficeID = rs.getLong("nOfficeID");
            }
            cleanup(rs);
            cleanup(ps);
            Log.print("验证是否是本办事处的合同结束...");
            //System.out.println(lInOfficeID+"^^^^^^^办事处^^^^^^^^^^^^^^^^"+lOfficeID);
           if (lOfficeID == lInOfficeID)
            {
                //获取贷款主信息数据
                Log.print("获取贷款主信息数据");
                strSQL = "select b.id planid,c.sName ConsignName" +
                    "  ,c.sCode ConsignCode,c.scontacter ConsignContacter " +
                    "  ,d.sApplyCode as sInCode " +
                    "  ,  a.* " +
                    " from OB_Loan a,OB_Plan b,client c,loan_loanform d " +
                    "  where  a.id = ? and b.nloanid(+) = a.id " +
                    "    and a.nConsignClientID = c.id(+) " +
                    "    and a.nInApplyID = d.ID(+) ";
                Log.print("strSQL is : " + strSQL);
                ps = m_Conn.prepareStatement(strSQL);
                ps.setLong(1, lLoanID);
                rs = ps.executeQuery();
                if (rs != null && rs.next())
                {
                    obInfo.setID(rs.getLong("ID"));
                    obInfo.setTypeID(rs.getInt("nTypeID"));
                    obInfo.setCurrencyID(rs.getInt("nCurrencyID"));
                    obInfo.setOfficeID(rs.getLong("nOfficeID"));
                    obInfo.setInstructionNo(rs.getString("sInstructionNo"));
                    //OBApplyDao oDao = new OBApplyDao(m_Conn);
                    //obInfo.setApplyCode(oDao.createApplyCode(obInfo.getTypeID()));
                    obInfo.setInApplyID(rs.getLong("nInApplyID"));
                    obInfo.setApplyCode(rs.getString("sInCode"));
                    obInfo.setConsignClientID(rs.getLong("nConsignClientID"));
                    obInfo.setConsignClientName(rs.getString("ConsignName"));
                    obInfo.setConsignClientCode(rs.getString("ConsignCode"));
                    obInfo.setConsignClientContacter(rs.getString("ConsignContacter"));
                    obInfo.setBorrowClientID(rs.getLong("nBorrowClientID"));
                    obInfo.setLoanAmount(rs.getDouble("MLOANAMOUNT"));
                    obInfo.setIntervalNum(rs.getLong("NINTERVALNUM"));
                    obInfo.setLoanReason(rs.getString("SLOANREASON"));
                    obInfo.setLoanPurpose(rs.getString("SLOANPURPOSE"));
                    obInfo.setOther(rs.getString("SOTHER"));
                    obInfo.setIsCircle(rs.getInt("NISCIRCLE"));
                    obInfo.setIsSaleBuy(rs.getInt("NISSALEBUY"));
                    obInfo.setIsTechnical(rs.getInt("NISTECHNICAL"));
                    //obInfo.setInputUserID(rs.getLong("NINPUTUSERID"));
                    obInfo.setInputDate(rs.getTimestamp("DTINPUTDATE"));
                    obInfo.setIsCredit(rs.getInt("NISCREDIT"));
                    obInfo.setIsAssure(rs.getInt("NISASSURE"));
                    obInfo.setIsImpawn(rs.getInt("NISIMPAWN"));
                    obInfo.setIsPledge(rs.getInt("NISPLEDGE"));                    
                    obInfo.setInterestTypeID(rs.getLong("NINTERESTTYPEID"));
                    obInfo.setInterestRate(rs.getDouble("MINTERESTRATE"));
                    obInfo.setStatusID(rs.getInt("NSTATUSID"));
                    obInfo.setStartDate(rs.getTimestamp("DTSTARTDATE"));
                    obInfo.setEndDate(rs.getTimestamp("DTENDDATE"));                    
                    obInfo.setBankInterestID(rs.getLong("NBANKINTERESTID"));
                    //手续费率
                    obInfo.setChargeRate(rs.getDouble("mChargeRate"));
                    //手续费率类型
                    obInfo.setChargeRateTypeID(rs.getLong("nChargeRateTypeID"));

                    obInfo.setPlanVersion(rs.getLong("planid"));//计划版本ID
                    obInfo.setClientInfoDesc(rs.getString("sClientInfo"));
                    obInfo.setRiskLevel(rs.getLong("NRISKLEVEL"));
                    obInfo.setTypeID1(rs.getLong("NTYPEID1"));
                    obInfo.setTypeID2(rs.getLong("NTYPEID2"));
                    obInfo.setTypeID3(rs.getLong("NTYPEID3"));
                    //贷款子类型
                    //System.out.println(obInfo.getTypeID()+"贷款子类型--------------"+rs.getLong("NSUBTYPEID"));
                    obInfo.setNSubTypeId(rs.getLong("NSUBTYPEID"));
                    
                    obInfo.setAssureChargeRate(rs.getDouble("AssureChargeRate")); 	//担保费率
                    obInfo.setAssureChargeTypeID(rs.getLong("AssureChargeTypeID"));	//担保费收取方式
                    obInfo.setBeneficiary(rs.getString("Beneficiary"));				//受益人
                    obInfo.setAssureTypeID1(rs.getLong("AssureTypeID1"));	 		//担保类型1
                    obInfo.setAssureTypeID2(rs.getLong("AssureTypeID2"));	 //担保类型2
                    obInfo.setIsRecognizance(rs.getLong("IsRecognizance"));//是否保证金
                    obInfo.setIsPurchaserInterest(rs.getLong("ISPURCHASERINTEREST"));
                    obInfo.setDiscountClientName(rs.getString("DISCOUNTCLIENTNAME"));
                    obInfo.setDiscountClientID(rs.getLong("DISCOUNTCLIENTID"));
                    if(obInfo.getBorrowClientID() > 0)
                    {
                        //获取客户信息
                        cInfo = new ClientInfo(); 
                        LoanCommonSettingEJB lcs = new LoanCommonSettingEJB();
                        cInfo=lcs.findClientByID(obInfo.getBorrowClientID());
                        obInfo.setClientInfo(cInfo);
                    }
                    
                    //贴现申请的数据
                    if(obInfo.getTypeID() == OBConstant.LoanInstrType.DISCOUNT)
                    {
                        obInfo.setBankAcceptPO(rs.getLong("NBANKACCEPTPO"));
                        obInfo.setBizAcceptPO(rs.getLong("NBIZACCEPTPO"));
                        obInfo.setCheckAmount(rs.getDouble("MCHECKAMOUNT"));
                        obInfo.setDiscountRate(rs.getDouble("MDISCOUNTRATE"));
                        //obInfo.setAdjustRate(rs.getDouble("MADJUSTRATE"));
                        obInfo.setDiscountDate(rs.getTimestamp("DTDISCOUNTDATE"));
                        obInfo.setDocumentType(rs.getString("sDocumentType"));
                    }
                    
                    bResult = true;
                }
                else
                {
                    bResult = false;
                    Log.print("贷款主信息数据为空");
                }

                cleanup(rs);
                cleanup(ps);
                
                //获取担保信息
                if (bResult)
                {
                    Log.print("获取担保信息");
                    obInfo.setAssureInfo(getAssureInfoByLoanID(obInfo.getID()));
                }
            }
            else
            {
                obInfo = null;
                Log.print("办事处不符，不能修改");
                bResult = false;
                throw new IException("Loan_E107");
            }
            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);
        }
        catch (IException ie)
        {
            throw ie;
        }
        catch (Exception e)
        {
            Log.print(" 查询贷款申请信息失败。OBLoanDao.findByID()");
            Log.print(e.toString());
            throw new Exception(e.getMessage());
        }
        finally
        {
            try
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.getMessage());
            }
        }

        return obInfo;
    }
    
    /**
     * updateOB
     * 操作 OB_LOAN 表
     * haoning 2004-02-13
     * @param OBLoanInfo
     * @throws RemoteException;Exception
     */
    public long updateOB(OBBackInfo Info)
    throws Exception,IException
    {
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String strSQL = null;
        long lResult = -1;
        long lInOfficeID = 0; //待免还的合同所处办事处
        try
        {
            //验证是否是本办事处的合同
            //conn = Database.getConnection();
            
            strSQL = "select distinct nOfficeID " +
                "from ob_Loan where id = ?";
            ps = m_Conn.prepareStatement(strSQL);
            ps.setLong(1, Info.getID());
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                lInOfficeID = rs.getLong("nOfficeID");
            }
            cleanup(rs);
            cleanup(ps);
            if (lInOfficeID == Info.getOfficeID())
            {
                //获取相关数据（免还不需要）
                //修改相关数据--状态、内部申请标示、内部申请编号(免还没有)
                strSQL = "update OB_Loan set nStatusID = ?,nInApplyID=? " +
                    ",nHandleUserID = ?  " +
                    ",sInApplyCode=(select sApplyCode from loan_Loanform where id=?)"+
                    " where id = ?";
                Log.print(strSQL);
                ps = m_Conn.prepareStatement(strSQL);
                ps.setLong(1, Info.getStatusID());
                ps.setLong(2, Info.getInID());
                ps.setLong(3, Info.getUserID());
                ps.setLong(4, Info.getInID());
                ps.setLong(5, Info.getID());
                lResult = ps.executeUpdate(); 
                cleanup(ps);
            }
            else
            {
                //办事处不符，不能修改
                lResult = -1;
                throw new IException("Loan_E107");
            }
            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            Log.print(" 修改贷款申请失败。OBLoanDao.updateOB()");
            throw new Exception(e.getMessage());
        }
        finally
        {
            try
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.getMessage());
            }
        }
        return lResult;
    }
    
    /**
     * updateOBStatus
     * 操作 OB_LOAN 表
     * haoning 2004-02-13
     * @param long lInID
     * @param long lStatusID
     * @throws RemoteException;Exception
     */
    public long updateOBStatus(long lInID,long lStatusID)
    throws Exception
    {
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String strSQL = null;
        long lResult = -1;
        long lID = 0; //
        try
        {
            //conn = Database.getConnection();
            
            strSQL = "select ID from ob_loan where nInApplyID = ?";
            ps = m_Conn.prepareStatement(strSQL);
            ps.setLong(1, lInID);
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                lID = rs.getLong("ID");
            }
            cleanup(rs);
            cleanup(ps);
            if (lID > 0)
            {
                Log.print("===更新网银状态===");
                Log.print("lID = "+lID);
                //修改状态
                strSQL = "update OB_Loan set nStatusID = ? " +
                    " where id = ? ";
                ps = m_Conn.prepareStatement(strSQL);
                ps.setLong(1, lStatusID);
                ps.setLong(2, lID);
                lResult = ps.executeUpdate();  
                cleanup(ps);
            }
            else
            {
                //办事处不符，不能修改
                lResult = -1;
            }
            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            Log.print(" 修改贷款申请状态失败。OBLoanDao.updateOBStatus()");
            throw new Exception(e.getMessage());
        }
        finally
        {
            try
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.getMessage());
            }
        }
        return lResult;
    }

    /**
     *
     * 获取担保信息
     *
     */
    public Vector getAssureInfoByLoanID(long lLoanID)  throws Exception
    {
        Vector vList = new Vector();
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;

        try 
        {
            //conn = Database.getConnection();
            Log.print("获取担保信息");
            strSQL = "select a.*,b.sCode sClientCode,b.sName sClientName" +
                "   ,b.sContacter sClientContacter,b.sPhone sClientPhone" +
                " from OB_Assure a, Client b" +
                " where a.nClientID = b.ID and a.nLoanID = ?" +
                " and a.nStatusID > ?";
            Log.print(strSQL);
            Log.print("lLoanID = " + lLoanID);

            ps =m_Conn.prepareStatement(strSQL);
            ps.setLong(1, lLoanID);
            ps.setLong(2, Constant.RecordStatus.INVALID);
            rs = ps.executeQuery();

            while (rs != null && rs.next())
            {//*
                OBAssureInfo oai = new OBAssureInfo();

                oai.setID(rs.getLong("ID"));
                oai.setLoanID(rs.getLong("NLOANID"));
                //oai.setType(rs.getInt("NASSURETYPEID"));
                oai.setAssureTypeID(rs.getLong("NASSURETYPEID"));
                oai.setFillQuestionary(rs.getLong("NFILLQUESTIONARY"));
                oai.setClientID(rs.getLong("NCLIENTID"));
                oai.setClientCode(rs.getString("sClientCode"));
                oai.setClientName(rs.getString("sClientName"));
                oai.setContactName(rs.getString("sClientContacter"));
                oai.setPhoneNo(rs.getString("sClientPhone"));
                oai.setAmount(rs.getDouble("MAMOUNT"));
                oai.setName(rs.getString("SIMPAWNAME"));
                oai.setQuality(rs.getString("SIMPAWQUALITY"));
                oai.setStatus(rs.getString("SIMPAWSTATUS"));
                oai.setPledgeSum(rs.getDouble("MPLEDGEAMOUNT"));
                oai.setPledgeRate(rs.getDouble("MPLEDGERATE"));
                oai.setStatusID(rs.getLong("NSTATUSID"));

                vList.add(oai);//*/
            }

            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);     
        }
        catch(Exception e) 
        {
            throw new Exception("exception : " + e.toString());
        }
        finally 
        {
            try 
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);       
            }
            catch(Exception e)
            {
                throw new Exception("exception : " + e.toString());
            }        
        }
        
        return (vList.size() > 0 ? vList : null);

    }

    /**
     *
     * 获取担保总金额
     *
     */
    private double getAssureAmountByLoanID(long lLoanID)  throws Exception
    {
        double dAmount = 0;
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;

        try 
        {
            //conn = Database.getConnection();
            Log.print("获取担保总金额");
            strSQL = "select sum(nvl(a.mAmount,0)) sumAmount " +
                " from OB_Assure a, Client b " +
                " where a.nClientID = b.ID and a.nLoanID = ? " +
                "      and a.nStatusID > ?";
            Log.print(strSQL);
            Log.print("lLoanID = " + lLoanID);

            ps = m_Conn.prepareStatement(strSQL);
            ps.setLong(1, lLoanID);
            ps.setLong(2, Constant.RecordStatus.INVALID);
            rs = ps.executeQuery();

            if (rs != null && rs.next())
            {
                dAmount = rs.getDouble(1);
            }

            cleanup(rs);
            cleanup(ps);     
        }
        catch(Exception e) 
        {
            throw new Exception("exception : " + e.toString());
        }
        finally 
        {
            try 
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);    
            }
            catch(Exception e) 
            {
                throw new Exception("exception : " + e.toString());
            }        
        }
        return (dAmount);
    }
    /**
     *
     * 获取计划信息
     *
     */
    public Vector getPlanInfoByLoanID(long lLoanID)  throws Exception
    {
        Vector vList = new Vector();
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;

        try 
        {
            //conn = Database.getConnection();
            Log.print("获取计划信息");
            strSQL = "select a.*" +
                "  " +
                " from OB_plan a" +
                " where  a.nLoanID = ? and a.nStatusID > ?";
            Log.print(strSQL);
            Log.print("lLoanID = " + lLoanID);

            ps = m_Conn.prepareStatement(strSQL);
            ps.setLong(1, lLoanID);
            ps.setLong(2, Constant.RecordStatus.INVALID);
            rs = ps.executeQuery();

            while (rs != null && rs.next())
            {//*
                OBPlanInfo oai = new OBPlanInfo();

                oai.setID(rs.getLong("ID"));
                oai.setInstructionNo(rs.getString("SINSTRUCTIONNO"));
                oai.setLoanID(rs.getLong("NLOANID"));
                oai.setPlanVersion(rs.getInt("NPLANVERSION"));
                oai.setInputUserID(rs.getLong("NINPUTUSERID"));
                oai.setInput(rs.getTimestamp("DTINPUT"));
                oai.setStatusID(rs.getLong("NSTATUSID"));
                oai.setIsUsed(rs.getLong("NISUSED"));
                oai.setUserType(rs.getLong("NUSERTYPE"));
                oai.setInPlanID(rs.getLong("NINID"));
                oai.setInPlanDetailID(rs.getLong("NINPLANVERSION"));
                oai.setHandleUserID(rs.getLong("NHANDLEUSERID"));

                vList.add(oai);//*/
            }

            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);     
        }
        catch(Exception e) 
        {
            throw new Exception("exception : " + e.toString());
        }
        finally 
        {
            try 
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);       
            }
            catch(Exception e)
            {
                throw new Exception("exception : " + e.toString());
            }        
        }
        
        return (vList.size() > 0 ? vList : null);

    }

    /**
     *
     * 获取计划细节信息
     *
     */
    public Vector getPlanDetailInfoByPlanID(long lPlanID)  throws Exception
    {
        Vector vList = new Vector();
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;

        try 
        {
            //conn = Database.getConnection();
            Log.print("获取计划细节信息");
            strSQL = "select a.*" +
                "  " +
                " from OB_planDetail a" +
                " where  a.nPlanID = ? ";
            Log.print(strSQL);
            Log.print("lPlanID = " + lPlanID);

            ps = m_Conn.prepareStatement(strSQL);
            ps.setLong(1, lPlanID);
            rs = ps.executeQuery();

            while (rs != null && rs.next())
            {//*
                //Log.print("计划细节信息--1--");
                OBPlanDetailInfo oai = new OBPlanDetailInfo();
                
                oai.setID(rs.getLong("ID"));
                oai.setPlanID(rs.getLong("NPLANID"));
                oai.setPlanDate(rs.getTimestamp("DTPLANDATE"));
                oai.setPayType(rs.getInt("NPAYTYPEID"));
                //Log.print("计划细节信息--2--");
                oai.setAmount(rs.getDouble("MAMOUNT"));
                oai.setType(rs.getString("STYPE"));
                oai.setInputDate(rs.getTimestamp("DTMODIFYDATE"));
                //Log.print("计划细节信息--3--");

                vList.add(oai);//*/
            }

            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);     
        }
        catch(Exception e) 
        {
            throw new Exception("exception : " + e.toString());
        }
        finally 
        {
            try 
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);       
            }
            catch(Exception e)
            {
                throw new Exception("exception : " + e.toString());
            }        
        }
        
        return (vList.size() > 0 ? vList : null);

    }
    /**
     *
     * 获取附件信息
     *
     */
    public Vector getDocInfoByLoanID(long lTypeID, long lParentTypeID, long lParentID)  
    throws Exception
    {
        Vector vList = new Vector();
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;

        try 
        {
            //conn = Database.getConnection();
            Log.print("获取附件信息");
            strSQL = "select a.*" +
                "  " +
                " from OB_docinfo a" +
                " where  a.nParentID = ? " +
                "       and a.nParentTypeID = ? " +
                "       and a.nTypeID = ? " +
                "       and a.nStatusID > ? ";
            Log.print(strSQL);
            Log.print("lParentID = " + lParentID);

            ps = m_Conn.prepareStatement(strSQL);
            ps.setLong(1, lParentID);
            ps.setLong(2, lParentTypeID);
            ps.setLong(3, lTypeID);
            ps.setLong(4, Constant.RecordStatus.INVALID);
            rs = ps.executeQuery();

            while (rs != null && rs.next())
            {//*
                Log.print("附件信息--1--");
                OBDocInfo oai = new OBDocInfo();
                
                oai.setID(rs.getLong("ID"));
                oai.setParentID(rs.getLong("NPARENTID"));
                oai.setParentTypeID(rs.getLong("NPARENTTYPEID"));
                Log.print("附件信息--2--");
                oai.setFileID(rs.getLong("NFILEID"));
                oai.setTypeID(rs.getLong("NTYPEID"));
                oai.setOrderNo(rs.getLong("NORDERNO"));
                oai.setRemark(rs.getString("SREMARK"));
                Log.print("附件信息--3--");

                vList.add(oai);//*/
            }

            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);     
        }
        catch(Exception e) 
        {
            throw new Exception("exception : " + e.toString());
        }
        finally 
        {
            try 
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);       
            }
            catch(Exception e)
            {
                throw new Exception("exception : " + e.toString());
            }        
        }
        
        return (vList.size() > 0 ? vList : null);

    }
    /**
     *
     * 获取贷款调查表信息
     *
     */
    public Vector getContractContentInfoByLoanID(long lLoanID)  
    throws Exception
    {
        Vector vList = new Vector();
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;

        try 
        {
            //conn = Database.getConnection();
            Log.print("获取贷款调查表信息");
            strSQL = "select a.*" +
                " from OB_contractcontent a" +
                " where  a.nParentID = ? " ;
            Log.print(strSQL);
            Log.print("nParentID = " + lLoanID);

            ps = m_Conn.prepareStatement(strSQL);
            ps.setLong(1, lLoanID);
            rs = ps.executeQuery();

            while (rs != null && rs.next())
            {//*
                Log.print("贷款调查表信息--1--");
                ContractContentInfo oai = new ContractContentInfo();
                
                oai.setID(rs.getLong("ID"));
                oai.setParentID(rs.getLong("NPARENTID"));
                oai.setContractID(rs.getLong("NCONTRACTID"));
                oai.setContractTypeID(rs.getLong("NCONTRACTTYPEID"));
                Log.print("贷款调查表信息--2--");
                oai.setDocName(rs.getString("SDOCNAME"));
                oai.setCode(rs.getString("SCODE"));
                Log.print("贷款调查表信息--3--");

                vList.add(oai);//*/
            }

            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);     
        }
        catch(Exception e) 
        {
            throw new Exception("exception : " + e.toString());
        }
        finally 
        {
            try 
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);       
            }
            catch(Exception e)
            {
                throw new Exception("exception : " + e.toString());
            }        
        }
        
        return (vList.size() > 0 ? vList : null);

    }

    /**
     *
     * 获取贴现信息
     *
     */
    public Vector getDiscountBillInfoByLoanID(long lLoanID)  
    throws Exception
    {
        Vector vList = new Vector();
        //Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;

        try 
        {
            //conn = Database.getConnection();
            Log.print("获取贴现信息");
            strSQL = "select a.*" +
                " from OB_discountbill a" +
                " where  a.nLoanID = ? " +
                "       and a.nStatusID > ? ";
            Log.print(strSQL);
            Log.print("lLoanID = " + lLoanID);

            ps = m_Conn.prepareStatement(strSQL);
            ps.setLong(1, lLoanID);
            ps.setLong(2, Constant.RecordStatus.INVALID);
            rs = ps.executeQuery();

            while (rs != null && rs.next())
            {//*
                Log.print("贴现信息--1--");
                OBDiscountBillInfo oai = new OBDiscountBillInfo();
                
                oai.setID(rs.getLong("ID"));
                oai.setSerialNo(rs.getLong("NSERIALNO"));
                oai.setUserName(rs.getString("SUSERNAME"));
                oai.setBank(rs.getString("SBANK"));
                oai.setIsBeijing(rs.getLong("NISLOCAL"));
                Log.print("贴现信息--2--");
                oai.setCreate(rs.getTimestamp("DTCREATE"));
                oai.setCode(rs.getString("SCODE"));
                oai.setAmount(rs.getDouble("MAMOUNT"));
                oai.setStatusID(rs.getLong("NSTATUSID"));
                oai.setAddDays(rs.getLong("NADDDAYS"));
                Log.print("贴现信息--3--");
                oai.setEnd(rs.getTimestamp("DTEND"));
                oai.setDiscountCredenceID(rs.getLong("NDISCOUNTCREDENCEID"));
                oai.setAcceptPotype(rs.getLong("NACCEPTPOTYPE"));
                oai.setFormerOwner(rs.getString("SFORMEROWNER"));
                oai.setRealAmount(rs.getDouble("MCHECKAMOUNT"));

                vList.add(oai);//*/
            }

            cleanup(rs);
            cleanup(ps);
            //cleanup(conn);     
        }
        catch(Exception e) 
        {
            throw new Exception("exception : " + e.toString());
        }
        finally 
        {
            try 
            {
                cleanup(rs);
                cleanup(ps);
                //cleanup(conn);       
            }
            catch(Exception e)
            {
                throw new Exception("exception : " + e.toString());
            }        
        }
        
        return (vList.size() > 0 ? vList : null);

    }

    /**
     * 根据ContractPayPlanVersion中的ID查找计划信息
     * <p>    
     * <b>&nbsp;</b>
     * <ol><b>查找贷款信息</b>
     * <ul>
     * <li>不关心版本号
     * </ul>
     * </ol>
     * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
     *
     * @param     long     ContractPayPlanVersionID    ContractPayPlanVersion中的ID
     *
     * @param     long     lPageLineCount         每页页行数条件
     * @param     long     lPageNo                第几页条件
     * @param     long     lOrderParam            排序条件，根据此参数决定结果集排序条件
     * @param     long     lDesc                  升序或降序
     *
     * @param     long     lUserID               用户标示，选择使用，可以用于核对是否与loanInfo中的inputuser是同一人
     * @param     long     lOfficeID             办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
     *
     * @return    Collection     
     *
     * @exception Exception
    **/
    public Collection findPlanDetailByOBLoanID(
        long lOBLoanID,
        long lPageLineCount,
        long lPageNo,
        long lOrderParam,
        long lDesc)
        throws RemoteException
    {
        long lResult = -1;
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        StringBuffer sb = new StringBuffer();
        ArrayList alist = new ArrayList();
        String strCondition = "";
        long lRecordCount = -1;
        long lPageCount = -1;
        long lRowNumStart = -1;
        long lRowNumEnd = -1;
        long lPlanID = -1;
        long lPlanVerNo = 0;
        ContractDao contractdao = new ContractDao();

        try
        {
            conn = Database.getConnection();

            //查找银行利率

            //查询合同标识，为取得利率用
            sb.append("select nPlanVersion,id from ob_plan  ");
            sb.append("  where nloanID = ? and nstatusid=? ");
            sb.append("  order by nPlanVersion desc");
            Log.print(sb.toString());
            ps = conn.prepareStatement(sb.toString());
            ps.setLong(1, lOBLoanID);
            ps.setLong(2, Constant.RecordStatus.VALID);
            rs = ps.executeQuery();
            if(rs != null && rs.next())
            {
                lPlanVerNo = rs.getLong(1);
                lPlanID = rs.getLong(2);
            }
            rs.close();
            rs = null;
            ps.close();
            ps = null;
            sb.setLength(0);//*/
            
            if(lPlanID > 0 && lPlanVerNo > 0)
            {
                sb.append("select count(*)");
                strCondition =
                    " from  ob_PlanDetail aa, "
                        + "(select sum(MAMOUNT) as TOTAL1 from  ob_PlanDetail where nPlanID = ? and npaytypeid = 1) bb, "
                        + "(select sum(MAMOUNT) as TOTAL2 from  ob_PlanDetail where nPlanID = ? and npaytypeid = 2) cc "
                        + "where aa.nPlanID = ? ";
                switch ((int) lOrderParam)
                {
                    case 1 :
                        strCondition += " order by DTPLANDATE";
                        break;
                    case 2 :
                        strCondition += " order by NPAYTYPEID";
                        break;
                    case 3 :
                        strCondition += " order by MAMOUNT";
                        break;
                    case 4 :
                        strCondition += " order by STYPE";
                        break;
                    case 5 :
                        strCondition += " order by DTMODIFYDATE";
                        break;
                    default :
                        strCondition += " order by DTPLANDATE";
                }
                if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
                {
                    strCondition += " desc";
                }
                sb.append(strCondition);
                Log.print(sb.toString());
                ps = conn.prepareStatement(sb.toString());
                ps.setLong(1, lPlanID);
                ps.setLong(2, lPlanID);
                ps.setLong(3, lPlanID);
                rs = ps.executeQuery();

                while (rs.next())
                {
                    lRecordCount = rs.getLong(1);
                    Log.print("RecordCount: " + lRecordCount);
                }

                rs.close();
                rs = null;
                ps.close();
                ps = null;
                sb.setLength(0);

                lPageCount = lRecordCount / lPageLineCount;

                if (lRecordCount % lPageLineCount != 0)
                {
                    lPageCount++;
                }

                lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
                lRowNumEnd = lRowNumStart + lPageLineCount - 1;

                sb.append("select * from ( select a.*, rownum num from (");
                sb.append("select aa.*,bb.TOTAL1,cc.TOTAL2 " + strCondition);
                sb.append(" )  a) where num between  " + lRowNumStart + " and " + lRowNumEnd);
                Log.print(sb.toString());
                ps = conn.prepareStatement(sb.toString());
                ps.setLong(1, lPlanID);
                ps.setLong(2, lPlanID);
                ps.setLong(3, lPlanID);
                Log.print("loanid=" + lOBLoanID);
                rs = ps.executeQuery();

                while ( rs!=null & rs.next())
                {
                    Log.print("plandetail...");
                    RepayPlanInfo rp_info = new RepayPlanInfo();
                    rp_info.lID = rs.getLong("ID");
                    rp_info.tsPlanDate = rs.getTimestamp("DTPLANDATE");
                    rp_info.nLoanOrRepay = rs.getInt("NPAYTYPEID");
                    rp_info.dAmount = rs.getDouble("MAMOUNT");
                    rp_info.sType = rs.getString("STYPE");
                    rp_info.tsInputDate = rs.getTimestamp("DTMODIFYDATE");
                    rp_info.lCount = lPageCount;
                    rp_info.lVersionNo = getPlanVersion(lPlanVerNo);
                    rp_info.dPayCounter = rs.getDouble("TOTAL1");
                    rp_info.dRePayCounter = rs.getDouble("TOTAL2");
                    rp_info.lLastExtendID = rs.getLong("NLASTEXTENDID");
                    rp_info.lLastOverDueID = rs.getLong("NLASTOVERDUEID");
                    alist.add(rp_info);
                }
            }

            rs.close();
            rs = null;
            ps.close();
            ps = null;
            conn.close();
            conn = null;

        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            throw new RemoteException(ex.getMessage());
        }
        finally
        {
            try
            {
                if (rs != null)
                    rs.close();
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            }
            catch (Exception ex)
            {
                throw new RemoteException(ex.getMessage());
            }
        }
        return (alist.size() > 0 ? alist : null);
    }

    // 查是否有版本，参数传contractpayplanversion.ID
    private long getPlanVersion(long lID) throws RemoteException
    {
        long lResult = 0;
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        StringBuffer sb = new StringBuffer();

        try
        {
            conn = Database.getConnection();
            sb.append("select max(bb.NPLANVERSION) from loan_loancontractplan aa,loan_loancontractplan bb where bb.NCONTRACTID = aa.NCONTRACTID and aa.ID = ?");
            System.out.println(sb.toString());
            ps = conn.prepareStatement(sb.toString());
            ps.setLong(1, lID);
            rs = ps.executeQuery();
            if (rs.next())
            {
                lResult = rs.getLong(1);
            }
            rs.close();
            rs = null;
            ps.close();
            ps = null;
            conn.close();
            conn = null;
            sb.setLength(0);

        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            throw new RemoteException(ex.getMessage());
        }
        finally
        {
            try
            {
                if (rs != null)
                    rs.close();
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            }
            catch (Exception ex)
            {
                throw new RemoteException(ex.getMessage());
            }
        }
        return lResult;
    }



    public static void main(String args[])
    {
       
        Connection con = null;  
        Collection c = null;
        try
        {
    
            con = Database.getConnection();
            OBLoanDao Dao = new OBLoanDao(con);
            c = Dao.findPlanDetailByOBLoanID(
                        4,
                        10, 
                        1, 
                        1, 
                        1);
            if(con != null);
            {
                con.close();
                con=null;
            }

        }
        catch (SQLException e)
        {
            e.printStackTrace();
            //throw new IException("Gen_E001");
        }
        catch (Exception e)
        {
            e.printStackTrace();
            //throw new IException("Gen_E001");
        }
        finally
        {
            try
            {
                if(con != null);
                {
                    con.close();
                    con=null;
                }
            }
            catch (Exception ex)
            {
                //throw new Exception(ex.getMessage());
            }
        }
    }
}
