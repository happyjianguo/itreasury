package com.iss.itreasury.loan.obinterface.dao;
import java.rmi.RemoteException;
import java.util.*;
import java.sql.*;
import com.iss.itreasury.util.*;
import com.iss.itreasury.loan.util.*;
import com.iss.itreasury.ebank.util.*;
import com.iss.itreasury.loan.obinterface.dataentity.*;
/**
 * Created 2004-2-6 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author ninh
 */
public class OBApplyDao
{
	private static Log4j log4j = null;
	private Connection m_Conn = null;
	//public OBApplyDao()
	//{
	//    log4j = new Log4j(Constant.ModuleType.LOAN, this);
	//}
	public OBApplyDao(Connection con)
	{
		log4j = new Log4j(Constant.ModuleType.LOAN, this);
		m_Conn = con;
	}
	private void cleanup(ResultSet rs) throws SQLException
	{
		try
		{
			if (rs != null)
			{
				rs.close();
				rs = null;
			}
		}
		catch (SQLException sqle)
		{
		}
	}
	private void cleanup(PreparedStatement ps) throws SQLException
	{
		try
		{
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
		}
		catch (SQLException sqle)
		{
		}
	}
	private void cleanup(Connection con) throws SQLException
	{
		try
		{
			if (con != null)
			{
				con.close();
				con = null;
			}
		}
		catch (SQLException sqle)
		{
		}
	}
	////////////////////////////////////////////////////////////////
	/**
	 * findOBApply 查找网银指令
	 * 根据所给定的条件，查找网银指令信息
	 * 操作 OB_LOANINSTRVIEW 视图表
	 * 查询记录
	 * haoning 2004-02-06
	 * @param OBApplyQueryInfo
	 * @throws RemoteException;Exception
	 */
	public Collection findOBApply(OBApplyQueryInfo qInfo) throws Exception
	{
		//Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		PreparedStatement ps1 = null;
		ResultSet rs1 = null;
		String strSQL = "";
		StringBuffer sbSQL = null;
		Collection colResult = new ArrayList();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lPageLineCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		long lPageNo = -1;
		try
		{
			Log.print("---登录用户有权查阅的所有指令---");
			//conn = Database.getConnection();
			sbSQL = new StringBuffer();
			// 计算记录总数 得到登录用户有权查阅的所有指令（贷款管理部分）
			strSQL = " select count(*) ";
			sbSQL.append(" from OB_LoanInstrView  a ,loan_loanform b ");
			sbSQL.append(" where 1=1 ");
			sbSQL.append(" and a.nloanid = b.id(+) ");
			sbSQL.append(" and a.nCurrencyID = ? ");
			sbSQL.append(" and a.nOfficeID = ? ");

			//为了贴现凭证而加
			//sbSQL.append(" AND ((DECODE(a.nInstrTypeID," + OBConstant.LoanInstrType.DISCOUNTCREDENCE + ",1,");
			//为了展期而加
			//sbSQL.append(OBConstant.LoanInstrType.EXTEND + ",1,");
			//为了借据而加
			//sbSQL.append(OBConstant.LoanInstrType.DUEBILL + ",1,");
			//为了提前还款而加
			//sbSQL.append(OBConstant.LoanInstrType.AHEADPAY + ",1,");
			//为了免还而加
			//sbSQL.append(OBConstant.LoanInstrType.FREE + ",1,0)=0");
			//为
			sbSQL.append("AND ((a.nInstrTypeID in (1,2,3,4,5,8,9,10,12,14,11)");

			sbSQL.append(" and a.nLoanID = b.ID ");
			sbSQL.append(" and b.nInputUserID = ?)");

			//为了贴现凭证而加
			//sbSQL.append(" OR DECODE(a.nInstrTypeID," + OBConstant.LoanInstrType.DISCOUNTCREDENCE + ",1,");
			//为了展期而加
			//sbSQL.append(OBConstant.LoanInstrType.EXTEND + ",1,");
			//为了借据而加
			//sbSQL.append(OBConstant.LoanInstrType.DUEBILL + ",1,");
			//为了提前还款而加
			//sbSQL.append(OBConstant.LoanInstrType.AHEADPAY + ",1,");
			//为了免还而加
			//sbSQL.append(OBConstant.LoanInstrType.FREE + ",1,0)=1 )");
			sbSQL.append("OR a.nInstrTypeID in (1,2,3,4,5,8,9,10,12,14,11))");
			if (qInfo.getLoanInstrNo() != null && qInfo.getLoanInstrNo().length()>0)
			{
				sbSQL.append(" AND a.sInstructionNo LIKE '%"+qInfo.getLoanInstrNo()+"%' ");
			}

			if (qInfo.getLoanInstrType() > 0)
			{
				sbSQL.append(" and a.nInstrTypeID = ? ");
			}
			if (qInfo.getClientID() > 0)
			{
				sbSQL.append(" and a.nClientID = ?");
			}
			if (qInfo.getAmountFrom() > 0)
			{
				sbSQL.append(" and a.mAmount >= ?");
			}
			if (qInfo.getAmountTo() > 0)
			{
				sbSQL.append(" and a.mAmount <= ?");
			}
			if (qInfo.getDateFrom() != null)
			{
				sbSQL.append(" and to_char(a.dtInputDate,'yyyymmdd') >= to_char(?,'yyyymmdd')");
			}
			if (qInfo.getDateTo() != null)
			{
				sbSQL.append(" and to_char(a.dtInputDate,'yyyymmdd') <= to_char(?,'yyyymmdd')");
			}
			if (qInfo.getStatusID() > -5)
			{
				sbSQL.append(" and a.nStatusID = ?");
			}
			else
			{
				sbSQL.append(" and a.nStatusID != " + OBConstant.LoanInstrStatus.SAVE);
			}
			Log.print(strSQL + sbSQL.toString());
			ps = m_Conn.prepareStatement(strSQL + sbSQL.toString());
			ps.setLong(1, qInfo.getCurrencyID());
			ps.setLong(2, qInfo.getOfficeID());
			ps.setLong(3, qInfo.getInputUserID());

			int i = 4;
			if (qInfo.getLoanInstrType() > 0)
			{
				ps.setLong(i++, qInfo.getLoanInstrType());
			}
			if (qInfo.getClientID() > 0)
			{
				ps.setLong(i++, qInfo.getClientID());
			}
			if (qInfo.getAmountFrom() > 0)
			{
				ps.setDouble(i++, qInfo.getAmountFrom());
			}
			if (qInfo.getAmountTo() > 0)
			{
				ps.setDouble(i++, qInfo.getAmountTo());
			}
			if (qInfo.getDateFrom() != null)
			{
				ps.setTimestamp(i++, qInfo.getDateFrom());
			}
			if (qInfo.getDateTo() != null)
			{
				ps.setTimestamp(i++, qInfo.getDateTo());
			}
			if (qInfo.getStatusID() > -5)
			{
				ps.setLong(i++, qInfo.getStatusID());
			}
			rs = ps.executeQuery();
			if (rs.next())
			{
				lRecordCount = rs.getLong(1);
			}
			Log.print("lRecordCount:" + lRecordCount);
			cleanup(rs);
			cleanup(ps);
			strSQL = "";
			lPageLineCount = Constant.PageControl.CODE_PAGELINECOUNT;
			//qInfo.getPageLineCount();
			lPageNo = qInfo.getPageNo();
			lPageCount = lRecordCount / (lPageLineCount);
			if ((lRecordCount % lPageLineCount) != 0)
				lPageCount++;
			//返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;
			strSQL =
				" select a.nloantypeid, a.nInstrTypeID, a.ID "
					+ " , a.sInstructionNo,a.nContractID,a.nInputUserID "
					+ " ,a.sInputUserName, a.dtInputDate ,a.nStatusID "
					+ " , a.nCurrencyID,a.nClientID, a.sClientName "
					+ " ,a.sContractCode,a.mAmount,a.nInID,a.sInCode "
					+ " , a.nLoanID,a.sLoanCode, a.sHandleUserName "
					+ " ";
			/*
			 *  关于排序。
			 */
			if (qInfo.getOrderParam() == 1)
			{
				sbSQL.append(" order by sInstructionNo "); //指令号
			}
			else if (qInfo.getOrderParam() == 2)
			{
				sbSQL.append(" order by sLoanCode "); //申请书编号
			}
			else if (qInfo.getOrderParam() == 3)
			{
				sbSQL.append(" order by sContractCode "); //合同编号
			}
			else if (qInfo.getOrderParam() == 4)
			{
				sbSQL.append(" order by nInstrTypeID "); //指令类型 
			}
			else if (qInfo.getOrderParam() == 5)
			{
				sbSQL.append(" order by mAmount "); //金额
			}
			else if (qInfo.getOrderParam() == 6)
			{
				sbSQL.append(" order by dtInputDate "); //申请日期
			}
			else if (qInfo.getOrderParam() == 7)
			{
				sbSQL.append(" order by nStatusID "); //指令状态
			}
			else if (qInfo.getOrderParam() == 8)
			{
				sbSQL.append(" order by sClientName "); //申请单位
			}
			else if (qInfo.getOrderParam() == 9)
			{
				sbSQL.append(" order by sHandleUserName "); //处理人
			}
			else
			{
				sbSQL.append(" order by sInstructionNo ");
			}
			if (qInfo.getDesc() == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				sbSQL.append(" desc ");
			}
			else
			{
				sbSQL.append(" asc ");
			}

			strSQL = "select * from ( select a.*, rownum num from ( " + strSQL + sbSQL.toString() + " ) a ) where num between  " + lRowNumStart + " and " + lRowNumEnd;
			Log.print(strSQL);
			ps = m_Conn.prepareStatement(strSQL);
			ps.setLong(1, qInfo.getCurrencyID());
			ps.setLong(2, qInfo.getOfficeID());
			ps.setLong(3, qInfo.getInputUserID());
			i = 4;
			if (qInfo.getLoanInstrType() > 0)
			{
				ps.setLong(i++, qInfo.getLoanInstrType());
			}
			if (qInfo.getClientID() > 0)
			{
				ps.setLong(i++, qInfo.getClientID());
			}
			if (qInfo.getAmountFrom() > 0)
			{
				ps.setDouble(i++, qInfo.getAmountFrom());
			}
			if (qInfo.getAmountTo() > 0)
			{
				ps.setDouble(i++, qInfo.getAmountTo());
			}
			if (qInfo.getDateFrom() != null)
			{
				ps.setTimestamp(i++, qInfo.getDateFrom());
			}
			if (qInfo.getDateTo() != null)
			{
				ps.setTimestamp(i++, qInfo.getDateTo());
			}
			if (qInfo.getStatusID() > -5)
			{
				ps.setLong(i++, qInfo.getStatusID());
			}
			rs = ps.executeQuery();
			while (rs != null && rs.next())
			{
				OBApplyInfo oai = new OBApplyInfo();
				oai.setLoanInstrType(rs.getLong("nInstrTypeID"));
				oai.setID(rs.getLong("ID"));
				oai.setInstructionNo(rs.getString("sInstructionNo"));
				oai.setContractID(rs.getLong("nContractID"));
				oai.setContractCode(rs.getString("sContractCode"));
				//Log.print("-----test------");
				oai.setApplyDate(rs.getTimestamp("dtInputDate"));
				oai.setStatusID(rs.getLong("nStatusID"));
				oai.setCurrencyID(rs.getLong("nCurrencyID"));
				oai.setClientID(rs.getLong("nClientID"));
				oai.setClientName(rs.getString("sClientName"));
				oai.setAmount(rs.getDouble("mAmount"));
				oai.setInID(rs.getLong("nInID"));
				oai.setInCode(rs.getString("sInCode"));
				oai.setLoanID(rs.getLong("nLoanID"));
				oai.setOBApplyCode(rs.getString("sLoanCode"));
				oai.setUserName(rs.getString("sHandleUserName"));
				//Log.print("-----test---2---");
				oai.setLoanTypeID(rs.getLong("nloantypeid"));
				oai.setPageCount(lPageCount);
				colResult.add(oai);
			}
			cleanup(rs);
			cleanup(ps);
			//cleanup(conn);
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
		finally
		{
			try
			{
				cleanup(rs);
				cleanup(ps);
				//cleanup(conn);
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
		return (colResult.size() > 0 ? colResult : null);
	}
	/**
	 * haoning 2004-02-12
	 * @param long lLoanIntrType
	 * @throws RemoteException;Exception
	 */
	public long getMaxID(String strTable) throws Exception
	{
		//Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		long lResult = -1;
		long lMaxID = 0; //待免还的合同所处办事处
		try
		{
			//验证是否是本办事处的合同
			//conn = Database.getConnection();
			strSQL = "select nvl(max(ID)+1,1) MaxID from " + strTable;
			ps = m_Conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				lMaxID = rs.getLong(1);
				Log.print("MaxID:" + lMaxID);
			}
			if (lMaxID > 0)
			{
				lResult = lMaxID;
			}
			cleanup(rs);
			cleanup(ps);
			//cleanup(conn);
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
		finally
		{
			try
			{
				cleanup(rs);
				cleanup(ps);
				//cleanup(conn);
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
		return lResult;
	}
	/**
	 * haoning 2004-02-12
	 * @param long lLoanType
	 * @throws RemoteException;Exception
	 */
	public String createApplyCode(long lLoanType) throws Exception
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		//Connection conn = null;
		String strSQL = null;
		long loanID = -1;
		//String tmpApplyCode = "";
		String applyCode = "";
		long lResult = -1;
		try
		{
			//conn = Database.getConnection();
			//获得申请书编号
			strSQL = " select to_char(sysdate,'yy') from dual ";
			String sYear = "";
			String curID = "";
//			curID = LOANConstant.LoanType.getTypeCode(lLoanType);
//			curID = LOANNameRef.getSubLoanTypeCodeByID(lLoanType);
			curID = LOANConstant.SubLoanType.getCode(lLoanType);//lSubLoanType
			ps = m_Conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs.next())
			{
				sYear = rs.getString(1);
			}
			cleanup(rs);
			cleanup(ps);
			log4j.info("sYear:" + sYear + " curID:" + curID);
			System.out.println("sYear:" + sYear + " curID:" + curID);
			int nLen = curID.length() + sYear.length() + 1;
			
			strSQL = "select nvl(max(substr(sApplyCode," + (nLen+1) + ",3)),0)+1 from loan_LoanForm where sApplyCode like 'A" + sYear + curID + "%'";
			ps = m_Conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs.next())
			{
				long ll = rs.getLong(1);
				if (ll < 10)
				{
					applyCode = "A" + sYear + curID + "00" + ll;
				}
				else
					if (ll < 100)
					{
						applyCode = "A" + sYear + curID + "0" + ll;
					}
					else
					{
						applyCode = "A" + sYear + curID + ll;
					}
			}
			cleanup(rs);
			cleanup(ps);
			//cleanup(conn);
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return applyCode;
	}
	/**
	 * Method createAheadRepayCode.
	 * @param lContractID
	 * @return String
	 * @throws Exception
	 */
	public String createAheadRepayCode(long lContractID) throws Exception
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		long loanID = -1;
		String applyCode = "";
		long lResult = -1;
		try
		{
			//获得申请书编号
			strSQL = " SELECT ";
			strSQL += " 'TQ'||LPAD(NVL(MAX(ID)+1,1),3,'0') code";
			strSQL += " FROM loan_AheadRepayForm ";
			strSQL += " WHERE nContractID = ?";
			ps = m_Conn.prepareStatement(strSQL);
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs.next())
			{
				applyCode = rs.getString("code");
			}
			cleanup(rs);
			cleanup(ps);
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return applyCode;
	}
	/**
	 * haoning 2004-02-12
	 * @param long lLoanType
	 * @throws RemoteException;Exception
	 */
	public long save(Vector vValue, String strTable) throws Exception
	{
		long lResult = -1;
		//Connection conn = null;
		PreparedStatement ps = null;
		AcceptInfo ai = null;
		StringBuffer sb = new StringBuffer();
		
		
		try
		{
			//conn = Database.getConnection();
			if (vValue != null && vValue.size() > 0)
			{
				//组织sql语句
				int iTmp = vValue.size();
				sb.append("insert into " + strTable + " ( ");
				ai = (AcceptInfo) vValue.get(0);
				sb.append(ai.getColumnName());
				for (int i = 1; i < iTmp; i++)
				{
					ai = (AcceptInfo) vValue.get(i);
					sb.append(",");
					sb.append(ai.getColumnName());
				}
				sb.append(") values (");
				for (int i = 0; i < iTmp - 1; i++)
				{
					sb.append("?,");
				}
				sb.append("?)");
				Log.print(sb.toString());
				ps = m_Conn.prepareStatement(sb.toString());
				//给ps中的变量赋值
				for (int i = 0; i < iTmp; i++)
				{
					//System.out.println("vValue.get(i):"+vValue.get(i));
					setPSValue(ps, i + 1, (AcceptInfo) vValue.get(i));
				}
				//执行sql
				lResult = ps.executeUpdate();
				sb.setLength(0);
				cleanup(ps);
			}
			else
			{
				lResult = -1;
			}
			cleanup(ps);
			//cleanup(conn);
		}
		catch (Exception e)
		{
			Log.print("save failed. Exception is " + e.toString());
			throw new Exception(e.getMessage());
		}
		finally
		{
			cleanup(ps);
			//cleanup(conn);
		}
		return lResult;
	}
	/* 私有方法，给PreparedStatement设置值
	 * @param       ps          待设置值的ps
	 * @param       ai          接受数据对象
	 */
	private boolean setPSValue(PreparedStatement ps, int iIndex, AcceptInfo ai) throws Exception
	{
		boolean bolResult = false;
		try
		{
			switch ((int) ai.getType())
			{
				case (int) OBConstant.DataType.LONG :
					long lTmp = Long.parseLong(ai.getColumnValue().toString());
					ps.setLong(iIndex, lTmp);
					break;
				case (int) OBConstant.DataType.INT :
					int iTmp = Integer.parseInt(ai.getColumnValue().toString());
					ps.setInt(iIndex, iTmp);
					break;
				case (int) OBConstant.DataType.DOUBLE :
					double dTmp = Double.parseDouble(ai.getColumnValue().toString());
					ps.setDouble(iIndex, dTmp);
					break;
				case (int) OBConstant.DataType.STRING :
					ps.setString(iIndex, (String) ai.getColumnValue());
					break;
				case (int) OBConstant.DataType.TIMESTAMP :
					ps.setTimestamp(iIndex, (Timestamp) ai.getColumnValue());
					break;
			}
		}
		catch (Exception e)
		{
			Log.print("save failed. Exception is " + e.toString());
			throw new Exception(e.getMessage());
		}
		finally
		{
		}
		return bolResult;
	}
	public static void main(String[] args)
	{
		try
		{
			Connection con = Database.getConnection();
			OBApplyDao oad = new OBApplyDao(con);
			String strCode = "";
			strCode = oad.createAheadRepayCode(98);
			log4j.info("===strCode=="+strCode);
			/*Vector v = new Vector();
			AcceptInfo ai = null;
			OBApplyQueryInfo oaf = new OBApplyQueryInfo();
			Collection c = null;
			oaf.setCurrencyID(1);
			oaf.setLoanInstrType(1);
			oaf.setPageNo(1);
			oaf.setOfficeID(1);
			//oaf.setApplyClientID(3);
			c = oad.findOBApply(oaf);
			Log.print(c.size() + "success!");
			*/
			//cleanup(con);
		}
		catch (Exception e)
		{
		}
	}
}
