package com.iss.itreasury.loan.obinterface.bizlogic;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import java.rmi.RemoteException;
//import java.security.Identity;
import java.util.*;
//import java.util.Properties;
//import javax.ejb.EJBObject;
//import java.util.*;
import java.sql.*;
//
import com.iss.itreasury.loan.obinterface.dao.*;
import com.iss.itreasury.loan.obinterface.dataentity.*;
import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.contractcontent.dataentity.*;
import com.iss.itreasury.loan.extendapply.dao.ExtendApplyDao;
import com.iss.itreasury.util.*;
import com.iss.itreasury.loan.util.*;
import com.iss.itreasury.ebank.util.*;
import com.iss.itreasury.loan.loanpaynotice.dao.*;
import com.iss.itreasury.loan.loancommonsetting.dao.*;
import com.iss.itreasury.loan.loancommonsetting.dataentity.*;
import com.iss.itreasury.loan.loanpaynotice.dataentity.*;
/*
import com.iss.itreasury.system.bizlogic.*;
import com.iss.itreasury.system.dao.*;
import com.iss.itreasury.system.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.loan.contract.dao.*;
import com.iss.itreasury.loan.contract.dataentity.*;//*/
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public class OBInterfaceEJB implements SessionBean
{
	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */
	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context)
	{
		this.context = context;
	}
	private SessionContext context;
	/**
	 * No argument constructor required by container.
	 */
	public OBInterfaceEJB()
	{
	}
	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove()
	{
	}
	private Log4j log4j = new Log4j(Constant.ModuleType.LOAN, this);
	private void cleanup(Connection con) throws SQLException
	{
		try
		{
			if (con != null)
			{
				con.close();
				con = null;
			}
		}
		catch (SQLException sqle)
		{
		}
	}
	/**
	 * 查询免还，操作Loan_FreeForm 表
	 * @param ID 免还申请标示
	 */
	public OBLoanInfo findLoanByID(long lID, long lOfficeID) throws IException, RemoteException
	{
		Connection con = null;
		OBLoanInfo Info = new OBLoanInfo();
		try
		{
			con = Database.getConnection();
			OBLoanDao dao = new OBLoanDao(con);
			Info = dao.findByID(lID, lOfficeID);
			if (Info == null)
			{
				log4j.info(" OBLoanDao.findByID() 错误  ");
				throw new IException("Loan_E109");
			}
			cleanup(con);
		}
		catch (IException ie)
		{
			throw ie;
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			throw new IException("Gen_E001");
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new IException("Gen_E001");
		}
		finally
		{
			try
			{
				cleanup(con);
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return Info;
	}
	/**
	 * 接受贷款申请，将网银中的数据保存到中油内部系统的表中
	 * 操作数据库表OB_Loan、OB_Assure、OB_Plan、OB_PlanDetail...
	 * @param       lID         网银系统中贷款指令标示
	 * @param       lUserID     用户标示
	 * @param       lOfficeID   用户的办事处标示
	 * @return      long        成功，返回转入的贷款申请的标示；失败，返回值=-1
	 */
	public long saveLoan(long lID, long lUserID, long lOfficeID) throws IException, RemoteException
	{
		long lReturn = -1;
		Connection con = null; //
		OBApplyOperation op = null;
		OBApplyDao obaDao = null;
		OBLoanDao oblDao = null;
		boolean bSucceed = false;
		long lFalsePoint = -1;
		OBLoanInfo oblinfo = null;
		OBAssureInfo obainfo = null;
		String strTable = "loan_loanform";
		Vector vValue = null;
		long lInID = -1;
		Timestamp tsSystemDate = null;
		try
		{
			tsSystemDate = Env.getSystemDateTime();
			con = Database.getConnection();
			//con = Database.getConnection();
			obaDao = new OBApplyDao(con);
			oblDao = new OBLoanDao(con);
			op = new OBApplyOperation();
			OBBackInfo backinfo = new OBBackInfo();
			System.out.println("lOfficeID+++++++++==========="+lOfficeID);
			oblinfo = oblDao.findByID(lID, lOfficeID);
			if (oblinfo.getStatusID() != OBConstant.LoanInstrStatus.SUBMIT)
			{
				log4j.info(" status no right ");
				throw new IException("Loan_E108");
			}
			//得到最大的ID
			lInID = obaDao.getMaxID(strTable);
			con.setAutoCommit(false);
			if (oblinfo != null && lInID > 0) // 判断是否取得最大ID
			{
				//校验数据合法性
				lReturn = 1;
				//*
				if (lReturn > 0)
				{
					//修改网银中数据为处理中
					backinfo.setID(lID);
					//backinfo.setInID(lInID);
					backinfo.setStatusID(OBConstant.LoanInstrStatus.ACCEPT);
					backinfo.setOfficeID(lOfficeID);
					backinfo.setUserID(lUserID);
					lReturn = oblDao.updateOB(backinfo);
				}
				else
				{
					bSucceed = false;
					lFalsePoint = 0;
				} //*/
				if (lReturn > 0)
				{
					//贷款申请表导入贷款数据
					String strApplyCode = "";
					System.out.println("oblinfo.getTypeID()====="+oblinfo.getTypeID());
					oblinfo.setTypeID(oblinfo.getTypeID());
					strApplyCode = obaDao.createApplyCode(oblinfo.getTypeID());
					oblinfo.setInApplyID(lInID);
					oblinfo.setApplyCode(strApplyCode);
					//数据库贷款申请状态为“撰写”
					oblinfo.setStatusID((int) LOANConstant.LoanStatus.SAVE);
					oblinfo.setInputDate(tsSystemDate);
					vValue = (Vector) OBApplyOperation.getLoanData(oblinfo, lUserID);
					Log.print("保存贷款数据开始...");
					lReturn = obaDao.save(vValue, strTable);
					Log.print("保存贷款数据结束...");
					vValue.clear();
				}
				else
				{
					bSucceed = false;
					lFalsePoint = 1;
				}
				if (lReturn > 0)
				{
					//导入贷款计划ob_plan以及其细节ob_plandetail
					Vector v = oblDao.getPlanInfoByLoanID(oblinfo.getID());
					if (v != null && v.size() > 0)
					{
						Log.print("保存计划数据开始...");
						strTable = "loan_loanformplan";
						Iterator it = v.iterator();
						while (it.hasNext())
						{
							OBPlanInfo oa = new OBPlanInfo();
							oa = (OBPlanInfo) it.next();
							Log.print(".........");
							long aid = obaDao.getMaxID(strTable);
							vValue = (Vector) OBApplyOperation.getPlanData(oa, aid, oblinfo.getInApplyID());
							lReturn = obaDao.save(vValue, strTable);
							vValue.clear();
							if (lReturn > 0)
							{
								Log.print("....1.....");
								Vector vpd = oblDao.getPlanDetailInfoByPlanID(oblinfo.getPlanVersion());
								Log.print("....2.....");
								if (vpd != null && vpd.size() > 0)
								{
									Log.print("保存计划细节数据开始...");
									String strTable2 = "loan_loanformplanDetail";
									Iterator itpd = vpd.iterator();
									while (itpd.hasNext())
									{
										OBPlanDetailInfo detail = new OBPlanDetailInfo();
										detail = (OBPlanDetailInfo) itpd.next();
										Log.print(".........");
										long pdid = obaDao.getMaxID(strTable2);
										vValue = (Vector) OBApplyOperation.getPlanDetailData(detail, pdid, aid);
										lReturn = obaDao.save(vValue, strTable2);
										vValue.clear();
									}
									Log.print("保存计划细节数据结束...");
								}
								else
								{
									Log.print("计划细节数据为空");
								}
								lFalsePoint = 2;
							}
							else
							{
								bSucceed = false;
								lFalsePoint = 2;
							}
						}
						Log.print("保存计划数据结束...");
					}
					else
					{
						Log.print("计划数据为空");
					}
					lFalsePoint = 3;
				}
				else
				{
					bSucceed = false;
					lFalsePoint = 3;
				}
				//*
				if (lReturn > 0)
				{
					//导入担保信息ob_assure
					Vector v = oblDao.getAssureInfoByLoanID(oblinfo.getID());
					if (v != null && v.size() > 0)
					{
						Log.print("保存担保数据开始...");
						strTable = "loan_loanformassure";
						Iterator it = v.iterator();
						while (it.hasNext())
						{
							OBAssureInfo oa = new OBAssureInfo();
							oa = (OBAssureInfo) it.next();
							Log.print(".........");
							long aid = obaDao.getMaxID(strTable);
							vValue = (Vector) OBApplyOperation.getAssureData(oa, aid, oblinfo.getInApplyID());
							lReturn = obaDao.save(vValue, strTable);
							vValue.clear();
						}
						Log.print("保存担保数据结束...");
					}
					else
					{
						Log.print("担保数据为空");
					}
					lFalsePoint = 4;
				}
				else
				{
					bSucceed = false;
					lFalsePoint = 4;
				} //*/
				//*
				if (lReturn > 0)
				{
					//导入附件信息ob_docinfo
					Vector v = oblDao.getDocInfoByLoanID(Constant.DocType.EBANKUPLOAD, OBConstant.AttachParentType.LOAN, oblinfo.getID());
					if (v != null && v.size() > 0)
					{
						Log.print("保存附件数据开始...");
						strTable = "loan_docinfo";
						Iterator it = v.iterator();
						while (it.hasNext())
						{
							OBDocInfo oa = new OBDocInfo();
							oa = (OBDocInfo) it.next();
							Log.print(".........");
							long aid = obaDao.getMaxID(strTable);
							oa.setID(aid);
							oa.setParentID(oblinfo.getInApplyID());
							oa.setParentTypeID(LOANConstant.AttachParentType.LOAN);
							vValue = (Vector) OBApplyOperation.getDocInfoData(oa);
							lReturn = obaDao.save(vValue, strTable);
							vValue.clear();
						}
						Log.print("保存附件结束...");
					}
					else
					{
						Log.print("附件为空");
					}
					lFalsePoint = 5;
				}
				else
				{
					bSucceed = false;
					lFalsePoint = 5;
				} //*/
				//*
				if (lReturn > 0)
				{
					//导入贷款调查表信息ob_contractcontent――〉
					Vector v = oblDao.getContractContentInfoByLoanID(oblinfo.getID());
					if (v != null && v.size() > 0)
					{
						Log.print("保存贷款调查表数据开始...");
						strTable = "loan_contractcontent";
						Iterator it = v.iterator();
						while (it.hasNext())
						{
							ContractContentInfo oa = new ContractContentInfo();
							oa = (ContractContentInfo) it.next();
							Log.print(".........");
							long aid = obaDao.getMaxID(strTable);
							oa.setID(aid);
							oa.setParentID(oblinfo.getInApplyID());
							vValue = (Vector) OBApplyOperation.getContractContentData(oa);
							lReturn = obaDao.save(vValue, strTable);
							vValue.clear();
						}
						Log.print("保存贷款调查表数据结束...");
					}
					else
					{
						Log.print("贷款调查表为空");
					}
					lFalsePoint = 6;
				}
				else
				{
					bSucceed = false;
					lFalsePoint = 6;
				} //*/
				if (oblinfo.getTypeID() == LOANConstant.LoanType.TX)
				{
					//*
					if (lReturn > 0)
					{
						//导入贷款调查表信息ob_contractcontent――〉
						Vector v = oblDao.getDiscountBillInfoByLoanID(oblinfo.getID());
						if (v != null && v.size() > 0)
						{
							Log.print("保存贴现数据开始...");
							strTable = "loan_discountformbill";
							Iterator it = v.iterator();
							while (it.hasNext())
							{
								OBDiscountBillInfo oa = new OBDiscountBillInfo();
								oa = (OBDiscountBillInfo) it.next();
								Log.print(".........");
								long aid = obaDao.getMaxID(strTable);
								oa.setID(aid);
								oa.setLoanID(oblinfo.getInApplyID());
								vValue = (Vector) OBApplyOperation.getDiscountBillData(oa);
								lReturn = obaDao.save(vValue, strTable);
								vValue.clear();
							}
							Log.print("保存贴现数据结束...");
						}
						else
						{
							Log.print("贴现为空");
						}
						lFalsePoint = 7;
					}
					else
					{
						bSucceed = false;
						lFalsePoint = 7;
					} //*/
				}
				if (lReturn > 0)
				{
					//更改网银中相关数据
					Log.print("更改网银中相关数据开始...");
					backinfo.setInID(lInID);
					lReturn = oblDao.updateOB(backinfo);
					Log.print("更改网银中相关数据结束...");
					if (lReturn <= 0)
					{
						bSucceed = false;
						lFalsePoint = 7;
						Log.print("更改网银中相关数据失败...");
					}
					else
					{
						bSucceed = true;
						lFalsePoint = 7;
						Log.print("更改网银中相关数据成功...");
					}
				}
				else
				{
					bSucceed = false;
					lFalsePoint = 7;
				}
			}
			if (bSucceed)
			{
				con.commit();
				lReturn = lInID;
			}
			else
			{
				con.rollback();
				lReturn = -1;
			}
			cleanup(con);
		}
		catch (IException ie)
		{
			log4j.error(ie.getMessage());
			throw ie;
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
			Log.print("lFalsePoint = " + lFalsePoint);
			Log.print(" saveloan() failed.  Exception is " + e.toString());
			try
			{
				con.rollback();
			} catch (SQLException e1)
			{
					e1.printStackTrace();
			}
			throw new IException("Gen_E001");
		}
		finally
		{
			try
			{
				cleanup(con);
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lReturn;
	}
	/**
	 * 
	 * @param lID 申请标识 ，如果<=0新增，否则修改
	 * @param lUserID   录入人
	 * @param lOfficeID 合同标识//现在是放款单标识
	 */
	public long refuseLoan(OBBackInfo bInfo) throws IException, RemoteException
	{
		long lReturn = -1;
		Connection con = null;
		OBLoanInfo oblinfo = null;
		OBLoanDao odo = null;
		try
		{
			con = Database.getConnection();
			//con = Database.getConnection();
			con.setAutoCommit(false);
			//
			odo = new OBLoanDao(con);
			oblinfo = odo.findByID(bInfo.getID(), bInfo.getOfficeID());
			if (oblinfo.getStatusID() != OBConstant.LoanInstrStatus.SUBMIT)
			{
				log4j.info(" status no right ");
				throw new IException("Loan_E108");
			}
			//修改网银中数据为已拒绝
			bInfo.setStatusID(OBConstant.LoanInstrStatus.REFUSE);
			lReturn = odo.updateOB(bInfo);
			if (lReturn > 0)
			{
				con.commit();
			}
			else
			{
				con.rollback();
				lReturn = -1;
			}
			cleanup(con);
		}
		catch (IException ie)
		{
			log4j.error(ie.getMessage());
			throw ie;
		}
		catch (Exception e)
		{
			Log.print("refuse() failed.  Exception is " + e.toString());
			try
			{
				con.rollback();
			} catch (SQLException e1)
			{
				e1.printStackTrace();
			}
			throw new IException("Gen_E001");
		}
		finally
		{
			try
			{
				cleanup(con);
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lReturn;
	}
	/**
	 * 查询放款通知单，操作OB_DUEBILL 表
		* @param ID ，
		再调用ContractDao的findByID方法取得相应合同的信息，
		根据上面取得的信息比较其中的办事处ID和传入的办事处ID是否相等，如不等抛出IException,如相等将以上两种信息组合成返回信息，得到指令的
		所有信息
		返回：OBPayNoticeInfo
	
	 */
	public OBPayNoticeInfo findPayNoticeByID(long lID, long lOfficeID) throws IException, RemoteException
	{
		OBPayNoticeInfo info = new OBPayNoticeInfo();
		try
		{
			OBPayNoticeDao payNoticeDao = new OBPayNoticeDao();
			info = payNoticeDao.findByID(lID);
			ContractDao contractDao = new ContractDao();
			ContractInfo cinfo = new ContractInfo();
			cinfo = contractDao.findByID(info.getContractID());
			if (cinfo.getOfficeID() == lOfficeID)
			{
				LoanCommonSettingDao commonSetDao = new LoanCommonSettingDao();
				ClientInfo clientInfo, consignInfo = null;
				info.setContractCode(cinfo.getContractCode());
				info.setLoanAmount(cinfo.getLoanAmount());
				info.setIntervalNum(cinfo.getIntervalNum());
				info.setLoanPurpose(cinfo.getLoanPurpose());
				info.setLoanTypeID(cinfo.getLoanTypeID());
				info.setBalance(cinfo.getBalance());
				info.setUnPayAmount(cinfo.getAInfo().getUnPayAmount());
				info.setRepayAmount(cinfo.getAInfo().getRepayAmount());
				info.setOpenAmount(cinfo.getAInfo().getOpenAmount());
				info.setAdjustRate(cinfo.getAdjustRate());
				info.setExamineAmount(cinfo.getExamineAmount());
				info.setContractRate(cinfo.getBasicInterestRate()); //合同基本利率
				info.setLoanAccount(cinfo.getLoanAccount());
				//****************************************************************************///////
				long lBorrowClientID = -1;
				lBorrowClientID = cinfo.getBorrowClientID();
				clientInfo = commonSetDao.findClientByID(lBorrowClientID);
				info.setLoanClientName(clientInfo.getName());
				info.setLoanZipCode(clientInfo.getZipCode());
				info.setLoanPhone(clientInfo.getPhone());
				info.setLoanAddress(clientInfo.getAddress());
				//*****************************************************************************///////				
				long ConsignClientID = cinfo.getClientID();
				consignInfo = commonSetDao.findClientByID(ConsignClientID);
				 
				info.setConsignClientName(consignInfo.getName());
				//*******************************************************************************/////
				double tmpRate = info.getWTInterestRate() * (1 + cinfo.getAdjustRate() / 100);
				info.setInterestRate(tmpRate);
			}
			else
			{
				System.out.print("office id = " + lOfficeID);
				System.out.print("Contract office id = " + cinfo.getOfficeID());
				throw new IException("Sett_E001");
			}
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new IException("Gen_E001");
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			throw new RemoteException();
		}
		return info;
	}
	/**
	 * 查询免还，操作Loan_FreeForm 表
	     * @param ID 免还申请标示
	 */
	public OBFreeInfo findFreeByID(long lID, long lOfficeID) throws IException, RemoteException
	{
		OBFreeInfo info = new OBFreeInfo();
		try
		{
			OBFreeDao freedao = new OBFreeDao();
			ContractDao cdao = new ContractDao();
			ContractInfo cinfo = new ContractInfo();
			info = freedao.findByID(lID);
			cinfo = cdao.findByID(info.getContractID());
			LoanPayNoticeDao loanPayNoticeDao = new LoanPayNoticeDao();
			LoanPayNoticeInfo linfo = loanPayNoticeDao.findLoanPayNoticeByID(info.getLoanPayID());
			if (cinfo.getOfficeID() == lOfficeID)
			{
				info.setContractCode(cinfo.getContractCode());
				info.setLoanAmount(cinfo.getLoanAmount());
				info.setIntervalNum(cinfo.getIntervalNum());
				info.setInterestRate((float) cinfo.getInterestRate());
				info.setBalance(cinfo.getBalance());
				info.setLoanPurpose(cinfo.getLoanPurpose());
				info.setClientName(cinfo.getClientName());
				info.setEndDate(cinfo.getLoanEnd());
				log4j.info("set Contract data entity OK!");
				//---------------------------------------------------//
				info.setConsignClientName(linfo.getConsignClientName());
				info.setLoanPayCode(linfo.getCode());
				info.setLoanPayAmount(linfo.getAmount());
				info.setLoanPayBalance(linfo.getBalance());
				info.setLoanPayInterest(linfo.getInterest());
			}
			else
			{
				System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@cinfo.getOfficeID()=" + cinfo.getOfficeID());
				System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@cinfo.getOfficeID()=" + lOfficeID);
				throw new IException("Gen_E001");
			}
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new IException("Gen_E001");
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			throw new RemoteException();
		}

		return info;
	}
	/**
	 * 保存
	 * @param lID 申请标识 ，如果<=0新增，否则修改
	 * @param lUserID   录入人
	 * @param lOfficeID 合同标识//现在是放款单标识
	 */
	public long savePayNotice(long lID, long lUserID, long lOfficeID) throws IException, RemoteException
	{
		long lReturn = -1;
		long maxID = -1;
		try
		{
			OBPayNoticeDao payNoticeDao = new OBPayNoticeDao();
			OBApplyDao applyDao = new OBApplyDao(Database.getConnection());
			OBBackInfo backInfo = null;
			OBPayNoticeInfo info = this.findPayNoticeByID(lID, lOfficeID);
			if (info.getStatusID() == OBConstant.LoanInstrStatus.SUBMIT)
			{
				if (info != null)
				{
					backInfo = new OBBackInfo();
					backInfo.setID(lID);
					backInfo.setStatusID(OBConstant.LoanInstrStatus.ACCEPT);
					lReturn = payNoticeDao.updateOB(backInfo);
					if (lReturn > 0)
					{
						Connection con;
						PreparedStatement ps = null;
						ResultSet rs = null;
						con = Database.getConnection();
						String strSQL = " select Seq_Loan_PayFrm_DiscountCred.Nextval from dual ";
						ps = con.prepareStatement(strSQL);
						//log4j.info("sql="+strSQL);
						rs = ps.executeQuery();
						if (rs.next())
						{
							maxID = rs.getLong(1);
							rs.close();
							rs = null;
							ps.close();
							ps = null;
						}
						else
						{
							rs.close();
							rs = null;
							ps.close();
							ps = null;
							con.close();
							con = null;
						}
						String code = getPayNoticeCode(info.getContractID());
						Vector vec = new Vector();
						AcceptInfo ainfo = new AcceptInfo();
						ainfo.setColumnName("ID");
						ainfo.setColumnValue(new Long(maxID));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NCONTRACTID");
						ainfo.setColumnValue(new Long(info.getContractID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SCODE");
						ainfo.setColumnValue(code);
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("DTOUTDATE");
						ainfo.setColumnValue(info.getOutDate());
						ainfo.setType(OBConstant.DataType.TIMESTAMP);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("MAMOUNT");
						ainfo.setColumnValue(new Double(info.getAmount()));
						ainfo.setType(OBConstant.DataType.DOUBLE);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SCONSIGNACCOUNT");
						ainfo.setColumnValue(info.getConsignAccount());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NBANKINTERESTID");
						ainfo.setColumnValue(new Long(info.getBankInterestID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("MCOMMISSIONRATE");
						ainfo.setColumnValue(new Double(info.getCommissionRate()));
						ainfo.setType(OBConstant.DataType.DOUBLE);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("MSURETYFEERATE");
						ainfo.setColumnValue(new Double(info.getSuretyFeeRate()));
						ainfo.setType(OBConstant.DataType.DOUBLE);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("DTSTART");
						ainfo.setColumnValue(info.getStart());
						ainfo.setType(OBConstant.DataType.TIMESTAMP);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("DTEND");
						ainfo.setColumnValue(info.getEnd());
						ainfo.setType(OBConstant.DataType.TIMESTAMP);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SRECEIVECLIENTNAME");
						ainfo.setColumnValue(info.getReceiveClientName());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SREMITBANK");
						ainfo.setColumnValue(info.getRemitBank());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SCOMPANYLEADER");
						ainfo.setColumnValue(info.getCompanyLeader());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SHANDLINGPERSON");
						ainfo.setColumnValue(info.getHandlingPerson());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SDEPARTMENTLEADER");
						ainfo.setColumnValue(info.getDepartmentLeader());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NSTATUSID");
						ainfo.setColumnValue(new Long(info.getStatusID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NINPUTUSERID");
						ainfo.setColumnValue(new Long(lUserID));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("DTINPUTDATE");
						ainfo.setColumnValue(DataFormat.getDateTime(DataFormat.getDateString()));
						ainfo.setType(OBConstant.DataType.TIMESTAMP);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NNEXTCHECKUSERID");
						ainfo.setColumnValue(new Long(lUserID));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NSOURCETYPEID");
						ainfo.setColumnValue(new Long(LOANConstant.LoanPayNoticeModifySourceType.XD));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NGRANTCURRENTACCOUNTID");
						ainfo.setColumnValue(new Long(info.getGrantCurrentAccountID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NGRANTTYPEID");
						ainfo.setColumnValue(new Long(info.getGrantTypeID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SREMITINPROVINCE");
						ainfo.setColumnValue(info.getRemitinProvince());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SREMITINCITY");
						ainfo.setColumnValue(info.getRemitinCity());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NDRAWNOTICEID");
						ainfo.setColumnValue(new Long(info.getDrawNoticeID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SLOANACCOUNT");
						ainfo.setColumnValue(info.getLoanAccount());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SCHECKPERSON");
						ainfo.setColumnValue(new Long(lUserID));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NACCOUNTBANKID");
						ainfo.setColumnValue(new Long(info.getAccountBankID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("MINTERESTRATE");
						ainfo.setColumnValue(new Double(info.getWTInterestRate()));
						ainfo.setType(OBConstant.DataType.DOUBLE);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SRECEIVEACCOUNT");
						ainfo.setColumnValue(info.getReceiveAccount());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NNEXTCHECKLEVEL");
						ainfo.setColumnValue(new Long(1));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						
						//added by mzh_fu(付明正) 2007/03/21  将nofficeId添加进去
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NOFFICEID");
						ainfo.setColumnValue(new Long(lOfficeID));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);						
						
						if (lReturn > 0)
						{
							backInfo = new OBBackInfo();
							backInfo.setUserID(lUserID);
							backInfo.setID(lID);
							backInfo.setInID(maxID);
							lReturn = payNoticeDao.updateOB(backInfo);
							if (lReturn <= 0)
							{
								log4j.info("insert inNo failed!!!!!!!!!!");
								throw new IException("Gen_E001");
							}
						}
						else
						{
							log4j.info("Insert freeInfo to loan_freeForm failed!!!!!!!!!!!!!");
							throw new IException("Gen_E001");
						}
						lReturn = applyDao.save(vec, "loan_payform");
					}
					else
					{
						log4j.info("update status failed!!!!!!!!!!!!");
						throw new IException("Gen_E001");
					}
				}
				else
				{
					log4j.info("get paynoticeInfo failed!!!!!!!!");
					throw new IException("Gen_E001");
				}
			}
			else
			{
				throw new IException("Loan_E108");
			}
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException();
			throw new IRollbackException(context, ex.getMessage(), ex);
		}

		return maxID;
	}
	/**
	 * 保存
	 * @param lID 申请标识 ，如果<=0新增，否则修改
	 * @param lUserID   录入人
	 * @param lOfficeID 合同标识//现在是放款单标识
	 */
	public long saveFree(long lID, long lUserID, long lOfficeID) throws IException, RemoteException
	{
		long lReturn = -1;
		long maxID = -1;
		try
		{
			OBFreeDao freedao = new OBFreeDao();
			OBBackInfo backInfo = null;
			OBApplyDao applyDao = new OBApplyDao(Database.getConnection());
			
			OBFreeInfo freeInfo = findFreeByID(lID, lOfficeID);
			if (freeInfo.getStatusID() == OBConstant.LoanInstrStatus.SUBMIT)
			{
				if (freeInfo != null)
				{
					backInfo = new OBBackInfo();
					backInfo.setID(lID);
					backInfo.setStatusID(OBConstant.LoanInstrStatus.ACCEPT);
					lReturn = freedao.updateOB(backInfo);
					if (lReturn > 0)
					{
						maxID = applyDao.getMaxID("loan_freeform");
						String code = getFreeApplyCode(freeInfo.getContractID());
						Vector vec = new Vector();
						AcceptInfo ainfo = new AcceptInfo();
						ainfo.setColumnName("ID");
						ainfo.setColumnValue(new Long(maxID));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NCONTRACTID");
						ainfo.setColumnValue(new Long(freeInfo.getContractID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("MFREEAMOUNT");
						ainfo.setColumnValue(new Double(freeInfo.getFreeAmount()));
						ainfo.setType(OBConstant.DataType.DOUBLE);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("DTFREEDATE");
						ainfo.setColumnValue(freeInfo.getFreeDate());
						ainfo.setType(OBConstant.DataType.TIMESTAMP);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SFREEREASON");
						ainfo.setColumnValue(freeInfo.getFreeReason());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NSTATUSID");
						ainfo.setColumnValue(new Long(LOANConstant.FreeApplyStatus.SUBMIT));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SACCOUNTNO");
						ainfo.setColumnValue(freeInfo.getConsignClientAccount());
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NINPUTUSERID");
						ainfo.setColumnValue(new Long(lUserID));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("DTINPUTDATE");
						ainfo.setColumnValue(DataFormat.getDateTime(DataFormat.getDateString()));
						ainfo.setType(OBConstant.DataType.TIMESTAMP);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NNEXTCHECKUSERID");
						ainfo.setColumnValue(new Long(lUserID));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("MINTEREST");
						ainfo.setColumnValue(new Double(freeInfo.getFreeRate()));
						ainfo.setType(OBConstant.DataType.DOUBLE);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("NPAYFORMID");
						ainfo.setColumnValue(new Long(freeInfo.getLoanPayID()));
						ainfo.setType(OBConstant.DataType.LONG);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setColumnName("SCODE");
						ainfo.setColumnValue(code);
						ainfo.setType(OBConstant.DataType.STRING);
						vec.add(ainfo);
						ainfo = new AcceptInfo();
						ainfo.setType(OBConstant.DataType.LONG);
						ainfo.setColumnName("NNEXTCHECKLEVEL");
						ainfo.setColumnValue(new Long(1));
						vec.add(ainfo);
						
						lReturn = applyDao.save(vec, "loan_freeform");
						if (lReturn > 0)
						{
							backInfo = new OBBackInfo();
							backInfo.setUserID(lUserID);
							backInfo.setID(lID);
							backInfo.setInID(maxID);
							long lReturn1 = freedao.updateOB(backInfo);
							if (lReturn1 <= 0)
							{
								log4j.info("insert inNo failed!!!!!!!!!!");
								throw new IException("Gen_E001");
							}
						}
						else
						{
							log4j.info("Insert freeInfo to loan_freeForm failed!!!!!!!!!!!!!");
							throw new IException("Gen_E001");
						}
					}
					else
					{
						log4j.info("update status failed!!!!!!!!!!!!");
						throw new IException("Gen_E001");
					}
				}
				else
				{
					log4j.info("free info == null!!!!!!!!!!");
					throw new IException("Gen_E001");
				}
			}
			else
			{
				throw new IException("Loan_E108");
			}
		}
		catch (RemoteException e)
		{
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException();
			throw new IRollbackException(context, ex.getMessage(), ex);
		}

		return maxID;
	}
	/**
	 * 
	 * @param lID 申请标识 ，如果<=0新增，否则修改
	 * @param lUserID   录入人
	 * @param lOfficeID 合同标识//现在是放款单标识
	 */
	public long refuseFree(OBBackInfo bInfo) throws IException, RemoteException
	{
		long lReturn = -1;
		try
		{
			OBFreeDao freedao = new OBFreeDao();
			bInfo.setStatusID(OBConstant.LoanInstrStatus.REFUSE);
			freedao.updateOB(bInfo);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException();
			throw new IRollbackException(context, ex.getMessage(), ex);
		}

		return lReturn;
	}
	public long refusePayNotice(OBBackInfo bInfo) throws IException, RemoteException
	{
		long lReturn = -1;
		try
		{
			OBPayNoticeDao payNoticeDao = new OBPayNoticeDao();
			bInfo.setStatusID(OBConstant.LoanInstrStatus.REFUSE);
			payNoticeDao.updateOB(bInfo);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException();
			throw new IRollbackException(context, ex.getMessage(), ex);
		}

		return lReturn;
	}
	private String getPayNoticeCode(long lContractID) throws Exception
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		String sTemp = "";
		long lCode = 0;
		String sReturnCode = "";
		try
		{
			con = Database.getConnection();
			strSQL = "select count(*) from loan_payform  where NCONTRACTID = ?";
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				lCode = rs.getLong(1) + 1;
			}
			rs.close();
			ps.close();
			//凑齐三位
			if (lCode < 10)
			{
				sReturnCode = "00" + lCode;
			}
			else
				if (lCode < 100 && lCode >= 10)
				{
					sReturnCode = "0" + lCode;
				}
			if (lCode >= 100)
			{
				sReturnCode = "" + lCode;
			}
		}
		catch (Exception e)
		{
			log4j.error("catch a error");
			throw e;
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		return sReturnCode;
	}
	private String getFreeApplyCode(long lContractID) throws Exception
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		String sTemp = "";
		long lCode = 1;
		String sReturnCode = "";
		try
		{
			con = Database.getConnection();
			strSQL = "select nvl(max(sCode),'MH0') sCode " + " from Loan_freeform where nContractID = " + lContractID + " and nStatusID > 0 ";
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			//ps.setLong(1,lContractID);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				sTemp = rs.getString("sCode");
				sTemp = sTemp.substring(2);
				lCode = Long.parseLong(sTemp) + 1;
			}
			if (rs != null)
			{
				rs.close();
				rs = null;
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			if (con != null)
			{
				con.close();
				con = null;
			}
			//凑齐三位
			sReturnCode = "MH" + DataFormat.formatInt((int) lCode, 3, true);
		}
		catch (Exception e)
		{
			log4j.error("catch a error");
			throw e;
		}
		finally
		{
			try
			{
			}
			catch (Exception ex)
			{
			}
		}
		return sReturnCode;
	}
	/**
		 * Method findExtendByID.
		 * 调用OBExtendDao的findByID方法得到展期申请指令的信息，
		   再调用ContractDao的findByID方法取得相应合同的信息，
		   根据上面取得的信息比较其中的办事处ID和传入的办事处ID是否相等，
		   如不等抛出IException,如相等将以上两种信息组合成返回信息，
		   得到指令的所有信息返回：OBExtendInfo
		 * @param lID
		 * @param lOfficeID
		 * @return OBExtendInfo
		 * @throws IException
		 * @throws Exception
		 */
	public OBExtendInfo findExtendByID(long lID, long lOfficeID) throws IException, RemoteException
	{
		OBExtendInfo resultInfo = null;
		OBExtendDao obExtendDao = new OBExtendDao();
		ContractDao contractDao = new ContractDao();
		ContractInfo contractInfo = null;
		long lContractID = -1;
		long lContractOfficeID = -1;
		try
		{
			Log.print("\n=============findExtendByID start=============");
			resultInfo = obExtendDao.findByID(lID);
			if (resultInfo != null)
			{
				Log.print("===========obExtendDao.findByID search result not null=============");
				lContractID = resultInfo.getContractID();
				Log.print("～～～～～～～～～～～合同id:" + lContractID);
				contractInfo = contractDao.findByID(lContractID);
				if (contractInfo != null)
				{
					Log.print("===========contractDao.findByID search result not null=============");
					lContractOfficeID = contractInfo.getOfficeID();
					Log.print("合同办事处id:" + lContractOfficeID);
					if (lOfficeID != lContractOfficeID)
					{
						Log.print("================officeid not equal=========");
						throw new IException("Loan_E107");
					}
					else
					{
						Log.print("================officeid  equal=========");
						//向resultInfo中添加contractInfo的部分信息
						resultInfo.setContractCode(contractInfo.getContractCode());
						resultInfo.setBorrowClientName(contractInfo.getBorrowClientName());
						resultInfo.setLoanStart(contractInfo.getLoanStart());
						resultInfo.setLoanEnd(contractInfo.getLoanEnd());
						resultInfo.setIntervalNum(contractInfo.getIntervalNum());
						resultInfo.setExamineAmount(contractInfo.getExamineAmount());
						resultInfo.setLoanInterestRate(contractInfo.getInterestRate());
						resultInfo.setClientName(contractInfo.getClientName());
						Log.print("==============基准利率=====：" + resultInfo.getInterestRate());
						Log.print("==============调整利率=====：" + contractInfo.getAdjustRate());
						resultInfo.setInterestAdjust(contractInfo.getAdjustRate());
					}
				}
			}
			Log.print("\n=============findExtendByID end=============");
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new IException("Gen_E001");
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			throw new RemoteException();
		}
		
		return resultInfo;
	}
	/**
	 * Method saveExtend.
	 * 接收一条展期指令,返回在内部系统的ID
		1.调用findExtendByID方法得到展期指令的信息,如未取得信息抛出IException.
		2.调用OBExtendDao的updateOB方法将网银的指令状态改为处理中
		3.调用OBApplyDao的getMaxID和createApplyCode得到要存入内部系统的ID和申请编号
		4.调用OBApplyDao的save方法，将表ob_extend里的一条指令的数据存入表loan_extendform
		5.参照第3，4步将
		  表ob_extenddetail里的一条指令的数据存入表loan_extenddetail
		  表ob_contractplan里的一条指令的数据存入表loan_loancontractplan
		  表ob_contractplandetail里的一条指令的数据存入表loan_loancontractplandetail
		6.调用OBExtendDao的updateOB方法将网银的指令填入内部系统的ID和申请号及处理人
	 * @param lID
	 * @param lOfficeID
	 * @return long
	 * @throws IException
	 * @throws Exception
	 */
	public long saveExtend(long lID, long lUserID, long lOfficeID) throws IException, RemoteException
	{
		long lRtnResult = -1;
		long lInIDExtendForm = -1; //loan_extendform内部指令
		long lInIDExtendDetail = -1; //LOAN_EXTENDDETAIL内部指令
		long lInIDPlan = -1; //loan_loancontractplan内部指令
		long lInIDPlanDetail = -1; //loan_loancontractplandetail内部指令
		Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
		AcceptInfo acceptInfo = null;
		Vector vctAccept = null;
		OBExtendInfo obExtendInfo = null;
		Vector vctExtendDetail = null;
		ExtendDetailInfo extendDetailInfo = null;
		ContractPlanInfo contractPlanInfo = null;
		Vector vctContractPlanDetail = null;
		ContractPlanDetailInfo contractPlanDetailInfo = null;
		OBExtendDao obExtendDao = new OBExtendDao();
		OBApplyDao obApplyDao = null;
		OBBackInfo obBackInfo = new OBBackInfo();
		int i = 0;
		try
		{
			Log.print("\n==============saveExtend start=========");
            
            conn = Database.getConnection();
                                
			obExtendInfo = findExtendByID(lID, lOfficeID);
			if (obExtendInfo == null)
			{
				Log.print("=============the result is not found============");
				throw new IException("Loan_E109");
			}
			if (obExtendInfo != null)
			{
				Log.print("==============findExtendByID result not null=========");
				//判断当前记录的状态是否是已经提交
				if (obExtendInfo.getStatusID() != OBConstant.LoanInstrStatus.SUBMIT)
				{
					Log.print("=============the status is not submit============");
					throw new IException("Loan_E108");
				}
				//查询当前合同下(在信贷)是否存在版本与本指令合同计划相等或者大于的正在使用的合同计划
				ExtendApplyDao extendApplyDao = new ExtendApplyDao();
				contractPlanInfo = obExtendInfo.getContractPlanInfo();
				if (contractPlanInfo != null)
				{
					if (extendApplyDao.isExistContractPlan(contractPlanInfo.getContractID(),obExtendInfo.getPlanVersionID()) > 0)
					{
						throw new IException("信贷系统内部已经存在相同版本或者更高版本的合同计划，请拒绝该网银指令！");
					}
				}
				else
				{
					throw new IException("未找到当前指令对应的合同计划！");
				}
                //=============查询看有没有相同的展期号==============//
                String strSQL1 = " select * from loan_extendform "
                         +" where NSERIALNO = ? "
                         +"   and ncontractid = ? "
                         //+"   and nPlanVersionID = ? "
                         +"   and nStatusID != ? ";
                Log.print("====查询展期号是否已经存在===");
                Log.print(strSQL1);
                ps = conn.prepareStatement(strSQL1);
                Log.print("====1==="+obExtendInfo.getSerialNO());
                ps.setLong(1, obExtendInfo.getSerialNO());
                ps.setLong(2, obExtendInfo.getContractID());
                //ps.setLong(3, obExtendInfo.getLastPlanVersionID());
                ps.setLong(3, Constant.RecordStatus.INVALID);
                Log.print("====2===");
                rs = ps.executeQuery();
                Log.print("====3===");
                if (rs != null && rs.next())
                {
                    Log.print("====iexception===");
                    throw new IException("Loan_E110");
                }
                rs.close();
                rs = null;
                ps.close();
                ps = null;
                //===================================================//
				//将网银指令改为处理中
				obBackInfo.setID(obExtendInfo.getID());
				obBackInfo.setStatusID(OBConstant.LoanInstrStatus.ACCEPT);
				obBackInfo.setUserID(lUserID);
				if (obExtendDao.updateOB(obBackInfo) > 0)
				{
					Log.print("==============obExtendDao.updateOB DEAL success=========");
					obApplyDao = new OBApplyDao(conn);
					lInIDExtendForm = obApplyDao.getMaxID("loan_extendform");
					Log.print("=========信贷申请id:" + lInIDExtendForm);
					lInIDPlan = obApplyDao.getMaxID("loan_loancontractplan");
					Log.print("=========信贷计划id:" + lInIDPlan);
					//将表ob_extend里的一条指令的数据存入表loan_extendform
					vctAccept = new Vector();
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("ID");
					acceptInfo.setColumnValue(new Long(lInIDExtendForm));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NCONTRACTID");
					acceptInfo.setColumnValue(new Long(obExtendInfo.getContractID()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NPLANVERSIONID");
					acceptInfo.setColumnValue(new Long(lInIDPlan));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NLASTPLANVERSIONID");
					acceptInfo.setColumnValue(new Long(obExtendInfo.getLastPlanVersionID()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NSERIALNO");
					acceptInfo.setColumnValue(new Long(obExtendInfo.getSerialNO()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.STRING);
					acceptInfo.setColumnName("SEXTENDREASON");
					acceptInfo.setColumnValue(new String(DataFormat.formatString(obExtendInfo.getExtendReason())));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.STRING);
					acceptInfo.setColumnName("SRETURNPOSTPEND");
					acceptInfo.setColumnValue(new String(DataFormat.formatString(obExtendInfo.getReturnPostEnd())));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.STRING);
					acceptInfo.setColumnName("SOTHERCONTENT");
					acceptInfo.setColumnValue(new String(DataFormat.formatString(obExtendInfo.getOtherContent())));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NSTATUSID");
					acceptInfo.setColumnValue(new Long(LOANConstant.LoanStatus.SUBMIT));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NINPUTUSERID");
					acceptInfo.setColumnValue(new Long(lUserID));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NINTERESTTYPEID");
					acceptInfo.setColumnValue(new Long(obExtendInfo.getInterestTypeID()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.DOUBLE);
					acceptInfo.setColumnName("MINTERESTADJUST");
					acceptInfo.setColumnValue(new Double(obExtendInfo.getInterestAdjust()));
					vctAccept.add(acceptInfo);
					//NNEXTCHECKUSERID....
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.TIMESTAMP);
					acceptInfo.setColumnName("DTINPUTDATE");
					acceptInfo.setColumnValue(DataFormat.getDateTime(DataFormat.getDateString()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NEXTENDTYPEID");
					acceptInfo.setColumnValue(new Long(obExtendInfo.getExtendTypeID()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NBANKINTERESTID");
					acceptInfo.setColumnValue(new Long(obExtendInfo.getBankInterestID()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.DOUBLE);
					acceptInfo.setColumnName("MINTERESTRATE");
					acceptInfo.setColumnValue(new Double(obExtendInfo.getInterestRate()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NNEXTCHECKLEVEL");
					acceptInfo.setColumnValue(new Long(1));
					vctAccept.add(acceptInfo);
					
					if (obApplyDao.save(vctAccept, "LOAN_EXTENDFORM") > 0)
					{
						Log.print("===========insert into LOAN_EXTENDFORM success!");
					}
					//表ob_contractplan里的一条指令的数据存入表loan_loancontractplan
					contractPlanInfo = obExtendInfo.getContractPlanInfo();
					if (contractPlanInfo != null)
					{
						Log.print("===========网银合同计划id:" + contractPlanInfo.getID());
						//lInIDPlan = obApplyDao.getMaxID("loan_loancontractplan");//移至上面
						vctAccept = new Vector();
						acceptInfo = new AcceptInfo();
						acceptInfo.setType(OBConstant.DataType.LONG);
						acceptInfo.setColumnName("ID");
						acceptInfo.setColumnValue(new Long(lInIDPlan));
						vctAccept.add(acceptInfo);
						acceptInfo = new AcceptInfo();
						acceptInfo.setType(OBConstant.DataType.LONG);
						acceptInfo.setColumnName("NLOANID");
						acceptInfo.setColumnValue(new Long(lInIDExtendForm));
						vctAccept.add(acceptInfo);
						acceptInfo = new AcceptInfo();
						acceptInfo.setType(OBConstant.DataType.LONG);
						acceptInfo.setColumnName("NCONTRACTID");
						acceptInfo.setColumnValue(new Long(contractPlanInfo.getContractID()));
						vctAccept.add(acceptInfo);
						acceptInfo = new AcceptInfo();
						acceptInfo.setType(OBConstant.DataType.LONG);
						acceptInfo.setColumnName("NPLANVERSION");
						acceptInfo.setColumnValue(new Long(contractPlanInfo.getPlanVersion()));
						vctAccept.add(acceptInfo);
						acceptInfo = new AcceptInfo();
						acceptInfo.setType(OBConstant.DataType.LONG);
						acceptInfo.setColumnName("NSTATUSID");
						acceptInfo.setColumnValue(new Long(contractPlanInfo.getStatusID()));
						vctAccept.add(acceptInfo);
						Log.print("loan_loancontractplan状态位：" + contractPlanInfo.getStatusID());
						//SREASON......
						acceptInfo = new AcceptInfo();
						acceptInfo.setType(OBConstant.DataType.LONG);
						acceptInfo.setColumnName("NISUSED");
						acceptInfo.setColumnValue(new Long(contractPlanInfo.getIsUsed()));
						vctAccept.add(acceptInfo);
						acceptInfo = new AcceptInfo();
						acceptInfo.setType(OBConstant.DataType.LONG);
						acceptInfo.setColumnName("NUSERTYPE");
						acceptInfo.setColumnValue(new Long(contractPlanInfo.getUserType()));
						vctAccept.add(acceptInfo);
						acceptInfo = new AcceptInfo();
						acceptInfo.setType(OBConstant.DataType.TIMESTAMP);
						acceptInfo.setColumnName("DTINPUTDATE");
						acceptInfo.setColumnValue(DataFormat.getDateTime(DataFormat.getDateString()));
						vctAccept.add(acceptInfo);
						if (obApplyDao.save(vctAccept, "loan_loancontractplan") > 0)
						{
							Log.print("===========insert into loan_loancontractplan success!");
						}
					}
					//表ob_contractplandetail里的一条指令的数据存入表loan_loancontractplandetail
					vctContractPlanDetail = obExtendInfo.getContractPlanDetail();
					if (vctContractPlanDetail != null && vctContractPlanDetail.size() > 0)
					{
						for (i = 0; i < vctContractPlanDetail.size(); i++)
						{
							contractPlanDetailInfo = (ContractPlanDetailInfo) vctContractPlanDetail.elementAt(i);
							if (contractPlanDetailInfo != null)
							{
								Log.print("===========网银合同计划明细id:" + contractPlanDetailInfo.getID());
								lInIDPlanDetail = obApplyDao.getMaxID("loan_loancontractplandetail");
								vctAccept = new Vector();
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.LONG);
								acceptInfo.setColumnName("ID");
								acceptInfo.setColumnValue(new Long(lInIDPlanDetail));
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.LONG);
								acceptInfo.setColumnName("NCONTRACTPLANID");
								acceptInfo.setColumnValue(new Long(lInIDPlan));
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.TIMESTAMP);
								acceptInfo.setColumnName("DTPLANDATE");
								acceptInfo.setColumnValue(contractPlanDetailInfo.getPlanDate());
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.LONG);
								acceptInfo.setColumnName("NPAYTYPEID");
								acceptInfo.setColumnValue(new Long(contractPlanDetailInfo.getPayTypeID()));
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.DOUBLE);
								acceptInfo.setColumnName("MAMOUNT");
								acceptInfo.setColumnValue(new Double(contractPlanDetailInfo.getAmount()));
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.STRING);
								acceptInfo.setColumnName("STYPE");
								acceptInfo.setColumnValue(new String(DataFormat.formatString(contractPlanDetailInfo.getType())));
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.TIMESTAMP);
								acceptInfo.setColumnName("DTMODIFYDATE");
								acceptInfo.setColumnValue(contractPlanDetailInfo.getModifyDate());
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.LONG);
								acceptInfo.setColumnName("NLASTEXTENDID");
								acceptInfo.setColumnValue(new Long(contractPlanDetailInfo.getLastExtendID()));
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.LONG);
								acceptInfo.setColumnName("NLASTOVERDUEID");
								acceptInfo.setColumnValue(new Long(contractPlanDetailInfo.getLastOverDueID()));
								vctAccept.add(acceptInfo);
								acceptInfo = new AcceptInfo();
								acceptInfo.setType(OBConstant.DataType.LONG);
								acceptInfo.setColumnName("NLASTVERSIONPLANID");
								acceptInfo.setColumnValue(new Long(contractPlanDetailInfo.getLastVersionPlanID()));
								vctAccept.add(acceptInfo);
								if (obApplyDao.save(vctAccept, "loan_loancontractplandetail") > 0)
								{
									Log.print("===========insert into loan_loancontractplandetail success!");
								}
								//end if 
							} //end if 
						} //end for
						long lResult = -1;
						//表ob_extenddetail里的一条指令的数据存入表loan_extenddetail
						vctExtendDetail = obExtendInfo.getExtendDetail();
						if (vctExtendDetail != null && vctExtendDetail.size() > 0)
						{
							Log.print("===========id:" + contractPlanInfo.getID());
							for (i = 0; i < vctExtendDetail.size(); i++)
							{
								extendDetailInfo = (ExtendDetailInfo) vctExtendDetail.elementAt(i);
								if (extendDetailInfo != null)
								{
									lInIDExtendDetail = obApplyDao.getMaxID("LOAN_EXTENDDETAIL");
									Log.print("===========网银展期明细id:" + extendDetailInfo.getID());
									vctAccept = new Vector();
									acceptInfo = new AcceptInfo();
									acceptInfo.setType(OBConstant.DataType.LONG);
									acceptInfo.setColumnName("ID");
									acceptInfo.setColumnValue(new Long(lInIDExtendDetail));
									vctAccept.add(acceptInfo);
									acceptInfo = new AcceptInfo();
									acceptInfo.setType(OBConstant.DataType.LONG);
									acceptInfo.setColumnName("NEXTENDFORMID");
									acceptInfo.setColumnValue(new Long(lInIDExtendForm));
									vctAccept.add(acceptInfo);
									acceptInfo = new AcceptInfo();
									acceptInfo.setType(OBConstant.DataType.LONG);
									acceptInfo.setColumnName("NPLANID");
									acceptInfo.setColumnValue(new Long(lInIDPlan));
									vctAccept.add(acceptInfo);
									acceptInfo = new AcceptInfo();
									acceptInfo.setType(OBConstant.DataType.DOUBLE);
									acceptInfo.setColumnName("MPLANBALANCE");
									acceptInfo.setColumnValue(new Double(extendDetailInfo.getPlanBalance()));
									vctAccept.add(acceptInfo);
									acceptInfo = new AcceptInfo();
									acceptInfo.setType(OBConstant.DataType.DOUBLE);
									acceptInfo.setColumnName("MEXTENDAMOUNT");
									acceptInfo.setColumnValue(new Double(extendDetailInfo.getExtendAmount()));
									vctAccept.add(acceptInfo);
									acceptInfo = new AcceptInfo();
									acceptInfo.setType(OBConstant.DataType.TIMESTAMP);
									acceptInfo.setColumnName("DTEXTENDBEGINDATE");
									acceptInfo.setColumnValue(extendDetailInfo.getExtendBeginDate());
									vctAccept.add(acceptInfo);
									acceptInfo = new AcceptInfo();
									acceptInfo.setType(OBConstant.DataType.TIMESTAMP);
									acceptInfo.setColumnName("DTEXTENDENDDATE");
									acceptInfo.setColumnValue(extendDetailInfo.getExtendEndDate());
									vctAccept.add(acceptInfo);
									acceptInfo = new AcceptInfo();
									acceptInfo.setType(OBConstant.DataType.LONG);
									acceptInfo.setColumnName("NEXTENDINTERVALNUM");
									acceptInfo.setColumnValue(new Long(extendDetailInfo.getExtendIntervalNum()));
									vctAccept.add(acceptInfo);
									if (obApplyDao.save(vctAccept, "LOAN_EXTENDDETAIL") > 0)
									{
										Log.print("===========insert into LOAN_EXTENDDETAIL success!");
									}
									Log.print("====更新计划明细===");
									StringBuffer sbSQL = new StringBuffer();
									sbSQL.append(
										"update loan_loancontractplanDetail set DTPLANDATE = ?,"
											+ " DTMODIFYDATE = sysdate, "
											+ " NLASTEXTENDID = ?,mAmount = ? where "
											+ " NCONTRACTPLANID = (select NLASTPLANVERSIONID "
											+ " from loan_ExtendForm where id = ? and NPAYTYPEID = ? ) "
											+ " ");
									Log.print("====SQL:" + sbSQL.toString());
									/*ps = conn.prepareStatement(sbSQL.toString());
									ps.setTimestamp(1, extendDetailInfo.getExtendEndDate());
									Log.print("====1:" + extendDetailInfo.getExtendEndDate());
									ps.setLong(2, lInIDExtendForm);
									Log.print("====2:" + lInIDExtendForm);
									ps.setDouble(3, extendDetailInfo.getExtendAmount());
									Log.print("====3:" + extendDetailInfo.getExtendAmount());
									ps.setLong(4, lInIDExtendForm);
									Log.print("====4:" + lInIDExtendForm);
									ps.setLong(5, LOANConstant.PlanType.REPAY);
									Log.print("====5:" + lInIDExtendForm);
									System.out.println("9999999999999999999999999999");
									
									if ((lResult = ps.executeUpdate()) < 1)
									{
										Log.print("计划明细更新失败");
									}
									else
									{
										Log.print("计划明细更新成功");
									}
									
									ps.close();
									ps = null;
									*/
								}
							}
						}
						//新增**********
						double dOldPlanAmount = 0.0;
						String strSQL = "";
						for (i = 0; i < vctContractPlanDetail.size(); i++)
						{
							contractPlanDetailInfo = (ContractPlanDetailInfo) vctContractPlanDetail.elementAt(i);
							if (contractPlanDetailInfo != null)
							{
								strSQL = "select mAmount from loan_loancontractplanDetail where nLastVersionPlanID = ? and nContractPlanID = ?";
								Log.print("====查询展期金额===");
								Log.print("====SQL:" + strSQL);
								ps = conn.prepareStatement(strSQL);
								ps.setLong(1, contractPlanDetailInfo.getLastVersionPlanID());
								ps.setLong(2, lInIDPlan);
								rs = ps.executeQuery();
								if (rs != null && rs.next())
								{
									dOldPlanAmount = rs.getDouble("mAmount");
									Log.print("====展期金额：" + dOldPlanAmount);
								}
								rs.close();
								rs = null;
								ps.close();
								ps = null;
								if (dOldPlanAmount > contractPlanDetailInfo.getAmount())
								{
									Log.print("====如果展期金额不足计划余额：");
									//如果展期金额不足计划余额，新增一条纪录
									strSQL =
										"insert into loan_loancontractplanDetail (ID, NCONTRACTPLANID, DTPLANDATE, NPAYTYPEID, STYPE, DTMODIFYDATE,MAMOUNT ) "
											+ " values (nvl((select max(id) from loan_loancontractplanDetail),0)+1,?,?,?,?,sysdate,?)";
									Log.print("====SQL:" + strSQL);
									ps = conn.prepareStatement(strSQL);
									ps.setLong(1, lInIDPlan);
									ps.setTimestamp(2, contractPlanDetailInfo.getPlanDate());
									ps.setLong(3, LOANConstant.PlanType.REPAY);
									ps.setString(4, "本金");
									ps.setDouble(5, dOldPlanAmount - contractPlanDetailInfo.getAmount());
									ps.executeUpdate();
									ps.close();
									ps = null;
								}
								/*// 展期明细表
								strSQL =
									"insert into loan_ExtendDetail (ID, NEXTENDFORMID, NPLANID, MPLANBALANCE, MEXTENDAMOUNT, DTEXTENDBEGINDATE, DTEXTENDENDDATE,NEXTENDINTERVALNUM) values (nvl((select max(id) from loan_ExtendDetail),0)+1,?,?,?,?,?,?,?)";
								
								ps = conn.prepareStatement(strSQL);
								ps.setLong(1, lInIDExtendForm);
								ps.setLong(2, lInIDPlan);
								ps.setDouble(3, rp_info.dPlanBalance);
								ps.setDouble(4, rp_info.dAmount);
								ps.setTimestamp(5, rp_info.tsExtendStartDate);
								ps.setTimestamp(6, rp_info.tsExtendEndDate);
								ps.setLong(7, rp_info.lExtendPeriod);
								if ((lResult = ps.executeUpdate()) < 1)
								{
									System.out.println("error.insert.loan_ExtendDetail");
								}
								System.out.println("ejb-----------------ext2");
								ps.close();
								ps = null;
								*/
							}
						}
						//新增**********
					} //end if 
					//调用OBExtendDao的updateOB方法将网银的指令填入内部系统的ID
					obBackInfo = new OBBackInfo();
					obBackInfo.setID(lID);
					obBackInfo.setStatusID(OBConstant.LoanInstrStatus.ACCEPT);
					obBackInfo.setInID(lInIDExtendForm);
					obExtendDao.updateOB(obBackInfo);
					{
						Log.print("===========obExtendDao.updateOB inID success!");
					}
					lRtnResult = lInIDExtendForm;
					Log.print("\n\n=========最后返回的id:" + lRtnResult);
				} //end if网银指令状态修改成功
			} //end if obExtendInfo not null
			if (conn != null)
			{
				conn.close();
				conn = null;
			}
			//同时需要修改网银记录状态
			Log.print("\n==============saveExtend end=========");
		}
		catch(IException ie)
		{
			ie.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw ie;
			throw new IRollbackException(context, ie.getMessage(), ie);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException();
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			try
			{
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lRtnResult;
	}
	/**
	 * Method refuseExtend.
	 * 拒绝网银指令
	   调用 OBExtendDao的方法updateOB将网银的指令状态修改为已拒绝
	 * @param info
	 * @return long
	 * @throws IException
	 * @throws Exception
	 */
	public long refuseExtend(OBBackInfo info) throws IException, RemoteException
	{
		long lRtnResult = -1;
		Log.print("\n=============refuseExtend start===========");
		try
		{
			OBExtendDao obExtendDao = new OBExtendDao();
			if (obExtendDao.updateOB(info) > 0)
			{
				Log.print("=============refuseExtend obExtendDao.updateOB success===========");
			}
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException();
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		
		Log.print("\n=============refuseExtend end=============");
		return lRtnResult;
	}
	/**
	 * Method findAheadByID.
	 *  调用OBAheadDao的findByID方法得到提前还款申请指令的信息，
		再调用ContractDao的findByID方法取得相应合同的信息，
		调用LoanPayNoticeDao的findLoanPayNoticeByID方法取得放款通知单的信息，
		根据上面取得的信息比较其中的办事处ID和传入的办事处ID是否相等，如不等抛出IException,
		如相等将以上信息组合成返回信息，得到指令的所有信息
		返回：OBAheadInfo
	 * @param lID
	 * @param lOficeID
	 * @return OBAheadInfo
	 * @throws Exception
	 * @throws IException
	 */
	public OBAheadInfo findAheadByID(long lID, long lOfficeID) throws IException, RemoteException
	{
		OBAheadInfo resultInfo = null;
		ContractInfo contractInfo = null;
		LoanPayNoticeInfo loanPayNoticeInfo = null;
		OBAheadDao obAheadDao = new OBAheadDao();
		ContractDao contractDao = new ContractDao();
		LoanPayNoticeDao loanPayNoticeDao = new LoanPayNoticeDao();
		try
		{
			Log.print("\n=============findAheadByID start=============");
			resultInfo = obAheadDao.findByID(lID);
			if (resultInfo != null)
			{
				Log.print("\n=============search result not null=============");
				long lContractID = -1;
				lContractID = resultInfo.getContratcID();
				long lOfficeIDContract = -1; //合同办事处
				contractInfo = contractDao.findByID(lContractID);
				Log.print("=======合同id:" + contractInfo.getContractID());
				if (contractInfo != null)
				{
					resultInfo.setLoanTypeID(contractInfo.getLoanTypeID());
					lOfficeIDContract = contractInfo.getOfficeID();
					resultInfo.setBorrowClientName(contractInfo.getBorrowClientName());
					resultInfo.setContractCode(contractInfo.getContractCode());
					resultInfo.setIntervalNum(contractInfo.getIntervalNum());
					resultInfo.setAllAmount(contractInfo.getLoanAmount());
					Log.print("\n\n合同总金额：" + contractInfo.getLoanAmount());
					resultInfo.setBalance(contractInfo.getBalance());
					resultInfo.setLoanNoteRate(contractInfo.getInterestRate()); //执行利率
					resultInfo.setInterestRate(contractInfo.getInterestRate()); //提前还款利率
					
				}
				long lOfficeIDPayNotice = -1; //放款通知单办事处
				lOfficeIDPayNotice = resultInfo.getLoanPayNoticeID();
				loanPayNoticeInfo = loanPayNoticeDao.findLoanPayNoticeByID(lOfficeIDPayNotice);
				if (loanPayNoticeInfo != null)
				{
					lOfficeIDPayNotice = loanPayNoticeInfo.getOfficeID();
					resultInfo.setLoanCode(loanPayNoticeInfo.getCode());
					resultInfo.setLoanAmount(loanPayNoticeInfo.getAmount());
					resultInfo.setMbalance(loanPayNoticeInfo.getMbalance());
					Log.print("\n\n放款通知单余额：" + loanPayNoticeInfo.getMbalance());
					resultInfo.setInterestRate(loanPayNoticeInfo.getInterestRate());
				}
				if (lOfficeID != lOfficeIDContract || lOfficeID != lOfficeIDPayNotice || lOfficeIDContract != lOfficeIDPayNotice)
				{
					Log.print("==============lOfficeID：" + lOfficeID);
					Log.print("==============lOfficeIDContract：" + lOfficeIDContract);
					Log.print("==============lOfficeIDPayNotice：" + lOfficeIDPayNotice);
					Log.print("===============officeid not equal======");
					throw new IException("Loan_E107");
				}
			}
			Log.print("\n=============findAheadByID end=============");
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new IException("Gen_E001");
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			throw new RemoteException();
		}

		return resultInfo;
	}
	/**
	 * Method saveAhead.
	 * 接收一条提前还款指令,返回在内部系统的ID
	  1.调用findAheadByID方法得到提前还款指令的信息,如未取得信息抛出IException.
	  2.调用OBAheadDao的updateOB方法将网银的指令状态改为处理中
	  3.调用OBApplyDao的getMaxID和createApplyCode得到要存入内部系统的ID和申请编号
	  4.调用OBApplyDao的save方法，将指令的数据存入表loan_aheadrepayform
	  5.调用OBAheadDao的updateOB方法将网银的指令填入内部系统的ID和申请号及处理人
	 * @param lID
	 * @param lUserID
	 * @param lOfficeID
	 * @param lCurrencyID
	 * @return long
	 * @throws Exception
	 * @throws IException
	 */
	public long saveAhead(long lID, long lUserID, long lOfficeID, long lCurrencyID) throws IException, RemoteException
	{
		long lRtnResult = -1;
		long lInID = -1;
		String strInCode = "";
		Connection conn = null;
		AcceptInfo acceptInfo = null;
		Vector vctAccept = null;
		OBAheadDao obAheadDao = new OBAheadDao();
		OBApplyDao obApplyDao = null;
		OBAheadInfo obAheadInfo = null;
		OBBackInfo obBackInfo = new OBBackInfo();
		try
		{
			Log.print("\n=============saveAhead start=============");
			obAheadInfo = findAheadByID(lID, lOfficeID);
			if (obAheadInfo == null)
			{
				Log.print("=============the result is not found============");
				throw new IException("Loan_E109");
			}
			if (obAheadInfo != null)
			{
				//判断当前记录的状态是否是已经提交
				if (obAheadInfo.getStatusID() != OBConstant.LoanInstrStatus.SUBMIT)
				{
					Log.print("=============the status is not submit============");
					Log.print(obAheadInfo.getStatusID());
					Log.print(OBConstant.LoanInstrStatus.SUBMIT);
					throw new IException("Loan_E108");
				}
				//将网银指令改为处理中
				obBackInfo.setID(obAheadInfo.getID());
				obBackInfo.setStatusID(OBConstant.LoanInstrStatus.ACCEPT);
				obBackInfo.setUserID(lUserID);
				if (obAheadDao.updateOB(obBackInfo) > 0)
				{
					Log.print("==============obExtendDao.updateOB DEAL success=========");
					conn = Database.getConnection();
					obApplyDao = new OBApplyDao(conn);
					lInID = obApplyDao.getMaxID("loan_aheadrepayform");
					Log.print("===============内部id:" + lInID);
					strInCode = obApplyDao.createAheadRepayCode(obAheadInfo.getContratcID());
					Log.print("===============内部编号:" + strInCode);
					//将表ob_aheadrepayform里的一条指令的数据存入表loan_aheadrepayform
					vctAccept = new Vector();
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("ID");
					acceptInfo.setColumnValue(new Long(lInID));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NOFFICEID");
					acceptInfo.setColumnValue(new Long(lOfficeID));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NCURRENCYID");
					acceptInfo.setColumnValue(new Long(lCurrencyID));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NCONTRACTID");
					acceptInfo.setColumnValue(new Long(obAheadInfo.getContratcID()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NLOANPAYNOTICEID");
					acceptInfo.setColumnValue(new Long(obAheadInfo.getLoanPayNoticeID()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.DOUBLE);
					acceptInfo.setColumnName("MAMOUNT");
					acceptInfo.setColumnValue(new Double(obAheadInfo.getAmount()));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.STRING);
					acceptInfo.setColumnName("SCODE");
					acceptInfo.setColumnValue(new String(DataFormat.formatString(strInCode)));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NINPUTUSERID");
					acceptInfo.setColumnValue(new Long(lUserID));
					vctAccept.add(acceptInfo);
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.TIMESTAMP);
					acceptInfo.setColumnName("DTINPUTDATE");
					acceptInfo.setColumnValue(DataFormat.getDateTime(DataFormat.getDateString()));
					vctAccept.add(acceptInfo);
					//NNEXTCHECKUSERID
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NSTATUSID");
					acceptInfo.setColumnValue(new Long(LOANConstant.LoanStatus.SUBMIT));
					vctAccept.add(acceptInfo);
					
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("NNEXTCHECKLEVEL");
					acceptInfo.setColumnValue(new Long(1));
					vctAccept.add(acceptInfo);
					
					acceptInfo = new AcceptInfo();
					acceptInfo.setType(OBConstant.DataType.LONG);
					acceptInfo.setColumnName("nisahead");
					acceptInfo.setColumnValue(new Long(obAheadInfo.getIsAhead()));
					System.out.println(acceptInfo.getColumnValue()+"^^^^^^知法犯法世^^^^^^^");
					vctAccept.add(acceptInfo);
					
					//NMODIFYUSERID
					//DTMODIFYDATE
					if (obApplyDao.save(vctAccept, "loan_aheadrepayform") > 0)
					{
						Log.print("===========insert into loan_aheadrepayform success!");
					}
					obBackInfo = new OBBackInfo();
					obBackInfo.setID(lID);
					obBackInfo.setStatusID(OBConstant.LoanInstrStatus.ACCEPT);
					obBackInfo.setInID(lInID);
					obAheadDao.updateOB(obBackInfo);
					{
						Log.print("===========obAheadDao.updateOB inID success!");
					}
					lRtnResult = lInID;
				}
			}
			if (conn != null)
			{
				try
				{
					conn.close();
				} catch (RuntimeException e1)
				{
					// TODO Auto-generated catch block
					//modified by mzh_fu 2007/08/07
					//e1.printStackTrace();
					throw new IRollbackException(context, e1.getMessage(), e1);
				}
				conn = null;
			}
			Log.print("\n=============saveAhead end=============");
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException();
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			try
			{
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lRtnResult;
	}
	/**
	 * Method refuseAhead.
	 * 拒绝网银指令
	   调用 OBAheadDao的方法updateOB将网银的指令状态修改为已拒绝
	 * @param info
	 * @return long
	 * @throws Exception
	 * @throws IException
	 */
	public long refuseAhead(OBBackInfo info) throws IException, RemoteException
	{
		long lRtnResult = -1;
		Log.print("\n=============refuseAhead start===========");
		try
		{
			OBAheadDao obAheadDao = new OBAheadDao();
			if (obAheadDao.updateOB(info) > 0)
			{
				Log.print("=============refuseAhead obAheadDao.updateOB success===========");
			}
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch(Exception ex)
		{
			ex.printStackTrace() ;
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException();
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		Log.print("\n=============refuseAhead end=============");
		return lRtnResult;
	}
	/**
	 * @author  ninh 2004-02-23
	 * 查询贴现凭证，操作网银OB_DiscountCredence 表
	 * @param ID 网银贴现凭证标示
	 * return OBDiscountCredenceInfo
	 */
	public OBDiscountCredenceInfo findDiscountCredenceByID(long lID, long lOfficeID) throws IException, RemoteException
	{
		Connection con = null;
		OBDiscountCredenceInfo Info = new OBDiscountCredenceInfo();
		try
		{
			con = Database.getConnection();
			OBDiscountCredenceDao dao = new OBDiscountCredenceDao(con);
			Info = dao.findByID(lID, lOfficeID);
			if (Info == null)
			{
				log4j.info(" OBLoanDao.findByID() 错误  ");
				throw new IException("Loan_E109");
			}
			cleanup(con);
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			throw new IException("Gen_E001");
		}
		catch (IException ie)
		{
			throw ie;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new IException("Gen_E001");
		}
		finally
		{
			try
			{
				cleanup(con);
			}
			catch (Exception ex)
			{
				throw new IException("Gen_E001");
			}
		}
		return Info;
	}
	/**
	 * @author  ninh 2004-02-23
	 * 保存贴现凭证
	 * @param lID 网银贴现凭证标识 ，
	 * @param lUserID   录入人
	 * @param lOfficeID 办事处标识
	 * return long 成功返回 1 ，否则 < 0
	 */
	public long saveDiscountCredence(long lID, long lUserID, long lOfficeID) throws IException, RemoteException
	{
		long lReturn = -1;
		long lMaxID = -1;
		boolean bSucceed = false;
		Connection con = null; //
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		OBApplyOperation op = null;
		OBBackInfo backInfo = null;
		Vector vValue = null;
		Timestamp tsSystemDate = null;
		String strTable = "loan_DiscountCredence";
		try
		{
			//tsSystemDate = Env.getSystemDateTime();
			con = Database.getConnection();
			tsSystemDate = DataFormat.getDateTime(con);
			con.setAutoCommit(false);
			op = new OBApplyOperation();
			OBDiscountCredenceDao dcdao = new OBDiscountCredenceDao(con);
			OBApplyDao obaDao = new OBApplyDao(con);
			backInfo = new OBBackInfo();
			OBDiscountCredenceInfo dcInfo = findDiscountCredenceByID(lID, lOfficeID);
			if (dcInfo.getStatusID() == OBConstant.LoanInstrStatus.SUBMIT)
			{
				if (dcInfo != null)
				{
					//2.调用OBDiscountCredenceDao.updateOB 方法将网银指令状态更改为处理中
					backInfo.setID(lID);
					backInfo.setUserID(lUserID);
					//backInfo.setOfficeID(lOfficeID);
					backInfo.setStatusID(OBConstant.LoanInstrStatus.ACCEPT);
					lReturn = dcdao.updateOB(backInfo);
					if (lReturn > 0)
					{
						//第一次暂存
						//得到最大的ID
						strSQL = " select Seq_Loan_PayFrm_DiscountCred.Nextval from dual ";
						ps = con.prepareStatement(strSQL);
						rs = ps.executeQuery();
						if (rs.next())
						{
							lMaxID = rs.getLong(1);
						}
						rs.close();
						rs = null;
						ps.close();
						ps = null;
						String strCredenceCode = "";
						strCredenceCode = createCredenceCode(dcInfo.getContractID());
						dcInfo.setInID(lMaxID);
						dcInfo.setInCode(strCredenceCode);
						//数据库贴现凭证申请状态为“撰写”
						dcInfo.setStatusID(LOANConstant.DiscountCredenceStatus.SUBMIT);
						dcInfo.setInputDate(tsSystemDate);
						dcInfo.setInputUserID(lUserID);
						dcInfo.setNextCheckUserID(lUserID);
						Log.print("取贴现凭证数据");
						vValue = (Vector) OBApplyOperation.getDiscountCredenceData(dcInfo);
						Log.print("保存贴现凭证数据开始...");
						lReturn = obaDao.save(vValue, strTable);
						Log.print("保存贴现凭证数据结束...");
						vValue.clear();
						if (lReturn > 0)
						{
							bSucceed = true;
						}
						else
						{
							bSucceed = false;
						}
					}
					else
					{
						log4j.info(" =====update credence status failed!=====");
						throw new IException("Gen_E001");
					}
					if (lReturn > 0)
					{
						//更改贴现凭证网银中相关数据
						Log.print("更改贴现凭证网银中相关数据开始...");
						backInfo.setInID(lMaxID);
						backInfo.setApplyCode(dcInfo.getInCode());
						lReturn = dcdao.updateOB(backInfo);
						Log.print("更改贴现凭证网银中相关数据结束...");
						if (lReturn <= 0)
						{
							bSucceed = false;
							Log.print("更改贴现凭证网银中相关数据失败...");
						}
						else
						{
							bSucceed = true;
							Log.print("更改贴现凭证网银中相关数据成功...");
						}
						Log.print("转换loan_discountcontractbill开始");
						lReturn = dcdao.ChangeCredenceBillOBToLoan(lMaxID, lID);
						Log.print("转换loan_discountcontractbill结束");
					}
					else
					{
						bSucceed = false;
					}
				}
				else
				{
					log4j.info("=====DiscountCredenceinfo == null=====");
					throw new IException("Gen_E001");
				}
			}
			else
			{
				throw new IException("Loan_E108");
			}
			if (bSucceed)
			{
				con.commit();
				lReturn = lMaxID;
			}
			else
			{
				con.rollback();
				lReturn = -1;
			}
			cleanup(con);
		}
		catch (IException ie)
		{
			try
			{
				con.rollback();
			} catch (SQLException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			log4j.error(ie.toString());
			throw ie;
		}
		catch (RemoteException e)
		{
			try
			{
				con.rollback();
			} catch (SQLException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		catch (Exception e)
		{
			try
			{
				con.rollback();
			} catch (SQLException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		finally
		{
			try
			{
				cleanup(con);
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lReturn;
	}
	/**
	 * @author  ninh 2004-02-23
	 * 拒绝贴现凭证
	 * @param OBBackInfo
	 * return long 成功返回 1 ，否则 < 0
	 */
	public long refuseDiscountCredence(OBBackInfo bInfo) throws IException, RemoteException
	{
		long lReturn = -1;
		Connection con = null;
		OBDiscountCredenceInfo dc = null;
		OBDiscountCredenceDao dao = null;
		try
		{
			con = Database.getConnection();
			//con = Database.getConnection();
			con.setAutoCommit(false);
			//
			dao = new OBDiscountCredenceDao(con);
			dc = dao.findByID(bInfo.getID(), bInfo.getOfficeID());
			if (dc.getStatusID() != OBConstant.LoanInstrStatus.SUBMIT)
			{
				log4j.info(" status no right ");
				log4j.info(" 状态不对，可能已经接受或拒绝了 ");
				throw new IException("Loan_E108");
			}
			//修改网银中数据为已拒绝
			bInfo.setStatusID(OBConstant.LoanInstrStatus.REFUSE);
			lReturn = dao.updateOB(bInfo);
			if (lReturn > 0)
			{
				con.commit();
			}
			else
			{
				con.rollback();
				lReturn = -1;
			}
			cleanup(con);
		}
		catch (IException ie)
		{
			log4j.error(ie.getMessage());
			throw ie;
		}
		catch (Exception e)
		{
			Log.print("refuse() failed.  Exception is " + e.toString());
			try
			{
				con.rollback();
			} catch (SQLException e1)
			{
				e1.printStackTrace();
			}
			throw new IException("Gen_E001");
		}
		finally
		{
			try
			{
				cleanup(con);
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return lReturn;
	}
	/**
	 *
	 * 生成贴现凭证编号
	 *
	 */
	private String createCredenceCode(long lContractID) throws RemoteException, IException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";
		String strCode = "000";
		long lCode = 0;
		try
		{
			con = Database.getConnection();
			strSQL = " select nvl(max(sCode),0) sCode from Loan_DiscountCredence where nContractID = ? ";
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				strCode = rs.getString(1);
				lCode = Long.parseLong(strCode) + 1;
				strCode = DataFormat.formatInt(lCode, 3, true);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
		}
		catch (Exception e)
		{
			Log.print(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				log4j.error(e.toString());
				throw new IException("Gen_E001");
			}
		}
		Log.print(":::::::::: ::::strcode::::::" + strCode);
		return strCode;
	}
	public static void main(String args[])
	{
		try
		{
			OBInterfaceEJB obInterfaceEJB = new OBInterfaceEJB();
			/*OBAheadInfo obAheadInfo = null;
			obAheadInfo = obInterfaceEJB.findAheadByID(2,1);
			if(obAheadInfo != null)
			{
			   Log.print("=====not null=====");
			   Log.print("=====obAheadInfo:"+obAheadInfo.getLoanTypeID());
			   Log.print("=====obAheadInfo:"+obAheadInfo.getLoanPayNoticeID());
			}
			*/
			/*long lID = -1;
			lID = obInterfaceEJB.saveAhead(2, 2, 1, 1);
			if (lID > 0)
			{
				Log.print("=====ok!=====");
				Log.print("lID:" + lID);
			}
			*/
			OBBackInfo obBackInfo = new OBBackInfo();
			obBackInfo.setID(2);
			obBackInfo.setStatusID(-1);
			obInterfaceEJB.refuseAhead(obBackInfo);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
}
