package com.iss.itreasury.loan.obinterface.bizlogic;

import java.rmi.RemoteException;
import java.util.*;
import java.sql.*;
import com.iss.itreasury.ebank.util.*;
import com.iss.itreasury.util.*;
import com.iss.itreasury.loan.obinterface.dao.OBApplyDao;
import com.iss.itreasury.loan.obinterface.dao.OBLoanDao;
import com.iss.itreasury.loan.obinterface.dataentity.*;
import com.iss.itreasury.loan.contractcontent.dataentity.*;

/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */

public class OBApplyOperation 
{        
    public OBApplyOperation()
    {
    }
    private void cleanup(Connection con) throws SQLException
    {
        try
        {
            if (con != null)
            {
                con.close();
                con = null;
            }
        }
        catch (SQLException sqle)
        {
        }
    }
    /**
     * findOBApply 查找网银指令
     * 根据所给定的条件，查找网银指令信息
     * 操作 OB_LOANINSTRVIEW 视图表
     * 查询记录
     * haoning 2004-02-06
     * @param OBApplyQueryInfo
     * @throws RemoteException;Exception
     */
    public Collection findOBApply(OBApplyQueryInfo qInfo)
    throws IException,Exception
    {
        Connection con = null;  
        Collection c = null;
        try
        {
    
            con = Database.getConnection();
            OBApplyDao Dao = new OBApplyDao(con);
            c = Dao.findOBApply(qInfo);
            cleanup(con);

        }
        catch (SQLException e)
        {
            e.printStackTrace();
            throw new IException("Gen_E001");
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new IException("Gen_E001");
        }
        finally
        {
            try
            {
                cleanup(con);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.getMessage());
            }
        }
        
        return c;
    }
    /**
     *  查找网银贷款申请计划详细
     * 根据OB_Loan的ID，查找申请计划信息
     * haoning 2004-03-15
     * @param     long     lOBLoanID              ob_loan中的ID
     * @param     long     lPageLineCount         每页页行数条件
     * @param     long     lPageNo                第几页条件
     * @param     long     lOrderParam            排序条件，根据此参数决定结果集排序条件
     * @param     long     lDesc                  升序或降序
     * @param     long     lUserID                用户标示，选择使用，可以用于核对是否与loanInfo中的inputuser是同一人
     * @param     long     lOfficeID              办事处标示，选择使用，可以用于核对是否与loanInfo中的办事处相同
     * @return    Collection     
     * @throws RemoteException;Exception
     */
    public Collection findOBPlanVerByOBLoanID(
        long lOBLoanID, 
        long lPageLineCount, 
        long lPageNo, 
        long lOrderParam, 
        long lDesc)
    throws IException,Exception
    {
        Connection con = null;  
        Collection c = null;
        try
        {
    
            con = Database.getConnection();
            OBLoanDao Dao = new OBLoanDao(con);
            Log.print("www");
            c = Dao.findPlanDetailByOBLoanID(
                        lOBLoanID,
                        lPageLineCount, 
                        lPageNo, 
                        lOrderParam, 
                        lDesc);
            Log.print("kkk");
            cleanup(con);

        }
        catch (SQLException e)
        {
            e.printStackTrace();
            throw new IException("Gen_E001");
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new IException("Gen_E001");
        }
        finally
        {
            try
            {
                cleanup(con);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.getMessage());
            }
        }
        
        return c;
    }
    


    /**
     * haoning 2004-02-12
     * @param 
     * @throws RemoteException;Exception
     */
    public static Collection getLoanData(OBLoanInfo oli, long lInputUserID) throws Exception
    {
        Vector vValue = new Vector();
        long lLoanTypeID = 0;
        try
        {
           //贷款申请
            //ID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ID", new Long(oli.getInApplyID())));
            //NTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NTYPEID", new Long(oli.getTypeID())));
            //NCURRENCYID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NCURRENCYID", new Long(oli.getCurrencyID())));
            //NOFFICEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NOFFICEID", new Long(oli.getOfficeID())));
            //SAPPLYCODE
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SAPPLYCODE", oli.getApplyCode()));
            //NCONSIGNCLIENTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NCONSIGNCLIENTID", new Long(oli.getConsignClientID())));
            //NBORROWCLIENTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NBORROWCLIENTID", new Long(oli.getBorrowClientID())));
            //MLOANAMOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MLOANAMOUNT", new Double(oli.getLoanAmount())));
            //SLOANREASON
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SLOANREASON", oli.getLoanReason()));
            //SLOANPURPOSE
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SLOANPURPOSE", oli.getLoanPurpose()));
            //SOTHER
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SOTHER", oli.getOther()));
            //NISCIRCLE
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISCIRCLE", new Long(oli.getIsCircle())));
            //NISSALEBUY
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISSALEBUY", new Long(oli.getIsSaleBuy())));
            //NISTECHNICAL
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISTECHNICAL", new Long(oli.getIsTechnical())));
            //NINPUTUSERID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NINPUTUSERID", new Long(lInputUserID)));
            //DTINPUTDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTINPUTDATE", oli.getInputDate()));
            //NISCREDIT
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISCREDIT", new Long(oli.getIsCredit())));
            //NISRecognizance
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ISRECOGNIZANCE", new Long(oli.getIsRecognizance())));
            //NISASSURE
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISASSURE", new Long(oli.getIsAssure())));
            //NISIMPAWN
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISIMPAWN", new Long(oli.getIsImpawn())));
            //NISPLEDGE
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISPLEDGE", new Long(oli.getIsPledge())));
            //NINTERESTTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NINTERESTTYPEID", new Long(oli.getInterestTypeID())));
            //NINTERVALNUM
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NINTERVALNUM", new Long(oli.getIntervalNum())));
            //NBANKINTERESTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NBANKINTERESTID", new Long(oli.getBankInterestID())));            
            //MINTERESTRATE
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MINTERESTRATE", new Double(oli.getInterestRate())));
            //NSTATUSID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSTATUSID", new Long(oli.getStatusID())));
            //NNEXTCHECKUSERID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NNEXTCHECKUSERID", new Long(lInputUserID)));
            //DTSTARTDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTSTARTDATE", oli.getStartDate()));
            //DTENDDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTENDDATE", oli.getEndDate()));
            //ISCANMODIFY
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ISCANMODIFY", new Long(Constant.YesOrNo.YES)));
            //mChargeRate
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "mChargeRate", new Double(oli.getChargeRate())));
            //nChargeRateTypeID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "nChargeRateTypeID", new Long(oli.getChargeRateTypeID())));
            //NBANKACCEPTPO
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NBANKACCEPTPO", new Long(oli.getBankAcceptPO())));
            //NBIZACCEPTPO
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NBIZACCEPTPO", new Long(oli.getBizAcceptPO())));
            //MCHECKAMOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MCHECKAMOUNT", new Double(oli.getCheckAmount())));
            //DTDISCOUNTDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTDISCOUNTDATE", oli.getDiscountDate()));
            //MDISCOUNTRATE
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MDISCOUNTRATE", new Double(oli.getDiscountRate())));
            //MADJUSTRATE
            //vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MADJUSTRATE", new Double(oli.getAdjustRate())));
            //sDocumentType
            //vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "sDocumentType", oli.getDocumentType()));
            //SCLIENTINFO
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SCLIENTINFO", oli.getClientInfoDesc()));
            //NRISKLEVEL
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NRISKLEVEL", new Long(oli.getRiskLevel())));
            //NTYPEID1
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NTYPEID1", new Long(oli.getTypeID1())));
            //NTYPEID2
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NTYPEID2", new Long(oli.getTypeID1())));
            //NTYPEID3
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NTYPEID3", new Long(oli.getTypeID1())));
            
			vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NNEXTCHECKLEVEL", new Long(1)));
			vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSUBTYPEID", new Long(oli.getNSubTypeId())));
            
			//贷款类型-担保的信息
			vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ASSURETYPEID1", new Long(oli.getAssureTypeID1())));
			vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ASSURETYPEID2", new Long(oli.getAssureTypeID2())));
			vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ASSURECHARGETYPEID", new Long(oli.getAssureChargeTypeID())));
			vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "ASSURECHARGERATE", new Double(oli.getAssureChargeRate())));
			vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "BENEFICIARY", oli.getBeneficiary()));
//			DiscountClientID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "DISCOUNTCLIENTID", new Long(oli.getDiscountClientID())));
            //DiscountClientName
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "DISCOUNTCLIENTNAME", oli.getDiscountClientName()));
            //IsPurchaserInterest
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ISPURCHASERINTEREST", new Long(oli.getIsPurchaserInterest())));
            
            /*/贷款申请
            //MEXAMINEAMOUNT   
            //MSELFAMOUNT       NUMBER(21,6),
            //*/
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }

        return vValue;
    }

    /**
     * haoning 2004-02-12
     * @param 
     * @throws RemoteException;Exception
     */
    public static Collection getAssureData(OBAssureInfo oli, long lMaxID,long loanid) throws Exception
    {
        Vector vValue = new Vector();
        long lLoanTypeID = 0;
        try
        {
            //贷款申请
            //ID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ID", new Long(lMaxID)));
            //nloanid
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "nLoanID", new Long(loanid)));
            //NASSURETYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NASSURETYPEID", new Long(oli.getAssureTypeID())));
            //NCLIENTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NCLIENTID", new Long(oli.getClientID())));
            //MAMOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MAMOUNT", new Double(oli.getAmount())));
            //SIMPAWNAME
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SIMPAWNAME", oli.getName()));
            //SIMPAWQUALITY
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SIMPAWQUALITY", oli.getQuality()));
            //SIMPAWSTATUS
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SIMPAWSTATUS", oli.getStatus()));
            //MPLEDGEAMOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MPLEDGEAMOUNT", new Double(oli.getPledgeSum())));
            //MPLEDGERATE
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MPLEDGERATE", new Double(oli.getPledgeRate())));
            //NSTATUSID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSTATUSID", new Long(oli.getStatusID())));
            //NFILLQUESTIONARY
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NFILLQUESTIONARY", new Long(oli.getFillQuestionary())));
            //SASSURECODE
            //vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SASSURECODE", oli()));
            
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }

        return vValue;
    }
    /**
     * haoning 2004-02-12
     * @param 
     * @throws RemoteException;Exception
     */
    public static Collection getPlanData(OBPlanInfo oli, long lMaxID,long loanid) throws Exception
    {
        Vector vValue = new Vector();
        long lLoanTypeID = 0;
        try
        {
            //贷款申请
            //ID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ID", new Long(lMaxID)));
            //nloanid
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "nLoanID", new Long(loanid)));
            //SINSTRUCTIONNO
            //vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SINSTRUCTIONNO", oli.getInstructionNo()));
            //NINPUTUSERID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NINPUTUSERID", new Long(oli.getInputUserID())));
            //DTINPUT
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTINPUT", oli.getInput()));
            //NPLANVERSION
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NPLANVERSION", new Long(oli.getPlanVersion())));
            //NSTATUSID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSTATUSID", new Long(oli.getStatusID())));
            //NISUSED
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISUSED", new Long(oli.getIsUsed())));
            //NUSERTYPE
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NUSERTYPE", new Long(oli.getUserType())));
            
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }

        return vValue;
    }
    /**
     * haoning 2004-02-12
     * @param 
     * @throws RemoteException;Exception
     */
    public static Collection getPlanDetailData(OBPlanDetailInfo oli, long lMaxID,long planid) throws Exception
    {
        Vector vValue = new Vector();
        long lLoanTypeID = 0;
        try
        {
            //贷款申请
            //ID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ID", new Long(lMaxID)));
            //nplanid
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "nPlanID", new Long(planid)));
            //NPAYTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NPAYTYPEID", new Long(oli.getPayType())));
            //DTPLANDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTPLANDATE", oli.getPlanDate()));
            //MAMOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MAMOUNT", new Double(oli.getAmount())));
            //STYPE
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "STYPE", oli.getType()));
            //DTMODIFYDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTMODIFYDATE", oli.getInputDate()));
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }

        return vValue;
    }

    public static Collection getDocInfoData(OBDocInfo odi) 
    throws Exception
    {
        Vector vValue = new Vector();
        long lTmpID = 0;
        try
        {
            //ID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ID", new Long(odi.getID())));
            //NTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NTYPEID", new Long(odi.getTypeID())));
            //NPARENTTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NPARENTTYPEID", new Long(odi.getParentTypeID())));
            //NPARENTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NPARENTID", new Long(odi.getParentID())));
            //NSTATUSID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSTATUSID", new Long(Constant.YesOrNo.YES)));
            //NORDERNO
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NORDERNO", new Long(odi.getOrderNo())));
            //SREMARK
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SREMARK", odi.getRemark()));
            //NFILEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NFILEID", new Long(odi.getFileID())));
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }
        return vValue;
    }

    public static Collection getContractContentData(ContractContentInfo odi) throws Exception
    {
        Vector vValue = new Vector();
        long lTmpID = 0;
        try
        {
            //ID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ID", new Long(odi.getID())));
            //NPARENTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NPARENTID", new Long(odi.getParentID())));
            //NCONTRACTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NCONTRACTID", new Long(odi.getContractID())));
            //NSERIALNO
            //vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSERIALNO", new Long(odi.getSerialNo())));
            //NCONTRACTTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NCONTRACTTYPEID", new Long(odi.getContractTypeID())));
            //SDOCNAME
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SDOCNAME", odi.getDocName()));
            //SCODE
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SCODE", odi.getCode()));
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }

        return vValue;
    }

    public static Collection getDiscountBillData(OBDiscountBillInfo odi) 
    throws Exception
    {
        Vector vValue = new Vector();
        long lTmpID = 0;
        try
        {
            //ID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ID", new Long(odi.getID())));
            //NSERIALNO
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSERIALNO", new Long(odi.getSerialNo())));
            //SUSERNAME
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SUSERNAME", odi.getUserName()));
            //SBANK
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SBANK", odi.getBank()));
            //NISLOCAL
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NISLOCAL", new Long(odi.getIsBeijing())));
            //DTCREATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTCREATE", odi.getCreate()));
            //SCODE
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SCODE", odi.getCode()));
            //MAMOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MAMOUNT", new Double(odi.getAmount())));
            //NSTATUSID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSTATUSID", new Long(Constant.YesOrNo.YES)));
            //NADDDAYS
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NADDDAYS", new Long(odi.getAddDays())));
            //DTEND
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTEND", odi.getEnd()));
            //MCHECKAMOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MCHECKAMOUNT", new Double(odi.getRealAmount())));
            //OB_NDISCOUNTCREDENCEID
            //vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "OB_NDISCOUNTCREDENCEID", new Long(odi.getDiscountCredenceID())));
            //NACCEPTPOTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NACCEPTPOTYPEID", new Long(odi.getAcceptPotype())));
            //SFORMEROWNER
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SFORMEROWNER", odi.getFormerOwner()));
            //NLOANID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NLOANID", new Long(odi.getLoanID())));
            
            
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }
        return vValue;
    }

    public static Collection getDiscountCredenceData(OBDiscountCredenceInfo odi) 
    throws Exception
    {
        Vector vValue = new Vector();
        long lTmpID = 0;
        try
        {
            //ID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ID", new Long(odi.getInID())));
            //NCONTRACTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NCONTRACTID", new Long(odi.getContractID())));
            //DTINPUTDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTINPUTDATE", odi.getInputDate()));
            //NDRAFTTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NDRAFTTYPEID", new Long(odi.getDraftTypeID())));
            //SDRAFTCODE
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SDRAFTCODE", odi.getDraftCode()));
            //DTPUBLICDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTPUBLICDATE", odi.getPublicDate()));
            //DTATTERM
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTATTERM", odi.getAtTerm()));//
            //SAPPLYCLIENT
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SAPPLYCLIENT", odi.getApplyClientName()));
            //SAPPLYACCOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SAPPLYACCOUNT", odi.getApplyAccount()));
            //SAPPLYBANK
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SAPPLYBANK", odi.getApplyBank()));
            //SACCEPTCLIENT
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SACCEPTCLIENT", odi.getAcceptClientName()));
            //SACCEPTACCOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SACCEPTACCOUNT", odi.getAcceptAccount()));
            //SACCEPTBANK
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SACCEPTBANK", odi.getAcceptBank()));//
            //MAMOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MAMOUNT", new Double(odi.getAmount())));
            //MRATE
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MRATE", new Double(odi.getRate())));
            //MINTEREST
            vValue.add(getAcceptInfo(OBConstant.DataType.DOUBLE, "MINTEREST", new Double(odi.getInterest())));//
            //NSTATUSID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NSTATUSID", new Long(odi.getStatusID())));
            //NINPUTUSERID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NINPUTUSERID", new Long(odi.getInputUserID())));
            //NNEXTCHECKUSERID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NNEXTCHECKUSERID", new Long(odi.getNextCheckUserID())));
            //DTFILLDATE
            vValue.add(getAcceptInfo(OBConstant.DataType.TIMESTAMP, "DTFILLDATE", odi.getFillDate()));
            //SCODE
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SCODE", odi.getInCode()));//
            //NGRANTTYPEID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NGRANTTYPEID", new Long(odi.getGrantTypeID())));
            //NACCOUNTBANKID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NACCOUNTBANKID", new Long(odi.getAccountBankID())));
            //SRECEIVEACCOUNT
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SRECEIVEACCOUNT", odi.getReceiveAccount()));
            //SRECEIVECLIENTNAME
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SRECEIVECLIENTNAME", odi.getReceiveClientName()));//
            //SREMITBANK
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SREMITBANK", odi.getRemitBank()));
            //SREMITINPROVINCE
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SREMITINPROVINCE", odi.getRemitProvince()));//
            //SREMITINCITY
            vValue.add(getAcceptInfo(OBConstant.DataType.STRING, "SREMITINCITY", odi.getRemitCity()));//
            //NGRANTCURRENTACCOUNTID
            vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NGRANTCURRENTACCOUNTID", new Long(odi.getGrantCurrentAccountID())));
            
			vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NNEXTCHECKLEVEL", new Long(1)));
			//add by wjliu --begin 2007/3/21 加两个字段 
			vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "NOFFICEID", new Long(odi.getOfficeID())));
			vValue.add(getAcceptInfo(OBConstant.DataType.LONG, "ncurrencyid", new Long(odi.getCurrencyID())));
			//add --end
			
            //NINID
            //SINCODE
            //ISCANACCEPT
            //SINSTRUCTIONNO
            //NHANDLEUSERID
        }
        catch (Exception e)
        {
            throw new Exception(e.getMessage());
        }
        return vValue;
    }


    /**
     * 查询记录
     * haoning 2004-02-12
     * @param 
     * @throws RemoteException;Exception
     */
    public static AcceptInfo getAcceptInfo(long lType, String sName, Object oValue) throws Exception
    {
        AcceptInfo ai = new AcceptInfo();
        try
        {
            ai.setType(lType);
            ai.setColumnName(sName);
            ai.setColumnValue(oValue);
            return ai;
        }
        catch (Exception e)
        {
            Log.print(e.toString());
            return null;
        }
    }






}
