package com.iss.itreasury.loan.risklevel.bizlogic;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contractstatus.dataentity.ContractStatusInfo;
import com.iss.itreasury.loan.risklevel.dao.RiskLevelDAO;
import com.iss.itreasury.loan.risklevel.dataentity.RiskLevelInfo;
import com.iss.itreasury.loan.setting.dao.LoanTypeRelationDao;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.settlement.util.NameRef;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.system.logger.dataentity.LoggerBtnLevelInfo;
import com.iss.itreasury.system.logger.dataentity.LoggerResults;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;

/**
 * Created 2003-8-15 14:50:59 Code generated by the Forte for Java EJB Module
 * 
 * @author yfan
 */
public class RiskLevelEJB implements SessionBean {
	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */

	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context) {
		this.context = context;
	}

	private SessionContext context;

	private static Log4j log4j = null;

	/**
	 * No argument constructor required by container.
	 */
	public RiskLevelEJB() {
		log4j = new Log4j(Constant.ModuleType.LOAN, this);
	}

	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate() {
	}

	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate() {
	}

	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate() {
	}

	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove() {
	}

	/**
	 * 提交、修改提前还款通知单，操作AheadRepayRequisition <br>
	 * 新增ContractStatus信息,ID取最大值
	 * 
	 * @param lID
	 *            提前还款通知单标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lCurrencyID
	 *            币种
	 * @param lContractID
	 *            合同标识
	 * @param lLetoutNoticeID
	 *            放款通知单标识
	 * @param strCode
	 *            编码
	 * @param dAmount
	 *            提前还款金额
	 * @param lUserID
	 *            录入人
	 * @param tsDate
	 *            录入时间
	 * @throws IRollbackException 
	 */
	public long saveRiskLevel(long lID, long lOfficeID, long lCurrencyID,
			long lContractID, long lOldRiskLevelID, long lNewRiskLevelID,
			long lUserID, Timestamp tsDate,  String strChangeReason,Timestamp effectDate)
			throws RemoteException, IRollbackException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		long lResult = -1, lMaxID = -1;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setBusinessType("贷款合同风险状态变更");
        // add by jbpan 20120606 end
		try {
			logInfo.setTransCode(NameRef.getContractNoByID(lContractID));  //操作日志-业务主键-交易号  
			if (lID < 0) // 新增
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
				conn = Database.getConnection();
				// 获得最大ID＋1
				strSQL = " select nvl(max(id),0)+1 from loan_risklevel ";
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					lMaxID = rs.getLong(1);
					lResult = lMaxID;
					rs.close();
					rs = null;
					ps.close();
					ps = null;
				} else {
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					conn.close();
					conn = null;
					return -1;
				}

				strSQL = "insert into loan_risklevel(id,ncontractid,"
						+ " ninputuserid,dtinputdate,NOLDLEVEL,NCHANGELEVEL,"
						+ " nstatusid,nnextcheckuserid,schangereason,nNextCheckLevel,"
						+ " NCURRENCYID,NOFFICEID,EFFECTDATE) "
						+ " values(?,?,?,sysdate,?,?,?,?,?,1,?,?,?)";
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lMaxID);
				ps.setLong(2, lContractID);
				ps.setLong(3, lUserID);
				ps.setLong(4, lOldRiskLevelID);
				ps.setLong(5, lNewRiskLevelID);
				ps.setLong(6, LOANConstant.RiskModifyStatus.SUBMIT);
				ps.setLong(7, lUserID);
				ps.setString(8, strChangeReason);
				ps.setLong(9, lCurrencyID);
				ps.setLong(10, lOfficeID);
				ps.setTimestamp(11, effectDate);
				if ((lResult = ps.executeUpdate()) < 1) {
					System.out.println("error.insert.loan_risklevel");
				} else {
					lResult = lMaxID;
				}
				ps.close();
				ps = null;

			} else // 修改
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
				conn = Database.getConnection();
				strSQL = "update loan_risklevel set NCHANGELEVEL = ? ,"
						+ " schangereason = ?, effectdate = ? where id = ?";
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lNewRiskLevelID);
				ps.setString(2, strChangeReason);
				ps.setTimestamp(3, effectDate);
				ps.setLong(4, lID);
				if ((lResult = ps.executeUpdate()) < 1) {
					System.out.println("error.update.loan_risklevel");
				} else {
					lResult = lID;
				}
				ps.close();
				ps = null;

			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/08
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}

			} catch (Exception ex) {
				//modified by mzh_fu 2007/08/08
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}
	
	/**
	 * 提交、修改提前还款通知单，操作AheadRepayRequisition <br>
	 * 新增ContractStatus信息,ID取最大值
	 * 
	 * @param lID
	 *            提前还款通知单标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lCurrencyID
	 *            币种
	 * @param lContractID
	 *            合同标识
	 * @param lLetoutNoticeID
	 *            放款通知单标识
	 * @param strCode
	 *            编码
	 * @param dAmount
	 *            提前还款金额
	 * @param lUserID
	 *            录入人
	 * @param tsDate
	 *            录入时间
	 * @throws IRollbackException 
	 */
	public long saveRiskLevel(long lID, long lOfficeID, long lCurrencyID,
			long lContractID, long lOldRiskLevelID, long lNewRiskLevelID,
			long lUserID, Timestamp tsDate, String strChangeReason,
			Timestamp effectDate,
			InutParameterInfo pInfo)
			throws RemoteException, IRollbackException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		long lResult = -1;
		long lMaxID = -1;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setBusinessType("贷款合同风险状态变更");
        // add by jbpan 20120606 end
		try {
			logInfo.setTransCode(NameRef.getContractNoByID(lContractID));  //操作日志-业务主键-交易号
			if (lID < 0) // 新增
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
				conn = Database.getConnection();
				// 获得最大ID＋1
				strSQL = " select nvl(max(id),0)+1 from loan_risklevel ";
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					lMaxID = rs.getLong(1);
					lResult = lMaxID;
					rs.close();
					rs = null;
					ps.close();
					ps = null;
				} else {
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					conn.close();
					conn = null;
					return -1;
				}

				strSQL = "insert into loan_risklevel(id,ncontractid,"
						+ " ninputuserid,dtinputdate,NOLDLEVEL,NCHANGELEVEL,"
						+ " nstatusid,nnextcheckuserid,schangereason,nNextCheckLevel,"
						+ " NCURRENCYID,NOFFICEID,EFFECTDATE) "
						+ " values(?,?,?,sysdate,?,?,?,?,?,1,?,?,?)";
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lMaxID);
				ps.setLong(2, lContractID);
				ps.setLong(3, lUserID);
				ps.setLong(4, lOldRiskLevelID);
				ps.setLong(5, lNewRiskLevelID);
				ps.setLong(6, LOANConstant.RiskModifyStatus.SUBMIT);
				ps.setLong(7, lUserID);
				ps.setString(8, strChangeReason);
				ps.setLong(9, lCurrencyID);
				ps.setLong(10, lOfficeID);
				ps.setTimestamp(11, effectDate);
				if ((lResult = ps.executeUpdate()) < 1) {
					System.out.println("error.insert.loan_risklevel");
				} else {
					lResult = lMaxID;
					lID = lMaxID;
				}
				ps.close();
				ps = null;

			} 
			else // 修改
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
				conn = Database.getConnection();
				strSQL = "update loan_risklevel set NCHANGELEVEL = ? ,"
						+ " schangereason = ? , effectdate = ? where id = ?";
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lNewRiskLevelID);
				ps.setString(2, strChangeReason);
				ps.setTimestamp(3, effectDate);
				ps.setLong(4, lID);
				if ((lResult = ps.executeUpdate()) < 1) {
					System.out.println("error.update.loan_risklevel");
				} else {
					lResult = lID;
				}
				ps.close();
				ps = null;

			}
			
			//审批流
			if(pInfo != null)
			{
				pInfo.setTransID(String.valueOf(lID));
				pInfo.setUrl(pInfo.getUrl()+lID);
				
				//提交审批
				FSWorkflowManager.initApproval(pInfo);
				
				//更新状态到审批中
				RiskLevelDAO riskLevel = new RiskLevelDAO();
				riskLevel.updateStatus(lID, LOANConstant.RiskModifyStatus.APPROVALING);
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/08
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			  
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}

			} catch (Exception ex) {
				//modified by mzh_fu 2007/08/08
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}

	/**
	 * 查找提前还款通知单，查找RiskLevel表 <br>
	 * 如果lContractID后面的参数的值合法，做查询条件；否则不做查询条件。
	 * 
	 * @param lCurrencyID
	 *            币种标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lUserID
	 *            查询人
	 * @param lActionID
	 *            动作，提交或者复核
	 * @param lContractID
	 *            合同标识
	 * @param lClientID
	 *            借款单位标识
	 * @param dAmountFrom
	 *            金额(由)
	 * @param dAmountTo
	 *            金额(到)
	 * @param tsDateFrom
	 *            提交日期起始
	 * @param tsDateTo
	 *            提交日期结束
	 * @param lStatusID
	 *            放款通知单状态
	 */
	public Collection findRiskLevelByMultiOption(long lCurrencyID,
			long lOfficeID, long lUserID, long lActionID, Timestamp tsDateFrom,
			Timestamp tsDateTo, long lStatusID, long lPageLineCount,
			long lPageNo, long lOrderParam, long lDesc) throws RemoteException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		PreparedStatement ps1 = null;
		ResultSet rs1 = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		try {

			con = Database.getConnection();

			// 计算记录总数
			strSelect = " select count(*) ";
			strSQL = "  from loan_risklevel where 1=1 ";

			// ////////////////////查询条件////////////////////////////////////////////////////
			if (tsDateFrom != null) {
				strSQL = strSQL + " and to_char(dtInputDate,'yyyy-mm-dd') >= '"
						+ DataFormat.getDateString(tsDateFrom) + "'";
			}
			if (tsDateTo != null) {
				strSQL = strSQL + " and to_char(dtInputDate,'yyyy-mm-dd') <= '"
						+ DataFormat.getDateString(tsDateTo) + "'";
			}
			if (lOfficeID > 0) {
				strSQL = strSQL + " and NOFFICEID = " + lOfficeID;
			}
			if (lCurrencyID > 0) {
				strSQL = strSQL + " and NCURRENCYID = " + lCurrencyID;
			}
			// 修改查询
			if (lActionID == 1) {
				if (lUserID != -1
						&& lStatusID == LOANConstant.RiskModifyStatus.SUBMIT) {
					strSQL = strSQL + " and nInputUserID = " + lUserID
					// + " and NNEXTCHECKUSERID = "
							// + lUserID
							+ " and nNextCheckLevel = 1 " + " and nStatusID = "
							+ LOANConstant.RiskModifyStatus.SUBMIT;
				}
				if (lUserID != -1
						&& lStatusID == LOANConstant.RiskModifyStatus.CHECK) {
					strSQL = strSQL + " and nInputUserID = " + lUserID
							+ " and nStatusID = "
							+ LOANConstant.RiskModifyStatus.CHECK;
				}
				if (lUserID != -1 && lStatusID == -1) {
					strSQL = strSQL + " and (( nInputUserID = " + lUserID
					// + " and NNEXTCHECKUSERID = "
							// + lUserID
							+ " and nNextCheckLevel = 1 " + " and nStatusID = "
							+ LOANConstant.RiskModifyStatus.SUBMIT
							+ " ) or ( nInputUserID = " + lUserID
							+ " and nStatusID = "
							+ LOANConstant.RiskModifyStatus.CHECK + " )) ";
				}
			}
			// 审核查询
			else if (lActionID == 2) {
				ApprovalDelegation appBiz = new ApprovalDelegation();
				// String strUser = appBiz.findTheVeryUser( Constant.ModuleType.
				// LOAN , Constant.ApprovalLoanType.OTHER ,
				// Constant.ApprovalAction.CONTRACT_RISKLEVEL
				// ,lOfficeID,lCurrencyID, lUserID ) ;
				LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
				long[] loanTypeId = { LOANConstant.LoanType.ZY,
						LOANConstant.LoanType.WT, LOANConstant.LoanType.ZGXE,
						LOANConstant.LoanType.MFXD, LOANConstant.LoanType.OTHER };
				String strUser = null;
				long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(
						lOfficeID, lCurrencyID, loanTypeId);
				if (a_SubLoanType != null && a_SubLoanType.length > 0) {
					strSQL += " and ( ";
					for (int i = 0; i < a_SubLoanType.length; i++) {
						strUser = appBiz.findTheVeryUser(
								Constant.ModuleType.LOAN, a_SubLoanType[i],
								Constant.ApprovalAction.CONTRACT_RISKLEVEL,
								lOfficeID, lCurrencyID, lUserID);
						if (strUser != null
								&& strUser.length() > 0
								&& lStatusID == LOANConstant.RiskModifyStatus.SUBMIT) {
							strSQL += " ( NSTATUSID = "
									+ LOANConstant.RiskModifyStatus.SUBMIT
									+ " and NNEXTCHECKUSERID in " + strUser
									+ " ) ";
						}
						if (strUser != null
								&& strUser.length() > 0
								&& lStatusID == LOANConstant.RiskModifyStatus.CHECK) {
							strSQL += " NSTATUSID = "
									+ LOANConstant.RiskModifyStatus.CHECK
									+ " ) ";
							break;
						}
						if (strUser != null && strUser.length() > 0
								&& lStatusID <= 0) {
							strSQL += " (((NSTATUSID = "
									+ LOANConstant.RiskModifyStatus.SUBMIT
									+ " and NNEXTCHECKUSERID in " + strUser
									+ ") or (NSTATUSID = "
									+ LOANConstant.RiskModifyStatus.CHECK
									+ ") ) )";
						}
						if (i < a_SubLoanType.length - 1)
							strSQL += " or ";
						else
							strSQL += " ) ";
					}
				} else {
					return null;
				}
				if (lStatusID > 0) {
					strSQL += " and nStatusID = " + lStatusID;
				} else {
					strSQL += " and nStatusID in ( "
							+ LOANConstant.RiskModifyStatus.CHECK + ","
							+ LOANConstant.RiskModifyStatus.SUBMIT + ")";
				}

			}
			System.out.println(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}

			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			switch ((int) lOrderParam) {
			/*
			 * case 1: strSQL += " order by aa.sCode " ; break ; case 2: strSQL += "
			 * order by bb.sContractCode " ; break ; case 3: strSQL += " order
			 * by cc.sname " ; break ; case 4: strSQL += " order by
			 * bb.mexamineamount " ; break ; case 5: strSQL += " order by
			 * aa.mAmount " ; break ; case 6: strSQL += " order by aa.dtOutDate " ;
			 * break ;
			 */
			case 7:
				strSQL += " order by dtInputDate ";
				break;
			case 8:
				strSQL += " order by NINPUTUSERID ";
				break;
			case 9:
				strSQL += " order by nStatusID ";
				break;
			default:
				strSQL += " order by NCONTRACTID ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;
			strSQL = " select * " + strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between "
					+ lRowNumStart + " and " + lRowNumEnd;
			System.out.println(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			ContractDao contractDao = new ContractDao();
			while (rs != null && rs.next()) {
				RiskLevelInfo info = new RiskLevelInfo();

				info.m_lID = rs.getLong("ID");
				info.m_lContractID = rs.getLong("nContractID");
				info.cInfo = contractDao.findByID(info.m_lContractID);
				info.m_lPageCount = lPageCount;
				info.m_dtInputDate = rs.getTimestamp("dtInputDate");
				info.m_lStatusID = rs.getLong("nStatusID");
				info.m_sInputUserName = getInputUserName(rs
						.getLong("NINPUTUSERID"));
				info.m_lNextCheckLevel = rs.getLong("nNextCheckLevel");

				v.add(info);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception e) {
			// System.out.println(e.toString ());
			e.printStackTrace();
			throw new RemoteException(e.getMessage());
		} finally {
			try {
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
				if (ps1 != null) {
					ps1.close();
					ps1 = null;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				throw new RemoteException(ex.getMessage());
			}
		}
		return (v.size() > 0 ? v : null);

	}

	/**
	 * 取消提前还款通知单
	 * 
	 * @param lRiskLevelID
	 *            标识
	 * @throws IRollbackException 
	 */
	public long cancelRiskLevelByID(long lRiskLevelID) throws RemoteException, IRollbackException {
		long lResult = -1;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCEL);
		logInfo.setBusinessType("贷款合同风险状态变更");
        // add by jbpan 20120606 end
		try {
			logInfo.setTransCode(NameRef.getContractCodeByRisklevelID(lRiskLevelID));  //操作日志-业务主键-交易号
			conn = Database.getConnection();

			// loan_loancontractplanDetail
			sb.append("update LOAN_RISKLEVEL set nstatusid = "
					+ Constant.RecordStatus.INVALID + " where id = "
					+ lRiskLevelID);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			ps.executeUpdate();
			ps.close();
			ps = null;
			sb.setLength(0);

			lResult = 1;
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			lResult = -1;
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			  
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}

			} catch (Exception ex) {
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;

	}

	/**
	 * 查找提前还款通知单
	 * 
	 * @param lRiskLevelID
	 *            标识
	 */
	public RiskLevelInfo findRiskLevelByID(long lRiskLevelID)
			throws RemoteException {
		RiskLevelInfo info = new RiskLevelInfo();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try {
			conn = Database.getConnection();
			sb
					.append("select * from loan_risklevel where ID = "
							+ lRiskLevelID);
			System.out.println(sb.toString());
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			// log4j.info("came here =--------------");
			if (rs.next()) {
				info.m_lID = rs.getLong("ID");
				info.m_lContractID = rs.getLong("nContractID");
				info.m_dtInputDate = rs.getTimestamp("dtInputDate");
				info.m_lStatusID = rs.getLong("nStatusID");
				info.m_lInputUserID = rs.getLong("NINPUTUSERID");
				info.m_sInputUserName = getInputUserName(rs
						.getLong("NINPUTUSERID"));
				info.m_effectDate= rs.getTimestamp("EFFECTDATE");
				info.lContractNewRiskLevel = rs.getLong("NCHANGELEVEL");
				info.lContractOldRiskLevel = rs.getLong("NOLDLEVEL");
				info.m_lNextCheckUserID = rs.getLong("NNEXTCHECKUSERID");
				info.m_lNextCheckLevel = rs.getLong("nNextCheckLevel");
				info.m_sChangeReason = rs.getString("SCHANGEREASON");
				

			}
			ps.close();
			ps = null;
			sb.setLength(0);
			// log4j.info("came here =--------------");
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}

			} catch (Exception ex) {
				throw new RemoteException(ex.getMessage());
			}
		}
		return info;

	}

	/**
	 * 审核提前还款通知单
	 * 
	 * @param lReviewContentID
	 *            提前还款通知单标识
	 * @throws IRollbackException 
	 */
	public long checkRiskLevel(long lRiskLevelID, String strOpinion,
			long lUserID, long lNextCheckUserID, long lAction,
			long lCurrencyID, long lOfficeID) throws RemoteException, IRollbackException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;

		// 定义相应操作常量
		// 贷款
		long lModuleID = Constant.ModuleType.LOAN;
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		// 模块类型
		long lActionID = Constant.ApprovalAction.CONTRACT_RISKLEVEL;

		long lStatusID = -1;
		long lResultID = -1;
		long lApprovalID = -1;
		long lLevel = -1;
		String strSQL = "";
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        try {
			logInfo.setBusinessType("贷款合同风险状态变更");
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		// ExtendApplyInfo e_info = new ExtendApplyInfo() ;
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();
		try {
			// e_info = findExtendByID( lExtendApplyID ) ;
			logInfo.setTransCode(NameRef.getContractCodeByRisklevelID(lRiskLevelID));  //操作日志-业务主键-交易号
			// 获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID,
					lActionID, lOfficeID, lCurrencyID);
			// 下一级审核人级别
			lLevel = appbiz
					.findApprovalUserLevel(lApprovalID, lNextCheckUserID);
			Log.print("下一级审核人级别：" + lLevel);
			// 审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);

			conn = Database.getConnection();

			strSQL = "";
			if (lAction == 1) // 拒绝
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				// 逻辑删除
				appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID, lActionID,
						lOfficeID, lCurrencyID, lRiskLevelID, 2);

				lStatusID = Constant.RecordStatus.INVALID;
				lResultID = Constant.ApprovalDecision.REFUSE;

				// cancelExtendApply( lExtendApplyID ) ;

				strSQL = "update loan_risklevel  set nStatusID="
						+ LOANConstant.RiskModifyStatus.REFUSE + " where ID="
						+ lRiskLevelID;

			}
			if (lAction == 2) // 审批
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0) {
					strSQL = "update loan_risklevel set nNextCheckUserID="
							+ lNextCheckUserID + ", nNextCheckLevel=" + lLevel
							+ " where ID=" + lRiskLevelID;
					Log.print("更新下一个审核级别（可越级）：" + lLevel);
				} else {
					strSQL = "update loan_risklevel set nNextCheckUserID="
							+ lNextCheckUserID
							+ ", nNextCheckLevel=nNextCheckLevel+1 where ID="
							+ lRiskLevelID;
					Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
			}

			if (lAction == 3) // 审批&&最后
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.FINISH;
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				strSQL = "update loan_risklevel set nNextCheckUserID="
						+ lNextCheckUserID + ", nStatusID="
						+ LOANConstant.RiskModifyStatus.CHECK + " where ID="
						+ lRiskLevelID;

				// 审批完成后需要做的操作
				// 向ExtendContract插入新值
				long lFlag = updateContractRiskLevel(lRiskLevelID);
				if (lFlag >= 1) {

				}
			}
			if (lAction == 4) // 修改
			{
				lStatusID = Constant.RecordStatus.VALID;
				// 装态也置为已提交
				lResultID = Constant.ApprovalDecision.RETURN;
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
				strSQL = "update loan_risklevel set nNextCheckUserID=nInputUserID, nStatusID="
						+ LOANConstant.RiskModifyStatus.SUBMIT
						+ ", nNextCheckLevel=1 where ID=" + lRiskLevelID;
			}

			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.executeUpdate();
			ps.close();
			ps = null;

			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lRiskLevelID);
			// info.setSerialID(lSerialID);
			info.setUserID(lUserID);
			info.setNextUserID(lNextCheckUserID);
			info.setOpinion(strOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			appbiz.saveApprovalTracing(info);

			if (conn != null) {
				conn.close();
			}
			conn = null;
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/08
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			  
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}

			} catch (Exception ex) {
				//modified by mzh_fu 2007/08/08
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return 1;

	}

	private static String getInputUserName(long lID) throws RemoteException {
		String sResult = "";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try {
			conn = Database.getConnection();
			sb.append("select * from USERINFO where ID = " + lID);
			ps = conn.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			if (rs.next()) {
				sResult = rs.getString("SNAME");
			}
			ps.close();
			ps = null;
			sb.setLength(0);
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RemoteException(ex.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}

			} catch (Exception ex) {
				throw new RemoteException(ex.getMessage());
			}
		}
		return sResult;
	}

	// 审批完成后需要做的操作
	private long updateContractRiskLevel(long lRiskLevelID) throws Exception {
		PreparedStatement ps = null;
		PreparedStatement ps1 = null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		Connection conn = null;
		long lContractID = -1;
		long lRiskLevel = -1;
		long lReturn = -1;

		// long lOBStatusID = 0;
		String strSQL = "";
		try {

			conn = Database.getConnection();

			strSQL = "select * from loan_risklevel where ID = " + lRiskLevelID;
			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next()) {
				lContractID = rs.getLong("NCONTRACTID");
				lRiskLevel = rs.getLong("NCHANGELEVEL");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			if (lContractID < 0) 
			{
				lReturn = -1;
				throw new RemoteException("合同ID不正确！");
			} 
			else 
			{
				strSQL = "update LOAN_CONTRACTFORM set NRISKLEVEL = " + lRiskLevel + " where ID = " + lContractID;
				System.out.println(strSQL);
				ps = conn.prepareStatement(strSQL);
				if ((lReturn = ps.executeUpdate()) < 1) 
				{
					System.out.println("error.update.LOAN_CONTRACTFORM.status");
				}
				ps.close();
				ps = null;
			}

			if (conn != null) {
				conn.close();
			}
			conn = null;

		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		} finally {
			try {
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
				if (ps1 != null) {
					ps1.close();
					ps1 = null;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				throw ex;
			}
		}
		return lReturn;
	}

	/**
	 * @param contractStatusInfo
	 * 审批流：取消审批方法（合同风险状态变更）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(ContractStatusInfo contractStatusInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = contractStatusInfo.getInutParameterInfo();
		RiskLevelDAO riskLevel = new RiskLevelDAO();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setBusinessType("贷款合同风险状态变更");
        // add by jbpan 20120606 end
		try
		{
			// add by jbpan 20120606 操作日志-操作类型-
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
			logInfo.setTransCode(NameRef.getContractCodeByRisklevelID(contractStatusInfo.m_lID));  //操作日志-业务主键-交易号
			//取消审批
			lReturn = riskLevel.updateStatusAndCheckStatus(contractStatusInfo.m_lID,LOANConstant.RiskModifyStatus.SUBMIT);;
			
			if(lReturn > 0)
			{
				// 审批完成后需要做的操作
				// 向ExtendContract插入新值
				riskLevel.updateContractRiskLevel(contractStatusInfo.m_lID,"cancelApproval");
				
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}				
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
        finally
        {
        	   
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120606 end
		return lReturn;
	}
	
	/**
	 * @param contractStatusInfo
	 * 审批流：取消审批方法（合同风险状态变更）
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long doApproval(ContractStatusInfo contractStatusInfo) throws RemoteException, IRollbackException 
	{
		long lReturn = -1;
		InutParameterInfo returnInfo = new InutParameterInfo();
		RiskLevelDAO riskLevel = new RiskLevelDAO();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setBusinessType("贷款合同风险状态变更");
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        // add by jbpan 20120606 end
		try {
			logInfo.setTransCode(NameRef.getContractCodeByRisklevelID(contractStatusInfo.m_lID));  //操作日志-业务主键-交易号
			returnInfo = FSWorkflowManager.doApproval(contractStatusInfo.getInutParameterInfo());

			// 如果是最后一级,且为审批通过,更新状态为已审批
			if (returnInfo.isLastLevel()) 
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				lReturn = riskLevel.updateStatus(
						contractStatusInfo.m_lID,
						LOANConstant.RiskModifyStatus.CHECK);
				
				// 审批完成后需要做的操作
				// 向ExtendContract插入新值
				updateContractRiskLevel(contractStatusInfo.m_lID);
			}
			// 如果是最后一级,且为审批拒绝,更新状态为已保存
			else if (returnInfo.isRefuse()) 
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				lReturn = riskLevel.updateStatus(
						contractStatusInfo.m_lID,
						LOANConstant.RiskModifyStatus.SUBMIT);
			}
			//add by jbpan 20120614 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} 
		catch (Exception ex) 
		{
			// add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			throw new IRollbackException(context, ex.getMessage());
		}
		//add by jbpan 20120606 start
        finally
        {
        	   
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120606 end
		return lReturn;
	}
	
}