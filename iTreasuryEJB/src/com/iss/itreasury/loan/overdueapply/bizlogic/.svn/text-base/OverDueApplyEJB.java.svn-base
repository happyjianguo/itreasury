package com.iss.itreasury.loan.overdueapply.bizlogic;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contract.dataentity.ContractAmountInfo;
import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.loanapply.dao.LoanApplyDao;
import com.iss.itreasury.loan.loanapply.dataentity.LoanExaminePassInfo;
import com.iss.itreasury.loan.overdueapply.dataentity.OverDueInfo;
import com.iss.itreasury.loan.repayplan.dataentity.RepayPlanInfo;
import com.iss.itreasury.loan.setting.dao.LoanTypeRelationDao;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.system.approval.dao.ApprovalDao;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;
import com.iss.itreasury.loan.util.*;

/**
 * Created 2003-8-15 14:50:59 Code generated by the Forte for Java EJB Module
 * 
 * @author yfan
 */
public class OverDueApplyEJB implements SessionBean {
	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */
	Log4j log4j = new Log4j(Constant.ModuleType.LOAN, this); //

	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context) {
		this.context = context;
	}

	private SessionContext context;

	/**
	 * No argument constructor required by container.
	 */
	public OverDueApplyEJB() {
	}

	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate() {
	}

	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate() {
	}

	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate() {
	}

	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove() {
	}

	/**
	 * 合同查找，根据条件查询ContractForm和LoanForm表。 <br>
	 * lContractIDFrom和lContractIDTo， 同一类型的合同的流水号的部分作为查询范围 <br>
	 * 需要查录入人是lUserID的贷款合同
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lType,
	 *            贷款类型
	 * @param lCurrencyID
	 *            币种标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lUserID
	 *            操作人标识
	 * @param lContractIDFrom
	 *            合同编号起始
	 * @param lContractIDTo
	 *            合同编号结束
	 * @param lClientID
	 *            借款单位标识
	 * @param tsLoanStart
	 *            贷款日期起始
	 * @param tsLoanEnd
	 *            贷款日期结束
	 * @param lStatusID
	 *            合同状态
	 * @return Collection ContractInfo
	 * @exception Exception
	 */
	public Collection findContractByMultiOption(long lLoanType,
			long lCurrencyID, long lOfficeID, long lUserID,
			long lContractIDFrom, long lContractIDTo, long lClientID,
			Timestamp tsLoanStart, Timestamp tsLoanEnd, long lStatusID,
			long lPageLineCount, long lPageNo, long lOrderParam, long lDesc)
			throws IException, RemoteException {
		Vector v = new Vector();
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		PreparedStatement ps1 = null;
		ResultSet rs1 = null;
		int nIndex = 0;
		String strSQL = ""; // 主SQL语句
		String strSQL_Count = ""; // SQL计算语句
		String strSQL_Select = ""; // SQL查找语句
		String strSQL_Table = ""; // SQL的表以及其之间联系语句
		String strSQL_Option = ""; // SQL查找条件
		String strSQL_Order = ""; // SQL排序条件
		String strSQLTmp = "";
		long lRecordCount = -1; // 总记录数
		long lPageCount = -1; // 总页数
		long lRowNumStart = -1; // 开始记录
		long lRowNumEnd = -1; // 结束记录
		String strContractStatus = "";
		try {
			con = Database.getConnection();
			strContractStatus = "" + LOANConstant.ContractStatus.ACTIVE;

			/* TOCONFIG―TODELETE */
			/*
			 * 产品化不再区分项目 ninh 2005-03-24
			 */

			// if(Env.getProjectName().equals(Constant.ProjectName.HN))
			// {
			// //华能有，大桥无该合同
			// strContractStatus += "," + LOANConstant.ContractStatus.EXTEND;
			// }
			// 存在展期的配置项，不应该还用项目判断 ninh
			strContractStatus += "," + LOANConstant.ContractStatus.EXTEND;

			/* TOCONFIG―END */

			strContractStatus += "," + LOANConstant.ContractStatus.OVERDUE;
			/** ******** 查找满足条件的--逾期合同数目********* */
			strSQL_Count = " select count(*) ";
			strSQL_Table = "       from LOAN_CONTRACTFORM a,Client c "
					+ " where c.ID(+)=a.NBORROWCLIENTID "
					// + " and a.NINPUTUSERID = " 录入人限制重复
					// + lUserID
					+ "   and a.nStatusID in ( " + strContractStatus + " ) ";
			/** ************设置查找条件**************** */
			// (上海电气)担保业务没有逾期 modified by zntan 2004-11-29
			strSQL_Option += " and a.nTypeID  in ( "
					+ LOANConstant.LoanType.RZZL + ","
					+ LOANConstant.LoanType.WT + "," + LOANConstant.LoanType.ZY
					+ "," + LOANConstant.LoanType.YT + " )";
			if (lOfficeID > -1) {
				strSQL_Option += " and a.nOfficeID= " + lOfficeID;
			}
			if (lLoanType > -1) // 合同贷款类型
			{
				strSQL_Option += " and a.nTypeID = " + lLoanType;
			}
			if (lCurrencyID > -1) {
				strSQL_Option += " and a.nCurrencyID= " + lCurrencyID;
			}
			if (lUserID > -1) {
				strSQL_Option += " and a.nInputUserID= " + lUserID;
			}
			if (lContractIDFrom > -1) // 合同起始ID
			{
				strSQL_Option += " and a.ID>= " + lContractIDFrom;
			}
			if (lContractIDTo > -1) // 合同结束ID
			{
				strSQL_Option += " and a.ID<= " + lContractIDTo;
			}
			if (lClientID > -1) // 贷款单位
			{
				strSQL_Option += " and a.NBORROWCLIENTID= " + lClientID;
			}
			if (tsLoanStart != null) //
			{
				strSQL_Option += " and TO_CHAR(a.DTSTARTDATE,'yyyy-mm-dd') "
						+ " >= TO_CHAR(?,'yyyy-mm-dd') ";
			}
			if (tsLoanEnd != null) //
			{
				strSQL_Option += " and TO_CHAR(a.DTENDDATE,'yyyy-mm-dd') "
						+ " <= TO_CHAR(?,'yyyy-mm-dd') ";
			}
			if (lStatusID > -1) // 合同状态
			{
				strSQL_Option += " and a.nStatusID= " + lStatusID;
			}
			strSQL = strSQL_Count + strSQL_Table + strSQL_Option;
			log4j.info("查找逾期合同数目 SQL=  " + strSQL);
			ps = con.prepareStatement(strSQL);
			nIndex = 1;
			if (tsLoanStart != null) //
			{
				ps.setTimestamp(nIndex, tsLoanStart);
				nIndex++;
			}
			if (tsLoanEnd != null) //
			{
				ps.setTimestamp(nIndex, tsLoanEnd);
				nIndex++;
			}
			rs = ps.executeQuery();
			if (rs.next()) {
				lRecordCount = rs.getLong(1); // 得到总记录数
			}
			// 计算总页数
			lPageCount = lRecordCount / lPageLineCount;
			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			log4j.info("符合条件的合同数目：" + lRecordCount);
			if (lRecordCount > 0) {
				// 返回结果集， 分页显示，显示下一页
				lRowNumStart = (lPageNo - 1) * lPageLineCount + 1; // 开始
				lRowNumEnd = lRowNumStart + lPageLineCount - 1; // 结束
				// ////////////////////////////////////////
				strSQL_Select = "Select a.id as ContractID " // 合同ID
						+ " ,a.sContractCode as ContractCode " // 合同编号
						+ " ,c.sName as BorrowClientName " // 借款单位
						+ " ,a.MLOANAMOUNT " // 金额
						+ " ,a.MEXAMINEAMOUNT"// 批准金额
						+ " ,a.NINTERVALNUM as LoanTime " // 期限
						+ " ,a.NSTATUSID " // 状态
						+ " ,a.DtStartDate,a.DtEndDate "; // 贷款日期
				// --------------排序---------------//
				switch ((int) lOrderParam) {
				case 1: // 按合同编号排序
					strSQL_Order += " order by a.SCONTRACTCODE ";
					break;
				case 2: // 按贷款单位排序
					strSQL_Order += " order by c.SNAME";
					break;
				case 3: // 按金额排序
					strSQL_Order += " order by a.MEXAMINEAMOUNT";
					break;
				case 4: // 按贷款日期排序
					strSQL_Order += " order by a.DTSTARTDATE ";
					break;
				case 5: // 按期限排序
					strSQL_Order += " order by a.NINTERVALNUM ";
					break;
				case 6: // 按合同状态排序
					strSQL_Order += " order by a.nStatusID";
					break;
				default:
					strSQL_Order += "";
				}
				// 判断是升序还是降序，升序是系统默认的，降序是desc
				if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
					strSQL_Order += " desc";
				}
				// 加上查找限制条件 加上排序条件 排序方式
				strSQL = "select * from ( select b.*, rownum num from " + " ( "
						+ strSQL_Select + strSQL_Table + strSQL_Option
						+ strSQL_Order + " ) b ) ";
				strSQL += " WHERE num BETWEEN ? AND ? "; // 当前页行记录范围
				log4j.info("查找结果集  SQL = " + strSQL);
				ps = con.prepareStatement(strSQL);
				/** *********对条件赋值********** */
				nIndex = 1;
				if (tsLoanStart != null) //
				{
					ps.setTimestamp(nIndex, tsLoanStart);
					nIndex++;
				}
				if (tsLoanEnd != null) //
				{
					ps.setTimestamp(nIndex, tsLoanEnd);
					nIndex++;
				}
				ps.setLong(nIndex, lRowNumStart); // 给入起始行号
				nIndex++;
				ps.setLong(nIndex, lRowNumEnd); // 给入结束行号
				rs = ps.executeQuery();
				while (rs != null && rs.next()) {
					ContractInfo contractinfo = new ContractInfo();
					contractinfo.setContractID(rs.getLong("ContractID")); //
					contractinfo.setContractCode(rs.getString("ContractCode"));
					// 合同编号
					// 贷款单位
					contractinfo.setBorrowClientName(rs
							.getString("BorrowClientName"));
					// contractinfo.setLoanAmount(rs.getDouble("mLoanAmount"));
					contractinfo.setLoanAmount(rs.getDouble("MEXAMINEAMOUNT"));
					// 金额
					// 贷款起始日期
					contractinfo.setLoanStart(rs.getTimestamp("DtStartDate"));
					// 贷款到期日期
					contractinfo.setLoanEnd(rs.getTimestamp("DtEndDate"));
					contractinfo.setIntervalNum(rs.getLong("LoanTime")); // 期限
					contractinfo.setStatusID(rs.getLong("NSTATUSID")); // 状态
					// 状态描述
					contractinfo.setStatus(LOANConstant.ContractStatus
							.getName(contractinfo.getStatusID()));
					contractinfo.setPageCount(lPageCount); // 总页数
					// contractinfo.setAllRecord(lRecordCount);//总记录
					// 如下SQL语句是判断该合同是否有执行计划在修改之中！
					strSQLTmp = " Select id from LOAN_LoanContractPlan "
							+ " where nStatusID = ? "
							+ " and nPlanVersion in  "
							+ " ( "
							+ "  SELECT MAX(NPLANVERSION) FROM LOAN_LoanContractPlan "
							+ "  WHERE NCONTRACTID = "
							+ contractinfo.getContractID() + " ) "
							+ " and NCONTRACTID = "
							+ contractinfo.getContractID();
					log4j.info(" SQL = " + strSQLTmp);
					ps1 = con.prepareStatement(strSQLTmp);
					ps1.setLong(1, Constant.RecordStatus.INVALID);
					rs1 = ps1.executeQuery();
					if (rs1 != null && rs1.next()) {
						// 执行计划在修改中，不能作逾期
						contractinfo.setIsPlanModifying(Constant.YesOrNo.YES);
					} else // 执行计划不在修改中
					{
						contractinfo.setIsPlanModifying(Constant.YesOrNo.NO);
					}
					if (rs1 != null) {
						rs1.close();
						rs1 = null;
					}
					if (ps1 != null) {
						ps1.close();
						ps1 = null;
					}
					// 如下SQL语句是用于求得某个合同的计划版本ID！
					strSQLTmp = " Select id from LOAN_LoanContractPlan "
							+ " where nStatusID = ? "
							+ " and nPlanVersion in ( "
							+ " SELECT MAX(NPLANVERSION) FROM LOAN_LoanContractPlan "
							+ " WHERE NCONTRACTID = "
							+ contractinfo.getContractID() + " ) "
							+ " and NCONTRACTID = "
							+ contractinfo.getContractID();
					log4j.info("  SQL = " + strSQLTmp);
					ps1 = con.prepareStatement(strSQLTmp);
					ps1.setLong(1, Constant.RecordStatus.VALID);
					rs1 = ps1.executeQuery();
					if (rs1 != null && rs1.next()) {
						// 得到某个合同的计划最新版本ID
						contractinfo.setPlanVersionID(rs1.getLong("id"));
						log4j.info(" PlanID=" + rs1.getLong("id"));
					}
					if (rs1 != null) {
						rs1.close();
						rs1 = null;
					}
					if (ps1 != null) {
						ps1.close();
						ps1 = null;
					}
					// 判断该合同是否有计划在展期之中//
					strSQLTmp = " select NISUSED, NUSERTYPE from LOAN_LoanContractPlan "
							+ " where ID = " + contractinfo.getPlanVersionID();
					log4j.info(" 3--- SQL = " + strSQLTmp);
					ps1 = con.prepareStatement(strSQLTmp);
					rs1 = ps1.executeQuery();
					if (rs1 != null && rs1.next()) {
						// log4j.info("有计划在展期之中");
						contractinfo.setIsOverDueModifying(Constant.YesOrNo.NO);
						//
						if ((contractinfo.getIsPlanModifying() == Constant.YesOrNo.NO)
								&& (rs1.getLong(1) == Constant.YesOrNo.YES)
								&& (rs1.getLong(2) != Constant.RecordStatus.INVALID)
								&& (rs1.getLong(2) != LOANConstant.PlanModifyType.OVERDUE)) {
							// log4j.info("不能作逾期");
							// 有执行计划在修改中，不能作逾期！
							// 不能往下一个页面链接
							contractinfo
									.setIsPlanModifying(Constant.YesOrNo.YES);
							//
						}
						if ((contractinfo.getIsPlanModifying() == Constant.YesOrNo.NO)
								&& (rs1.getLong(1) == Constant.YesOrNo.YES)
								&& (rs1.getLong(2) == LOANConstant.PlanModifyType.OVERDUE)) {
							// 表明有执行在修改提交之中，这时链接的下一个页面最多
							// 只能往下下个页面出一个超级链接，即逾期申请修改
							contractinfo
									.setIsOverDueModifying(Constant.YesOrNo.YES);
						}
					}
					if (rs1 != null) {
						rs1.close();
						rs1 = null;
					}
					if (ps1 != null) {
						ps1.close();
						ps1 = null;
					}
					// ////////////////////////////////////////
					v.addElement(contractinfo);
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
				if (ps1 != null) {
					ps1.close();
					ps1 = null;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				throw new IException("Gen_E001");
			}
		}
		return v.size() > 0 ? v : null;
	}

	/**
	 * 合同查找，根据条件查询ContractForm和LoanForm表。 <br>
	 * lContractIDFrom和lContractIDTo， 同一类型的合同的流水号的部分作为查询范围 <br>
	 * 需要查录入人是lUserID的贷款合同
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lType,
	 *            贷款类型
	 * @param lCurrencyID
	 *            币种标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lUserID
	 *            操作人标识
	 * @param lContractIDFrom
	 *            合同编号起始
	 * @param lContractIDTo
	 *            合同编号结束
	 * @param lClientID
	 *            借款单位标识
	 * @param tsLoanStart
	 *            贷款日期起始
	 * @param tsLoanEnd
	 *            贷款日期结束
	 * @param lStatusID
	 *            合同状态
	 * @return Collection ContractInfo
	 * @exception Exception
	 */
	public Collection findOverDueContractByMultiOption(long lCurrencyID,
			long lOfficeID, long lUserID, long lPageLineCount, long lPageNo,
			long lOrderParam, long lDesc) throws IException, RemoteException {
		return null;
	}

	/**
	 * 查找合同的最新版本还款计划。不翻页
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lID
	 *            CONTRACTPAYPLANVERSIONNEW的执行计划版本的ID
	 * @return Collection
	 * @exception RemoteException
	 */
	public Collection findPlanByContract(long lID) throws IException,
			RemoteException {
		Vector v = new Vector();
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = ""; // 主SQL语句
		long lRecordCount = -1; // 总记录数
		long lPageCount = -1; // 总页数
		long lRowNumStart = -1; // 开始记录
		long lRowNumEnd = -1; // 结束记录
		double dAmount = 0.0; // 贷款金额
		double dBalanceRePayTmp = 0.0;
		long lContractID = 0; // 合同ID
		long lOverdueModifying = 0; // 是否作了逾期申请的标识
		// if lOverdueModifying 为No状态 表明新增的情况，
		// 所有的未作过逾期申请执行计划都有连接
		// else 为作了逾期申请的状态，只有作了逾期申请的页面有连向S603.JSP！
		try {
			con = Database.getConnection();
			// 如下SQL语句是判断该合同是有计划在展期或者是预期之中！
			strSQL = " SELECT NISUSED, NUSERTYPE,nContractID From LOAN_LoanContractPlan "
					+ " WHERE ID = " + lID;
			log4j.info("SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next()) {
				lContractID = rs.getLong("nContractID");
				lOverdueModifying = Constant.YesOrNo.NO;
				if ((rs.getLong(1) == Constant.YesOrNo.YES)
						&& (rs.getLong(2) == LOANConstant.PlanModifyType.OVERDUE)) {
					// 表明有执行在修改提交之中，
					// 这时链接的下一个页面最多只能往下下个页面出一个超级链接，
					// 即逾期申请修改
					lOverdueModifying = Constant.YesOrNo.YES; //
				}
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			/** ********（计划余额）已还金额*********** */
			// dBalanceRePayTmp = getPlanBalance(lContractID);
			if (lContractID > 0) {
				ContractDao cdao = new ContractDao();
				ContractInfo cInfo = new ContractInfo();
				ContractAmountInfo AInfo = new ContractAmountInfo();
				cInfo = cdao.findByID(lContractID);
				dAmount = cInfo.getExamineAmount();
				AInfo = cInfo.getAInfo();
				// dBalanceRePayTmp = dAmount-AInfo.getBalanceAmount();
				dBalanceRePayTmp = AInfo.getRepayAmount();
			}
			log4j.info("已还金额:" + dBalanceRePayTmp);
			// 还款计划列表
			String strOverDueStatus = "";
			strOverDueStatus = "" + LOANConstant.OverDueStatus.CHECK;
			strOverDueStatus += "," + LOANConstant.OverDueStatus.NOTYET;
			strOverDueStatus += "," + LOANConstant.OverDueStatus.SUBMIT;
			strOverDueStatus += "," + LOANConstant.OverDueStatus.YES;
			strSQL = " SELECT a.ID, a.DTPLANDATE, "
					+ " a.MAMOUNT, "
					+ " b.ID OverDueID, b.MPLANBALANCE, "
					+ " b.MFINEAMOUNT, b.MFINEINTERESTRATE, "
					+ " b.DTFINEDATE, b.NSTATUSID, "
					+ " b.NNEXTCHECKUSERID "
					+ " FROM LOAN_LoanContractPlanDetail a, LOAN_OVERDUEFORM b "
					+ " ,LOAN_LoanContractPlan c "
					+ " WHERE a.NCONTRACTPLANID= "
					+ lID // 10 --此处为版本表的ID
					+ " and a.NCONTRACTPLANID=c.id(+) "
					+ " AND a.NLASTOVERDUEID=b.ID(+) "
					// + " AND b.NSTATUSID in ( "+ strOverDueStatus+ " ) "
					+ " AND a.NPAYTYPEID=" + LOANConstant.PlanType.REPAY // 2--意义为还款
					+ " ORDER BY a.DTPLANDATE ";
			log4j.info("SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			while (rs != null && rs.next()) {
				log4j.info("---合同执行计划---");
				RepayPlanInfo repayinfo = new RepayPlanInfo();
				repayinfo.lisOverDue = lOverdueModifying;
				repayinfo.lID = rs.getLong("ID"); // 计划的标识
				repayinfo.lOVERDUEINFONEWID = rs.getLong("OverDueID");
				// 逾期表的标识ID
				repayinfo.dPlanPayAmount = rs.getDouble("MAMOUNT"); // 计划还款金额
				repayinfo.tsPlanDate = rs.getTimestamp("DTPLANDATE"); // 计划日期
				/**
				 * 如下是处理计划贷款余额用的 采用的原则是“先借先还”的概念自动计算
				 */
				if (dBalanceRePayTmp > 0) {
					if (dBalanceRePayTmp >= repayinfo.dPlanPayAmount) {
						repayinfo.dPlanBalance = 0;
						dBalanceRePayTmp = dBalanceRePayTmp
								- repayinfo.dPlanPayAmount;
						// log4j.info("计划贷款余额=" + dBalanceRePayTmp);
					} else {
						repayinfo.dPlanBalance = repayinfo.dPlanPayAmount
								- dBalanceRePayTmp;
						dBalanceRePayTmp = 0;
						// log4j.info("计划贷款余额=" + dBalanceRePayTmp);
					}
				} else {
					repayinfo.dPlanBalance = repayinfo.dPlanPayAmount;
				}
				if (repayinfo.lOVERDUEINFONEWID > 0) {
					// 作了逾期申请 **
					// repayinfo.lisOverDue = Constant.YesOrNo.YES;
					repayinfo.dFineAmount = rs.getDouble("MFINEAMOUNT"); // 罚息金额
					repayinfo.dFineInterestRate = rs
							.getDouble("MFINEINTERESTRATE");
					// 罚息利率
					repayinfo.tsFineDate = rs.getTimestamp("DTFINEDATE");
					// 罚息日期
					// 审核人ID
					repayinfo.lCheckUserID = rs.getLong("NNEXTCHECKUSERID");
				} else {
					// repayinfo.lisOverDue = Constant.YesOrNo.NO; //未作逾期申请
					repayinfo.dFineAmount = -1; // 罚息金额
					repayinfo.dFineInterestRate = -1; // 罚息利率
					repayinfo.tsFineDate = null; // 罚息日期
				}
				repayinfo.lOverdueStatusID = rs.getLong("NSTATUSID"); // 逾期状态
				if (repayinfo.lOVERDUEINFONEWID <= 0) {
					// log4j.info("overdueID<=0");
					Timestamp tsTodayTmp = null;
					Timestamp tsPlanDayTmp = null;
					tsTodayTmp = DataFormat.getDateTime(con);
					tsPlanDayTmp = DataFormat.getDateTime(DataFormat
							.getDateString(repayinfo.tsPlanDate));
					// log4j.info("----------");
					// if ((tsPlanDayTmp.compareTo(tsTodayTmp)) < 0)
					if (DataFormat.getDateString(tsPlanDayTmp).compareTo(
							DataFormat.getDateString(tsTodayTmp)) <= 0) {
						log4j.info("表明是已逾期，没有提交逾期申请");
						// 表明是已逾期，但是还没有提交逾期申请！
						repayinfo.lOverdueStatusID = LOANConstant.OverDueStatus.YES;
					} else {
						log4j.info("表明没有逾期");
						repayinfo.lOverdueStatusID = LOANConstant.OverDueStatus.NOTYET;
						// 表明是还没有逾期，注意，这种状态下不能提交逾期申请！
					} // if(repayinfo.tsPlanDate.after(DataFormat.getDateTime(con)))
				} // if(repayinfo.lOVERDUEINFONEWID<=0)
				/**
				 * 如果是逾期的话就不用从lID判断该逾期的状态了， 因为它们的修改、复核状态可以从LOAN_OverdueForm表中读到
				 */
				log4j.info("out");
				v.addElement(repayinfo);
			} // */
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				throw new IException("Gen_E001");
			}
		}
		return v;
	}

	/**
	 * 查找合同的最新版本还款计划。不翻页 Boxu Update 2008年11月17日 计划还款时间比较不取数据库时间，用开机日
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lID
	 *            CONTRACTPAYPLANVERSIONNEW的执行计划版本的ID
	 * @return Collection
	 * @exception RemoteException
	 */
	public Collection findPlanByContract(long lID, long lOfficeID,
			long lCurrencyID) throws IException, RemoteException {
		Vector v = new Vector();
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = ""; // 主SQL语句
		long lRecordCount = -1; // 总记录数
		long lPageCount = -1; // 总页数
		long lRowNumStart = -1; // 开始记录
		long lRowNumEnd = -1; // 结束记录
		double dAmount = 0.0; // 贷款金额
		double dBalanceRePayTmp = 0.0;
		long lContractID = 0; // 合同ID
		long lOverdueModifying = 0; // 是否作了逾期申请的标识
		// if lOverdueModifying 为No状态 表明新增的情况，
		// 所有的未作过逾期申请执行计划都有连接
		// else 为作了逾期申请的状态，只有作了逾期申请的页面有连向S603.JSP！
		try {
			con = Database.getConnection();
			// 如下SQL语句是判断该合同是有计划在展期或者是预期之中！
			strSQL = " SELECT NISUSED, NUSERTYPE,nContractID From LOAN_LoanContractPlan "
					+ " WHERE ID = " + lID;
			log4j.info("SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next()) {
				lContractID = rs.getLong("nContractID");
				lOverdueModifying = Constant.YesOrNo.NO;
				if ((rs.getLong(1) == Constant.YesOrNo.YES)
						&& (rs.getLong(2) == LOANConstant.PlanModifyType.OVERDUE)) {
					// 表明有执行在修改提交之中，
					// 这时链接的下一个页面最多只能往下下个页面出一个超级链接，
					// 即逾期申请修改
					lOverdueModifying = Constant.YesOrNo.YES; //
				}
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			/** ********（计划余额）已还金额*********** */
			// dBalanceRePayTmp = getPlanBalance(lContractID);
			if (lContractID > 0) {
				ContractDao cdao = new ContractDao();
				ContractInfo cInfo = new ContractInfo();
				ContractAmountInfo AInfo = new ContractAmountInfo();
				cInfo = cdao.findByID(lContractID);
				dAmount = cInfo.getExamineAmount();
				AInfo = cInfo.getAInfo();
				// dBalanceRePayTmp = dAmount-AInfo.getBalanceAmount();
				dBalanceRePayTmp = AInfo.getRepayAmount();
			}
			log4j.info("已还金额:" + dBalanceRePayTmp);
			// 还款计划列表
			String strOverDueStatus = "";
			strOverDueStatus = "" + LOANConstant.OverDueStatus.CHECK;
			strOverDueStatus += "," + LOANConstant.OverDueStatus.NOTYET;
			strOverDueStatus += "," + LOANConstant.OverDueStatus.SUBMIT;
			strOverDueStatus += "," + LOANConstant.OverDueStatus.YES;
			strSQL = " SELECT a.ID, a.DTPLANDATE, "
					+ " a.MAMOUNT, "
					+ " b.ID OverDueID, b.MPLANBALANCE, "
					+ " b.MFINEAMOUNT, b.MFINEINTERESTRATE, "
					+ " b.DTFINEDATE, b.NSTATUSID, "
					+ " b.NNEXTCHECKUSERID "
					+ " FROM LOAN_LoanContractPlanDetail a, LOAN_OVERDUEFORM b "
					+ " ,LOAN_LoanContractPlan c "
					+ " WHERE a.NCONTRACTPLANID= "
					+ lID // 10 --此处为版本表的ID
					+ " and a.NCONTRACTPLANID=c.id(+) "
					+ " AND a.NLASTOVERDUEID=b.ID(+) "
					// + " AND b.NSTATUSID in ( "+ strOverDueStatus+ " ) "
					+ " AND a.NPAYTYPEID=" + LOANConstant.PlanType.REPAY // 2--意义为还款
					+ " ORDER BY a.DTPLANDATE ";
			log4j.info("SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			while (rs != null && rs.next()) {
				log4j.info("---合同执行计划---");
				RepayPlanInfo repayinfo = new RepayPlanInfo();
				repayinfo.lisOverDue = lOverdueModifying;
				repayinfo.lID = rs.getLong("ID"); // 计划的标识
				repayinfo.lOVERDUEINFONEWID = rs.getLong("OverDueID");
				// 逾期表的标识ID
				repayinfo.dPlanPayAmount = rs.getDouble("MAMOUNT"); // 计划还款金额
				repayinfo.tsPlanDate = rs.getTimestamp("DTPLANDATE"); // 计划日期
				/**
				 * 如下是处理计划贷款余额用的 采用的原则是“先借先还”的概念自动计算
				 */
				if (dBalanceRePayTmp > 0) {
					if (dBalanceRePayTmp >= repayinfo.dPlanPayAmount) {
						repayinfo.dPlanBalance = 0;
						dBalanceRePayTmp = dBalanceRePayTmp
								- repayinfo.dPlanPayAmount;
						// log4j.info("计划贷款余额=" + dBalanceRePayTmp);
					} else {
						repayinfo.dPlanBalance = repayinfo.dPlanPayAmount
								- dBalanceRePayTmp;
						dBalanceRePayTmp = 0;
						// log4j.info("计划贷款余额=" + dBalanceRePayTmp);
					}
				} else {
					repayinfo.dPlanBalance = repayinfo.dPlanPayAmount;
				}
				if (repayinfo.lOVERDUEINFONEWID > 0) {
					// 作了逾期申请 **
					// repayinfo.lisOverDue = Constant.YesOrNo.YES;
					repayinfo.dFineAmount = rs.getDouble("MFINEAMOUNT"); // 罚息金额
					repayinfo.dFineInterestRate = rs
							.getDouble("MFINEINTERESTRATE");
					// 罚息利率
					repayinfo.tsFineDate = rs.getTimestamp("DTFINEDATE");
					// 罚息日期
					// 审核人ID
					repayinfo.lCheckUserID = rs.getLong("NNEXTCHECKUSERID");
				} else {
					// repayinfo.lisOverDue = Constant.YesOrNo.NO; //未作逾期申请
					repayinfo.dFineAmount = -1; // 罚息金额
					repayinfo.dFineInterestRate = -1; // 罚息利率
					repayinfo.tsFineDate = null; // 罚息日期
				}
				repayinfo.lOverdueStatusID = rs.getLong("NSTATUSID"); // 逾期状态
				if (repayinfo.lOVERDUEINFONEWID <= 0) {
					// log4j.info("overdueID<=0");
					Timestamp tsTodayTmp = null;
					Timestamp tsPlanDayTmp = null;

					// Boxu Update 2008年11月17日 计划还款时间比较不取数据库时间，用开机日
					// tsTodayTmp = DataFormat.getDateTime(con);
					tsTodayTmp = Env.getSystemDate(con, lOfficeID, lCurrencyID);

					tsPlanDayTmp = DataFormat.getDateTime(DataFormat
							.getDateString(repayinfo.tsPlanDate));
					// log4j.info("----------");
					// if ((tsPlanDayTmp.compareTo(tsTodayTmp)) < 0)
					if (DataFormat.getDateString(tsPlanDayTmp).compareTo(
							DataFormat.getDateString(tsTodayTmp)) <= 0) {
						log4j.info("表明是已逾期，没有提交逾期申请");
						// 表明是已逾期，但是还没有提交逾期申请！
						repayinfo.lOverdueStatusID = LOANConstant.OverDueStatus.YES;
					} else {
						log4j.info("表明没有逾期");
						repayinfo.lOverdueStatusID = LOANConstant.OverDueStatus.NOTYET;
						// 表明是还没有逾期，注意，这种状态下不能提交逾期申请！
					} // if(repayinfo.tsPlanDate.after(DataFormat.getDateTime(con)))
				} // if(repayinfo.lOVERDUEINFONEWID<=0)
				/**
				 * 如果是逾期的话就不用从lID判断该逾期的状态了， 因为它们的修改、复核状态可以从LOAN_OverdueForm表中读到
				 */
				log4j.info("out");
				v.addElement(repayinfo);
			} // */
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				throw new IException("Gen_E001");
			}
		}
		return v;
	}

	/**
	 * 查找逾期申请合同信息 lID是Loan_OverDueForm 表的ID标识 lPlanID是Loan_LoanFormPlanDetail
	 * 表的ID标识 数据库表 Loan_OverDueForm ,Loan_LoanFormPlanDetail
	 */
	public OverDueInfo findOverDueApplyByID(long lOverDueApplyID, long lPlanID)
			throws IException, RemoteException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";
		OverDueInfo info = new OverDueInfo();
		try {
			con = Database.getConnection();
			strSQL = " select  b1.sName as InputUserName "
					+ "  ,b2.sName as CheckUserName "
					+ "  ,e.SCONTRACTCODE,e.ID CONTRACTID "

					// added by mzh_fu 2007/11/28
					+ "  ,e.NSUBTYPEID subTypeID"

					+ "  ,h.sName as BorrowClientName "
					+ "  ,c.MAMOUNT, c.DTPLANDATE "
					+ "  ,d.sCode as LoanPayCode "
					+ "  ,a.* "
					+ " from LOAN_OVERDUEFORM a "
					+ " ,UserInfo b1 , UserInfo b2 "
					+ " ,LOAN_LOANCONTRACTPLANDETAIL c "
					+ " ,LOAN_PAYFORM d "
					+ " ,LOAN_Contractform e "
					+ " ,LOAN_LOANContractPlan f "
					+ " ,Client h "
					+ " where a.NINPUTUSERID=b1.id(+) "

					// modified by mzh_fu 2007/11/28
					// + " and a.NNEXTCHECKUSERID=b2.id(+) "

					// + " and a.nPlanID = c.ID(+) "
					+ " and a.nPayFormID=d.ID(+) "
					+ " and f.nContractID=e.ID(+) "
					+ " and e.nBorrowClientID = h.ID(+) "
					+ " and c.nContractPlanID=f.ID "
					// + " and a.nStatusID != "
					// + Constant.RecordStatus.INVALID
					+ " and c.nLastOverdueID=a.id(+) " + " and c.ID= "
					+ lPlanID;
			log4j.info("SQL= " + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next()) {
				log4j.info("findOverDueApplyByID--1--");
				// 合同编号
				info.setContractCode(rs.getString("SCONTRACTCODE"));
				info.setContractID(rs.getLong("CONTRACTID")); // 合同ID
				info.setBorrowClientName(rs.getString("BorrowClientName"));
				// 录入人姓名
				info.setInputUserID(rs.getLong("nInputUserID"));
				info.setInputUserName(rs.getString("InputUserName"));
				// 复核人姓名
				info.setCheckUserID(rs.getLong("NNEXTCHECKUSERID"));
				info.setCheckUserName(rs.getString("CheckUserName"));
				info.setAmount(rs.getDouble("MAMOUNT")); // 计划金额
				// 计划日期
				info.setPlanDate(rs.getTimestamp("DTPLANDATE"));
				// 计划余额 **如果是新增逾期申请，该参数从上一页中传入
				info.setPlanBalance(rs.getDouble("MPLANBALANCE"));
				// 罚息利率
				info.setFineInterestRate(rs.getDouble("MFINEINTERESTRATE"));
				// 是否复利
				info.setIsCompoundInterest(rs.getLong("NISCOMPOUNDINTEREST"));
				info.setFineAmount(rs.getDouble("MFINEAMOUNT")); // 罚息金额
				info.setFineDate(rs.getTimestamp("DTFINEDATE")); // 罚息日期
				info.setStatusID(rs.getLong("NSTATUSID")); // 逾期状态
				// 取消复核备注
				// info.m_strCheckNote = rs.getString("STRCHECKNOTE");
				// 逾期原因
				info.setOverDueReason(rs.getString("SOVERDUEREASON"));
				info.setLoanPayCode(rs.getString("LoanPayCode"));
				info.setLoanPayID(rs.getLong("nPayFormID"));
				info.setNextCheckLevel(rs.getLong("nNextCheckLevel"));

				// added by mzh_fu 2007/11/28
				info.setLoanSubTypeID(rs.getLong("subTypeID"));
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (SQLException e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				throw new IException("Gen_E001");
			}
		}
		// -----------------------
		return info;
	}

	/**
	 * 提交逾期申请，操作OverdueForm表 <br>
	 * 新增OverdueInfo表中的记录，ID取当前最大值，状态为已提交 <br>
	 * 将计划明细中的nIsOverdue置为“是”
	 * 
	 * @param lID
	 *            逾期申请标识 <=0：新增；>0：修改
	 * @param lContractID
	 *            合同标识
	 * @param lLoanPayNoticeID
	 *            合同标识
	 * @param lPlanID
	 *            计划明细标示
	 * @param dPlanBalance
	 *            计划余额
	 * @param dFineAmount
	 *            罚款金额
	 * @param dFineInterestRate
	 *            罚息利率
	 * @param lIsCompoundInterest
	 *            是否复利
	 * @param tsFineDate
	 *            罚息日期
	 * @param strOverdueReason
	 *            逾期原因
	 * @param lInputUserID
	 *            录入用户标识
	 * @param tsInputDate
	 *            录入日期
	 * @return 成功，返回新增逾期申请的标识 0数据库表操作错误 -1表明有计划正在作展期或逾期，不能再做逾期申请
	 *         -2表明该计划作过逾期，不能再作逾期了
	 */
	public long saveOverDueApply(long lID, long lCurrencyID, long lOfficeID,
			long lContractID, long lLoanPayNoticeID, long lPlanID,
			double dPlanBalance, double dFineAmount, double dFineInterestRate,
			long lIsCompoundInterest, Timestamp tsFineDate,
			String strOverdueReason, long lInputUserID, Timestamp tsInputDate)
			throws IException, RemoteException {
		long lResult = 0;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";
		long lPlanVersionID = -1;
		long lOverDueContractID = -1;
		long lSerialNO = -1;
		long lMaxID = -1;
		try {
			con = Database.getConnection();
			if (lID <= 0) // 新增
			{
				log4j.info("新增");
				// 得到计划的版本ID
				strSQL = "select a.ID,a.NCONTRACTID "
						+ " from LOAN_LOANCONTRACTPLAN a "
						+ " ,LOAN_LOANCONTRACTPLANDETAIL b  "
						+ " where  b.NCONTRACTPLANID=a.ID " + "    and b.id = "
						+ lPlanID;
				log4j.info("得到计划的版本ID SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					lPlanVersionID = rs.getLong(1);
					lOverDueContractID = rs.getLong(2);
					log4j.info("得到计划的ID=" + lPlanVersionID);
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				// 得到计划的版本是否是在使用中，被逾期、展期占用
				strSQL = " SELECT NISUSED FROM LOAN_LOANCONTRACTPLAN  "
						+ " WHERE NSTATUSID = 1 " + " AND ID= "
						+ lPlanVersionID;

				log4j.info(" SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					if (Constant.YesOrNo.YES == rs.getLong(1)) {
						// 表明该计划正在作展期或者逾期，不能被逾期
						lResult = -1;
					}
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (lResult == 0) {
					// 同一个计划细节不能作两次逾期
					strSQL = " SELECT ID FROM LOAN_OVERDUEFORM "
							+ " WHERE NPLANID = " + lPlanID
							+ " and nStatusID =" + Constant.RecordStatus.VALID
							+ "";
					log4j.info("不能作两次逾期 SQL=" + strSQL);
					ps = con.prepareStatement(strSQL);
					rs = ps.executeQuery();
					if (rs.next()) {
						lResult = -2;
						log4j.info("不能作两次逾期");
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					if (ps != null) {
						ps.close();
						ps = null;
					}
				}
				if (lResult == 0) {
					// 取得逾期申请表的最大ID
					strSQL = "SELECT NVL(MAX(ID)+1,1) ID "
							+ " FROM LOAN_OVERDUEFORM ";
					ps = con.prepareStatement(strSQL);
					rs = ps.executeQuery();
					if (rs.next()) {
						lMaxID = rs.getLong(1);
						// lID = lMaxID;
					} else {
						lResult = 0;
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					if (ps != null) {
						ps.close();
						ps = null;
					}
					// 加上办事处和币种
					ContractDao contractDao = new ContractDao();
					String overDueNo = "YQ-"
							+ contractDao.findContractInfoByID(lContractID)
									.getContractCode();
					strSQL = " INSERT INTO LOAN_OVERDUEFORM  "
							+ " (ID,OVERDUENO, NCURRENCYID, NOFFICEID, NCONTRACTID, MPLANBALANCE "
							+ " , MFINEAMOUNT,MFINEINTERESTRATE "
							+ " , DTFINEDATE,SOVERDUEREASON"
							+ " , NINPUTUSERID,DTINPUT,NSTATUSID  "
							+ " ,NPLANID,NISCOMPOUNDINTEREST "
							+ " ,NNEXTCHECKUSERID"
							+ " ,nPayFormID"
							+ " ,nNextCheckLevel"
							+ " )"
							+ " values(?,?,?,?,?,?,?,?,?,?,?,SYSDATE,?,?,?,?,?,1)";
					log4j.info("insert SQL" + strSQL);
					ps = con.prepareStatement(strSQL);
					int nIndex = 1;
					ps.setLong(nIndex++, lMaxID);
					ps.setString(nIndex++, overDueNo);
					ps.setLong(nIndex++, lCurrencyID);// 加上办事处和币种
					ps.setLong(nIndex++, lOfficeID);
					ps.setLong(nIndex++, lContractID);
					ps.setDouble(nIndex++, dPlanBalance);
					ps.setDouble(nIndex++, dFineAmount);
					ps.setDouble(nIndex++, dFineInterestRate);
					ps.setTimestamp(nIndex++, tsFineDate);
					ps.setString(nIndex++, strOverdueReason);
					ps.setLong(nIndex++, lInputUserID);
					ps.setLong(nIndex++, LOANConstant.OverDueStatus.SUBMIT);
					ps.setLong(nIndex++, lPlanID);
					ps.setLong(nIndex++, lIsCompoundInterest);
					ps.setLong(nIndex++, lInputUserID);
					ps.setLong(nIndex++, lLoanPayNoticeID);

					log4j.info("(" + lMaxID + "," + lContractID + ","
							+ dPlanBalance + "," + dFineAmount + ","
							+ dFineInterestRate + tsFineDate + ","
							+ strOverdueReason + "," + lInputUserID + ",1,"
							+ lPlanID + "," + lIsCompoundInterest + ")");

					lResult = ps.executeUpdate();

					if (ps != null) {
						ps.close();
						ps = null;
					}
					log4j.info("更新本条计划版本的的使用状态");
					// 更新本条计划的使用状态 nLastOverdueID
					strSQL = " UPDATE LOAN_LOANCONTRACTPLANDETAIL "
							+ " SET NLASTOVERDUEID=?  WHERE ID =  " + lPlanID;
					ps = con.prepareStatement(strSQL);
					ps.setLong(1, lMaxID);
					lResult = ps.executeUpdate();
					if (ps != null) {
						ps.close();
						ps = null;
					}
					log4j.info("更新本条计划的使用状态");
					// 更新本条计划版本的的使用状态 nIsUsed
					strSQL = " UPDATE LOAN_LOANCONTRACTPLAN "
							+ " SET NISUSED=? , NUSERTYPE=?  WHERE ID = "
							+ lPlanVersionID;
					ps = con.prepareStatement(strSQL);
					ps.setLong(1, Constant.YesOrNo.YES);
					ps.setLong(2, LOANConstant.PlanModifyType.OVERDUE);
					lResult = ps.executeUpdate();
					if (ps != null) {
						ps.close();
						ps = null;
					}
					if (con != null) {
						con.close();
						con = null;
					}
					if (lResult > 0) {
						lResult = lMaxID;
					}

				} // end if lResult ==0
			} else if (lID > 0) // 修改
			{
				strSQL = "SELECT ID FROM LOAN_OVERDUEFORM WHERE ID = ? "
						+ " AND NSTATUSID = ? ";
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lID);
				ps.setLong(2, LOANConstant.OverDueStatus.SUBMIT);
				rs = ps.executeQuery();
				if (rs.next()) {
					log4j.info("可以修改");
					lMaxID = rs.getLong(1);
				} else {
					lResult = 0;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (lMaxID > 0) {
					strSQL = " UPDATE LOAN_OVERDUEFORM SET "
							+ "   MFINEAMOUNT=? "
							+ " ,MFINEINTERESTRATE=? , DTFINEDATE=?"
							+ " ,SOVERDUEREASON=? " + " , NSTATUSID=? "
							+ " ,NISCOMPOUNDINTEREST =? " + " ,nPayFormID = ? "
							+ " WHERE ID =  " + lMaxID;

					log4j.info("修改 SQL = " + strSQL);
					ps = con.prepareStatement(strSQL);
					ps.setDouble(1, dFineAmount);
					ps.setDouble(2, dFineInterestRate);
					ps.setTimestamp(3, tsFineDate);
					ps.setString(4, strOverdueReason);
					ps.setLong(5, LOANConstant.OverDueStatus.SUBMIT);
					ps.setLong(6, lIsCompoundInterest);
					ps.setLong(7, lLoanPayNoticeID);
					lResult = ps.executeUpdate();
				}
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (SQLException e) {
			log4j.error(e.toString());
			// modified by mzh_fu 2007/08/07
			// throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} catch (Exception e) {
			log4j.error(e.toString());
			// modified by mzh_fu 2007/08/07
			// throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		// ------------------------
		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				// modified by mzh_fu 2007/08/07
				// throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
		}
		return lResult;
	}

	public long saveAndApprovalInitOverDueApply(long lID, long lCurrencyID,
			long lOfficeID, long lContractID, long lLoanPayNoticeID,
			long lPlanID, double dPlanBalance, double dFineAmount,
			double dFineInterestRate, long lIsCompoundInterest,
			Timestamp tsFineDate, String strOverdueReason, long lInputUserID,
			Timestamp tsInputDate, InutParameterInfo inutParameterInfo)
			throws IException, RemoteException {
		long lResult = 0;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";
		long lPlanVersionID = -1;
		long lOverDueContractID = -1;
		long lSerialNO = -1;
		long lMaxID = -1;
		try {
			con = Database.getConnection();
			if (lID <= 0) // 新增
			{
				log4j.info("新增");
				// 得到计划的版本ID
				strSQL = "select a.ID,a.NCONTRACTID "
						+ " from LOAN_LOANCONTRACTPLAN a "
						+ " ,LOAN_LOANCONTRACTPLANDETAIL b  "
						+ " where  b.NCONTRACTPLANID=a.ID " + "    and b.id = "
						+ lPlanID;
				log4j.info("得到计划的版本ID SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					lPlanVersionID = rs.getLong(1);
					lOverDueContractID = rs.getLong(2);
					log4j.info("得到计划的ID=" + lPlanVersionID);
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				// 得到计划的版本是否是在使用中，被逾期、展期占用
				strSQL = " SELECT NISUSED FROM LOAN_LOANCONTRACTPLAN  "
						+ " WHERE NSTATUSID = 1 " + " AND ID= "
						+ lPlanVersionID;

				log4j.info(" SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					if (Constant.YesOrNo.YES == rs.getLong(1)) {
						// 表明该计划正在作展期或者逾期，不能被逾期
						lResult = -1;
					}
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (lResult == 0) {
					// 同一个计划细节不能作两次逾期
					strSQL = " SELECT ID FROM LOAN_OVERDUEFORM "
							+ " WHERE NPLANID = " + lPlanID
							+ " and nStatusID =" + Constant.RecordStatus.VALID
							+ "";
					log4j.info("不能作两次逾期 SQL=" + strSQL);
					ps = con.prepareStatement(strSQL);
					rs = ps.executeQuery();
					if (rs.next()) {
						lResult = -2;
						log4j.info("不能作两次逾期");
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					if (ps != null) {
						ps.close();
						ps = null;
					}
				}
				if (lResult == 0) {
					// 取得逾期申请表的最大ID
					strSQL = "SELECT NVL(MAX(ID)+1,1) ID "
							+ " FROM LOAN_OVERDUEFORM ";
					ps = con.prepareStatement(strSQL);
					rs = ps.executeQuery();
					if (rs.next()) {
						lMaxID = rs.getLong(1);
						// lID = lMaxID;
					} else {
						lResult = 0;
					}
					if (rs != null) {
						rs.close();
						rs = null;
					}
					if (ps != null) {
						ps.close();
						ps = null;
					}
					// 加上办事处和币种
					ContractDao contractDao = new ContractDao();
					String overDueNo = "YQ-"
							+ contractDao.findContractInfoByID(lContractID)
									.getContractCode();
					strSQL = " INSERT INTO LOAN_OVERDUEFORM  "
							+ " (ID,OVERDUENO, NCURRENCYID, NOFFICEID, NCONTRACTID, MPLANBALANCE "
							+ " , MFINEAMOUNT,MFINEINTERESTRATE "
							+ " , DTFINEDATE,SOVERDUEREASON"
							+ " , NINPUTUSERID,DTINPUT,NSTATUSID  "
							+ " ,NPLANID,NISCOMPOUNDINTEREST "
							+ " ,NNEXTCHECKUSERID"
							+ " ,nPayFormID"
							+ " ,nNextCheckLevel"
							+ " )"
							+ " values(?,?,?,?,?,?,?,?,?,?,?,SYSDATE,?,?,?,?,?,1)";
					log4j.info("insert SQL" + strSQL);
					ps = con.prepareStatement(strSQL);
					int nIndex = 1;
					ps.setLong(nIndex++, lMaxID);
					ps.setString(nIndex++, overDueNo);
					ps.setLong(nIndex++, lCurrencyID);// 加上办事处和币种
					ps.setLong(nIndex++, lOfficeID);
					ps.setLong(nIndex++, lContractID);
					ps.setDouble(nIndex++, dPlanBalance);
					ps.setDouble(nIndex++, dFineAmount);
					ps.setDouble(nIndex++, dFineInterestRate);
					ps.setTimestamp(nIndex++, tsFineDate);
					ps.setString(nIndex++, strOverdueReason);
					ps.setLong(nIndex++, lInputUserID);
					ps.setLong(nIndex++, LOANConstant.OverDueStatus.SUBMIT);
					ps.setLong(nIndex++, lPlanID);
					ps.setLong(nIndex++, lIsCompoundInterest);
					ps.setLong(nIndex++, lInputUserID);
					ps.setLong(nIndex++, lLoanPayNoticeID);

					log4j.info("(" + lMaxID + "," + lContractID + ","
							+ dPlanBalance + "," + dFineAmount + ","
							+ dFineInterestRate + tsFineDate + ","
							+ strOverdueReason + "," + lInputUserID + ",1,"
							+ lPlanID + "," + lIsCompoundInterest + ")");

					lResult = ps.executeUpdate();

					if (ps != null) {
						ps.close();
						ps = null;
					}
					log4j.info("更新本条计划版本的的使用状态");
					// 更新本条计划的使用状态 nLastOverdueID
					strSQL = " UPDATE LOAN_LOANCONTRACTPLANDETAIL "
							+ " SET NLASTOVERDUEID=?  WHERE ID =  " + lPlanID;
					ps = con.prepareStatement(strSQL);
					ps.setLong(1, lMaxID);
					lResult = ps.executeUpdate();
					if (ps != null) {
						ps.close();
						ps = null;
					}
					log4j.info("更新本条计划的使用状态");
					// 更新本条计划版本的的使用状态 nIsUsed
					strSQL = " UPDATE LOAN_LOANCONTRACTPLAN "
							+ " SET NISUSED=? , NUSERTYPE=?  WHERE ID = "
							+ lPlanVersionID;
					ps = con.prepareStatement(strSQL);
					ps.setLong(1, Constant.YesOrNo.YES);
					ps.setLong(2, LOANConstant.PlanModifyType.OVERDUE);
					lResult = ps.executeUpdate();
					if (ps != null) {
						ps.close();
						ps = null;
					}
					// if (con != null)
					// {
					// con.close();
					// con = null;
					// }
					if (lResult > 0) {
						lResult = lMaxID;
					}

				} // end if lResult ==0
			} else if (lID > 0) // 修改
			{
				strSQL = "SELECT ID FROM LOAN_OVERDUEFORM WHERE ID = ? "
						+ " AND NSTATUSID = ? ";
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lID);
				ps.setLong(2, LOANConstant.OverDueStatus.SUBMIT);
				rs = ps.executeQuery();
				if (rs.next()) {
					log4j.info("可以修改");
					lMaxID = rs.getLong(1);
				} else {
					lResult = 0;
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (lMaxID > 0) {
					strSQL = " UPDATE LOAN_OVERDUEFORM SET "
							+ "   MFINEAMOUNT=? "
							+ " ,MFINEINTERESTRATE=? , DTFINEDATE=?"
							+ " ,SOVERDUEREASON=? " + " , NSTATUSID=? "
							+ " ,NISCOMPOUNDINTEREST =? " + " ,nPayFormID = ? "
							+ " WHERE ID =  " + lMaxID;

					log4j.info("修改 SQL = " + strSQL);
					ps = con.prepareStatement(strSQL);
					ps.setDouble(1, dFineAmount);
					ps.setDouble(2, dFineInterestRate);
					ps.setTimestamp(3, tsFineDate);
					ps.setString(4, strOverdueReason);
					ps.setLong(5, LOANConstant.OverDueStatus.SUBMIT);
					ps.setLong(6, lIsCompoundInterest);
					ps.setLong(7, lLoanPayNoticeID);
					lResult = ps.executeUpdate();
				}
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}

			if (lMaxID > 0) {

				inutParameterInfo.setTransID(String.valueOf(lMaxID));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl() + lMaxID);

				// 提交审批
				FSWorkflowManager.initApproval(inutParameterInfo);

				strSQL = "UPDATE LOAN_OVERDUEFORM SET NSTATUSID = ? WHERE ID = ?";

				ps = con.prepareStatement(strSQL);
				ps.setLong(1, LOANConstant.OverDueStatus.APPROVALING);
				ps.setLong(2, lMaxID);

				ps.executeUpdate();
			}

			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}

		} catch (SQLException e) {
			log4j.error(e.toString());
			// modified by mzh_fu 2007/08/07
			// throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} catch (Exception e) {
			log4j.error(e.toString());
			// modified by mzh_fu 2007/08/07
			// throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		// ------------------------
		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				// modified by mzh_fu 2007/08/07
				// throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
		}
		return lResult;
	}

	/**
	 * 取消逾期申请，操作OverdueForm表，改状态为已取消(无效) <br>
	 * 更改状态，如果当前状态不是未复核，返回错误信息 <br>
	 * 清除计划中关于逾期的信息，例如nIsOverdue等字段
	 * 
	 * @param lOverdueApplyID
	 *            逾期申请标识
	 * @return 1-成功， 0-操作失败 －1 状态不对
	 */
	public long cancelOverDueApply(long lOverDueApplyID, long lCurrencyID,
			long lOfficeID) throws IException, RemoteException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		long lStatusID = -1;
		long lContractID = -1;
		long lResult = -1;
		long lPlanDetailID = -1;
		long lPlanID = -1;

		// 定义相应操作常量
		// 贷款
		long lModuleID = Constant.ModuleType.LOAN;
		// 模块类型
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		long lActionID = Constant.ApprovalAction.OVERDUE_APPLY;

		long lApprovalID = -1;
		ApprovalDelegation appbiz = new ApprovalDelegation();

		try {
			// 连结数据库
			con = Database.getConnection();
			// 获得ApprovalID
			// lApprovalID = getApprovalID(lModuleID,lLoanTypeID,lActionID);
			// 获得审批表ApprovalID
			ApprovalDao appdao = new ApprovalDao(con);
			lApprovalID = appdao.getApprovalID(lModuleID, lLoanTypeID,
					lActionID, lOfficeID, lCurrencyID);
			log4j.info("approalID:" + lApprovalID);
			// 先删除以前的审核记录（物理删除）
			try {
				appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID, lActionID,
						lOfficeID, lCurrencyID, lOverDueApplyID, 1);
			} catch (Exception e) {
				log4j.error("" + e.getMessage());
				throw e;
			}
			strSQL = " SELECT a.NCONTRACTID,a.NSTATUSID "
					+ "  ,c.ID as PlanDetailID, b.ID PlanID "
					+ " FROM LOAN_OVERDUEFORM a, LOAN_LOANCONTRACTPLAN b  "
					+ " ,LOAN_LoanContractPlanDetail c "
					+ " WHERE a.NPLANID=c.ID " + " and c.nContractPlanID=b.ID "
					+ " AND a.ID= " + lOverDueApplyID;
			// fine overdue by ID
			log4j.info("overdue SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next()) {
				log4j.info("can cancel");
				lContractID = rs.getLong("NCONTRACTID");
				lStatusID = rs.getLong("NSTATUSID");
				lPlanDetailID = rs.getLong("PlanDetailID");
				lPlanID = rs.getLong("PlanID");
				lResult = 1;
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (!(lStatusID == LOANConstant.OverDueStatus.SUBMIT)) {
				log4j.info("status not right");
				lResult = -1;
			}
			if (lResult > 0) {
				// 删除本条记录
				strSQL = " Update LOAN_OVERDUEFORM " + " SET nStatusID ="
						+ Constant.RecordStatus.INVALID + " WHERE ID = ? " + "";
				log4j.info("逻辑删除本条记录 SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lOverDueApplyID);
				lResult = ps.executeUpdate();
				if (ps != null) {
					ps.close();
					ps = null;
				}
			}
			if (lResult > 0) {
				// 更新本条计划版本的使用状态 nIsUsed
				strSQL = " UPDATE LOAN_LOANCONTRACTPLAN SET NISUSED=? "
						+ ", NUSERTYPE=?  WHERE ID = " + lPlanID;
				log4j.info("更新本条计划的使用状态 SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, Constant.YesOrNo.NO);
				ps.setLong(2, LOANConstant.PlanModifyType.OVERDUE);
				lResult = ps.executeUpdate();
				if (ps != null) {
					ps.close();
					ps = null;
				}
			}
			if (lResult > 0) {
				// 更新本条计划细节的逾期状态 nLastOverdueID 为 -1
				strSQL = " UPDATE LOAN_LOANCONTRACTPLANDETAIL "
						+ " SET NLASTOVERDUEID=?  WHERE ID = " + lPlanDetailID;
				log4j.info("更新本条计划逾期状态 SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, -1);
				lResult = ps.executeUpdate();
				if (ps != null) {
					ps.close();
					ps = null;
				}
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (SQLException e) {
			log4j.error(e.toString());
			// modified by mzh_fu 2007/08/07
			// throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} catch (Exception e) {
			log4j.error(e.toString());
			// modified by mzh_fu 2007/08/07
			// throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		// -----------------------
		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				// modified by mzh_fu 2007/08/07
				// throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
		}
		return lResult;
	}

	/**
	 * 查找逾期申请合同信息 lID是Loan_OverDueForm 表的ID标识 lPlanID是Loan_LoanFormPlanDetail
	 * 表的ID标识 数据库表 Loan_OverDueForm ,Loan_LoanFormPlanDetail
	 * 
	 * public OverDueInfo findOverDueApplyByID(long lOverDueApplyID, long
	 * lPlanID) throws RemoteException { return null; }
	 * 
	 * 
	 * /** 查找贷款逾期处理，查找Loan_OverDueForm表
	 * 
	 * @param lCurrencyID
	 *            币种标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lUserID
	 *            查询人
	 * @param lContractTypeID
	 *            合同类型标识
	 * @param lActionID
	 *            动作，申请或者复核 lActionID 等于0为复核查找 等于1为复核查找
	 * @param lContractIDFrom
	 *            合同编号起始
	 * @param lContractIDTo
	 *            合同编号结束
	 * @param lClientID
	 *            贷款单位标识
	 * @param tsDateFrom
	 *            逾期处理日期起始
	 * @param tsDateTo
	 *            逾期处理日期结束
	 * @param lCheckStatusID
	 *            复核状态 逾期处理类型
	 */
	public Collection findOverDueApplyByMultiOption(long lCurrencyID,
			long lOfficeID, long lUserID, long lContractTypeID, long lActionID,
			long lContractIDFrom, long lContractIDTo, long lClientID,
			Timestamp tsDateFrom, Timestamp tsDateTo, long lCheckStatusID,
			long lPageLineCount, long lPageNo, long lOrderParam, long lDesc)
			throws IException, RemoteException {
		Vector v = new Vector();
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		int nIndex = 0;
		String strSQL = ""; // 主SQL语句
		String strSQL_Count = ""; // SQL计算语句
		String strSQL_Select = ""; // SQL查找语句
		String strSQL_Table = ""; // SQL的表以及其之间联系语句
		String strSQL_Option = ""; // SQL查找条件
		String strSQL_Order = ""; // SQL排序条件
		String strSQLTmp = "";
		long lRecordCount = -1; // 总记录数
		long lPageCount = -1; // 总页数
		long lRowNumStart = -1; // 开始记录
		long lRowNumEnd = -1; // 结束记录
		String strOverDueStatus = "";
		long lModuleID = Constant.ModuleType.LOAN;
		// 模块类型
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		long lOverdueActionID = Constant.ApprovalAction.OVERDUE_APPLY;
		try {
			con = Database.getConnection();
			strOverDueStatus = "" + LOANConstant.OverDueStatus.SUBMIT;
			strOverDueStatus += "," + LOANConstant.OverDueStatus.CHECK;
			/** ******** 查找满足条件的--逾期合同数目********* */
			strSQL_Count = " select count(*) ";
			strSQL_Table = "       from LOAN_CONTRACTFORM a,LOAN_OVERDUEFORM b "
					+ " ,Client c ,LOAN_LOANCONTRACTPLANDETAIL d "
					+ " ,LOAN_LOANCONTRACTPLAN e "
					+ " where c.ID=a.NBORROWCLIENTID "
					+ "   and b.NCONTRACTID = a.ID(+) "
					+ "   and d.NLASTOVERDUEID(+) = b.ID "
					+ "   and d.NCONTRACTPLANID = e.ID(+) "
					// + " and b.NNEXTCHECKUSERID = "
					// + lUserID
					+ "   and b.nplanid = d.id(+) "
					+ "   and b.nStatusID in ( " + strOverDueStatus + " ) ";
			/** ************设置查找条件**************** */
			/*
			 * if (lOfficeID > -1) { strSQL_Option += " and a.nOfficeID= " +
			 * lOfficeID; } if (lCurrencyID > -1) { strSQL_Option += " and
			 * a.nCurrencyID= " + lCurrencyID; } //
			 */
			if (lOfficeID > -1) {
				strSQL_Option += " and b.nOfficeID= " + lOfficeID;
			}
			if (lCurrencyID > -1) {
				strSQL_Option += " and b.nCurrencyID= " + lCurrencyID;
			}
			if (lContractTypeID > -1) // 贷款类型
			{
				strSQL_Option += " and a.nTypeID = " + lContractTypeID;
			}
			if (lContractIDFrom > -1) // 起始ID
			{
				strSQL_Option += " and a.ID>= " + lContractIDFrom;
			}
			if (lContractIDTo > -1) // 合同结束ID
			{
				strSQL_Option += " and a.ID<= " + lContractIDTo;
			}
			if (lClientID > -1) // 贷款单位
			{
				strSQL_Option += " and a.NBORROWCLIENTID= " + lClientID;
			}
			if (tsDateFrom != null) //
			{
				strSQL_Option += " and TO_CHAR(a.DTSTARTDATE,'yyyy-mm-dd') "
						+ " >= TO_CHAR(?,'yyyy-mm-dd') ";
			}
			if (tsDateTo != null) //
			{
				strSQL_Option += " and TO_CHAR(a.DTENDDATE,'yyyy-mm-dd') "
						+ " <= TO_CHAR(?,'yyyy-mm-dd') ";
			}
			ApprovalDelegation appBiz = new ApprovalDelegation();
			// 获得真正来审批这个记录的人（真实或传给的虚拟的人！）
			// 自营贷款,委托贷款,最高限额,银团贷款,买方信贷,其他
			LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
			long[] loanTypeId = { LOANConstant.LoanType.ZY,
					LOANConstant.LoanType.WT, LOANConstant.LoanType.ZGXE,
					LOANConstant.LoanType.YT, LOANConstant.LoanType.MFXD,
					LOANConstant.LoanType.OTHER };
			String strUserID = "";
			// strUserID =
			// appBiz.findTheVeryUser(lModuleID,lLoanTypeID,lOverdueActionID,lOfficeID,lCurrencyID,lUserID);
			long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(
					lOfficeID, lCurrencyID, loanTypeId);
			// 获取所有子类型
			if (lCheckStatusID > -1
					&& lCheckStatusID == LOANConstant.OverDueStatus.CHECK) {
				strSQL_Option += " and b.nStatusID= " + lCheckStatusID;
			} else {
				if (a_SubLoanType != null && a_SubLoanType.length > 0) {
					strSQL_Option += " and ( ";
					for (int i = 0; i < a_SubLoanType.length; i++) {
						strUserID = appBiz.findTheVeryUser(lModuleID,
								a_SubLoanType[i], lActionID, lOfficeID,
								lCurrencyID, lUserID);
						if (lCheckStatusID > -1) // 逾期合同状态
						{
							// 如果是提交状态 下一个审核人必须是当前登录人的逾期合同
							// 如果是审核完成 则所有审核状态的逾期合同
							if (lCheckStatusID == LOANConstant.OverDueStatus.SUBMIT) {
								strSQL_Option += " ( b.nStatusID= "
										+ lCheckStatusID;
								strSQL_Option += " and b.NNEXTCHECKUSERID in "
										+ strUserID + ")";
							}
						} else// 两种状态都不选，则把条件 或（or）起来
						{
							strSQL_Option += " ( ( ( b.nStatusID= "
									+ LOANConstant.OverDueStatus.SUBMIT;
							strSQL_Option += "      and b.NNEXTCHECKUSERID in "
									+ strUserID;
							strSQL_Option += "        )";
							strSQL_Option += " or     ( b.nStatusID= "
									+ LOANConstant.OverDueStatus.CHECK;
							strSQL_Option += "        )";
							strSQL_Option += "     ) )";
						}
						if (i < a_SubLoanType.length - 1)
							strSQL_Option += " or ";
						else
							strSQL_Option += " ) ";
					}
				} else {
					return null;
				}
			}
			strSQL = strSQL_Count + strSQL_Table + strSQL_Option;
			log4j.info("SQL=  " + strSQL);
			ps = con.prepareStatement(strSQL);
			nIndex = 1;
			if (tsDateFrom != null) //
			{
				ps.setTimestamp(nIndex, tsDateFrom);
				nIndex++;
			}
			if (tsDateTo != null) //
			{
				ps.setTimestamp(nIndex, tsDateTo);
				nIndex++;
			}
			rs = ps.executeQuery();
			if (rs.next()) {
				lRecordCount = rs.getLong(1); // 得到符合条件的记录数
			}
			// 计算总页数
			lPageCount = lRecordCount / lPageLineCount;
			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			log4j.info("符合条件的总记录数=" + lRecordCount);
			if (lRecordCount > 0) {
				// 返回结果集， 分页显示，显示下一页
				lRowNumStart = (lPageNo - 1) * lPageLineCount + 1; // 开始
				lRowNumEnd = lRowNumStart + lPageLineCount - 1; // 结束
				// ////////////////////////////////////////
				strSQL_Select = "Select b.id as OverDueID " // 逾期ID
						+ " ,a.sContractCode as ContractCode " // 合同编号
						+ " ,a.ID as ContractID "
						+ " ,e.NPLANVERSION OverDueApplyCode " // 逾期编号
						+ " ,b.NPLANID PlanDetailID " // 计划版本ID
						+ " ,e.id as PlanID "
						+ " ,c.sName as BorrowClientName " // 借款单位
						+ " ,b.MPLANBALANCE as PlanBalance " // 计划余额
						+ " ,b.MFINEAMOUNT as FineAmount " // 罚息金额
						+ " ,b.MFINEINTERESTRATE as Rate " // 罚息利率
						+ " ,b.NSTATUSID " // 状态
						+ " ,nvl(b.nNextCheckLevel,1) nNextCheckLevel "; // 下一个审核级别
				// +" ,a.DtStartDate,a.DtEndDate "; //贷款日期
				// --------------排序---------------//
				switch ((int) lOrderParam) {
				case 1: // 按合同编号排序
					strSQL_Order += " order by a.SCONTRACTCODE ";
					break;
				case 2: // 按逾期编号排序
					strSQL_Order += " order by e.NPLANVERSION ";
					break;
				case 3: // 按贷款单位排序
					strSQL_Order += " order by c.SNAME";
					break;
				case 4: // 按计划余额排序
					strSQL_Order += " order by b.MPLANBALANCE ";
					break;
				case 5: // 按罚息金额排序
					strSQL_Order += " order by b.MFINEAMOUNT ";
					break;
				case 6: // 按罚息利率排序
					strSQL_Order += " order by b.MFINEINTERESTRATE ";
					break;
				case 7: // 按逾期申请状态排序
					strSQL_Order += " order by b.nStatusID";
					break;
				default:
					strSQL_Order += "";
				}
				// 判断是升序还是降序，升序是系统默认的，降序是desc
				if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
					strSQL_Order += " desc ";
				}
				// 加上查找限制条件 加上排序条件 排序方式
				strSQL = "select * from ( select b.*, rownum num from " + " ( "
						+ strSQL_Select + strSQL_Table + strSQL_Option
						+ strSQL_Order + " ) b ) ";
				strSQL += " WHERE num BETWEEN ? AND ? "; // 当前页行记录范围
				log4j.info("  SQL = " + strSQL);
				ps = con.prepareStatement(strSQL);
				/** *********对条件赋值********** */
				nIndex = 1;
				if (tsDateFrom != null) //
				{
					ps.setTimestamp(nIndex, tsDateFrom);
					nIndex++;
				}
				if (tsDateTo != null) //
				{
					ps.setTimestamp(nIndex, tsDateTo);
					nIndex++;
				}
				ps.setLong(nIndex, lRowNumStart); // 给入起始行号
				nIndex++;
				ps.setLong(nIndex, lRowNumEnd); // 给入结束行号
				rs = ps.executeQuery();
				while (rs != null && rs.next()) {
					log4j.info("-----fineOverDueByMultiOption----");
					OverDueInfo info = new OverDueInfo();
					info.setContractID(rs.getLong("ContractID"));
					info.setID(rs.getLong("OverDueID"));
					log4j.info("ID=" + info.getID());
					// 合同编号OverDueApplyCode
					info.setContractCode(rs.getString("ContractCode"));
					// 逾期编号
					info.setOverDueApplyCode(rs.getString("OverDueApplyCode"));
					info.setPlanID(rs.getLong("PlanID"));
					info.setPlanVersionID(rs.getLong("PlanDetailID"));
					// 贷款单位
					info.setBorrowClientName(rs.getString("BorrowClientName"));
					// //计划余额
					info.setPlanBalance(rs.getDouble("PlanBalance"));
					info.setFineAmount(rs.getDouble("FineAmount"));
					// 罚息金额
					info.setFineInterestRate(rs.getDouble("Rate"));
					// 罚息利率
					// info.setFineDate(rs.getTimestamp(""));//罚息日期
					info.setStatusID(rs.getLong("NSTATUSID")); // 状态
					// 状态描述
					info.setStatus(LOANConstant.OverDueStatus.getName(info
							.getStatusID()));
					info.setPageCount(lPageCount); // 总页数
					// info.setAllRecord(lRecordCount);//总记录
					// 下一个审核级别
					info.setNextCheckLevel((rs.getLong("nNextCheckLevel")));
					// ////////////////////////////////////////
					v.addElement(info);
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				throw new IException("Gen_E001");
			}
		}
		return v.size() > 0 ? v : null;
	}

	/**
	 * 审核逾期申请，操作Loan_OverDueForm表 <br>
	 * 最后一级审核后，将对应的计划版本的nIsUsed置为“否”
	 * 
	 * @param long
	 *            lApprovalContentID 审批内容类型
	 * @param String
	 *            sOpinion 审批意见
	 * @param long
	 *            nUserID 审批人标示
	 * @param long
	 *            nNextUserID 下一个审批人标示
	 * @param long
	 *            lAction 审批，拒绝，修改，最后审批
	 * @return long 成功，返回值 == 1，失败，返回值 == -1
	 */
	public long checkOverDueApply(long lApprovalContentID, String sOpinion,
			long lUserID, long lNextUserID, long lAction, long lCurrencyID,
			long lOfficeID) throws IException, RemoteException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		long lResult = -1;
		String strSQL = ""; // 主SQL语句

		// 定义相应操作常量
		// 贷款
		long lModuleID = Constant.ModuleType.LOAN;
		// 模块类型
		// long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		long lActionID = Constant.ApprovalAction.OVERDUE_APPLY;

		String sContractID = LOANNameRef.getNameByID("ncontractid",
				"loan_overdueform", "id", String.valueOf(lApprovalContentID),
				null);
		long conID = -1;
		if (sContractID != null && sContractID.length() > 0) {
			conID = Long.valueOf(sContractID).longValue();
		}

		long lLoanTypeID = -1;
		String sSubType = LOANNameRef.getSubTypeByContractID(conID);
		if (sSubType != null && sSubType.length() > 0) {
			lLoanTypeID = Long.valueOf(sSubType).longValue();
		}

		long lMaxID = -1;
		long lSerialID = -1;
		long lStatusID = -1;
		long lResultID = -1;
		long lDeleteID = -1;
		long lApprovalID = -1;
		Timestamp dtFineDate = null;
		long lContractID = -1;
		long lLoanPayNoticeID = -1;
		// long lOBStatusID = 0;
		long lLevel = -1;

		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();

		try {
			con = Database.getConnection();
			// 获得ApprovalID,
			lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID,
					lActionID, lOfficeID, lCurrencyID);
			// 下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			// 审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);

			if (lAction == 1) // 拒绝
			{
				// 逻辑删除审批意见
				appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID, lActionID,
						lOfficeID, lCurrencyID, lApprovalContentID, 2);
				lStatusID = Constant.RecordStatus.INVALID;
				lResultID = Constant.ApprovalDecision.REFUSE;
				strSQL = "update loan_overdueform  set nStatusID="
						+ Constant.RecordStatus.INVALID + " where ID="
						+ lApprovalContentID;
				// 拒绝后需要做的操作
				log4j.info("拒绝后需要做的操作");
				lResult = changeOverDueStatus(lApprovalContentID,
						Constant.RecordStatus.INVALID);
				if (lResult <= 0) {
					if (rs != null) {
						rs.close();
						rs = null;
					}
					if (ps != null) {
						ps.close();
						ps = null;
					}
					if (con != null) {
						con.close();
						con = null;
					}
					// throw new IException("Loan_E106");
					// modified by mzh_fu 2007/08/07
					// throw new IException("Sett_E013");
					throw new IRollbackException(context, "Sett_E013");
				}
			}
			if (lAction == 2) // 审批
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0) {
					strSQL = "update loan_overdueform "
							+ "set nnextcheckuserid = " + lNextUserID
							+ ", nNextCheckLevel = " + lLevel + " where ID = "
							+ lApprovalContentID;
					Log.print("更新下一个审核级别（可越级）：" + lLevel);
				} else {
					strSQL = "update loan_overdueform "
							+ "set nnextcheckuserid = "
							+ lNextUserID
							+ ", nNextCheckLevel = nNextCheckLevel + 1 where ID = "
							+ lApprovalContentID;
					Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
				log4j.info("审批 ");
			}
			if (lAction == 3) // 审批&&最后
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.FINISH;
				strSQL = "update loan_overdueform set nnextcheckuserid="
						+ lNextUserID + ", nStatusID="
						+ LOANConstant.OverDueStatus.CHECK + " where ID = "
						+ lApprovalContentID;
				// 审批完成后需要做的操作
				log4j.info("审批完成后需要做的操作");
				lResult = changeOverDueStatus(lApprovalContentID,
						LOANConstant.OverDueStatus.CHECK);
				log4j.info("审批完成");
			}
			if (lAction == 4) // 修改
			{
				lStatusID = Constant.RecordStatus.VALID;
				// 装态也置为已提交
				lResultID = Constant.ApprovalDecision.RETURN;
				strSQL = " update loan_overdueform set "
						+ " nnextcheckuserid=ninputuserid, nStatusID="
						+ LOANConstant.OverDueStatus.SUBMIT
						+ ", nNextCheckLevel = 1 where ID="
						+ lApprovalContentID;
				log4j.info("修改");
			}
			log4j.info("审批意见 SQL： " + strSQL);
			ps = con.prepareStatement(strSQL);
			lResult = ps.executeUpdate();
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (lResult <= 0) {
				// throw new IException("Loan_E106");
				throw new IException("Sett_E013");
			}
			// ///////////////////////////////////////////////////////
			if (lAction != 1) // 不是拒绝
			{
				info.setModuleID(lModuleID);
				info.setLoanTypeID(lLoanTypeID);
				info.setActionID(lActionID);
				info.setApprovalContentID(lApprovalContentID);
				// info.setSerialID(lSerialID);
				info.setUserID(lUserID);
				info.setNextUserID(lNextUserID);
				info.setOpinion(sOpinion);
				info.setResultID(lResultID);
				info.setStatusID(lStatusID);
				info.setOfficeID(lOfficeID);
				info.setCurrencyID(lCurrencyID);
				appbiz.saveApprovalTracing(info);// 保存审批意见
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			// modified by mzh_fu 2007/08/07
			// throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				// modified by mzh_fu 2007/08/07
				// throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
		}
		return 1;
	}

	public long doApprovalOverDueApply(long lApprovalContentID, long lUserID,
			long lCurrencyID, long lOfficeID,
			InutParameterInfo inutParameterInfo) throws IException,
			RemoteException {

		long lResult = -1;

		try {
			InutParameterInfo returnInfo = new InutParameterInfo();
			// 提交审批
			returnInfo = FSWorkflowManager.doApproval(inutParameterInfo);

			// 如果是最后一级,且为审批通过,更新状态为已审批
			if (returnInfo.isLastLevel()) {
				lResult = changeOverDueStatus(lApprovalContentID,
						LOANConstant.OverDueStatus.CHECK);
				log4j.info("审批通过");

			}
			// 如果是最后一级,且为审批拒绝,更新状态为已保存
			else if (returnInfo.isRefuse()) {
				lResult = changeOverDueStatus(lApprovalContentID,
						LOANConstant.OverDueStatus.SUBMIT);
				log4j.info("审批拒绝");
			}else{
				lResult = LOANConstant.OverDueStatus.APPROVALING;
				log4j.info("审批中");
			}

		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IRollbackException(context, e.getMessage(), e);
		}

		return lResult;
	}

	/**
	 * 
	 * 审批流：取消审批方法
	 * 
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(OverDueInfo overDueInfo) throws RemoteException,
			IRollbackException {
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = overDueInfo
				.getInutParameterInfo();

		try {
			// 取消审批
			lReturn = changeOverDueStatus(overDueInfo.getID(),
					LOANConstant.OverDueStatus.SUBMIT);

			if (lReturn > 0) {
				// 将审批记录表内的该交易的审批记录状态置为无效
				if (inutParameterInfo.getApprovalEntryID() > 0) {
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}
			}
		} catch (Exception e) {
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return lReturn;
	}

	/*
	 * lApprovalContentID lStatusID 审批完成后需要做的操作
	 */

	private long changeOverDueStatus(long lApprovalContentID, long lStatusID)
			throws Exception {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";
		long lResult = -1;
		try {
			con = Database.getConnection();
			strSQL = "update loan_overdueform  set nStatusID=" + lStatusID// LOANConstant.OverDueStatus.CHECK
					+ " where ID=" + lApprovalContentID;
			log4j.info("" + strSQL);
			ps = con.prepareStatement(strSQL);
			lResult = ps.executeUpdate();
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (lResult > 0) {
				if (lStatusID == Constant.RecordStatus.INVALID) {

					strSQL = " update loan_loanContractPlan  set nIsUsed = "
							+ Constant.YesOrNo.NO
							+ " where ID="
							+ " ( select NCONTRACTPLANID from LOAN_OVERDUEFORM a "
							+ "   ,LOAN_LOANCONTRACTPLANDETAIL b "
							+ "   where b.ID=a.nPlanID " + "   and a.ID="
							+ lApprovalContentID + " ) ";
					log4j.info("" + strSQL);
					ps = con.prepareStatement(strSQL);
					lResult = ps.executeUpdate();
					if (ps != null) {
						ps.close();
						ps = null;
					}

				}
			}

			if (lResult > 0) {
				if (lStatusID == Constant.RecordStatus.INVALID) {
					// 更新本条计划版本的逾期状态 nLastOverdueID 为 -1
					strSQL = " UPDATE LOAN_LOANCONTRACTPLANDETAIL "
							+ " SET NLASTOVERDUEID=-1  WHERE ID = "
							+ " (select nPlanID from loan_overdueform "
							+ "  where ID=" + lApprovalContentID + "  )" + " ";
					log4j.info("更新本条计划逾期状态 SQL=" + strSQL);
					ps = con.prepareStatement(strSQL);
					lResult = ps.executeUpdate();
					if (ps != null) {
						ps.close();
						ps = null;
					}
				}
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}
		return lResult;
	}

	/*
	 * / 计算还款总额：lContractID：合同标识 private double getPlanBalance(long lContractID)
	 * throws Exception { double dRepayTotal = 0; Connection con = null;
	 * PreparedStatement ps = null; ResultSet rs = null; String strSQL="";
	 * 
	 * try { /**********（计划余额）已还金额************ con = Database.getConnection();
	 * strSQL = " select ncontractid,sum(mamount) repaytotal from " + " ( " + "
	 * select nloancontractid as ncontractid " + " ,DTINTERESTSTART,mamount " + "
	 * from SETT_transrepaymentloan " //+ " union " TODO ninghao 一发多收待定 //+ "
	 * select ncontractid,dtexecute,mamount " //+ " from transmultiloanrepayment " +" ) " + "
	 * where ncontractid = " + lContractID +" and DTINTERESTSTART <= sysdate " + "
	 * group by ncontractid " + ""; Log.print("SQL=" + strSQL); ps =
	 * con.prepareStatement(strSQL); rs = ps.executeQuery(); if (rs != null &&
	 * rs.next()) { dRepayTotal = rs.getDouble("REPAYTOTAL"); } if (rs != null) {
	 * rs.close(); rs = null; } if (ps != null) { ps.close(); ps = null; } if
	 * (con != null) { con.close(); con = null; } } catch (Exception ex) { if
	 * (rs != null) { rs.close(); rs=null; } if (ps != null) { ps.close();
	 * ps=null; } if (con != null) { con.close(); con=null; }
	 * log4j.error(ex.toString()); throw new IException("Gen_E001"); } finally {
	 * try { if (rs != null) { rs.close(); rs = null; } if (ps != null) {
	 * ps.close(); ps = null; } if (con != null) { con.close(); con = null; } }
	 * catch (Exception ex) { log4j.error(ex.toString()); throw new
	 * IException("Gen_E001"); } } return dRepayTotal; }//
	 */

	public OverDueInfo findOverDueApplyBaseInfoByID(long lOverDueApplyID)
			throws IException, RemoteException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";
		OverDueInfo info = new OverDueInfo();
		try {
			con = Database.getConnection();
			strSQL = " select  * from  LOAN_OVERDUEFORM where id  = ? ";

			log4j.info("SQL= " + strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lOverDueApplyID);

			rs = ps.executeQuery();
			if (rs != null && rs.next()) {
				info.setContractID(rs.getLong("NCONTRACTID")); // 合同ID
				info.setPlanID(rs.getLong("NPLANID"));

				// 录入人姓名
				info.setInputUserID(rs.getLong("nInputUserID"));

				info.setStatusID(rs.getLong("NSTATUSID")); // 逾期状态

				info.setLoanPayID(rs.getLong("NPAYFORMID"));
			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (SQLException e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				throw new IException("Gen_E001");
			}
		}
		// -----------------------
		return info;
	}
}
