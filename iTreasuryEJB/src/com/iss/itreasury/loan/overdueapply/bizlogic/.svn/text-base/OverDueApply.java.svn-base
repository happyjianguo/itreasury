package com.iss.itreasury.loan.overdueapply.bizlogic;

import java.rmi.RemoteException;
import java.sql.Timestamp;
import java.util.Collection;

import javax.ejb.EJBObject;

import com.iss.itreasury.loan.overdueapply.dataentity.OverDueInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */

public interface OverDueApply extends EJBObject {


/**
  * 合同查找，根据条件查询ContractForm和LoanForm表。
  * <br>lContractIDFrom和lContractIDTo，同一类型的合同的流水号的部分作为查询范围
  * <br>需要查录入人是lUserID的贷款合同
  * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
  * @param lType,      贷款类型
  * @param lCurrencyID 币种标识
  * @param lOfficeID 办事处标识
  * @param lUserID 操作人标识
  * @param lContractIDFrom 合同编号起始
  * @param lContractIDTo 合同编号结束
  * @param lClientID 借款单位标识
  * @param tsLoanStart 贷款日期起始
  * @param tsLoanEnd 贷款日期结束
  * @param lStatusID 合同状态
  * @return Collection ContractInfo
  * @exception Exception
  */
 public Collection findContractByMultiOption(
  long lType,
  long lCurrencyID,
  long lOfficeID,
  long lUserID,
  long lContractIDFrom,
  long lContractIDTo,
  long lClientID,
  Timestamp tsLoanStart,
  Timestamp tsLoanEnd,
  long lStatusID,
  long lPageLineCount,
  long lPageNo,
  long lOrderParam,
  long lDesc)
  throws IException, RemoteException;

/**
  * 合同查找，根据条件查询ContractForm和LoanForm表。
  * <br>lContractIDFrom和lContractIDTo，同一类型的合同的流水号的部分作为查询范围
  * <br>需要查录入人是lUserID的贷款合同
  * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
  * @param lType,      贷款类型
  * @param lCurrencyID 币种标识
  * @param lOfficeID 办事处标识
  * @param lUserID 操作人标识
  * @param lContractIDFrom 合同编号起始
  * @param lContractIDTo 合同编号结束
  * @param lClientID 借款单位标识
  * @param tsLoanStart 贷款日期起始
  * @param tsLoanEnd 贷款日期结束
  * @param lStatusID 合同状态
  * @return Collection ContractInfo
  * @exception Exception
  */
 public Collection findOverDueContractByMultiOption(
                          long lCurrencyID,
                          long lOfficeID,
                          long lUserID,
                          long lPageLineCount,
                          long lPageNo,
                          long lOrderParam,
                          long lDesc
        ) throws IException, RemoteException;

/**
   * 查找合同的最新版本还款计划。不翻页
   * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
   * @param lID CONTRACTPAYPLANVERSIONNEW的执行计划版本的ID
   * @return Collection
   * @exception RemoteException
   */
 public Collection findPlanByContract(long lID) throws IException, RemoteException;

 //Boxu Update 2008年11月17日 计划还款时间比较不取数据库时间，用开机日
 public Collection findPlanByContract(long lID, long lOfficeID, long lCurrencyID) throws IException, RemoteException;

/**
  * 提交逾期申请，操作OverdueForm表
  * <br>新增OverdueInfo表中的记录，ID取当前最大值，状态为已提交
  * <br>将计划明细中的nIsOverdue置为“是”
  * @param lID 逾期申请标识 <=0：新增；>0：修改
  * @param lContractID 合同标识
  * @param lLoanPayNoticeID 合同标识
  * @param lPlanID 计划明细标示
  * @param dPlanBalance 计划余额
  * @param dFineAmount 罚款金额
  * @param dFineInterestRate 罚息利率
  * @param lIsCompoundInterest 是否复利
  * @param tsFineDate 罚息日期
  * @param strOverdueReason 逾期原因
  * @param lInputUserID 录入用户标识
  * @param tsInputDate 录入日期
  * @return 成功，返回新增逾期申请的标识
      * 0数据库表操作错误
      * -1表明有计划正在作展期或逾期，不能再做逾期申请
      * -2表明该计划作过逾期，不能再作逾期了
  */
 public long saveOverDueApply(
  long lID,
  long lCurrencyID,//加上办事处和币种
  long lOfficeID,
  long lContractID,
  long lLoanPayNoticeID,
  long lPlanID,
  double dPlanBalance,
  double dFineAmount,
  double dFineInterestRate,
  long lIsCompoundInterest, 
  Timestamp tsFineDate,
  String strOverdueReason,
  long lInputUserID,
  Timestamp tsInputDate)
  throws IException, RemoteException;

/**
  * 取消逾期申请，操作OverdueForm表，改状态为已取消(无效)
  * <br>更改状态，如果当前状态不是未复核，返回错误信息
  * <br>清除计划中关于逾期的信息，例如nIsOverdue等字段
  * @param lOverdueApplyID 逾期申请标识
  * @return 1-成功，
      * 0-操作失败
      * －1 状态不对
  */
 public long cancelOverDueApply(long lOverDueApplyID,long lCurrencyID,long lOfficeID) throws IException, RemoteException;

 /**查找逾期申请合同信息
  * lID是Loan_OverDueForm 表的ID标识
  * lPlanID是Loan_LoanFormPlanDetail 表的ID标识
  * 数据库表 Loan_OverDueForm ,Loan_LoanFormPlanDetail 
 */
 public OverDueInfo findOverDueApplyByID(long lOverDueApplyID, long lPlanID) throws IException, RemoteException;


 /**
  * 查找贷款逾期处理，查找Loan_OverDueForm表
  * @param lCurrencyID 币种标识
  * @param lOfficeID 办事处标识
  * @param lUserID 查询人
  * @param lContractTypeID 合同类型标识
  * @param lActionID 动作，申请或者复核   lActionID 等于0为复核查找 等于1为复核查找
  * @param lContractIDFrom 合同编号起始
  * @param lContractIDTo 合同编号结束
  * @param lClientID 贷款单位标识
  * @param tsDateFrom 逾期处理日期起始
  * @param tsDateTo 逾期处理日期结束
  * @param lCheckStatusID 复核状态  逾期处理类型
  */
 public Collection findOverDueApplyByMultiOption(
  long lCurrencyID,
  long lOfficeID,
  long lUserID,
  long lContractTypeID,
  long lActionID,
  long lContractIDFrom,
  long lContractIDTo,
  long lClientID,
  Timestamp tsDateFrom,
  Timestamp tsDateTo,
  long lCheckStatusID,
  long lPageLineCount,
  long lPageNo,
  long lOrderParam,
  long lDesc)
  throws IException, RemoteException;


 /**
  * 审核逾期申请，操作Loan_OverDueForm表
  * <br>最后一级审核后，将对应的计划版本的nIsUsed置为“否”
  * @param     long        nReviewContentID      审批内容类型
  * @param     String      sOpinion              审批意见
  * @param     long        nUserID               审批人标示
  * @param     long        nNextUserID           下一个审批人标示
  * @param     long        lAction               审批，拒绝，修改，最后审批
  * @return    long        成功，返回值 == 1，失败，返回值 == -1
  */
 public long checkOverDueApply(
  	long lApprovalContentID,
	String sOpinion,
	long lUserID,
	long lNextUserID,
	long lAction,
	long lCurrencyID,
	long lOfficeID)
  throws IException, RemoteException;

 public long saveAndApprovalInitOverDueApply(
         long lID,
 		long lCurrencyID,
 		long lOfficeID,
         long lContractID,
         long lLoanPayNoticeID,
         long lPlanID,
         double dPlanBalance,
         double dFineAmount,
         double dFineInterestRate,
         long lIsCompoundInterest,
         Timestamp tsFineDate,
         String strOverdueReason,
         long lInputUserID,
         Timestamp tsInputDate,InutParameterInfo inutParameterInfo)
         throws IException, RemoteException;
 
 public long doApprovalOverDueApply(long lApprovalContentID, long lUserID,
			long lCurrencyID, long lOfficeID,
			InutParameterInfo inutParameterInfo) throws IException,
			RemoteException;
 
 public OverDueInfo findOverDueApplyBaseInfoByID(long lOverDueApplyID)
	throws IException, RemoteException ; 
 
 public long cancelApproval(OverDueInfo overDueInfo)throws RemoteException, IRollbackException;
}
