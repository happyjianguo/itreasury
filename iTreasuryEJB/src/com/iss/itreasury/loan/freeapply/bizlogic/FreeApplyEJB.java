package com.iss.itreasury.loan.freeapply.bizlogic;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.ebank.util.OBConstant;
import com.iss.itreasury.loan.aheadrepaynotice.dao.AheadRepayNoticeDao;
import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.discount.dataentity.DiscountLoanInfo;
import com.iss.itreasury.loan.freeapply.dao.FreeApplyDao;
import com.iss.itreasury.loan.freeapply.dataentity.FreeApplyInfo;
import com.iss.itreasury.loan.freeapply.dataentity.FreeApplyQueryInfo;
import com.iss.itreasury.loan.leasehold.dao.LoanAssureChargeFormDao;
import com.iss.itreasury.loan.leasehold.dataentity.LeaseholdRepayNoticeInfo;
import com.iss.itreasury.loan.loanapply.dao.LoanApplyDao;
import com.iss.itreasury.loan.obinterface.dao.OBFreeDao;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.loan.util.LOANNameRef;
import com.iss.itreasury.settlement.util.NameRef;
import com.iss.itreasury.system.approval.dao.ApprovalDao;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.system.logger.dataentity.LoggerBtnLevelInfo;
import com.iss.itreasury.system.logger.dataentity.LoggerResults;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
;
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public class FreeApplyEJB implements SessionBean
{
    /* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */
    /**
     * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(SessionContext context)
    {
        this.context = context;
    }
    private SessionContext context;
    /**
     * No argument constructor required by container.
     */
    public FreeApplyEJB()
    {
    }
    /**
     * Create method specified in EJB 1.1 section 6.10.3
     */
    public void ejbCreate()
    {
    }
    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate()
    {
    }
    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate()
    {
    }
    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove()
    {
    }
    private Log4j log4j = new Log4j(Constant.ModuleType.LOAN, this); //
    /**
     * 保存免还申请，操作Loan_FreeForm 表
     * @param lFreeApplyID 免还申请标识 ，如果<=0新增，否则修改
     * @param lPayFormID 合同标识//现在是放款单标识
     * @param dLoanAmount 贷款金额
     * @param lIntervalNum 年期
     * @param dLoanBalance 贷款余额
     * @param tsEnd 到期日
     * @param dFreeAmount 免还金额
     * @param strConsignAccoutn,委托账户
     * @param tsFreeDate 免还日期
     * @param strFreeReason 免还原因
     * @param dInterest 免还利息
     * @param lInputUserID   录入人
     * @param tsInputDate    录入时间
     * /
    public long saveFreeApply(int nTypeID, long lFreeApplyID, long lPayFormID, double dLoanAmount, long lIntervalNum, double dLoanBalance, Timestamp tsEnd, double dFreeAmount, String sConsignAccount, Timestamp tsFreeDate, String strFreeReason, double dInterest, long lInputUserID, Timestamp tsInputDate) throws IException, RemoteException
    {
        long lResult = -1;
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int nIndex = 0;
        String strSQL = ""; //主SQL语句
        long lMaxID = -1;
        long lStatusID = -1;
        long lContractID = 1;
        String strFreeApplyCode ="";

        //定义相应操作常量
        //贷款
        long lModuleID = Constant.ModuleType.LOAN;
        //模块类型
        long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
        long lActionID = Constant.ApprovalAction.FREE_APPLY;


        long lApprovalID = -1;
        ApprovalDelegation appbiz = new ApprovalDelegation();
        ApprovalDao appdao = new ApprovalDao(con);
        
        try
        {            
            //连结数据库
            con = Database.getConnection();
            if (lFreeApplyID <= 0) //新增
            {
                log4j.info("免还新增");
                strSQL = "select nContractID  "
                        +" from loan_payform "
                        +" where ID = "+lPayFormID;
                log4j.info("查找放款单的对应合同ID SQL"+strSQL);        
                ps = con.prepareStatement(strSQL);
                rs = ps.executeQuery();
                if (rs.next())
                {
                    lContractID = rs.getLong(1);
                    log4j.info("合同ID" + lContractID);
                }
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                strFreeApplyCode=getFreeApplyCode(lContractID);
                //首先获得免还的新id
                strSQL = "select nvl(max(ID)+1,1) ID from loan_freeForm ";
                ps = con.prepareStatement(strSQL);
                rs = ps.executeQuery();
                if (rs.next())
                {
                    lMaxID = rs.getLong("ID");
                    log4j.info("增加免还，获得免还ID" + lMaxID);
                }
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                ///////////////////////新增//////////////////////////
                if (lMaxID > 0)
                {
                    strSQL =
                        "insert into loan_freeForm ( "
                            + " ID, nContractID,nPayFormID "//
                            + " , mFreeAmount, dtFreeDate, mInterest "
                            + " , sFreeReason, sAccountNo, nInputUserID "
                            + " ,nNextCheckUserID, dtInputDate, nStatusID "
                            + " ,sCode,nNextCheckLevel"
                            + " ) "
                            + " values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE,?,?,1)";
                    log4j.info("免还新增 SQL" + strSQL);
                    ps = con.prepareStatement(strSQL);
                    nIndex = 1;
                    ps.setLong(nIndex, lMaxID);
                    nIndex++;
                    ps.setLong(nIndex, lContractID);
                    nIndex++;
                    ps.setLong(nIndex, lPayFormID);
                    nIndex++;
                    ps.setDouble(nIndex, dFreeAmount);
                    nIndex++;
                    ps.setTimestamp(nIndex, tsFreeDate);
                    nIndex++;
                    ps.setDouble(nIndex, dInterest);
                    nIndex++;
                    ps.setString(nIndex, strFreeReason);
                    nIndex++;
                    ps.setString(nIndex, sConsignAccount);
                    nIndex++;
                    ps.setLong(nIndex, lInputUserID);
                    nIndex++;
                    ps.setLong(nIndex, lInputUserID);
                    nIndex++;
                    ps.setLong(nIndex, Constant.RecordStatus.VALID);
                    nIndex++;
                    ps.setString(nIndex, strFreeApplyCode);
                    lResult = ps.executeUpdate();
                    if (ps != null)
                    {
                        ps.close();
                        ps = null;
                    }
                    if (lResult < 0)
                    {
                        log4j.info("新增失败，返回值：" + lResult);
                        lResult = -1;
                    }
                    else
                    {
                        lResult = lMaxID;
                    }
                } //end lMaxID>0  可以新增
            }
            else //lFreeApplyID > 0 修改
            {                
                //---------是否审核后重新提交-------------//
                //首先获得免还的状态
                strSQL = "select nStatusID from loan_freeForm "
                        +" where ID = "+lFreeApplyID;
                ps = con.prepareStatement(strSQL);
                rs = ps.executeQuery();
                if (rs.next())
                {
                    lStatusID = rs.getLong("nStatusID");
                    log4j.info("获得免还的状态:" + lStatusID);
                }
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if(lStatusID==LOANConstant.FreeApplyStatus.CHECK)
                {
                    //获得ApprovalID
                    lApprovalID = appdao.getApprovalID(lModuleID,lLoanTypeID,lActionID);
                    //--------如果是审核后重新提交--------//
                    try
                    {
                        //删除以前的审核意见记录（物理删除）
                        appbiz.deleteApprovalTracing(lApprovalID, lFreeApplyID, 1);
                        log4j.info("删除以前的审核意见记录（物理删除）");
                    }
                    catch(Exception e)
                    {
                        log4j.error(e.toString());
                        throw new IException("Gen_E001");
                    }
                }
                
                //-----------------修改-------------------//
                strSQL =
                    " Update loan_freeForm  "
                        + " set mFreeAmount = ? "
                        + "   , dtFreeDate = ? "
                        + "   , mInterest = ? "
                        + "   , sFreeReason = ? "
                        + "   , sAccountNo = ? "                    
                        //+ "   , nInputUserID = ? "
                        + "   , nNextCheckUserID = ? "
                        + "   , nStatusID = ? " 
                        + "   , nNextCheckLevel = 1 "
                        + " where ID = " +lFreeApplyID
                        + " ";
                log4j.info("免还修改 SQL" + strSQL);
                ps = con.prepareStatement(strSQL);
                nIndex = 1;
                ps.setDouble(nIndex, dFreeAmount);
                nIndex++;
                ps.setTimestamp(nIndex, tsFreeDate);
                nIndex++;
                ps.setDouble(nIndex, dInterest);
                nIndex++;
                ps.setString(nIndex, strFreeReason);
                nIndex++;
                ps.setString(nIndex, sConsignAccount);
                nIndex++;
                ps.setLong(nIndex, lInputUserID);
                nIndex++;
                ps.setLong(nIndex, LOANConstant.FreeApplyStatus.SUBMIT);
                //nIndex++;
                lResult = ps.executeUpdate();
                if (lResult < 0)
                {
                    log4j.info("修改失败，返回值：" + lResult);
                    lResult = -1;
                }
                else
                {
                    lResult = lFreeApplyID;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
            }
            con.close();
            con = null;
        }
        catch (SQLException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        //////////////////////////////////////////
        finally
        {
            try
            {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (Exception e)
            {
                log4j.error(e.toString());
                throw new IException("Gen_E001");
            }
        }
        return lResult;
    }
    /**
     * 查询免还，操作Loan_FreeForm 表
    	 * @param ID 免还申请标示
     */
    public FreeApplyInfo findFreeApplyByID(long ID) throws IException,RemoteException
    {
        FreeApplyInfo Info = null;
     
        try
        {
			FreeApplyDao dao = new FreeApplyDao();
			Info = dao.findFreeApplyByID(ID);
        } 
        catch (Exception e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        ///////////////////////////////////////////       
        return Info;
    }
    /**
     * 查询免还，操作Loan_FreeForm 表
     * @param lOfficeID 办事处标识
     * @param lUserID 用户标识
     * @param lActionID 动作类型，提交链结查找，或者复核链接查找
     * @param lContractIDFrom 借款合同编号（由）
     * @param lContractIDTo 借款合同编号（到）
     * @param lClientID 借款单位标识
     * @param dAmountFrom 金额（由）
     * @param dAmountTo 金额（到）
     * @param tsFrom 贷款期限（由）
     * @param tsTo 贷款期限（到）
     * @param lIntervalNum 期限（月）
     * @param lStatusID 状态
     * 
     * @param lPageLineCount 行数
     * @param lPageNo 页码
     * @param lOrderParam  排序列
     * @param lDesc 顺序
     * /
    public Collection findFreeApplyByMultiOption(
        int nType,
        long lOfficeID,
        long lUserID,
        long lActionID,
        long lContractIDFrom,
        long lContractIDTo,
        long lClientID,
        double dAmountFrom,
        double dAmountTo,
        Timestamp tsFrom,
        Timestamp tsTo,
        long lIntervalNum,
        long lStatusID,
        long lPageLineCount,
        long lPageNo,
        long lOrderParam,
        long lDesc)
        throws IException,RemoteException
    {
        Vector vReturn = new Vector(); //当前页结果集
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int nIndex = 0;
        String strSQL = ""; //主SQL语句
        String strSQL_Count = ""; //SQL计算语句
        String strSQL_Select = ""; //SQL查找语句
        String strSQL_Table = ""; //SQL的表以及其之间联系语句
        String strSQL_Option = ""; //SQL查找条件
        String strSQL_Order = ""; //SQL排序条件
        long lRecordCount = -1; //总记录数
        //double dLoanSum = 0.0; //满足条件的合同贷款总金额
        long lPageCount = -1; //总页数
        long lRowNumStart = -1; //开始记录
        long lRowNumEnd = -1; //结束记录
        //定义相应操作常量
        //贷款
        long lModuleID = Constant.ModuleType.LOAN;
        //模块类型
        long lLoanTypeID = (long)nType;
        long lFreeActionID = Constant.ApprovalAction.FREE_APPLY;
        try
        {
            log4j.info("查询免还");
            con = Database.getConnection();
            strSQL_Count = " select count(*) ";
            strSQL_Table =
                "    from loan_freeForm a "
                    + "      ,loan_contractForm b,CLIENT c "
                    +"       ,loan_payForm d "
                    + "      ,UserInfo u1,UserInfo u2 "
                    + " where a.nContractID=b.ID(+)  "
                    + "   and b.NBORROWCLIENTID=c.ID(+) "
                    +"    and a.nPayFormID=d.ID "
                    + "   and a.nInputUserID=u1.ID(+) "
                    + "   and a.nNextCheckUserID=u2.ID(+) "
                    + "";
            strSQL_Option = " ";
            if (nType > -1)
            {
                strSQL_Option += " and b.nTypeID = " + nType;
            }
            if (lOfficeID > -1)
            {
                strSQL_Option += " and b.nOfficeID = " + lOfficeID;
            }
            if (lContractIDFrom > -1)
            {
                strSQL_Option += " and b.ID >= " + lContractIDFrom;
            }
            if (lContractIDTo > -1)
            {
                strSQL_Option += " and b.ID <= " + lContractIDTo;
            }
            if (lClientID > -1)
            {
                strSQL_Option += " and b.NBORROWCLIENTID = " + lClientID;
            }
            if (dAmountFrom > 0)
            {
                strSQL_Option += " and b.MEXAMINEAMOUNT >= ? ";
            }
            if (dAmountTo > 0)
            {
                strSQL_Option += " and b.MEXAMINEAMOUNT <= ? ";
            }
            if (tsFrom != null)
            {
                strSQL_Option += " and TO_CHAR(b.DTSTARTDATE,'yyyy-mm-dd') "
                    + " >= TO_CHAR(?,'yyyy-mm-dd') ";
            }
            if (tsTo != null)
            {
                strSQL_Option += " and TO_CHAR(b.DTENDDATE,'yyyy-mm-dd') "
                    + " <= TO_CHAR(?,'yyyy-mm-dd') ";
            }
            if (lIntervalNum > 0)
            {
                strSQL_Option += " and b.nIntervalNum = " + lIntervalNum;
            }
            if(lActionID==LOANConstant.FreeApplyStatus.SUBMIT)//修改查找
            {
                strSQL_Option += " and a.nStatusID= " 
                              + LOANConstant.FreeApplyStatus.SUBMIT;
                //strSQL_Option += " and a.nNextCheckUserID= " + lUserID;
                strSQL_Option += " and a.nNextCheckLevel = 1 ";
                strSQL_Option += " and a.nInputUserID= " + lUserID;
            }
            else if(lActionID==LOANConstant.FreeApplyStatus.CHECK)//审核查找
            {
                ApprovalDelegation appBiz = new ApprovalDelegation();
                //获得真正来审批这个记录的人（真实或传给的虚拟的人！）
                String strUserID = "";
                strUserID = appBiz.findTheVeryUser(lModuleID,lLoanTypeID,lFreeActionID,lUserID);
                if (lStatusID > -1) //免还状态
                {
                    //如果是提交状态 录入人、下一个审核人必须是当前登录人的逾期合同
                    //如果是审核完成 则所有审核状态的逾期合同
                    if (lStatusID == LOANConstant.FreeApplyStatus.SUBMIT)
                    {
                        strSQL_Option += " and a.nStatusID= " + lStatusID;
                        strSQL_Option += " and a.nNextCheckUserID in " + strUserID;//lUserID;
                    }
                    //如果是审核完成 则所有审核状态的逾期合同
                    else if (lStatusID == LOANConstant.FreeApplyStatus.CHECK)
                    {
                        strSQL_Option += " and a.nStatusID= " + lStatusID;
                    }
                }
                else //两种状态都不选，则把条件 或（or）起来
                {
                    strSQL_Option += " and ( ( a.nStatusID= "
                        + LOANConstant.FreeApplyStatus.SUBMIT;
                    strSQL_Option += "      and a.NNEXTCHECKUSERID in " + strUserID;//lUserID;
                    strSQL_Option += "        )";
                    strSQL_Option += " or     ( a.nStatusID= "
                                  + LOANConstant.FreeApplyStatus.CHECK;
                    strSQL_Option += "        )";
                    strSQL_Option += "       ) ";
                }
            }
            strSQL = strSQL_Count + strSQL_Table + strSQL_Option;
            log4j.info("  SQL=  " + strSQL);
            ps = con.prepareStatement(strSQL);
            //查找条件设置
            nIndex = 1;
            if (dAmountFrom > 0 )
            {
                ps.setDouble(nIndex, dAmountFrom);
                nIndex++;
            }
            if (dAmountTo > 0 )
            {
                ps.setDouble(nIndex, dAmountTo);
                nIndex++;
            }
            if (tsFrom != null) //
            {
                ps.setTimestamp(nIndex, tsFrom);
                nIndex++;
            }
            if (tsTo != null) //
            {
                ps.setTimestamp(nIndex, tsTo);
                nIndex++;
            }
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                lRecordCount = rs.getLong(1); //得到总记录数
                log4j.info("记录数=" + lRecordCount);
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            //计算总页数
            lPageCount = lRecordCount / lPageLineCount;
            if ((lRecordCount % lPageLineCount) != 0)
            {
                lPageCount++;
            }
            log4j.info("总记录数=" + lRecordCount);
            log4j.info("总页数=" + lPageCount);
            if (lRecordCount > 0)
            {
                //返回结果集， 分页显示，显示下一页
                lRowNumStart = (lPageNo - 1) * lPageLineCount + 1; //开始
                lRowNumEnd = lRowNumStart + lPageLineCount - 1; //结束
                if (lRowNumEnd > lRecordCount)
                {
                    lRowNumEnd = lRecordCount;
                }
                switch ((int) lOrderParam)
                {
                    case 1 : //按合同编号排序
                        strSQL_Order += " order by b.sContractCode ";
                        break;
                    case 2 : //放款编号
                        strSQL_Order += " order by d.sCode ";
                        break;
                    case 3 : //免还编号
                        strSQL_Order += " order by a.sCode ";
                        break;
                    case 4 : //按贷款单位名称排序
                        strSQL_Order += " order by c.sName ";
                        break;
                    case 5 : //按贷款金额排序
                        strSQL_Order += " order by b.MEXAMINEAMOUNT ";
                        break;
                    case 6 : //按贷款余额排序
                        strSQL_Order += " order by a.mFreeAmount ";
                        break;
                    case 7 : //按贷款日期排序
                        strSQL_Order += " order by b.dtStartDate ";
                        break;
                    case 8 : //按贷款期限排序
                        strSQL_Order += " order by b.nIntervalNum ";
                        break;
                    case 9 : //按免还申请状态排序
                        strSQL_Order += " order by a.nStatusID ";
                        break;
                    default :
                        strSQL_Order += "";
                }
                if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
                {
                    strSQL_Order += " desc ";
                }
                ///////////////////////////////////////////////////////////
                    strSQL_Select = " select a.ID as FreeApplyID " //免还ID
                +" ,a.sCode as FreeCode " //免还编号
                +" ,a.nContractID as ContractID " //合同ID
                +" ,b.sContractCode as ContractCode " //合同编号
                +" ,d.ID as LoanPayID "
                +" ,d.sCode as LoanPayCode "
                +" ,b.mLoanAmount " //贷款金额
                +" ,b.MEXAMINEAMOUNT"//批准金额
                +" ,b.nIntervalNum "//贷款期限
                +" ,b.dtStartDate,b.dtEndDate  "//贷款日期
                +" ,a.mFreeAmount " //
                +" ,a.dtFreeDate "
                + " ,a.mInterest "
                + " ,a.sAccountNo "
                + " ,a.sFreeReason "
                + " ,a.nStatusID "
                + " ,a.nInputUserID "
                + " ,u1.sName as InputUserName "
                + " ,a.nNextCheckUserID "
                + " ,u2.sName as CheckUserName "
                + " ,c.sName as ClientName " //借款单位
                + " ,nvl(a.nNextCheckLevel,1) nNextCheckLevel " //下一个审核级别
                +"  ";
                strSQL =
                      " select * from ( select b.*, rownum num from "
                    + " ( "
                    + strSQL_Select
                    + strSQL_Table
                    + strSQL_Option
                    + strSQL_Order
                    + " ) b )"
                    + " WHERE num BETWEEN ? AND ? "; 
                    //strSQL_Select+strSQL_Table+strSQL_Option+strSQL_Order;
                log4j.info("免还查找信息 SQL: "+strSQL);
                ps = con.prepareStatement(strSQL);
                //查找条件设置
                nIndex = 1;
                if (dAmountFrom > 0)
                {
                    ps.setDouble(nIndex, dAmountFrom);
                    nIndex++;
                }
                if (dAmountTo > 0)
                {
                    ps.setDouble(nIndex, dAmountTo);
                    nIndex++;
                }
                if (tsFrom != null) //
                {
                    ps.setTimestamp(nIndex, tsFrom);
                    nIndex++;
                }
                if (tsTo != null) //
                {
                    ps.setTimestamp(nIndex, tsTo);
                    nIndex++;
                }
                ps.setLong(nIndex, lRowNumStart); //给入起始行号
                nIndex++;
                ps.setLong(nIndex, lRowNumEnd); //给入结束行号
                rs = ps.executeQuery();
                while(rs != null && rs.next())
                {
                    FreeApplyInfo Info = new FreeApplyInfo();
                    Info.setID(rs.getLong("FreeApplyID"));
                    Info.setFreeCode(rs.getString("FreeCode"));
                    Info.setContractID(rs.getLong("ContractID"));
                    Info.setContractCode(rs.getString("ContractCode"));
                    Info.setLoanPayID(rs.getLong("LoanPayID"));
                    Info.setLoanPayCode(rs.getString("LoanPayCode"));
                    Info.setClientName(rs.getString("ClientName"));
                    //Info.setAmount(rs.getDouble("mLoanAmount"));
                    Info.setAmount(rs.getDouble("MEXAMINEAMOUNT"));
                    ContractAmountInfo aInfo = new ContractAmountInfo();
                    ContractInfo cInfo = new ContractInfo();
                    ContractDao dao = new ContractDao();
                    aInfo = dao.getLateAmount(Info.getContractID());
                    cInfo.setAInfo(aInfo); //合同金额
                    Info.setBalance(cInfo.getAInfo().getBalanceAmount());//合同当前余额
                    Info.setStartDate(rs.getTimestamp("dtStartDate"));
                    Info.setEndDate(rs.getTimestamp("dtEndDate"));
                    Info.setIntervalNum(rs.getLong("nIntervalNum"));
                    Info.setStatusID(rs.getLong("nStatusID"));
                    Info.setPageCount(lPageCount);
                    Info.setNextCheckLevel(rs.getLong("nNextCheckLevel"));
                    //-------------------------------------------------//
                    vReturn.addElement(Info);
                }
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
        }
        catch (SQLException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (SQLException e)
			{
				log4j.error(e.toString());
				throw new IException("Gen_E001");
			}
		}

        //////////////////////////
        return vReturn.size() <= 0 ? null : vReturn;
    }
    /**
    	  * 审核免还申请，操作Loan_FreeForm表
    	  * @param     long        nReviewContentID      审批内容类型
    	  * @param     String      sOpinion              审批意见
    	  * @param     long        nUserID               审批人标示
    	  * @param     long        nNextUserID           下一个审批人标示
    	  * @param     long        lAction               审批，拒绝，修改，最后审批
    	  * @return    long        成功，返回值 == 1，失败，返回值 == -1
    	  */
    public long checkFreeApply(
        long lApprovalContentID,
        String sOpinion,
        long lUserID,
        long lNextUserID,
        long lAction,
		long lCurrencyID,
		long lOfficeID)
        throws IException,RemoteException
    {
        long lResult = -1;
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String strSQL = ""; //主SQL语句
        // add by jbpan 20120605 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        FreeApplyInfo freeInfo = this.findFreeApplyByID(lApprovalContentID);
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        logInfo.setTransCode(freeInfo.getFreeCode());  //操作日志-业务主键-交易号  
		logInfo.setBusinessType("委托贷款-免还申请");
        // add by jbpan 20120605 end
        //定义相应操作常量
        //贷款
        long lModuleID = Constant.ModuleType.LOAN;
        //业务类型
        //long lLoanTypeID = Constant.ApprovalLoanType.WT;
        long lActionID = Constant.ApprovalAction.FREE_APPLY;
        
		String sContractID = LOANNameRef.getNameByID("ncontractid","loan_freeform","id",String.valueOf(lApprovalContentID),null);
		long conID = -1;
		if( sContractID != null && sContractID.length() > 0 )
		{
			conID = Long.valueOf(sContractID).longValue();
		}
		
		long lLoanTypeID = -1;
		String sSubType = LOANNameRef.getSubTypeByContractID(conID);
		if( sSubType != null && sSubType.length() > 0 )
		{
			lLoanTypeID = Long.valueOf(sSubType).longValue();
		}
        
        long lStatusID = -1;
        long lResultID = -1;
        long lApprovalID = -1;
        long lLevel = -1;

		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();
        try
        {
            con = Database.getConnection();
			OBFreeDao obfreedao = new OBFreeDao();
            //获得业务类型（贷款类型）
            String sql = " select b.nTypeID from loan_freeform a,loan_contractform b "
                       + " where a.nContractID=b.id and a.ID="+lApprovalContentID;
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            if (rs != null && rs.next())
            {
                long lTmpID = rs.getLong(1);
                Log.print("lLoanTypeID:"+lTmpID);
                if(lTmpID ==Constant.ApprovalLoanType.WTTJTH)
                {
                    lLoanTypeID = lTmpID;
                }
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            
            //获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
			//下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			//审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);
                
            if (lAction == 1) //拒绝
            {
                //逻辑删除审批意见
                appbiz.deleteApprovalTracing(
				lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID,
                    lApprovalContentID,
                    2);
                lStatusID = Constant.RecordStatus.INVALID;
                lResultID = Constant.ApprovalDecision.REFUSE;
                logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
                //-------拒绝逻辑删除本条免还申请----------//
                strSQL =
                    "update loan_freeform  set nStatusID="
                        + LOANConstant.FreeApplyStatus.REFUSE
                        + " where ID="
                        + lApprovalContentID;
                //拒绝后需要做的操作//*/
                log4j.info("审批拒绝 SQL=" + strSQL);
                lResult=FreeApplyUpdate(strSQL);
                log4j.info("审批拒绝 ");
				if(lResult>0)
				{
					
					obfreedao.updateOBStatus(lApprovalContentID,OBConstant.LoanInstrStatus.REFUSE);
				}
            }
            if (lAction == 2) //审批
            {
                lStatusID = Constant.RecordStatus.VALID;
                lResultID = Constant.ApprovalDecision.PASS;
                if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
				{
                    strSQL = " update loan_freeform "
                        + "set nnextcheckuserid = "
                        + lNextUserID
                        + ", nNextCheckLevel = "
                        + lLevel
                        + " where ID = "
                        + lApprovalContentID;
                    Log.print("更新下一个审核级别（可越级）：" + lLevel);
				}
				else
				{
				    strSQL = " update loan_freeform "
	                        + "set nnextcheckuserid = "
	                        + lNextUserID
	                        + ", nNextCheckLevel = nNextCheckLevel + 1 where ID = "
	                        + lApprovalContentID;
				    Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
                
                log4j.info("审批通过 SQL=" + strSQL);
                lResult=FreeApplyUpdate(strSQL);
                log4j.info("审批通过 ");
            }
            if (lAction == 3) //审批&&最后
            {
                lStatusID = Constant.RecordStatus.VALID;
                lResultID = Constant.ApprovalDecision.FINISH;
                strSQL =
                    "update loan_freeform set nnextcheckuserid="
                        + lNextUserID
                        + ", nStatusID="
                        + LOANConstant.FreeApplyStatus.CHECK
                        + " where ID = "
                        + lApprovalContentID;
                //审批完成后需要做的操作，状态变为已审核
                log4j.info("审批完成 SQL=" + strSQL);
                lResult=FreeApplyUpdate(strSQL);
                log4j.info("审批完成");
				obfreedao.updateOBStatus(lApprovalContentID,OBConstant.LoanInstrStatus.APPROVE);
            }
            if (lAction == 4) //返回修改
            {
                lStatusID = Constant.RecordStatus.VALID;
                //装态也置为已提交
                lResultID = Constant.ApprovalDecision.RETURN;
                logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
                strSQL =
                    " update loan_freeform set "
                        + " nnextcheckuserid=ninputuserid, nStatusID="
                        + LOANConstant.FreeApplyStatus.SUBMIT
                        + ", nNextCheckLevel = 1 where ID="
                        + lApprovalContentID;
                log4j.info("返回修改 SQL=" + strSQL);
                lResult=FreeApplyUpdate(strSQL);
                log4j.info("返回修改");
				obfreedao.updateOBStatus(lApprovalContentID,OBConstant.LoanInstrStatus.ACCEPT);
            }
            //---------------录入审批意见---------------//
            if (lAction != 1) //不是拒绝
            {
                info.setModuleID(lModuleID);
                info.setLoanTypeID(lLoanTypeID);
                info.setActionID(lActionID);
                info.setApprovalContentID(lApprovalContentID);
                info.setUserID(lUserID);
                info.setNextUserID(lNextUserID);
                info.setOpinion(sOpinion);
                info.setResultID(lResultID);
                info.setStatusID(lStatusID);
				info.setOfficeID(lOfficeID);
				info.setCurrencyID(lCurrencyID);
                appbiz.saveApprovalTracing(info);//保存审批意见
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
            //add by jbpan 20120605 操作结果-成功
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
        }
        catch (Exception ex)
        {
        	//add by jbpan 20120605 start
        	logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
        	logInfo.setFailReason(ex.getMessage());
        	//add by jbpan 20120605 end
            log4j.error(ex.toString());
            //modified by mzh_fu 2007/08/07
            //throw new IException("Gen_E001");
            throw new IRollbackException(context, ex.getMessage(), ex);
        }
		finally
		{	//add by jbpan 20120605 start
			LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
    		//add by jbpan 20120605 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (SQLException e)
			{
				log4j.error(e.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
		}
        return lResult;
    }
    /**
     * 取消一个免还，操作表Loan_FreeForm 
     * <br>更改状态为无效
     * @param lFreeApplyID 免还标识
     */
    public long cancelFreeApply(long lFreeApplyID,long lCurrencyID,long lOfficeID) throws IException,RemoteException
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;

        long lStatusID = -1;
        long lResult = -1;

        //定义相应操作常量
        //贷款
        long lModuleID = Constant.ModuleType.LOAN;
        //模块类型
        long lLoanTypeID = Constant.ApprovalLoanType.WT;
        long lActionID = Constant.ApprovalAction.FREE_APPLY;

        // add by jbpan 20120605 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPLY);
        logInfo.setTransCode(NameRef.getFreeFormNoByID(lFreeApplyID));  //操作日志-业务主键-交易号  
		logInfo.setBusinessType("委托贷款-免还申请");
        // add by jbpan 20120605 end
        long lApprovalID = -1;
        ApprovalDelegation appbiz = new ApprovalDelegation();
        
        try
        {
            //连结数据库
            con = Database.getConnection();
            //获得业务类型（贷款类型）
            String sql = " select b.nTypeID from loan_freeform a,loan_contractform b "
                       + " where a.nContractID=b.id and a.ID="+lFreeApplyID;
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            if (rs != null && rs.next())
            {
                long lTmpID = rs.getLong(1);
                Log.print("lLoanTypeID:"+lTmpID);
                if(lTmpID ==Constant.ApprovalLoanType.WTTJTH)
                {
                    lLoanTypeID = lTmpID;
                }
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }    
            //获得ApprovalID
            ApprovalDao appdao = new ApprovalDao(con);
            lApprovalID = appdao.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
            log4j.info("approalID:"+lApprovalID);
            //先删除以前的审核记录（物理删除）
            try
            {
                appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID, lFreeApplyID, 1);
            }
            catch(Exception e)
            {
                log4j.error(e.toString());
                //modified by mzh_fu 2007/08/07
                //throw new IException("Gen_E001");
                throw new IRollbackException(context, e.getMessage(), e);
            }
            strSQL =
                " SELECT a.NSTATUSID "
                    + " FROM loan_freeForm a  "
                    + " WHERE  "
                    + " a.ID = "
                    + lFreeApplyID;
            log4j.info("freeApply SQL=" + strSQL);
            ps = con.prepareStatement(strSQL);
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                log4j.info("can cancel");
                lStatusID = rs.getLong("NSTATUSID");
                lResult = 1;
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
            if (!(lStatusID == LOANConstant.FreeApplyStatus.SUBMIT))
            {
                log4j.info("status not right");
                lResult = -1;
            }
            if (lResult > 0)
            {
                //逻辑删除本条记录
                strSQL =
                    " Update LOAN_freeform "
                        + " SET nStatusID ="
                        + Constant.RecordStatus.INVALID
                        + " WHERE ID = "+lFreeApplyID
                        + "";
                log4j.info("删除免还申请 SQL=" + strSQL);
                lResult = FreeApplyUpdate(strSQL);
                if(lResult>0)
                {

					OBFreeDao obfreedao = new OBFreeDao();
					obfreedao.updateOBStatus(lFreeApplyID,OBConstant.LoanInstrStatus.CANCEL);
                }
            }
          //add by jbpan 20120605 操作结果-成功
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
        }
        catch (SQLException e)
        {
        	//add by jbpan 20120605 start
        	logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
        	logInfo.setFailReason(e.getMessage());
        	//add by jbpan 20120605 end
            log4j.error(e.toString());
            //modified by mzh_fu 2007/08/07
            //throw new IException("Gen_E001");
            throw new IRollbackException(context, e.getMessage(), e);
        }
        catch (Exception e)
        {
        	//add by jbpan 20120605 start
        	logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
        	logInfo.setFailReason(e.getMessage());
        	//add by jbpan 20120605 end
            log4j.error(e.toString());
            //modified by mzh_fu 2007/08/07
            //throw new IException("Gen_E001");
            throw new IRollbackException(context, e.getMessage(), e);
        }
        //-----------------------
        finally
        {
        	//add by jbpan 20120605 start
			LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
    		//add by jbpan 20120605 end
            try
            {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (Exception ex)
            {
            	log4j.error(ex.toString());
            	// throw new IException("Gen_E001");
            	//modified by mzh_fu 2007/08/07                
                throw new IRollbackException(context, ex.getMessage(), ex);
            }
        }
        return lResult;
    }

    /*
     * 
     * @author haoning
     * @time 2003-11-3
     * @param lModuleID
     * @param lLoanTypeID
     * @param lActionID
     * function
     * lModuleID,lLoanTypeID,lActionID确定lApprovalID
     *
    private long getApprovalID(
        long lModuleID,
        long lLoanTypeID,
        long lActionID)
        throws RemoteException, Exception
    {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String strSQL = null;
        long lApprovalID = -1;
        try
        {
            con = Database.getConnection();
            //查询
            strSQL =
                "select id from loan_approvalsetting  "
                    + " where nModuleID= "+lModuleID
                    + " and nLoanTypeID= "+lLoanTypeID
                    + " and nActionID= "+lActionID;
            log4j.info("查询设置表ID SQL: " + strSQL);
            ps = con.prepareStatement(strSQL);
            //ps.setLong(1, lModuleID);
            //ps.setLong(2, lLoanTypeID);
            //ps.setLong(3, lActionID);
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                lApprovalID = rs.getLong("id");
                log4j.info("设置表ID = " + lApprovalID);
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw e;
        }
        finally
        {
            try
            {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (Exception ex)
            {
                throw new RemoteException(ex.getMessage());
            }
        }
        return lApprovalID;
    }//*/
    //审批完成后需要做的操作
    private long FreeApplyUpdate(String strSQL)
        throws Exception
    {
        Connection con = null;
        PreparedStatement ps = null;
        long lResult = -1;
        try
        {
            if(strSQL != null && strSQL !="")
            {
                con = Database.getConnection();
                //log4j.info("SQL:"+strSQL);
                ps=con.prepareStatement(strSQL);
                lResult = ps.executeUpdate();  
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }            
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        finally
        {
            try
            {
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (Exception e)
            {
                log4j.error(e.toString());
                throw new IException("Gen_E001");
            }
        }
        return lResult;
    }
  /*
   * 获得提款通知单编号
   * return String sReturnCode
   * /
  private String getFreeApplyCode(long lContractID) throws Exception
  {
      PreparedStatement ps = null;
      ResultSet rs = null;
      Connection con = null;
      String strSQL = null;
      String sTemp = "";
      long lCode = 1;
      String sReturnCode = "";
      try
      {
          con = Database.getConnection();
          strSQL = "select nvl(max(sCode),'MH0') sCode "
                 + " from Loan_freeform where nContractID = "+lContractID
                 + " and nStatusID > 0 ";
          Log.print(strSQL);
          ps = con.prepareStatement(strSQL);
          //ps.setLong(1,lContractID);
          rs = ps.executeQuery();
          if(rs != null && rs.next())
          {
              sTemp = rs.getString("sCode");
              sTemp=sTemp.substring(2);
              lCode = Long.parseLong(sTemp) + 1;          
          }
          if (rs != null)
          {
              rs.close();
              rs = null;
          }
          if (ps != null)
          {
              ps.close();
              ps = null;
          }
          if (con != null)
          {
              con.close();
              con = null;
          }

          //凑齐三位
          sReturnCode = "MH"+DataFormat.formatInt((int)lCode,3,true);
      
      }
      catch (Exception e)
      {
          log4j.error("catch a error");
          throw e;
      }
      finally
      {
          try
          {
          }
          catch (Exception ex)
          {
          }
      }
      return sReturnCode;

  
  }
  //*/

  /**
   * 保存免还申请，操作Loan_FreeForm 表
   * @param lFreeApplyID 免还申请标识 ，如果<=0新增，否则修改
   * @param lPayFormID 合同标识//现在是放款单标识
   * @param dLoanAmount 贷款金额
   * @param lIntervalNum 年期
   * @param dLoanBalance 贷款余额
   * @param tsEnd 到期日
   * @param dFreeAmount 免还金额
   * @param strConsignAccoutn,委托账户
   * @param tsFreeDate 免还日期
   * @param strFreeReason 免还原因
   * @param dInterest 免还利息
   * @param lInputUserID   录入人
   * @param tsInputDate    录入时间
   */
    public long saveFreeApply(FreeApplyInfo info) throws IException, RemoteException
    {
		long id = -1;
		 // add by jbpan 20120605 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
		logInfo.setBusinessType("委托贷款-免还申请");
        // add by jbpan 20120605 end
		try
		{
			FreeApplyDao dao = new FreeApplyDao();
			id = dao.saveFreeApply(info);
			logInfo.setTransCode(NameRef.getFreeFormNoByID(id));  //操作日志-业务主键-交易号 
			//add by jbpan 20120605 操作结果-成功
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} 
		catch (Exception e)
		{
			//add by jbpan 20120605 start
        	logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
        	logInfo.setFailReason(e.getMessage());
        	//add by jbpan 20120605 end
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
		finally
		{
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
		} //add by jbpan 20120606 end
		return id;
    }
    
    //add by xwhe 2007-06-28 
	public long saveFreeApplyInit(FreeApplyInfo info)throws RemoteException, IRollbackException
	{
		long depositId = -1;
		FreeApplyDao dao = new FreeApplyDao();
		// add by jbpan 20120605 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
		logInfo.setBusinessType("委托贷款-免还申请");
        // add by jbpan 20120605 end
		try
		{   
			
			 depositId=dao.saveFreeApply(info);
			 logInfo.setTransCode(NameRef.getFreeFormNoByID(depositId));  //操作日志-业务主键-申请书编号 
			info.setID(depositId);
			InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
			inutParameterInfo.setTransID(String.valueOf(depositId));
			inutParameterInfo.setUrl(inutParameterInfo.getUrl()+depositId);
			//提交审批
			FSWorkflowManager.initApproval(inutParameterInfo);
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
			//更新状态
			dao.updateLoanStatus(
					info.getID(),
					info.getInputUserID(),
					LOANConstant.FreeApplyStatus.APPROVALING);
			//add by jbpan 20120605 操作结果-成功
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			//add by jbpan 20120605 start
        	logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
        	logInfo.setFailReason(e.getMessage());
        	//add by jbpan 20120605 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
		finally
		{
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
		} //add by jbpan 20120606 end
		return depositId;
	}
	// add by 何小文 2007-06-29
	 public long examinePass(FreeApplyInfo freeinfo) throws RemoteException, IRollbackException
	    {
	    	long ret=-1;
	    	// add by jbpan 20120605 操作日志 start
	        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
	        logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
	        logInfo.setTransCode(NameRef.getFreeFormNoByID(freeinfo.getID()));  //操作日志-业务主键-申请书编号 
			logInfo.setBusinessType("委托贷款-免还申请");
	        // add by jbpan 20120605 end			
			try
			{    long lLoanTypeID = -1;
				long status=freeinfo.getStatusID(); 
				long lLoanID=freeinfo.getID();
				long lUserID=freeinfo.getInputUserID() ;
				long lResultID = Constant.ApprovalDecision.PASS;
				//---- added by xwhe 2007/06/18 审批流 begin
				
				InutParameterInfo inutParameterInfo = freeinfo.getInutParameterInfo();
				InutParameterInfo returnInfo = new InutParameterInfo();
				FreeApplyDao dao = new FreeApplyDao();
				//将业务记录置入pinfo,转换成标准map传递到审批流引擎
				inutParameterInfo.setDataEntity(freeinfo);
				
				//提交审批
				returnInfo = FSWorkflowManager.doApproval(inutParameterInfo);
				
				//如果是最后一级,且为审批通过,更新状态为已审批
				if(returnInfo.isLastLevel())
				{	
					dao.updateLoanStatus(
							lLoanID,
							lUserID,
							LOANConstant.FreeApplyStatus.CHECK);
					
				}
				//如果是最后一级,且为审批拒绝,更新状态为已保存
				else if(returnInfo.isRefuse())
				{
					logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
					dao.updateLoanStatus(
							lLoanID,
							lUserID,
							LOANConstant.FreeApplyStatus.SUBMIT);
				}	
				//add by jbpan 20120605 操作结果-成功
	            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			}
			catch (Exception e)
			{
				//add by jbpan 20120605 start
	        	logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
	        	logInfo.setFailReason(e.getMessage());
	        	//add by jbpan 20120605 end
				throw new IRollbackException(context, e.getMessage(), e);
			}
			//add by jbpan 20120606 start
			finally
			{
	            LoggerResults vResult = LoggerResults.getInstance(); 
	    		// 将日志记录保存到内存中
	    		vResult.getResult().add(logInfo);
			} //add by jbpan 20120606 end
			return ret;    	
	    }
	  
	
	
	/**
	 * 查询免还，操作Loan_FreeForm 表
	 * @param lOfficeID 办事处标识
	 * @param lUserID 用户标识
	 * @param lActionID 动作类型，提交链结查找，或者复核链接查找
	 * @param lContractIDFrom 借款合同编号（由）
	 * @param lContractIDTo 借款合同编号（到）
	 * @param lClientID 借款单位标识
	 * @param dAmountFrom 金额（由）
	 * @param dAmountTo 金额（到）
	 * @param tsFrom 贷款期限（由）
	 * @param tsTo 贷款期限（到）
	 * @param lIntervalNum 期限（月）
	 * @param lStatusID 状态
	 * 
	 * @param lPageLineCount 行数
	 * @param lPageNo 页码
	 * @param lOrderParam  排序列
	 * @param lDesc 顺序
	 */
	public Collection findFreeApplyByMultiOption(FreeApplyQueryInfo qInfo)
		throws IException,RemoteException
	{
		Collection c = null;
		try
		{
			FreeApplyDao dao = new FreeApplyDao();
			c = dao.findFreeApplyByMultiOption(qInfo);
		} 
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		   
		return c;
	 
	}
	
	/**
	 * Modify by leiyang date 2007/07/12
	 * 审批流：取消审批方法（委托贷款 . 免还申请）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(FreeApplyInfo freeinfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = freeinfo.getInutParameterInfo();
		FreeApplyDao dao = new FreeApplyDao();
		// add by jbpan 20120605 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
        logInfo.setTransCode(NameRef.getFreeFormNoByID(freeinfo.getID()));  //操作日志-业务主键-申请书编号 
		logInfo.setBusinessType("委托贷款-免还申请");
        // add by jbpan 20120605 end
		try
		{
			//取消审批
			lReturn = dao.updateStatusAndCheckStatus(freeinfo.getID(),freeinfo.getInputUserID(),LOANConstant.FreeApplyStatus.SUBMIT);
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}
				//add by jbpan 20120605 操作结果-成功
	            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			}
		}
		catch (Exception e)
		{
			//add by jbpan 20120605 start
        	logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
        	logInfo.setFailReason(e.getMessage());
        	//add by jbpan 20120605 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
		finally
		{
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
		} //add by jbpan 20120606 end
		return lReturn;
	}
	
	/**
	 * @param payID 放款通知单ID
	 * @param rePayID 还款通知单ID
	 * @return 查询未还款金额
	 * @throws RemoteException
	 * @throws IException
	 */
	public double findUnRePayAmountByID(long payID,long rePayID) throws RemoteException, IException
	{
		double unRePayAmount = 0.0;
		try
		{
			FreeApplyDao dao = new FreeApplyDao();
			unRePayAmount = dao.findUnRePayAmountByID(payID,rePayID);
		}
		catch (Exception e)
		{	
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return unRePayAmount;
	}
}
