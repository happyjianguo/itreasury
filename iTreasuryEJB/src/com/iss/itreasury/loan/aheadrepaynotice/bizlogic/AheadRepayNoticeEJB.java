package com.iss.itreasury.loan.aheadrepaynotice.bizlogic;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import java.rmi.RemoteException;
import java.util.Collection;
import java.util.Iterator;

import com.iss.itreasury.util.*;
import com.iss.itreasury.loan.util.*;
//import com.iss.itreasury.system.bizlogic.ApprovalBiz;
//import com.iss.itreasury.system.dataentity.ApprovalSettingInfo;
//import com.iss.itreasury.system.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.settlement.util.NameRef;
import com.iss.itreasury.system.bizdelegation.*;
import com.iss.itreasury.system.logger.dataentity.LoggerBtnLevelInfo;
import com.iss.itreasury.system.logger.dataentity.LoggerResults;
import com.iss.itreasury.system.approval.dataentity.*;
import com.iss.itreasury.loan.aheadrepaynotice.dataentity.*;
import com.iss.itreasury.loan.aheadrepaynotice.dao.*;
import com.iss.itreasury.loan.assurechargenotice.dao.AssureChargeNoticeDao;
import com.iss.itreasury.loan.assurechargenotice.dataentity.AssureChargeNoticeInfo;
import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.loanpaynotice.dataentity.LoanPayNoticeInfo;
import com.iss.itreasury.loan.obinterface.dao.OBAheadDao;
import com.iss.itreasury.ebank.util.OBConstant;
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public class AheadRepayNoticeEJB implements SessionBean
{
	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */
	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context)
	{
		this.context = context;
	}
	private SessionContext context;
	private static Log4j log4j = null;
	/**
	 * No argument constructor required by container.
	 */
	public AheadRepayNoticeEJB()
	{
		log4j = new Log4j(Constant.ModuleType.LOAN, this);
	}
	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove()
	{
	}
	/**
	 * 生成提前还款通知单。
	 * @param AheadRepayNoticeInfo
	 * @return long
	 * @throws Exception
	 */
	public long saveAheadRepayNotice(AheadRepayNoticeInfo info) throws RemoteException, IException
	{
		long lResult = -1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
        try {
			logInfo.setBusinessType( Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE) );
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			lResult = dao.insert(info);
			
			InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
			
			if(null != inutParameterInfo){
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
				inutParameterInfo.setTransID(String.valueOf(lResult));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+lResult);

				// 提交审批
				FSWorkflowManager.initApproval(inutParameterInfo);
				//add by jbpan 20120614    操作日志-操作类型-保存并提交审批
				
				AheadRepayNoticeInfo _aheadRepayNoticeInfo=new AheadRepayNoticeInfo();
				_aheadRepayNoticeInfo.setStatusID(LOANConstant.AheadRepayStatus.APPROVALING);
				_aheadRepayNoticeInfo.setID(lResult);
				
				// 更新状态到"审批中"
				dao.update(_aheadRepayNoticeInfo);
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			log4j.error(e.toString());
			throw new IRollbackException(context,"提交失败",e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	logInfo.setTransCode(NameRef.getCodeNoBylAheadPayFormID(lResult));  //操作日志-业务主键-交易号  
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	/**
	* 修改提前还款通知单。
	* @param AheadRepayNoticeInfo
	* @return long
	* @throws Exception
	*/
	public long updateAheadRepayNotice(AheadRepayNoticeInfo info) throws RemoteException, IException
	{
		long lResult = -1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
        try {
			logInfo.setBusinessType(Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE) );
			logInfo.setTransCode(NameRef.getCodeNoBylAheadPayFormID(info.getID()));  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			lResult = dao.update(info);
			//判断是否需要修改网银指令
			if (info.getStatusID() == LOANConstant.AheadRepayStatus.CANCEL)
			{
				//	*********added by gqzhang	
				log4j.info("================修改网银状态================");
				OBAheadDao obAheadDao = new OBAheadDao();
				obAheadDao.updateOBStatus(info.getID(), OBConstant.LoanInstrStatus.CANCEL);
				//*********added by gqzhang
				//add by jbpan 20120615 操作日志-操作类型-取消票据
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCEL);
			}
			
			InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
			
			if(null != inutParameterInfo){
				inutParameterInfo.setTransID(String.valueOf(info.getID()));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+info.getID());

				// 提交审批
				FSWorkflowManager.initApproval(inutParameterInfo);
				//add by jbpan 20120614    操作日志-操作类型-保存并提交审批
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
				AheadRepayNoticeInfo _aheadRepayNoticeInfo=new AheadRepayNoticeInfo();
				_aheadRepayNoticeInfo.setStatusID(LOANConstant.AheadRepayStatus.APPROVALING);
				_aheadRepayNoticeInfo.setID(info.getID());
				
				// 更新状态到"审批中"
				dao.update(_aheadRepayNoticeInfo);
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			log4j.error(e.toString());
			throw new IRollbackException(context,"提交失败",e);
		}
		//add by jbpan 20120607 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	/**
	* 得到提前还款通知单详细信息
	* Create Date: 2003-10-15
	* @param lID 提前还款通知单ID
	* @return AheadRepayNoticeInfo 提前还款通知单详细信息
	* @exception Exception
	*/
	public AheadRepayNoticeInfo findAheadRepayNoticeByID(long lID) throws RemoteException, IException
	{
		AheadRepayNoticeInfo info = new AheadRepayNoticeInfo();
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			info = dao.findByID(lID);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return info;
	}
	/**
	* 根据条件查询(修改)
	* Create Date: 2003-10-15
	* @param AheadRepayNoticeQueryInfo 查询条件 
	* @return Collection
	* @exception Exception
	*/
	public Collection queryForUpdate(AheadRepayNoticeQueryInfo qInfo) throws RemoteException, IException
	{
		Collection c = null;
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			c = dao.queryForUpdate(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return c;
	}
	/**
	* 根据条件查询合同信息(审核)
	* Create Date: 2003-10-15
	* @param ContractQueryInfo 查询条件
	* @return Collection
	* @exception Exception
	*/
	public Collection queryForExamine(AheadRepayNoticeQueryInfo qInfo) throws RemoteException, IException
	{
		Collection c = null;
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			c = dao.queryForExamine(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return c;
	}
	
	/**
	 * added by mzh_fu 2007/07/05
	 * @param info
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long doApproval(AheadRepayNoticeInfo info) throws RemoteException,IRollbackException{
		long lOBStatusID = -1;		
		InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
		AheadRepayNoticeDao aheadRepayNoticeDao=new AheadRepayNoticeDao();		
		AheadRepayNoticeInfo _aheadRepayNoticeInfo =  new AheadRepayNoticeInfo();
		long lResult = -1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        try {
			logInfo.setBusinessType(Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE) );
			logInfo.setTransCode(NameRef.getCodeNoBylAheadPayFormID(info.getID()));  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try{
		inutParameterInfo.setDataEntity(aheadRepayNoticeDao.findByID(info.getID()));
		
		//提交审批
		InutParameterInfo returnInfo  = FSWorkflowManager.doApproval(inutParameterInfo);
		
		lOBStatusID = OBConstant.LoanInstrStatus.ACCEPT;
		
		//如果是最后一级,且为审批通过,更新状态为已审批
		if(returnInfo.isLastLevel())
		{	
			_aheadRepayNoticeInfo.setID(info.getID());
			_aheadRepayNoticeInfo.setStatusID(LOANConstant.AheadRepayStatus.CHECK);
			lResult = aheadRepayNoticeDao.update(_aheadRepayNoticeInfo);
			//add by jbpan 20120607 操作日志-操作类型-
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
			lOBStatusID = OBConstant.LoanInstrStatus.APPROVE;
		}
		//如果是最后一级,且为审批拒绝,更新状态为已保存
		else if(returnInfo.isRefuse())
		{
			_aheadRepayNoticeInfo.setID(info.getID());
			_aheadRepayNoticeInfo.setStatusID(LOANConstant.AheadRepayStatus.SUBMIT);
			lResult = aheadRepayNoticeDao.update(_aheadRepayNoticeInfo);
			//add by jbpan 20120607 操作日志-操作类型-
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
			lOBStatusID = OBConstant.LoanInstrStatus.REFUSE;
		}	
		
		//*********added by gqzhang	
		log4j.info("================修改网银状态================");
		OBAheadDao obAheadDao = new OBAheadDao();
		obAheadDao.updateOBStatus(info.getID(), lOBStatusID);
		//*********added by gqzhang
		//add by jbpan 20120607 加上操作日志-操作结果-成功        
		logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}catch (Exception e) {
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context,"审批失败",e);
		}
		//add by jbpan 20120607 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	/**
	* 审核通过 
	* Create Date: 2003-10-15
	* @param lID 
	* @param strOpinion 审核意见
	* @param lUserID 登录人ID
	* @param  lNextUserID 下一级审核人
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long examinePass(long lID, String strOpinion, long lUserID, long lNextUserID,long lCurrencyID,
			  long lOfficeID) throws RemoteException, IException
	{
		long lResult = -1;
		long lOBStatusID = -1;
		long lApprovalID = -1;
		long lLevel = -1;
		long lModuleID = Constant.ModuleType.LOAN; //模块类型
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER; //贷款类型
		long lActionID = Constant.ApprovalAction.AHEADREPAY_NOTICE; //提前还款通知单审核
		long lStatusID = Constant.RecordStatus.VALID; //记录状态
		long lResultID = -1; //审批通过
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        try {
			logInfo.setBusinessType(Constant.CodingruleAction.getName(lActionID));
			logInfo.setTransCode(NameRef.getCodeNoBylAheadPayFormID(lID));  //操作日志-业务主键-交易号  
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			log4j.info("================审核通过================");
			ApprovalDelegation appbiz = new ApprovalDelegation();
			//获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
			//下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			//审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);
			
			if (lNextUserID > 0)
			{
				lResultID = Constant.ApprovalDecision.PASS; //审批通过
				lOBStatusID = OBConstant.LoanInstrStatus.ACCEPT;
			}
			else
				if (lNextUserID == -2)
				{
					lResultID = Constant.ApprovalDecision.FINISH; //审批完成
					lOBStatusID = OBConstant.LoanInstrStatus.APPROVE;
				}
			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lID);
			info.setUserID(lUserID);
			info.setNextUserID(lNextUserID);
			info.setOpinion(strOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			lResult = appbiz.saveApprovalTracing(info); //保存审批信息
			AheadRepayNoticeInfo aInfo = new AheadRepayNoticeInfo();
			if (lNextUserID == -2)
			{
				aInfo.setStatusID(LOANConstant.AheadRepayStatus.CHECK);
			}
			else
			{
				aInfo.setStatusID(LOANConstant.AheadRepayStatus.SUBMIT);
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
				{
				    aInfo.setNextCheckLevel(lLevel);
				    Log.print("更新下一个审核级别（可越级）：" + lLevel);
				}
				else
				{
				    aInfo.setNextCheckLevel(-1);
				    Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
			}
			aInfo.setID(lID);
			aInfo.setNextCheckUserID(lNextUserID);
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			
			lResult = dao.update(aInfo); //重新设置审核人和状态
			//*********added by gqzhang	
			log4j.info("================修改网银状态================");
			OBAheadDao obAheadDao = new OBAheadDao();
			obAheadDao.updateOBStatus(lID, lOBStatusID);
			//*********added by gqzhang
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			log4j.error(e.toString());
			throw new IRollbackException(context,"审批失败",e);
		}
		//add by jbpan 20120607 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	/**
	* 审核拒绝
	* Create Date: 2003-10-15
	* @param lID 
	* @param strOpinion 审核意见
	* @param lUserID 登录人ID
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long examineRefuse(long lID, String strOpinion, long lUserID,long lCurrencyID,long lOfficeID) 
	throws RemoteException, IException
	{
		long lResult = -1;
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
        // add by jbpan 20120607 end
		try
		{
			logInfo.setTransCode(NameRef.getCodeNoBylAheadPayFormID(lID));  //操作日志-业务主键-交易号
			log4j.info("================审核拒绝================");
			ApprovalDelegation appbiz = new ApprovalDelegation();
			long lModuleID = Constant.ModuleType.LOAN; //模块类型
			long lLoanTypeID = Constant.ApprovalLoanType.OTHER; //贷款类型
			long lActionID = Constant.ApprovalAction.AHEADREPAY_NOTICE; //提前还款通知单审核
			long lStatusID = Constant.RecordStatus.VALID; //记录状态
			long lResultID = Constant.ApprovalDecision.REFUSE; //审批拒绝
			logInfo.setBusinessType(Constant.CodingruleAction.getName(lActionID));
			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lID);
			info.setUserID(lUserID);
			info.setOpinion(strOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			lResult = appbiz.saveApprovalTracing(info); //保存审批信息
			//取得审批设置标示
			long lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID, lActionID,lOfficeID,lCurrencyID);
			lResult = appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID, lActionID,lOfficeID,lCurrencyID, lID, 2); //逻辑删除
			AheadRepayNoticeInfo aInfo = new AheadRepayNoticeInfo();
			aInfo.setStatusID(LOANConstant.AheadRepayStatus.REFUSE);
			aInfo.setID(lID);
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			//修改合同状态为已拒绝
			lResult = dao.update(aInfo);
			//*********added by gqzhang	
			log4j.info("================修改网银状态================");
			OBAheadDao obAheadDao = new OBAheadDao();
			obAheadDao.updateOBStatus(lID, OBConstant.LoanInstrStatus.REFUSE);
			//*********added by gqzhang
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			log4j.error(e.toString());
			//throw new IException("Gen_E001");
			//modified by mzh_fu 2007/08/06
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	/**
	* 审核返回修正
	* Create Date: 2003-10-15
	* @param lID 
	* @param strOpinion 审核意见
	* @param lUserID 登录人ID
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long examineBack(long lID, String strOpinion, long lUserID,long lCurrencyID,long lOfficeID) throws RemoteException, IException
	{
		long lResult = -1;
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
        // add by jbpan 20120607 end
		try
		{
			logInfo.setTransCode(NameRef.getCodeNoBylAheadPayFormID(lID));  //操作日志-业务主键-交易号  
			log4j.info("================审核返回修正================");
			ApprovalDelegation appbiz = new ApprovalDelegation();
			long lModuleID = Constant.ModuleType.LOAN; //模块类型
			long lLoanTypeID = Constant.ApprovalLoanType.OTHER; //贷款类型
			long lActionID = Constant.ApprovalAction.AHEADREPAY_NOTICE; //提前还款通知单审核
			long lStatusID = Constant.RecordStatus.VALID; //记录状态
			long lResultID = Constant.ApprovalDecision.RETURN; //审批返回修正
			logInfo.setBusinessType(Constant.CodingruleAction.getName(lActionID));
			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lID);
			info.setUserID(lUserID);
			info.setOpinion(strOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			lResult = appbiz.saveApprovalTracing(info); //保存审批信息
			AheadRepayNoticeInfo tInfo = new AheadRepayNoticeInfo();
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			tInfo = dao.findByID(lID);
			AheadRepayNoticeInfo aInfo = new AheadRepayNoticeInfo();
			aInfo.setNextCheckUserID(tInfo.getInputUserID()); //下一个审批人修改为合同管理员
			aInfo.setStatusID(LOANConstant.AheadRepayStatus.SUBMIT); //状态变为“已提交”
			aInfo.setID(lID);
			aInfo.setNextCheckLevel(1);
			lResult = dao.update(aInfo);
			//*********added by gqzhang			
			log4j.info("================修改网银状态================");
			OBAheadDao obAheadDao = new OBAheadDao();
			obAheadDao.updateOBStatus(lID, OBConstant.LoanInstrStatus.ACCEPT);
			//*********added by gqzhang
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			log4j.error(e.toString());
			//throw new IException("Gen_E001");
			//modified by mzh_fu 2007/08/06
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	
	/**
	 * Modify by leiyang date 2007/07/12
	 * 审批流：取消审批方法（自营贷款.还款通知单）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(AheadRepayNoticeInfo nInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = nInfo.getInutParameterInfo();
		AheadRepayNoticeDao aheadRepayNoticeDao = new AheadRepayNoticeDao();		
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
        try {
			logInfo.setBusinessType(Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE));
			logInfo.setTransCode(NameRef.getCodeNoBylAheadPayFormID(nInfo.getID()));  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			//取消审批
			lReturn = aheadRepayNoticeDao.updateStatusAndCheckStatus(nInfo.getID(), LOANConstant.AheadRepayStatus.SUBMIT);
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lReturn;
	}
	
	/**
	 * @param payID 放款通知单ID
	 * @param rePayID 还款通知单ID
	 * @return 查询未还款金额
	 * @throws RemoteException
	 * @throws IException
	 */
	public double findUnRePayAmountByID(long payID,long batchID,long rePayID) throws RemoteException, IException
	{
		double unRePayAmount = 0.0;
		try
		{
			AheadRepayNoticeDao aheadRepayNoticeDao = new AheadRepayNoticeDao();	
			unRePayAmount = aheadRepayNoticeDao.findUnRePayAmountByID(payID,batchID,rePayID);
		}
		catch (Exception e)
		{	
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return unRePayAmount;
	}
	/**
	* 根据条件查询所有放款通知单(审核)
	* Create Date: 2008-10-4
	* @param AheadRepayNoticeQueryInfo 查询条件
	* @return Collection
	* @exception Exception
	*/
	public Collection queryForRepayNotice(AheadRepayNoticeQueryInfo qInfo) throws RemoteException, IException
	{
		Collection c = null;
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			c = dao.queryForRepayNotice(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return c;
	}
	/**
	 * 生成批量还款通知单。
	 * @param AheadRepayNoticeInfo
	 * @return long
	 * @throws Exception
	 */
	public long saveBatch(BatchRepayNoticeInfo bInfo) throws RemoteException, IException
	{
		long lResult = -1;
		// add by jbpan 20120607 操作日志 start
//        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
//		logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
//        try {
//			logInfo.setBusinessType(Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE) + "-" + "批量");
//			logInfo.setTransCode(NameRef.getContractNoByID(bInfo.getContractID()));  //操作日志-业务主键-合同号
//        } catch (Exception e1) {
//			e1.printStackTrace();
//		}
        // add by jbpan 20120607 end

		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			lResult = dao.insertBatch(bInfo);
			
			InutParameterInfo inutParameterInfo = bInfo.getInutParameterInfo();
			
			if(null != inutParameterInfo){
//				logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
				
				inutParameterInfo.setTransID(String.valueOf(lResult));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+lResult);

				// 提交审批
				FSWorkflowManager.initApproval(inutParameterInfo);
				//add by jbpan 20120614    操作日志-操作类型-保存并提交审批
				
				BatchRepayNoticeInfo _baheadRepayNoticeInfo=new BatchRepayNoticeInfo();
				_baheadRepayNoticeInfo.setStatusID(LOANConstant.AheadRepayStatus.APPROVALING);
				_baheadRepayNoticeInfo.setID(lResult);
				_baheadRepayNoticeInfo.setPBackDate(bInfo.getPBackDate());
				_baheadRepayNoticeInfo.setMinterest(bInfo.getMinterest());
				
				// 更新状态到"审批中"
				dao.updateBatch(_baheadRepayNoticeInfo);
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
//			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
//			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
//			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			log4j.error(e.toString());
			throw new IRollbackException(context,"提交失败",e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	  
//            LoggerResults vResult = LoggerResults.getInstance(); 
//    		// 将日志记录保存到内存中
//    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	/**
	* 得到提前还款通知单详细信息
	* Create Date: 2008-10-07
	* @param lID 批量还款通知单ID
	* @return BatchRepayNoticeInfo 批量还款通知单详细信息
	* @exception Exception
	*/
	public BatchRepayNoticeInfo findBatchAheadRepayNoticeByID(long lID) throws RemoteException, IException
	{
		BatchRepayNoticeInfo bInfo = new BatchRepayNoticeInfo();
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			bInfo = dao.findBatchAheadRepayByID(lID);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return bInfo;
	}
	/**
	* 修改批量还款通知单。
	* @param AheadRepayNoticeInfo
	* @return long
	* @throws Exception
	*/
	public long updateAheadRepayNotice(BatchRepayNoticeInfo info) throws RemoteException, IException
	{
		long lResult = -1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
        try {
			logInfo.setBusinessType(Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE) + "-" + "批量");
			logInfo.setTransCode(NameRef.getContractNoByID(info.getContractID()));  //操作日志-业务主键-交易号
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			lResult = dao.updateBatch(info);
			//判断是否需要修改网银指令
			if (info.getStatusID() == LOANConstant.AheadRepayStatus.CANCEL)
			{
				OBAheadDao obAheadDao = new OBAheadDao();
				obAheadDao.updateOBStatus(info.getID(), OBConstant.LoanInstrStatus.CANCEL);
				//add by jbpan 20120615 操作日志-操作类型-取消申请
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCEL);
			}
			
			InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
			
			if(null != inutParameterInfo){
				inutParameterInfo.setTransID(String.valueOf(info.getID()));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+info.getID());

				// 提交审批
				FSWorkflowManager.initApproval(inutParameterInfo);
				//add by jbpan 20120614    操作日志-操作类型-保存并提交审批
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
				BatchRepayNoticeInfo _aheadRepayNoticeInfo=new BatchRepayNoticeInfo();
				_aheadRepayNoticeInfo.setStatusID(LOANConstant.AheadRepayStatus.APPROVALING);
				_aheadRepayNoticeInfo.setID(info.getID());
				_aheadRepayNoticeInfo.setPBackDate(info.getPBackDate());
				_aheadRepayNoticeInfo.setMinterest(info.getMinterest());
				// 更新状态到"审批中"
				dao.updateBatch(_aheadRepayNoticeInfo);
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context,"提交失败",e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	  
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	/**
	* 根据条件查询批量还款单下的放款通知单
	* Create Date: 2008-10-8
	* @param BatchRepayNoticeInfo 查询条件
	* @return Collection
	* @exception Exception
	*/
	public Collection querySaveForRepayNotice(BatchRepayNoticeInfo qInfo) throws RemoteException, IException
	{
		Collection c = null;
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			c = dao.querySaveForRepayNotice(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return c;
	}
	/**
	* 得到提前还款通知单详细信息
	* Create Date: 2008-10-09
	* @param lID 放款通知单ID
	* @return AheadRepayNoticeInfo 提前还款通知单详细信息
	* @exception Exception
	*/
	public AheadRepayNoticeInfo findAheaeInfoByPayID(LoanPayNoticeInfo lInfo) throws RemoteException, IException
	{
		AheadRepayNoticeInfo info = new AheadRepayNoticeInfo();
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			info = dao.findAheaeInfoByPayID(lInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return info;
	}
	/**
	* 得到提前还款通知单详细信息
	* Create Date: 
	* @param lID 批量还款单ID
	* @return AheadRepayNoticeInfo 提前还款通知单详细信息
	* @exception Exception
	*/
	public Collection findAheadRepayNoticeIDByBatchID(long lID) throws RemoteException, IException
	{
		Collection c = null;
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			c  = dao.findAheadInfoByBatchID(lID);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return c;
	}
	/**
	* 根据条件查询批量还款单下的放款通知单
	* Create Date: 2008-10-8
	* @param BatchRepayNoticeInfo 查询条件
	* @return Collection
	* @exception Exception
	*/
	public Collection queryAllRepayNotice(BatchRepayNoticeInfo qInfo) throws RemoteException, IException
	{
		Collection c = null;
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			c = dao.queryAllRepayNotice(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return c;
	}
	/**
	 * added by xwhe 2008/10/20
	 * @param info
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long doApproval(BatchRepayNoticeInfo info) throws RemoteException,IRollbackException{	
		InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
		AheadRepayNoticeDao aheadRepayNoticeDao=new AheadRepayNoticeDao();		
		BatchRepayNoticeInfo _aheadRepayNoticeInfo =  new BatchRepayNoticeInfo();
		long lResult = -1;
		Collection coll = null;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        try {
			logInfo.setBusinessType(Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE) + "-" + "批量");
			logInfo.setTransCode(NameRef.getContractNoByID(info.getContractID())+"-"+info.getLetoutNoticeCode());  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try{
	    coll = aheadRepayNoticeDao.findAheadInfoByBatchID(info.getID());
		inutParameterInfo.setDataEntity(aheadRepayNoticeDao.findBatchAheadRepayByID(info.getID()));
		
		//提交审批
		InutParameterInfo returnInfo  = FSWorkflowManager.doApproval(inutParameterInfo);
		
		//如果是最后一级,且为审批通过,更新状态为已审批
		if(returnInfo.isLastLevel())
		{	
			_aheadRepayNoticeInfo.setID(info.getID());
			_aheadRepayNoticeInfo.setStatusID(LOANConstant.AheadRepayStatus.CHECK);
			_aheadRepayNoticeInfo.setPBackDate(info.getPBackDate());
			_aheadRepayNoticeInfo.setMinterest(info.getMinterest());
			lResult = aheadRepayNoticeDao.updateBatch(_aheadRepayNoticeInfo);
			 Iterator it = coll.iterator();
			  AheadRepayNoticeInfo aInfo = new AheadRepayNoticeInfo();
			    while (it.hasNext()) {
			    
				aInfo = (AheadRepayNoticeInfo) it.next();
				
				aInfo.setStatusID(LOANConstant.AheadRepayStatus.CHECK);										   
			    long result = aheadRepayNoticeDao.update(aInfo);
			    }
			
		}
		//如果是最后一级,且为审批拒绝,更新状态为已保存
		else if(returnInfo.isRefuse())
		{
			_aheadRepayNoticeInfo.setID(info.getID());
			_aheadRepayNoticeInfo.setStatusID(LOANConstant.AheadRepayStatus.SUBMIT);
			_aheadRepayNoticeInfo.setPBackDate(info.getPBackDate());
			_aheadRepayNoticeInfo.setMinterest(info.getMinterest());
			lResult = aheadRepayNoticeDao.updateBatch(_aheadRepayNoticeInfo);
			Iterator it = coll.iterator();
			  AheadRepayNoticeInfo aInfo = new AheadRepayNoticeInfo();
			    while (it.hasNext()) {
			    
				aInfo = (AheadRepayNoticeInfo) it.next();
				
				aInfo.setStatusID(LOANConstant.AheadRepayStatus.SUBMIT);										   
			    long result = aheadRepayNoticeDao.update(aInfo);
			    }
			  //add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
		}
		//add by jbpan 20120607 加上操作日志-操作结果-成功        
		logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}catch (Exception e) {
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context,"审批失败",e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
	/**
	 * 
	 * 审批流：取消审批方法
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelBatchApproval(BatchRepayNoticeInfo nInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = nInfo.getInutParameterInfo();
		AheadRepayNoticeDao aheadRepayNoticeDao = new AheadRepayNoticeDao();		
		Collection coll = null;	
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
        try {
			logInfo.setBusinessType( Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE) + "-" + "批量");
			logInfo.setTransCode(NameRef.getContractNoByID(nInfo.getContractID()));  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			coll = aheadRepayNoticeDao.findAheadInfoByBatchID(nInfo.getID());
			//取消审批
			nInfo.setStatusID(LOANConstant.AheadRepayStatus.SUBMIT);
			lReturn = aheadRepayNoticeDao.updateBatch(nInfo);
			Iterator it = coll.iterator();
			  AheadRepayNoticeInfo aInfo = new AheadRepayNoticeInfo();
			    while (it.hasNext()) {
			    
				aInfo = (AheadRepayNoticeInfo) it.next();
				
				aInfo.setStatusID(LOANConstant.AheadRepayStatus.SUBMIT);										   
			    long result = aheadRepayNoticeDao.update(aInfo);
			    }
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lReturn;
	}
	/**
	* 根据条件查询审批的还款单
	* Create Date: 2008-10-8
	* @param BatchRepayNoticeInfo 查询条件
	* @return Collection
	* @exception Exception
	*/
	public Collection queryDoApprovalRepayNotice(BatchRepayNoticeInfo qInfo) throws RemoteException, IException
	{
		Collection c = null;
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			c = dao.queryDoApprovalRepayNotice(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return c;
	}
	
	/**查询批量还款单下所有已使用的还款单
	 * @author 马现福 2008-11-26
	 * @throws RemoteException
	 * @throws IException
	 */
	public Collection queryUsedRepayNotice(BatchRepayNoticeInfo qInfo) throws RemoteException, IException
	{
		Collection c = null;
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			c = dao.queryUsedRepayNotice(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return c;
	}
	
	/**取消批量还款单
	 * @author 马现福 2008-11-26
	 * @throws RemoteException
	 * @throws IException
	 */
	public long cancelBatchRepayNotice(BatchRepayNoticeInfo qInfo) throws RemoteException, IException
	{
		long lResult = -1;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
        try {
			logInfo.setBusinessType(Constant.CodingruleAction.getName(Constant.CodingruleAction.AHEADREPAY_NOTICE) + "-" + "批量");
			logInfo.setTransCode(NameRef.getContractNoByID(qInfo.getContractID()));  //操作日志-业务主键-交易号
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			AheadRepayNoticeDao dao = new AheadRepayNoticeDao();
			lResult = dao.cancelBatchRepayNotice(qInfo);
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context,"取消失败",e);
		}
		//add by jbpan 20120607 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lResult;
	}
}
