package com.iss.itreasury.loan.discount.bizlogic;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.bill.draft.dataentity.TransDraftInInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftStorageAssembleInfo;
import com.iss.itreasury.bill.util.BILLConstant;
import com.iss.itreasury.bill.util.UtilOperation;
import com.iss.itreasury.ebank.util.OBConstant;
import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.contractcontent.dao.ContractContentDao;
import com.iss.itreasury.loan.contractcontent.dataentity.ContractContentInfo;
import com.iss.itreasury.loan.discount.dao.DiscountDao;
import com.iss.itreasury.loan.discount.dataentity.DiscountBillInfo;
import com.iss.itreasury.loan.discount.dataentity.DiscountCredenceInfo;
import com.iss.itreasury.loan.discount.dataentity.DiscountLoanInfo;
import com.iss.itreasury.loan.loanapply.dao.LoanApplyDao;
import com.iss.itreasury.loan.loanapply.dataentity.LoanApplyInfo;
import com.iss.itreasury.loan.loanapply.dataentity.LoanExaminePassInfo;
import com.iss.itreasury.loan.obinterface.dao.OBDiscountCredenceDao;
import com.iss.itreasury.loan.obinterface.dao.OBLoanDao;
import com.iss.itreasury.loan.transdiscountapply.dao.TransDiscountApplyBillDAO;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.settlement.account.dao.Sett_AccountDAO;
import com.iss.itreasury.settlement.account.dataentity.AccountInfo;
import com.iss.itreasury.settlement.util.NameRef;
import com.iss.itreasury.system.approval.dao.ApprovalDao;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.system.logger.dataentity.LoggerBtnLevelInfo;
import com.iss.itreasury.system.logger.dataentity.LoggerResults;
import com.iss.itreasury.util.Config;
import com.iss.itreasury.util.ConfigConstant;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.CreateCodeManager;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;
import com.iss.itreasury.loan.setting.dao.LoanTypeRelationDao;

/**
 * Created 2002-2-20 9:43:57 Code generated by the Forte for Java EJB Module
 * 
 * @author
 * 
 */

public class DiscountEJB implements SessionBean {

	private SessionContext context;

	/**
	 * No argument constructor required by container.
	 */
	public DiscountEJB() {
	}

	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate() {
	}

	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */

	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context) {
		this.context = context;
	}

	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate() {
	}

	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate() {
	}

	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove() {
	}

	/** ***********************添加私有方法*********************** */
	private Log4j log4j = new Log4j(Constant.ModuleType.LOAN, this); //

	// 通过客户标示查询客户名称
	private String findClientNameByID(int nClientID) throws RemoteException,
			IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		String strClientName = null;

		try {
			if (nClientID == -1) {
				return null;
			}
			con = Database.getConnection();
			// 查询
			strSQL = "select sName from Client where ID=? ";
			// Log.print (strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, nClientID);
			rs = ps.executeQuery();
			if (rs != null && rs.next()) {
				strClientName = rs.getString("sName"); // 单位名称
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return strClientName;
	}

	// 通过人员标示查询人员名称
	private String findUserNameByID(int nUserID) throws RemoteException,
			IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		String strUserName = null;

		try {
			if (nUserID == -1) {
				return null;
			}
			con = Database.getConnection();
			// 查询
			strSQL = "select sName from UserInfo where ID=? ";
			// Log.print (strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, nUserID);
			rs = ps.executeQuery();
			if (rs != null && rs.next()) {
				strUserName = rs.getString("sName"); // 人员名称
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return strUserName;
	}

	/**
	 * 根据贷款种类生成信贷(外汇)申请书编号 操作数据库表<LoanInfo>or<DiscountApply>
	 * 
	 * @return String sApplyCode 贴现申请书编号
	 */
	private String createApplyCode(long lSubTypeID) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;

		String strSelect = null;
		String strYear = null;
		long lMaxCode = 0;
		String strApplyCode = null;
		String curID = "";

		try {
			conn = Database.getConnection();

			// 取两位的年份
			strSelect = " select to_char(sysdate,'yy') from dual ";
			ps = conn.prepareStatement(strSelect);
			rs = ps.executeQuery();
			if (rs.next()) {
				strYear = rs.getString(1);
				// Log.print("Two Bits Year is: " + strYear);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			//贷款类型号
			curID = LOANConstant.SubLoanType.getCode(lSubTypeID);
			// 计算最大序列号
			int nLen = curID.length() + strYear.length() + 1;
			strSelect = " select nvl(max(substr(sApplyCode,"+(nLen+1)+",3)),0) + 1 from Loan_LoanForm where 1 = 1 "
					+ " and sApplyCode like 'A" + strYear + curID +  "%'";

			Log.print(strSelect);
			ps = conn.prepareStatement(strSelect);
			rs = ps.executeQuery();
			if (rs.next()) {
				lMaxCode = rs.getLong(1);
				Log.print("MaxCode is: " + lMaxCode);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;

			// 贴现
			strApplyCode = "A" + strYear + curID
					+ DataFormat.formatInt(lMaxCode, 3, true);
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}
		return (strApplyCode);
	}

	/** ***********************添加私有方法结束*********************** */

	/**
	 * 贴现信息（第一步）
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>新增或修改贴现信息</b>
	 * <ul>
	 * <li>操作数据库表DiscountApply
	 * <li>新增或修改纪录，如果lID==0，新增纪录，如果lID>0,修改纪录
	 * <li>save动作的第一步，该方法完成后，产生贷款标示
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long
	 *            lID 贴现标识
	 * @param long
	 *            lClientID 客户标识
	 * @param long
	 *            lCurrencyID 币种
	 * @param long
	 *            lUserID 录入人标识
	 * @param Timestamp
	 *            tsDate 录入时间
	 * @param long
	 *            lOfficeID 办事处标识
	 * 
	 * @return long 新增或修改成功，返回值 == lID，失败，返回值 == 0。
	 * 
	 * @exception Exception
	 */

	public long saveDiscount(DiscountLoanInfo info) throws RemoteException,
			IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		long lMaxID = -1;
		long nStatusID = -1;
		//String tmpApplyCode = createApplyCode(info.getSubTypeId());
		//add by  zcwang 2007-11-19 编码规则
		HashMap map = new HashMap();
		map.put("officeID",String.valueOf(info.getOfficeID()));
		map.put("currencyID",String.valueOf(info.getCurrencyID()));
		map.put("moduleID",String.valueOf(Constant.ModuleType.LOAN));
		map.put("transTypeID",String.valueOf(info.getTypeID()));
		map.put("actionID",String.valueOf(Constant.CodingruleAction.LOAN_APPLY));
		map.put("subTransTypeID",String.valueOf(info.getSubTypeId()));
		String tmpApplyCode="";
		try {
			tmpApplyCode = CreateCodeManager.createCode(map);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			throw new IRollbackException(context, e1.getMessage(), e1);
		}
		//
		ApprovalDelegation appbiz = new ApprovalDelegation();

		long lApprovalID = -1;
		// 模块类型
		long lModuleID = Constant.ModuleType.LOAN;
		// 业务类型
		long lLoanTypeID = Constant.ApprovalLoanType.TX;
		// 操作类型
		long lActionID = Constant.ApprovalAction.LOAN_APPLY;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		try {
			logInfo.setBusinessType("贴现-"+Constant.ApprovalAction.getName(lActionID)+"-"+"贴现申请单位资料");
			if(info.getID()>0){
				logInfo.setTransCode(NameRef.getApplyCodeByLoanID(info.getID()));//操作日志-业务主键-申请书编号
			}else{
				logInfo.setTransCode(tmpApplyCode);//操作日志-业务主键-申请书编号
			}
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try {
			conn = Database.getConnection();
			if (info.getID() <= 0) {
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
				// 第一次暂存
				// 得到最大的ID
				strSQL = "select nvl(max(ID)+1,1) from Loan_LoanForm";
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					lMaxID = rs.getLong(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				strSQL = " Insert into Loan_LoanForm (ID,nCurrencyID,nOfficeID,sApplyCode,nBorrowClientID,nInputUserID,dtInputDate,nNextCheckUserID,nStatusID,nTypeID,nNextCheckLevel,NSUBTYPEID)"
						+ " values (?,?,?,?,?,?,sysdate,?,?,?,1,?) ";

				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lMaxID);
				ps.setLong(2, info.getCurrencyID());
				ps.setLong(3, info.getOfficeID());
				ps.setString(4, tmpApplyCode);
				ps.setLong(5, info.getDiscountClientID());
				ps.setLong(6, info.getInputUserID());
				ps.setLong(7, info.getInputUserID());
				ps.setLong(8, LOANConstant.LoanStatus.SAVE);
				ps.setLong(9, LOANConstant.LoanType.TX);
				ps.setLong(10, info.getSubTypeId());

				ps.executeUpdate();
				ps.close();
				ps = null;
			} else {
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
				strSQL = " select nStatusID from Loan_LoanForm where ID=? ";
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, info.getID());
				rs = ps.executeQuery();
				if (rs.next()) {
					nStatusID = rs.getLong("nStatusID");
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				if (nStatusID == LOANConstant.LoanStatus.CHECK) {
					// 更新记录
					strSQL = " update Loan_LoanForm set nOfficeID=?,nClientID=?,nStatusID=?,nNextCheckUserID=nInputUserID where ID=? ";
					ps = conn.prepareStatement(strSQL);
					ps.setLong(1, info.getOfficeID());
					ps.setLong(2, info.getDiscountClientID());
					ps.setLong(3, LOANConstant.LoanStatus.SUBMIT);
					ps.setLong(4, info.getID());
					ps.executeUpdate();
					ps.close();
					ps = null;
					lMaxID = info.getID();

					// 获得ApprovalID
					lApprovalID = appbiz.getApprovalID(lModuleID, info
							.getSubTypeId(), lActionID, info.getOfficeID(),
							info.getCurrencyID());
					// --------如果是审核后重新提交--------//
					// 删除以前的审核意见记录（物理删除）
					appbiz.deleteApprovalTracing(lModuleID,
							info.getSubTypeId(), lActionID, info.getOfficeID(),
							info.getCurrencyID(), info.getID(), 1);
					Log.print("删除以前的审核意见记录（物理删除）");
				} else {
					// 更新记录
					strSQL = " update Loan_LoanForm set nOfficeID=?,nClientID=? where ID=? ";
					ps = conn.prepareStatement(strSQL);
					ps.setLong(1, info.getOfficeID());
					ps.setLong(2, info.getDiscountClientID());
					ps.setLong(3, info.getID());
					ps.executeUpdate();
					ps.close();
					ps = null;
					lMaxID = info.getID();
					// Insert,Update 统一得到 ID
				}
			}
			conn.close();
			conn = null;
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			
		} catch (Exception ex) {
			// add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
		}
		return (lMaxID);
	}

	/**
	 * 贴现申请详情存盘（第二步）
	 * 
	 * @param lID
	 *            贴现标识
	 * @param lApplyDiscountPO
	 *            申请汇票贴现张数
	 * @param lBankAcceptPO
	 *            银行承兑汇票张数
	 * @param lBizAcceptPO
	 *            商业承兑汇票张数
	 * @param dAmount
	 *            申请贴现金额
	 * @param strReason
	 *            贴现原因
	 * @param strPurpose
	 *            贴现目的
	 * @param lInputUserID
	 *            录入人标识
	 * @param tsDate
	 *            录入日期
	 * @return 返回贴现标识
	 */
	/*
	 * public long saveDiscountDetails( long lID, long lApplyDiscountPO, long
	 * lBankAcceptPO, long lBizAcceptPO, double dAmount, String strReason,
	 * String strPurpose, long lInputUserID, Timestamp tsDate, Timestamp
	 * tsDiscountStartDate)
	 */
	public long saveDiscountDetails(DiscountLoanInfo info)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		long nStatusID = -1;

		// 定义相应操作常量
		// 贷款
		long lModuleID = Constant.ModuleType.LOAN;
		// 模块类型
		long lLoanTypeID = Constant.ApprovalLoanType.TX;
		long lActionID = Constant.ApprovalAction.LOAN_APPLY;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
     // add by jbpan 20120606 操作日志-操作类型-修改保存
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
        try {
			logInfo.setBusinessType(Constant.ApprovalLoanType.getName(lLoanTypeID) + "-" + Constant.ApprovalAction.getName(lActionID) + "-" + "贴现申请详情");
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(info.getID()));  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try {
			conn = Database.getConnection();

			long lApprovalID = -1;
			ApprovalDelegation appbiz = new ApprovalDelegation();
			// ApprovalDao appdao = new ApprovalDao(conn);

			// 更新记录
			//strSQL = " update Loan_LoanForm set nBankAcceptPO=?,nBizAcceptPO=?,mLoanAmount=?,sLoanPurpose=?,sLoanReason=?,dtStartDate=?,IsPurchaserInterest=?,DiscountClientID=?,DiscountClientName=?,PurchaserInterestRate=?,dtEndDate=? where ID=? ";
			strSQL = " update Loan_LoanForm set nBankAcceptPO=?,nBizAcceptPO=?,mLoanAmount=?,sLoanPurpose=?,sLoanReason=?,dtStartDate=?,IsPurchaserInterest=?,DiscountClientID=?,DiscountClientName=?,dtEndDate=? where ID=? ";
			Log.print(strSQL);

			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, info.getBankAccepPO());
			ps.setLong(2, info.getBizAcceptPO());
			ps.setDouble(3, info.getApplyDiscountAmount());
			ps.setString(4, info.getDiscountPurpose());
			ps.setString(5, info.getDiscountReason());
			ps.setTimestamp(6, info.getDiscountStartDate());
			ps.setLong(7, info.getIsPurchaserInterest());
			ps.setLong(8, info.getDiscountClientID());
			ps.setString(9, info.getDiscountClientName());
//			ps.setDouble(10, info.getPurchaserInterestRate());
//			ps.setTimestamp(11, info.getDiscountEndDate());
//			ps.setLong(12, info.getID());
			ps.setTimestamp(10, info.getDiscountEndDate());
			ps.setLong(11, info.getID());
			ps.executeUpdate();
			ps.close();
			ps = null;

			strSQL = " select nStatusID from Loan_LoanForm where ID=? ";
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, info.getID());
			rs = ps.executeQuery();
			if (rs.next()) {
				nStatusID = rs.getLong("nStatusID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			if (nStatusID == LOANConstant.LoanStatus.CHECK) {
				// 更新记录
				strSQL = " update Loan_LoanForm set nStatusID=?,nNextCheckUserID=nInputUserID where ID=? ";
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, LOANConstant.LoanStatus.SUBMIT);
				ps.setLong(2, info.getID());
				ps.executeUpdate();
				ps.close();
				ps = null;

				// 获得ApprovalID
				lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID,
						lActionID, info.getOfficeID(), info.getCurrencyID());
				// --------如果是审核后重新提交--------//
				try {
					// 删除以前的审核意见记录（物理删除）
					appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID,
							lActionID, info.getOfficeID(),
							info.getCurrencyID(), info.getID(), 1);
					Log.print("删除以前的审核意见记录（物理删除）");
				} catch (Exception e) {
					log4j.error(e.toString());
					throw new IException("Gen_E001");
				}
			}
			conn.close();
			conn = null;
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception e) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} finally {
			//add by jbpan 20120606 start
			
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return info.getID();
	}

	/**
	 * 提交贴现
	 * 
	 * @param lID
	 *            贴现标识
	 * @return
	 */
	public long submitDiscount(long lID) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		long lResult = 0;
		// add by jbpan 20120606 操作日志 start
//        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
//        logInfo.setActionTypeID(Constant.LoggerOfOperationType.INITAPPROVAL);
//        logInfo.setBusinessType("提交贴现");
        // add by jbpan 20120606 end
		try {
			con = Database.getConnection();

			strSQL = " update Loan_LoanForm set nStatusID = ? where ID = ? ";
			ps = con.prepareStatement(strSQL);

			ps.setLong(1, LOANConstant.LoanStatus.SUBMIT);
			ps.setLong(2, lID);

			lResult = ps.executeUpdate();

			ps.close();
			ps = null;
			con.close();
			con = null;

			if (lResult > 0) {
				// add by jbpan 20120606 加上操作日志-操作结果-成功        
//	            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
				return 1; // sucess
			} else {
				// add by jbpan 20120606 加上操作日志-操作结果-成功        
//	            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
				return 0; // lost because tech reason
			}
		} catch (Exception e) {
//          add by jbapn 20120606 start
            // 加上操作日志       
//            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
//            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} finally {
			//add by jbpan 20120606 start
//			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(lID));  //操作日志-业务主键-交易号  
//			LoggerResults vResult = LoggerResults.getInstance(); 
//			// 将日志记录保存到内存中
//			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

	}

	/**
	 * 查找一条贴现信息，操作数据库表DiscountApply，
	 * 
	 * @param lDiscountID
	 *            贴现标识
	 */
	public DiscountLoanInfo findDiscountByID(long lDiscountID)
			throws RemoteException, IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		int nBillCount = 0;
		DiscountLoanInfo lai = new DiscountLoanInfo();

		try {
			con = Database.getConnection();

			// Log.print("======================"+createApplyCode());

			strSQL = " select a.*, ";
			strSQL += " c.sName sClientName, c.sAccount, d.sName sInputUserName, nvl(e.sContractCode,'') sContractCode, f.sName sDiscountClientName ";
			strSQL += " from Loan_LoanForm a,Client c,UserInfo d,Loan_ContractForm e,Client f ";
			strSQL += " where a.nBorrowClientID=c.ID(+) and a.nInputUserID=d.ID(+) and a.ID=e.nLoanID(+) and a.DiscountClientID=f.ID(+) and a.ID=? ";

			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lDiscountID);
			rs = ps.executeQuery();
			if (rs.next()) {
				lai.setID(lDiscountID); // 贴现ID标识
				lai.setDiscountCode(rs.getString("sApplyCode")); // 贴现编号
				lai.setContractCode(rs.getString("sContractCode")); // 贴现合同编号
				lai.setStatusID(rs.getLong("nStatusID")); // 状态
				lai.setTypeID(rs.getLong("nTypeID"));
				lai.setSubTypeId(rs.getLong("NSUBTYPEID"));
				// 申请单位
				lai.setApplyClientID(rs.getLong("nBorrowClientID")); // 申请单位编号
				lai.setApplyClientName(rs.getString("sClientName")); // 申请单位名称
				lai.setApplyLOfficeAccount(rs.getString("sAccount")); // 申请单位开户办事处账号
				lai.setApplyDiscountAmount(rs.getDouble("mLoanAmount")); // 申请贴现金额
				lai.setExamineAmount(rs.getDouble("mExamineAmount")); // 批准金额
				lai.setCheckAmount(rs.getDouble("mCheckAmount")); // 核定金额
				lai.setDiscountRate(rs.getDouble("mDiscountRate")); // 贴现利率
				lai.setInterest(rs.getDouble("mExamineAmount")
						- rs.getDouble("mCheckAmount")); // 贴现利息
				lai.setDiscountPurpose(rs.getString("sLoanPurpose")); // 贴现用途
				lai.setDiscountReason(rs.getString("sLoanReason")); // 贴现原因
				lai.setDiscountDate(rs.getTimestamp("dtDiscountDate")); // 贴现计息日
				lai.setDiscountStartDate(rs.getTimestamp("dtStartDate")); // 贴现开始日
				lai.setDiscountEndDate(rs.getTimestamp("dtEndDate")); // 贴现到期日
				lai.setInputUserID(rs.getLong("nInputUserID"));
				lai.setInputUserName(rs.getString("sInputUserName"));
				lai.setInputDate(rs.getTimestamp("dtInputDate"));
				lai.setNextCheckUserID(rs.getLong("nNextCheckUserID")); // 下一个审核人标示
				lai.setNextCheckLevel(rs.getLong("nNextCheckLevel")); // 下一个审核级别
				lai.setIsLowLevel(rs.getLong("isLowLevel")); //
				lai.setCheckOpinion(rs.getString("CHECKOPINION"));//意见
				if (lai.getStatusID() == LOANConstant.LoanStatus.SUBMIT
						&& lai.getNextCheckUserID() != lai.getInputUserID()) {
					lai.setIsCheck(Constant.YesOrNo.YES); // 已审核过
				} else {
					lai.setIsCheck(Constant.YesOrNo.NO); // 未审核过
				}

				// 贴现票据
				lai.setBankAccepPO(rs.getLong("nBankAcceptPO")); // 银行承兑汇票（张数）
				lai.setBizAcceptPO(rs.getLong("nBizAcceptPO")); // 商业承兑汇票（张数）
				lai.setApplyDiscountPO(lai.getBankAccepPO()
						+ lai.getBizAcceptPO()); // 申请贴现汇票（张数）

				// cec
				lai.setIsPurchaserInterest(rs.getLong("IsPurchaserInterest")); // 是否买方付息
				lai.setDiscountClientID(rs.getLong("DiscountClientID")); // 出票人
				if (rs.getString("DiscountClientName") != null
						&& rs.getString("DiscountClientName").length() > 0) {
					lai.setDiscountClientName(rs
							.getString("DiscountClientName")); // 出票人名称
				} else {
					lai.setDiscountClientName(rs
							.getString("sDiscountClientName")); // 出票人名称
				}
				lai.setPurchaserInterestRate(rs
						.getDouble("PurchaserInterestRate")); // 买方付息比例
				lai.setDiscountAccrual(rs.getDouble("mDiscountAccrual"));	//贴现人付息
				lai.setPurchaserAmount(rs.getDouble("mPurchaserAmount"));	//买方付息
				
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			// strSQL = " select count(*),sum(nvl(mAmount,0)),count() from
			// Loan_DiscountFormBill where nLoanID=? and nStatusID=? ";
			strSQL = " select sum(nvl(BankAmount,0))+sum(nvl(BizAmount,0)) BillAmount,sum(BankCount) BankCount,sum(BizCount) BizCount from ( "
					+ " select count(*) BankCount,sum(nvl(mAmount,0)) BankAmount,0 BizCount,0 BizAmount from Loan_DiscountFormBill where nLoanID=? and nStatusID=? and nAcceptPoTypeID=? "
					+ " union all "
					+ " select 0 BankCount,0 BankAmount,count(*) BizCount,sum(nvl(mAmount,0)) BizAmount from Loan_DiscountFormBill where nLoanID=? and nStatusID=? and nAcceptPoTypeID=? "
					+ " ) ";
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lDiscountID);
			ps.setLong(2, Constant.RecordStatus.VALID);
			ps.setLong(3, LOANConstant.DraftType.BANK);
			ps.setLong(4, lDiscountID);
			ps.setLong(5, Constant.RecordStatus.VALID);
			ps.setLong(6, LOANConstant.DraftType.BIZ);
			rs = ps.executeQuery();
			if (rs.next()) {
				lai.setBillAmount(rs.getDouble("BillAmount")); // 申请贴现汇票总金额
				lai.setBankCount(rs.getLong("BankCount")); // 银行承兑汇票（张数）
				lai.setBizCount(rs.getLong("BizCount")); // 商业承兑汇票（张数）
				lai.setBillCount(rs.getLong("BankCount")
						+ rs.getLong("BizCount")); // 申请贴现汇票（张数）
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			strSQL = " select count(distinct sCode) from Loan_DiscountFormBill where nLoanID=? and nStatusID=? ";
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lDiscountID);
			ps.setLong(2, Constant.RecordStatus.VALID);
			rs = ps.executeQuery();
			if (rs.next()) {
				lai.setDistinctBillCount(rs.getLong(1)); // 汇票总张数（编号不重复）
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			con.close();
			con = null;
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return lai;

	}

	/**
	 * 查找一条贴现信息，操作数据库表DiscountApply，
	 * 
	 * @param lDiscountID
	 *            贴现标识
	 */
	public DiscountCredenceInfo findDiscountCredenceByID(
			long lDiscountCredenceID) throws RemoteException, IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		int nBillCount = 0;
		DiscountCredenceInfo lai = new DiscountCredenceInfo();

		try {
			con = Database.getConnection();
			strSQL = "select id from loan_discountcredence where discountpayform =?";
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lDiscountCredenceID);
			rs = ps.executeQuery();
			if (rs.next()) 
				return findDiscountPayFormByID(lDiscountCredenceID);
			strSQL = " select a.*, ";
			strSQL += " b.ID nContractID,b.nSubTypeId,b.sContractCode,b.nBorrowClientID,b.mExamineAmount,b.mCheckAmount,b.mDiscountRate,b.IsPurchaserInterest,c.sName sClientName, ";
			strSQL += " d.sName sInputUserName,e.sAccountno sGrantCurrentAccount,e.sName sGrantName,f.sName AccName,f.sCode AccCode";
			strSQL += " from Loan_DiscountCredence a, Loan_ContractForm b, Client c, UserInfo d, Sett_Account e, Sett_Branch f ";
			strSQL += " where a.nContractID=b.ID and b.nBorrowClientID=c.ID(+) and a.nInputUserID=d.ID and b.nTypeID=? and a.ID=? ";
			strSQL += " and a.nGrantCurrentAccountID = e.ID(+) and a.nAccountBankID = f.ID(+)";
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, LOANConstant.LoanType.TX);
			ps.setLong(2, lDiscountCredenceID);
			rs = ps.executeQuery();
			if (rs.next()) {
				// 贴现申请
				lai.setDiscountContractID(rs.getLong("nContractID")); // 贴现ID标识
				lai.setSubTypeId(rs.getLong("nSubTypeId"));// 贷款类型子类Id
				lai.setDiscountContractCode(rs.getString("sContractCode")); // 贴现编号
				lai.setIsPurchaserInterest(rs.getLong("IsPurchaserInterest"));
				// 申请单位
				lai.setApplyClientID(rs.getLong("nBorrowClientID")); // 申请单位编号
				lai.setApplyClientName(rs.getString("sClientName")); // 申请单位名称
				lai.setApplyAccount(rs.getString("sApplyAccount")); // 申请单位账户号
				lai.setApplyBank(rs.getString("sApplyBank")); // 申请单位开户银行

				lai.setExamineAmount(rs.getDouble("mExamineAmount")); // 批准金额
				lai.setCheckAmount(rs.getDouble("mCheckAmount")); // 核定金额
				// lai.setInterest(rs.getDouble("mExamineAmount") -
				// rs.getDouble("mCheckAmount")); //贴现利息
				lai.setDiscountRate(rs.getDouble("mDiscountRate")); // 贴现利率

				// 贴现凭证l
				lai.setID(lDiscountCredenceID); // 贴现凭证标识
				lai.setCode(rs.getString("sCode")); // 贴现凭证编号
				lai.setFillDate(rs.getTimestamp("dtFillDate"));
				lai.setDraftTypeID(rs.getLong("nDraftTypeID")); // 贴现汇票种类标示
				lai.setDraftCode(rs.getString("sDraftCode")); // 贴现汇票号码
				lai.setPublicDate(rs.getTimestamp("dtPublicDate")); // 发票日
				lai.setAtTerm(rs.getTimestamp("dtAtTerm")); // 到期日
				lai.setAcceptClientName(rs.getString("sAcceptClient")); // 承兑单位名称
				lai.setAcceptAccount(rs.getString("sAcceptAccount")); // 承兑单位账户号
				lai.setAcceptBank(rs.getString("sAcceptBank")); // 承兑单位银行
				lai.setStatusID(rs.getLong("nStatusID")); // 贴现凭证是否删除

				lai.setBillAmount(rs.getDouble("mAmount")); // 贴现凭证金额
				lai.setBillInterest(rs.getDouble("mInterest")); // 贴现凭证利息
				lai.setPurchaserInterest(rs.getDouble("purchaserInterest")); // 买方支付贴现凭证利息
				lai.setBillCheckAmount(rs.getDouble("mAmount")
						- rs.getDouble("mInterest")); // 贴现凭证核定金额
				
				lai.setPurchaserCheckAmount(rs.getDouble("mAmount")
						- rs.getDouble("purchaserInterest")); //买方支付利息贴现凭证核定金额
				

				lai.setInputUserID(rs.getLong("nInputUserID"));
				lai.setInputUserName(rs.getString("sInputUserName"));
				lai.setInputDate(rs.getTimestamp("dtInputDate"));
				lai.setNextCheckUserID(rs.getLong("nNextCheckUserID")); // 下一个审核人标示
				lai.setNextCheckLevel(rs.getLong("nNextCheckLevel")); // 下一个审核级别

				lai.setGrantTypeID(rs.getLong("nGrantTypeID"));
				lai.setAccountBankID(rs.getLong("nAccountBankID"));
				lai.setAccountBankCode(rs.getString("AccCode"));
				lai.setAccountBankName(rs.getString("AccName"));
				lai.setReceiveClientCode(rs.getString("sReceiveAccount"));
				lai.setReceiveClientName(rs.getString("sReceiveClientName"));
				lai.setRemitBank(rs.getString("sRemitBank"));
				lai.setRemitInProvince(rs.getString("sRemitInProvince"));
				lai.setRemitInCity(rs.getString("sRemitInCity"));
				lai.setGrantCurrentAccountID(rs
						.getLong("nGrantCurrentAccountID"));
				lai.setGrantCurrentAccountCode(rs
						.getString("sGrantCurrentAccount"));
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			//以下修改为海翼项目提出
			//首先查询贴现申请汇票总张数
			strSQL = " select count(distinct sCode) from Loan_DiscountFormBill where nLoanID=? and nStatusID=? ";
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lai.getDiscountApplyID());
			ps.setLong(2, Constant.RecordStatus.VALID);
			rs = ps.executeQuery();
			if (rs.next()) {
				lai.setCount(rs.getLong(1)); // 汇票总张数（编号不重复）				
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;	
			
			if(lai.getCount() == 1){
				//只有一张汇票时，汇票承兑人名称取“承兑方”信息，汇票承兑人“账号”、“开户银行”都应该为空。
				strSQL = " select sbank from Loan_DiscountFormBill where nLoanID=? and nStatusID=? ";
				Log.print(strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lai.getDiscountApplyID());
				ps.setLong(2, Constant.RecordStatus.VALID);
				rs = ps.executeQuery();
				if (rs.next()) {
					lai.setAcceptClientName(rs.getString(1)); // 承兑方
					lai.setAcceptAccount("");// 承兑单位账户号
					lai.setAcceptBank("");// 承兑单位银行
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;	
			}
			
			con.close();
			con = null;
		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		}

		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return lai;

	}
	/**
	 * 查找一条贴现信息，操作数据库表DiscountApply，
	 * 
	 * @param lDiscountID
	 *            贴现标识
	 */
	private DiscountCredenceInfo findDiscountPayFormByID(
			long lDiscountPayFormID) throws RemoteException, IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		DiscountCredenceInfo lai = new DiscountCredenceInfo();

		try {
			con = Database.getConnection();
			strSQL = " select a.*, ";
			strSQL += " b.ID nContractID,b.nSubTypeId,b.sContractCode,b.nBorrowClientID,b.mExamineAmount,b.mCheckAmount,b.mDiscountRate,b.IsPurchaserInterest,c.sName sClientName, ";
			strSQL += " d.sName sInputUserName,e.sAccountno sGrantCurrentAccount,e.sName sGrantName,f.sName AccName,f.sCode AccCode";
			strSQL += " from LOAN_DISCOUNTPAYFORM a, Loan_ContractForm b, Client c, UserInfo d, Sett_Account e, Sett_Branch f ";
			strSQL += " where a.nContractID=b.ID and b.nBorrowClientID=c.ID(+) and a.nInputUserID=d.ID and b.nTypeID=? and a.ID=? ";
			strSQL += " and a.nGrantCurrentAccountID = e.ID(+) and a.nAccountBankID = f.ID(+)";
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, LOANConstant.LoanType.TX);
			ps.setLong(2, lDiscountPayFormID);
			rs = ps.executeQuery();
			if (rs.next()) {
				// 贴现申请
				lai.setDiscountContractID(rs.getLong("nContractID")); // 贴现ID标识
				lai.setSubTypeId(rs.getLong("nSubTypeId"));// 贷款类型子类Id
				lai.setDiscountContractCode(rs.getString("sContractCode")); // 贴现编号
				lai.setIsPurchaserInterest(rs.getLong("IsPurchaserInterest"));
				// 申请单位
				lai.setApplyClientID(rs.getLong("nBorrowClientID")); // 申请单位编号
				lai.setApplyClientName(rs.getString("sClientName")); // 申请单位名称
				lai.setApplyAccount(rs.getString("sApplyAccount")); // 申请单位账户号
				lai.setApplyBank(rs.getString("sApplyBank")); // 申请单位开户银行

				lai.setExamineAmount(rs.getDouble("mExamineAmount")); // 批准金额
				lai.setCheckAmount(rs.getDouble("mCheckAmount")); // 核定金额
				// lai.setInterest(rs.getDouble("mExamineAmount") -
				// rs.getDouble("mCheckAmount")); //贴现利息
				lai.setDiscountRate(rs.getDouble("mDiscountRate")); // 贴现利率

				// 贴现凭证l
				lai.setID(lDiscountPayFormID); // 贴现凭证标识
				lai.setCode(rs.getString("sCode")); // 贴现凭证编号
				lai.setFillDate(rs.getTimestamp("dtFillDate"));
				lai.setDraftTypeID(rs.getLong("nDraftTypeID")); // 贴现汇票种类标示
				lai.setDraftCode(rs.getString("sDraftCode")); // 贴现汇票号码
				lai.setPublicDate(rs.getTimestamp("dtPublicDate")); // 发票日
				lai.setAtTerm(rs.getTimestamp("dtAtTerm")); // 到期日
				lai.setAcceptClientName(rs.getString("sAcceptClient")); // 承兑单位名称
				lai.setAcceptAccount(rs.getString("sAcceptAccount")); // 承兑单位账户号
				lai.setAcceptBank(rs.getString("sAcceptBank")); // 承兑单位银行
				lai.setStatusID(rs.getLong("nStatusID")); // 贴现凭证是否删除

				lai.setBillAmount(rs.getDouble("mAmount")); // 贴现凭证金额
				lai.setBillInterest(rs.getDouble("mInterest")); // 贴现凭证利息
				lai.setPurchaserInterest(rs.getDouble("purchaserInterest")); // 买方支付贴现凭证利息
				lai.setBillCheckAmount(rs.getDouble("mAmount")
						- rs.getDouble("mInterest")); // 贴现凭证核定金额

				lai.setInputUserID(rs.getLong("nInputUserID"));
				lai.setInputUserName(rs.getString("sInputUserName"));
				lai.setInputDate(rs.getTimestamp("dtInputDate"));
				lai.setNextCheckUserID(rs.getLong("nNextCheckUserID")); // 下一个审核人标示
				lai.setNextCheckLevel(rs.getLong("nNextCheckLevel")); // 下一个审核级别

				lai.setGrantTypeID(rs.getLong("nGrantTypeID"));
				lai.setAccountBankID(rs.getLong("nAccountBankID"));
				lai.setAccountBankCode(rs.getString("AccCode"));
				lai.setAccountBankName(rs.getString("AccName"));
				lai.setReceiveClientCode(rs.getString("sReceiveAccount"));
				lai.setReceiveClientName(rs.getString("sReceiveClientName"));
				lai.setRemitBank(rs.getString("sRemitBank"));
				lai.setRemitInProvince(rs.getString("sRemitInProvince"));
				lai.setRemitInCity(rs.getString("sRemitInCity"));
				lai.setGrantCurrentAccountID(rs
						.getLong("nGrantCurrentAccountID"));
				lai.setGrantCurrentAccountCode(rs
						.getString("sGrantCurrentAccount"));
			}
		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		}

		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return lai;

	}
	
	
	/**
	 * 查找贴现,操作DiscountApply <br>
	 * lDiscountApplyIDFrom和lDiscountApplyIDTo，同一类型的合同的流水号的部分作为查询范围 <br>
	 * 如果是修改贴现查询，需要查录入人是lUserID的，如果复核贴现查询，需要查录入人不是lUserID的或者复核人是lUserID的
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lCurrencyID
	 *            币种标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lActionID
	 *            动作，修改或者复核
	 * @param lUserID
	 *            操作人标识
	 * @param lDiscountApplyIDFrom
	 *            贴现标识起始
	 * @param lDiscountApplyIDTo
	 *            贴现标识结束
	 * @param lClientID
	 *            申请单位标识
	 * @param dAmountFrom
	 *            贴现金额起始
	 * @param dAmountTo
	 *            贴现金额结束
	 * @param tsInputStart
	 *            录入日期起始
	 * @param tsInputEnd
	 *            录入日期结束
	 */
	public Collection findDiscountByMultiOption(long lCurrencyID,
			long lOfficeID, long lActionID, long lUserID,
			long lDiscountApplyIDFrom, long lDiscountApplyIDTo, long lClientID,
			double dAmountFrom, double dAmountTo, Timestamp tsInputStart,
			Timestamp tsInputEnd, long lStatusID, long lPageLineCount,
			long lPageNo, long lOrderParam, long lDesc) throws RemoteException,
			IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;
		String strIn = null;
		String strUser = null;
		String strNextSql = "";

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		// 模块类型
		long lModule = Constant.ModuleType.LOAN;
		// 业务类型
		long lLoanType = Constant.ApprovalLoanType.TX;
		// 操作类型
		long lAction = Constant.ApprovalAction.LOAN_APPLY;

		try {
			con = Database.getConnection();

			strIn = LOANConstant.LoanStatus.SAVE + ","
					+ LOANConstant.LoanStatus.SUBMIT + ","
					+ LOANConstant.LoanStatus.CHECK;

			// 计算记录总数
			strSelect = " select count(*) ";
			strSQL = " from Loan_LoanForm aa, Client bb, Client cc ";
			strSQL = strSQL
					+ " where aa.nBorrowClientID = bb.ID(+) and aa.DiscountClientID = cc.ID(+)";

			// ////////////////////查询条件////////////////////////////////////////////////////
			if (lOfficeID != -1) {
				strSQL = strSQL + " and aa.nOfficeID=" + lOfficeID;
			}
			if (lCurrencyID != -1) {
				strSQL = strSQL + " and aa.nCurrencyID = " + lCurrencyID;
			}
			if (lDiscountApplyIDFrom != -1) {
				strSQL = strSQL + " and aa.ID>=" + lDiscountApplyIDFrom;
			}
			if (lDiscountApplyIDTo != -1) {
				strSQL = strSQL + " and aa.ID<=" + lDiscountApplyIDTo;
			}
			if (lClientID != -1) {
				strSQL = strSQL + " and aa.nBorrowClientID=" + lClientID;
			}
			if (dAmountFrom != 0) {
				strSQL = strSQL + " and aa.mLoanAmount>=" + dAmountFrom;
			}
			if (dAmountTo != 0) {
				strSQL = strSQL + " and aa.mLoanAmount<=" + dAmountTo;
			}
			if (tsInputStart != null) {
				strSQL = strSQL
						+ " and to_char(aa.dtInputDate,'yyyy-mm-dd') >= '"
						+ DataFormat.getDateString(tsInputStart) + "'";
			}
			if (tsInputEnd != null) {
				strSQL = strSQL
						+ " and to_char(aa.dtInputDate,'yyyy-mm-dd') <= '"
						+ DataFormat.getDateString(tsInputEnd) + "'";
			}
			strSQL = strSQL + " and aa.nTypeID = " + LOANConstant.LoanType.TX;
			strSQL = strSQL + " and aa.nStatusID in (" + strIn + ")";

			if (lUserID != -1) {
				// 修改查找
				if (lActionID == 1) {
					if (lStatusID == LOANConstant.LoanStatus.SAVE) {
						strSQL += " and aa.nInputUserID=" + lUserID;
						strSQL += " and aa.nStatusID = "
								+ LOANConstant.LoanStatus.SAVE;
					} else if (lStatusID == LOANConstant.LoanStatus.SUBMIT) {
						strSQL += " and aa.nInputUserID=" + lUserID;
						// strSQL += " and aa.nNextCheckUserID=" + lUserID;
						strSQL += " and aa.nNextCheckLevel = 1 ";
						strSQL += " and aa.nStatusID = "
								+ LOANConstant.LoanStatus.SUBMIT;
					} else {
						strSQL += " and ( ( aa.nInputUserID=" + lUserID;
						strSQL += " and aa.nStatusID = "
								+ LOANConstant.LoanStatus.SAVE;
						strSQL += " ) or ( aa.nInputUserID=" + lUserID;
						// strSQL += " and aa.nNextCheckUserID=" + lUserID;
						strSQL += " and aa.nNextCheckLevel = 1 ";
						strSQL += " and aa.nStatusID = "
								+ LOANConstant.LoanStatus.SUBMIT;
						strSQL += " ) ) ";
					}
				}
				// 审核查找
				else if (lActionID == 2) 
				{
					ApprovalDelegation appBiz = new ApprovalDelegation();
					// 获得真正来审批这个记录的人（真实或传给的虚拟的人！）
					// strUser =
					// appBiz.findTheVeryUser(lModule,lLoanType,lAction,lOfficeID,lCurrencyID,lUserID);
					LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
					
					// 获取所有子类型
					long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(
							lOfficeID, lCurrencyID, new long[] { LOANConstant.LoanType.TX });
					if (a_SubLoanType != null && a_SubLoanType.length > 0) 
					{
						strNextSql = " ( ";
						for (int i = 0; i < a_SubLoanType.length; i++) 
						{
							strUser = appBiz.findTheVeryUser(lModule,a_SubLoanType[i], lAction, lOfficeID,lCurrencyID, lUserID);
							if (strUser != null ) 
							{
								strNextSql += " ( aa.NSUBTYPEID = "
										+ a_SubLoanType[i]
										+ " and aa.nNextCheckUserID in "
										+ strUser +" ) ";
							} 
							if ( i < a_SubLoanType.length - 1) 
							{
								strNextSql += " or ";
							} 
							else 
							{
								strNextSql += " ) ";
							}
						}
					} 
					else 
					{
						return null;
					}
					
					if(lStatusID == LOANConstant.LoanStatus.SUBMIT)
					{
						strSQL += " and aa.nStatusID = "
								+ LOANConstant.LoanStatus.SUBMIT
								+ " and " + strNextSql;
					}
					else if(lStatusID == LOANConstant.LoanStatus.CHECK)
					{
						strSQL += " and aa.nStatusID = "
							+ LOANConstant.LoanStatus.CHECK;
					}
					else
					{
						strSQL += " and ("
							+"  (aa.nStatusID = "
							+ LOANConstant.LoanStatus.SUBMIT
							+ " and " + strNextSql
							+ " ) or ( "
							+ " aa.nStatusID = "
							+ LOANConstant.LoanStatus.CHECK
							+"))";
					}	
				}
			}
			Log.print(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			switch ((int) lOrderParam) {
			case 1:
				strSQL += " order by aa.sApplyCode ";
				break;
			case 2:
				strSQL += " order by bb.sName ";
				break;
			case 3:
				strSQL += " order by aa.mLoanAmount ";
				break;
			case 4:
				strSQL += " order by aa.dtInputDate ";
				break;
			case 5:
				strSQL += " order by aa.nStatusID ";
				break;
			default:
				strSQL += " order by aa.sApplyCode ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			strSQL = "select aa.*,bb.sName,cc.sName sDiscountClientName "
					+ strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between "
					+ lRowNumStart + " and " + lRowNumEnd;
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountLoanInfo dli = new DiscountLoanInfo();
				dli.setSubTypeId(rs.getLong("NSUBTYPEID"));
				dli.setID(rs.getLong("ID")); // 贴现标示
				dli.setDiscountCode(rs.getString("sApplyCode")); // 贴现编号
				dli.setApplyClientName(rs.getString("sName")); // 借款单位
				dli.setApplyDiscountAmount(rs.getDouble("mLoanAmount")); // 借款金额
				dli.setInputDate(rs.getTimestamp("dtInputDate")); // 贷款开始时间
				dli.setStatusID(rs.getLong("nStatusID"));
				dli.setExamineAmount(rs.getDouble("mExamineAmount"));
				dli.setCheckAmount(rs.getDouble("mCheckAmount"));
				dli.setDiscountRate(rs.getDouble("mDiscountRate"));
				dli.setDiscountDate(rs.getTimestamp("dtDiscountDate")); // 贴现计息日
				dli.setDiscountStartDate(rs.getTimestamp("dtStartDate")); // 贴现开始日
				dli.setDiscountEndDate(rs.getTimestamp("dtEndDate")); // 贴现到期日
				dli.setNextCheckLevel(rs.getLong("nNextCheckLevel")); // 下一个审核级别

				// cec
				dli.setIsPurchaserInterest(rs.getLong("IsPurchaserInterest")); // 是否买方付息
				dli.setDiscountClientID(rs.getLong("DiscountClientID")); // 出票人
				if (rs.getString("DiscountClientName") != null
						&& rs.getString("DiscountClientName").length() > 0) {
					dli.setDiscountClientName(rs
							.getString("DiscountClientName")); // 出票人名称
				} else {
					dli.setDiscountClientName(rs
							.getString("sDiscountClientName")); // 出票人名称
				}
				dli.setPurchaserInterestRate(rs
						.getDouble("PurchaserInterestRate")); // 买方付息比例

				// 审核查找
				if (lActionID == 2) {
					// dli.nLsReviewUserID = findReviewByID((int) dli.lID, (int)
					// Notes.CODE_EXAMINE_TYPE_DISCOUNT, 1); //最后审核人ID
					// dli.sLsReviewUserName =
					// appbiz.getLastCheckPerson(lModuleID,applyInfo.getTypeID(),lActionID,applyInfo.getID()
					// );
					// dli.nReviewStatusID = findReviewByID((int) dli.lID, (int)
					// Notes.CODE_EXAMINE_TYPE_DISCOUNT, 2); //最后审核状态
				}
				dli.setCount(lRecordCount);
				v.add(dli);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return (v.size() > 0 ? v : null);
	}

	/**
	 * 保存贴现票据信息，操作DiscountBill表
	 * 
	 * @param lDiscountBillID
	 *            贴现票据标识，如果<=0，新增，否则，修改。新增ID取最大值
	 * @param lDiscountApplyID
	 *            贴现标识
	 * @param strUser
	 *            原始出票人
	 * @param strBank
	 *            承兑银行
	 * @param lIsInBeijing
	 *            是否在北京
	 * @param tsCreate
	 *            出票日
	 * @param tsEnd
	 *            到期日
	 * @param strCode
	 *            汇票号码
	 * @param dAmount
	 *            汇票金额
	 */
	public long saveDiscountBill(long lDiscountBillID, long lDiscountApplyID,
			String strUser, String strBank, long lIsLocal, Timestamp tsCreate,
			Timestamp tsEnd, String strCode, double dAmount, long lAddDay,
			long lAcceptPOTypeID, String strFormerOwner, long lCurrencyID,
			long lOfficeID,String payee) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		long lMaxID = -1;
		int nMaxSerialNo = -1;
		long nStatusID = -1;
		Timestamp tsDiscountEndDate = null;

		ApprovalDelegation appbiz = new ApprovalDelegation();

		long lApprovalID = -1;
		// 模块类型
		long lModuleID = Constant.ModuleType.LOAN;
		// 业务类型
		long lLoanTypeID = Constant.ApprovalLoanType.TX;
		// 操作类型
		long lActionID = Constant.ApprovalAction.LOAN_APPLY;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        try {
			logInfo.setBusinessType(Constant.ApprovalLoanType.getName(lLoanTypeID) + "-" + Constant.CodingruleAction.getName(lActionID) + "-" + "贴现票据明细");
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(lDiscountApplyID));  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try {
			conn = Database.getConnection();
			if (lDiscountBillID <= 0) {
				// 第一次暂存
				// 得到最大的ID
				strSQL = " select nvl(max(ID)+1,1) from Loan_DiscountFormBill ";
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					lMaxID = rs.getLong(1);
				}

				rs.close();
				rs = null;
				ps.close();
				ps = null;

				strSQL = " select nvl(max(nSerialNo)+1,1) from Loan_DiscountFormBill "
						+ " where nLoanID="
						+ lDiscountApplyID
						+ " and nStatusID = " + Constant.RecordStatus.VALID;
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					nMaxSerialNo = rs.getInt(1);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				// 存储记录
				strSQL = " Insert into Loan_DiscountFormBill(ID,nLoanID,nSerialNo,sUserName,sBank,nIsLocal,dtCreate,dtEnd,sCode,mAmount,nStatusID,nAddDays,nAcceptPOTypeID,sFormerOwner,nCurrencyID,nOfficeID,payee)"
						+ " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";

				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lMaxID);
				ps.setLong(2, lDiscountApplyID);
				ps.setLong(3, nMaxSerialNo);
				ps.setString(4, strUser);
				ps.setString(5, strBank);
				ps.setLong(6, lIsLocal);
				ps.setTimestamp(7, tsCreate);
				ps.setTimestamp(8, tsEnd);
				ps.setString(9, strCode);
				ps.setDouble(10, dAmount);
				ps.setLong(11, Constant.RecordStatus.VALID);
				ps.setLong(12, lAddDay);
				ps.setLong(13, lAcceptPOTypeID);
				ps.setString(14, strFormerOwner);
				ps.setLong(15, lCurrencyID);
				ps.setLong(16, lOfficeID);
				ps.setString(17, payee);

				ps.executeUpdate();
				ps.close();
				ps = null;
				// add by jbpan 20120606 操作日志-操作类型-创建保存
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
			} else {
				// 更新记录
				strSQL = " update Loan_DiscountFormBill set sUserName=?,sBank=?,nIsLocal=?,dtCreate=?,dtEnd=?,sCode=?,mAmount=?,nAddDays=?,nAcceptPOTypeID=?,sFormerOwner=?,payee=? where ID=? ";

				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setString(1, strUser);
				ps.setString(2, strBank);
				ps.setLong(3, lIsLocal);
				ps.setTimestamp(4, tsCreate);
				ps.setTimestamp(5, tsEnd);
				ps.setString(6, strCode);
				ps.setDouble(7, dAmount);
				ps.setLong(8, lAddDay);
				ps.setLong(9, lAcceptPOTypeID);
				ps.setString(10, strFormerOwner);
				ps.setString(11, payee);
				ps.setLong(12, lDiscountBillID);

				ps.executeUpdate();
				ps.close();
				ps = null;
				lMaxID = lDiscountBillID;
				// Insert,Update 统一得到 ID
				// add by jbpan 20120606 操作日志-操作类型-修改保存
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
			}

			strSQL = " select dtEndDate,nStatusID from Loan_LoanForm where ID=? ";
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lDiscountApplyID);
			rs = ps.executeQuery();
			if (rs.next()) {
				nStatusID = rs.getLong("nStatusID");
				tsDiscountEndDate = rs.getTimestamp("dtEndDate");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			// 审核后不允许再修改
			/*
			 * if (nStatusID == LOANConstant.LoanStatus.CHECK) { //更新记录 strSQL = "
			 * update Loan_LoanForm set
			 * nStatusID=?,nNextCheckUserID=nInputUserID where ID=? "; ps =
			 * conn.prepareStatement(strSQL); ps.setLong(1,
			 * LOANConstant.LoanStatus.SUBMIT); ps.setLong(2, lDiscountApplyID);
			 * ps.executeUpdate(); ps.close(); ps = null;
			 * 
			 * //获得ApprovalID lApprovalID =
			 * appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID);
			 * //--------如果是审核后重新提交--------// //删除以前的审核意见记录（物理删除）
			 * appbiz.deleteApprovalTracing(lApprovalID, lID, 1);
			 * Log.print("删除以前的审核意见记录（物理删除）"); }
			 */
			if (tsDiscountEndDate == null && tsEnd != null) {
				// 更新记录
				strSQL = " update Loan_LoanForm set dtEndDate=? where ID=? ";
				// Log.print (strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setTimestamp(1, tsEnd);
				ps.setLong(2, lDiscountApplyID);
				ps.executeUpdate();
				ps.close();
				ps = null;
			} else if (tsDiscountEndDate != null && tsEnd != null
	//				&& tsDiscountEndDate.before(tsEnd)
					) {
				// 更新记录
				strSQL = " update Loan_LoanForm set dtEndDate=? where ID=? ";
				// Log.print (strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setTimestamp(1, tsEnd);
				ps.setLong(2, lDiscountApplyID);
				ps.executeUpdate();
				ps.close();
				ps = null;
			}

			conn.close();
			conn = null;
			// add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

		return (lMaxID);
	}
	
	public long findDiscountBillCountByLoanID(long lLoanID)throws RemoteException,IException{
		return new DiscountDao().findDiscountBillCountByLoanID(lLoanID);
	}

	/**
	 * 查找一条贴现信息，操作数据库表DiscountBill，
	 * 
	 * @param lDiscountID
	 *            贴现标识
	 */
	public DiscountBillInfo findDiscountBillByID(long lDiscountBillID)
			throws RemoteException, IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		int nBillCount = 0;
		DiscountBillInfo dbi = new DiscountBillInfo();

		try {
			con = Database.getConnection();
			strSQL = " select * from Loan_DiscountFormBill where ID=? ";

			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lDiscountBillID);
			rs = ps.executeQuery();
			if (rs.next()) {

				dbi.setID(lDiscountBillID); // 票据标示
				dbi.setDiscountApplyID(rs.getLong("nLoanID")); // 贴现标识
				dbi.setSerialNo(rs.getLong("nSerialNo")); // 序列号
				dbi.setUserName(rs.getString("sUserName")); // 原始出票人
				dbi.setBank(rs.getString("sBank")); // 承兑银行
				dbi.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地
				dbi.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbi.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbi.setCode(rs.getString("sCode")); // 汇票号码
				dbi.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbi.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbi.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbi.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
				dbi.setPayee(rs.getString("payee"));
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		}

		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return dbi;

	}

	/**
	 * 查询一个贴现申请下的贴现票据，操作DiscountBill表
	 * 
	 * @param lDiscountApplyID
	 *            贴现标识
	 * @return 返回贴现票据的列表
	 */
	public Collection findDiscountBillByDiscountID(long lDiscountApplyID,
			long lPageLineCount, long lPageNo, long lOrderParam, long lDesc)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;

		Vector v = new Vector();
		long lRecordCount = 0;
		long lPageCount = 0;
		long lRowNumStart = 0;
		long lRowNumEnd = 0;
		double dTotalAmount = 0; // 总票据金额
		long lBankCount = 0;
		long lBizCount = 0;

		try {
			con = Database.getConnection();

			strSQL = " select sum(BankCount) BankCount,sum(BizCount) BizCount from ( "
					+ " select count(*) BankCount,0 BizCount from Loan_DiscountFormBill where nLoanID=? and nStatusID=? and nAcceptPoTypeID=? "
					+ " union all "
					+ " select 0 BankCount,count(*) BizCount from Loan_DiscountFormBill where nLoanID=? and nStatusID=? and nAcceptPoTypeID=? "
					+ " ) ";
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lDiscountApplyID);
			ps.setLong(2, Constant.RecordStatus.VALID);
			ps.setLong(3, LOANConstant.DraftType.BANK);
			ps.setLong(4, lDiscountApplyID);
			ps.setLong(5, Constant.RecordStatus.VALID);
			ps.setLong(6, LOANConstant.DraftType.BIZ);
			rs = ps.executeQuery();
			if (rs.next()) {
				lBankCount = rs.getLong("BankCount"); // 银行承兑汇票（张数）
				lBizCount = rs.getLong("BizCount"); // 商业承兑汇票（张数）
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			// 计算记录总数
			strSelect = " select count(*),sum(mAmount) ";
			strSQL = " from Loan_DiscountFormBill where nStatusID="
					+ Constant.RecordStatus.VALID + " and nLoanID="
					+ lDiscountApplyID;

			Log.print(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
				dTotalAmount = rs.getDouble(2);
			}
			Log.print("==============");
			Log.print(lRecordCount);
			Log.print(dTotalAmount);
			Log.print("==============");
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			switch ((int) lOrderParam) {
			case 1:
				strSQL += " order by nSerialNo";
				break;
			case 2:
				strSQL += " order by sUserName";
				break;
			case 3:
				strSQL += " order by sBank";
				break;
			case 4:
				strSQL += " order by nIsLocal";
				break;
			case 5:
				strSQL += " order by dtCreate";
				break;
			case 6:
				strSQL += " order by dtEnd";
				break;
			case 7:
				strSQL += " order by sCode";
				break;
			case 8:
				strSQL += " order by mAmount";
				break;
			case 9:
				strSQL += " order by nAddDays";
				break;
			case 10:
				strSQL += " order by nAcceptPOTypeID";
				break;
			case 11:
				strSQL += " order by sFormerOwner";
				break;
			default:
				strSQL += " order by nSerialNo ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			strSQL = "select * " + strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between "
					+ lRowNumStart + " and " + lRowNumEnd;

			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountBillInfo dbill = new DiscountBillInfo();

				dbill.setDiscountApplyID(lDiscountApplyID); // 贴现标示
				dbill.setID(rs.getLong("ID")); // 票据标示
				dbill.setSerialNo(rs.getLong("nSerialNo")); // 序列号
				dbill.setUserName(rs.getString("sUserName")); // 原始出票人
				dbill.setBank(rs.getString("sBank")); // 承兑银行
				dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
				dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbill.setCode(rs.getString("sCode")); // 汇票号码
				dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
				dbill.setPayee(rs.getString("payee"));//dsc收款人

				dbill.setCount(lRecordCount);
				dbill.setTotalAmount(dTotalAmount);
				dbill.setBankCount(lBankCount);
				dbill.setBizCount(lBizCount);
				v.add(dbill);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return (v.size() > 0 ? v : null);
	}

	/**
	 * 查询一个贴现申请下的贴现票据，操作DiscountBill表
	 * ADD BY XWHE
	 * @param lDiscountApplyID
	 *            贴现标识
	 * @return 返回贴现票据的列表
	 */
	public Collection findDiscountBillByApplyID(long lDiscountApplyID , long lDiscountBillID)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		Vector v = new Vector();
		String  strSQL = "";
		try {
			con = Database.getConnection();
			strSQL = " select *  from Loan_DiscountFormBill where nStatusID = "+ Constant.RecordStatus.VALID +
					 " and nLoanID = "+ lDiscountApplyID +
			         " and ID <> "+ lDiscountBillID;
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountBillInfo dbill = new DiscountBillInfo();

				dbill.setDiscountApplyID(lDiscountApplyID); // 贴现标示
				dbill.setID(rs.getLong("ID")); // 票据标示
				dbill.setSerialNo(rs.getLong("nSerialNo")); // 序列号
				dbill.setUserName(rs.getString("sUserName")); // 原始出票人
				dbill.setBank(rs.getString("sBank")); // 承兑银行
				dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
				dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbill.setCode(rs.getString("sCode")); // 汇票号码
				dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前
				v.add(dbill);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return (v.size() > 0 ? v : null);
	}
	/**
	 * 查询一个贴现申请下的贴现票据，操作DiscountBill表
	 * 
	 * @param lDiscountApplyID
	 *            贴现标识]
	 * @param dRate
	 *            贴现利率
	 * @param tsDate
	 *            贴现日
	 * @return 返回贴现票据的列表
	 */
	public Collection findDiscountBillByDiscountID(long lDiscountApplyID,

	long lPageLineCount, long lPageNo, long lOrderParam, long lDesc,

	double dRate, Timestamp tsDate) throws RemoteException, IException {

		PreparedStatement ps = null;
		ResultSet rs = null;
		PreparedStatement ps1 = null;
		ResultSet rs1 = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;
		String strUpdate = null;

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		Timestamp tsEnd = null; // 贴现日期
		String strEnd = ""; // 贴现日期
		int nDays = 0; // 实际贴现天数
		double dAmount = 0; // 票据金额
		double dAccrual = 0; // 贴现利息
		double dRealAmount = 0; // 实付贴现金额
		double dTotalAmount = 0; // 总票据金额
		double dTotalAccrual = 0; // 总票据利息
		double dTotalRealAmount = 0; // 总票据实付金额

		try {
			con = Database.getConnection();

			Log.print("======进入贴现计息(findDiscountBillByDiscountID)方法======");

			Log.print("贴现标示：" + lDiscountApplyID);
			Log.print("贴现利率：" + dRate);
			Log.print("贴现日  ：" + tsDate);

			Log.print("======开始校验贴现日，贴现日应该大于所有票据到期日======");

			// 贴现日输入校验，应该大于所有票据到期日
			strSQL = " select count(*) from Loan_DiscountFormBill where nStatusID="
					+ Constant.RecordStatus.VALID
					+ " and nLoanID="
					+ lDiscountApplyID;
			strSQL = strSQL + " and to_char(dtEnd,'yyyy-mm-dd') < '"
					+ DataFormat.getDateString(tsDate) + "'";

			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
			}
			if (lRecordCount > 0) {
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				con.close();
				con = null;
				DiscountBillInfo dbill_temp = new DiscountBillInfo();
				dbill_temp.setDiscountApplyID(-1); // 贴现标示
				v.add(dbill_temp);
				return v;
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			Log.print("======贴现日校验结束======");

			Log.print("======开始查询所有票据信息======");

			strSelect = " select * ";
			strSQL = " from Loan_DiscountFormBill where nStatusID="
					+ Constant.RecordStatus.VALID + " and nLoanID="
					+ lDiscountApplyID;

			Log.print(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {

				dAmount = rs.getDouble("mAmount"); // 汇票金额

				strEnd = rs.getTimestamp("dtEnd").toString();
				tsEnd = new java.sql.Timestamp(new Integer(strEnd.substring(0,
						4)).intValue() - 1900, new Integer(strEnd.substring(5,
						7)).intValue() - 1,
						new Integer(strEnd.substring(8, 10)).intValue(), 0, 0,
						0, 0);

				nDays = (int) java.lang.Math.ceil((tsEnd.getTime() - tsDate
						.getTime()) / 86400000)
						+ rs.getInt("nAddDays"); // 加上节假日增加计息天数

				if (nDays >= 0) {
					if (rs.getLong("nIsLocal") == Constant.YesOrNo.NO)
						nDays = nDays + 3;
					dAccrual = dAmount * (dRate / 360) * 0.01 * nDays;
					dAccrual = DataFormat.formatDouble(dAccrual, 2);
					// dAccrual = dAmount * dRate * 0.01 * nDays;
					dRealAmount = dAmount - dAccrual;
				}
				Log.print("========================");
				Log.print("汇票金额=" + dAmount);
				Log.print("汇票利息=" + dAccrual);
				Log.print("实付金额=" + dRealAmount);
				Log.print("========================");
				// dTotalAccrual = DataFormat.formatDouble(dTotalAccrual, 2) +
				// DataFormat.formatDouble(dAccrual, 2);
				// dTotalRealAmount = DataFormat.formatDouble(dTotalRealAmount,
				// 2) + DataFormat.formatDouble(dRealAmount, 2);
				dTotalAccrual = dTotalAccrual + dAccrual;
				dTotalRealAmount = dTotalRealAmount + dRealAmount;

				dAmount = 0; // 票据金额
				dAccrual = 0; // 贴现利息
				dRealAmount = 0; // 实付贴现金额

			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			Log.print("======结束查询所有票据信息======");

			Log.print("======开始查询票据总数和总金额======");

			// 计算记录总数
			strSelect = " select count(*),sum(nvl(mAmount,0)) ";
			strSQL = " from Loan_DiscountFormBill where nStatusID="
					+ Constant.RecordStatus.VALID + " and nLoanID="
					+ lDiscountApplyID;

			Log.print(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
				dTotalAmount = rs.getDouble(2);
			}
			Log.print("==============");
			Log.print("票据总张数=" + lRecordCount);
			Log.print("票据总金额=" + dTotalAmount);
			Log.print("票据总利息=" + dTotalAccrual);
			Log.print("总实付金额=" + dTotalRealAmount);
			Log.print("==============");
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			Log.print("======结束查询票据总数和总金额======");

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			switch ((int) lOrderParam) {
			case 1:
				strSQL += " order by nSerialNo";
				break;
			case 2:
				strSQL += " order by sUserName";
				break;
			case 3:
				strSQL += " order by sBank";
				break;
			case 4:
				strSQL += " order by nIsLocal";
				break;
			case 5:
				strSQL += " order by dtCreate";
				break;
			case 6:
				strSQL += " order by dtEnd";
				break;
			case 7:
				strSQL += " order by sCode";
				break;
			case 8:
				strSQL += " order by mAmount";
				break;
			case 9:
				strSQL += " order by nAddDays";
				break;
			case 10:
				strSQL += " order by nAcceptPOTypeID";
				break;
			case 11:
				strSQL += " order by sFormerOwner";
				break;
			default:
				strSQL += " order by nSerialNo ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			strSQL = "select * " + strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between "
					+ lRowNumStart + " and " + lRowNumEnd;

			Log.print("翻页查询开始");
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountBillInfo dbill = new DiscountBillInfo();

				dbill.setDiscountApplyID(lDiscountApplyID); // 贴现标示
				dbill.setID(rs.getLong("ID")); // 票据标示
				dbill.setSerialNo(rs.getLong("nSerialNo")); // 序列号
				dbill.setUserName(rs.getString("sUserName")); // 原始出票人
				dbill.setBank(rs.getString("sBank")); // 承兑银行
				dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
				dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbill.setCode(rs.getString("sCode")); // 汇票号码
				dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
				// //////////////////////////////////////////
				// 计算票据利息
				dAmount = rs.getDouble("mAmount"); // 汇票金额
				strEnd = rs.getTimestamp("dtEnd").toString();
				tsEnd = new java.sql.Timestamp(new Integer(strEnd.substring(0,
						4)).intValue() - 1900, new Integer(strEnd.substring(5,
						7)).intValue() - 1,
						new Integer(strEnd.substring(8, 10)).intValue(), 0, 0,
						0, 0);

				nDays = (int) java.lang.Math.ceil((tsEnd.getTime() - tsDate
						.getTime()) / 86400000)
						+ rs.getInt("nAddDays"); // 加上节假日增加计息天数
				if (nDays >= 0) {
					if (rs.getLong("nIsLocal") == Constant.YesOrNo.NO)
						nDays = nDays + 3;
					dAccrual = dAmount * (dRate / 360) * 0.01 * nDays;
					dAccrual = DataFormat.formatDouble(dAccrual, 2);
					dRealAmount = dAmount - dAccrual;
				}
				dbill.setDays(nDays);
				dbill.setAccrual(dAccrual);
				dbill.setRealAmount(dRealAmount);
				// //////////////////////////////////////////
				dbill.setCount(lRecordCount);
				// dbill.setTotalAmount(DataFormat.formatDouble(dTotalAmount,
				// 2));
				// dbill.setTotalAccrual(DataFormat.formatDouble(dTotalAccrual,
				// 2));
				dbill.setTotalAmount(dTotalAmount);
				dbill.setTotalAccrual(dTotalAccrual);
				// dbill.dTotalRealAmount =
				// DataFormat.formatDouble(dTotalRealAmount,2);
				// dbill.setTotalRealAmount(DataFormat.formatDouble(dTotalAmount,
				// 2) - DataFormat.formatDouble(dTotalAccrual, 2));
				dbill.setTotalRealAmount(dTotalAmount - dTotalAccrual);
				v.add(dbill);

				strUpdate = "update Loan_DiscountFormBill set mCheckAmount = ? where ID = ? ";
				ps1 = con.prepareStatement(strUpdate);
				ps1.setDouble(1, dRealAmount);
				ps1.setLong(2, rs.getLong("ID"));
				ps1.executeUpdate();
				ps1.close();
				ps1 = null;
			}
			Log.print("翻页查询结束");
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		Log.print("======退出贴现计息(findDiscountBillByDiscountID)方法======");

		return (v.size() > 0 ? v : null);

	}
	
	/**
	 * 查询一个贴现申请下的贴现票据，操作DiscountBill表
	 * 
	 * @param lDiscountApplyID
	 *            贴现标识]
	 * @param dRate
	 *            贴现利率
	 * @param tsDate
	 *            贴现日
	 * @return 返回贴现票据的列表
	 */
	public Collection findDiscountBillByDiscountID(long lDiscountApplyID,

	long lPageLineCount, long lPageNo, long lOrderParam, long lDesc,

	double dRate,double dParchaserRate, Timestamp tsDate) throws RemoteException, IException {

		PreparedStatement ps = null;
		ResultSet rs = null;
		PreparedStatement ps1 = null;
		ResultSet rs1 = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;
		String strUpdate = null;

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		Timestamp tsEnd = null; // 贴现日期
		String strEnd = ""; // 贴现日期
		int nDays = 0; // 实际贴现天数
		double dAmount = 0; // 票据金额
		double dAccrual = 0; // 贴现利息
		double dRealAmount = 0; // 实付贴现金额
		double dTotalAmount = 0; // 总票据金额
		double dTotalAccrual = 0; // 总票据利息
		double dTotalRealAmount = 0; // 总票据实付金额
		double dPurchaserInterest = 0; //买方付息
		double dDiscountAccrual = 0;//贴现人付息
		double dDiscountAcount = 0 ; //贴现金额

		try {
			con = Database.getConnection();

			Log.print("======进入贴现计息(findDiscountBillByDiscountID)方法======");

			Log.print("贴现标示：" + lDiscountApplyID);
			Log.print("贴现利率：" + dRate);
			Log.print("贴现日  ：" + tsDate);

			Log.print("======开始校验贴现日，贴现日应该大于所有票据到期日======");

			// 贴现日输入校验，应该大于所有票据到期日
			strSQL = " select count(*) from Loan_DiscountFormBill where nStatusID="
					+ Constant.RecordStatus.VALID
					+ " and nLoanID="
					+ lDiscountApplyID;
			strSQL = strSQL + " and to_char(dtEnd,'yyyy-mm-dd') < '"
					+ DataFormat.getDateString(tsDate) + "'";

			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
			}
			if (lRecordCount > 0) {
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				con.close();
				con = null;
				DiscountBillInfo dbill_temp = new DiscountBillInfo();
				dbill_temp.setDiscountApplyID(-1); // 贴现标示
				v.add(dbill_temp);
				return v;
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			Log.print("======贴现日校验结束======");

			Log.print("======开始查询所有票据信息======");

			strSelect = " select * ";
			strSQL = " from Loan_DiscountFormBill where nStatusID="
					+ Constant.RecordStatus.VALID + " and nLoanID="
					+ lDiscountApplyID;

			Log.print(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {

				dAmount = rs.getDouble("mAmount"); // 汇票金额

				strEnd = rs.getTimestamp("dtEnd").toString();
				tsEnd = new java.sql.Timestamp(new Integer(strEnd.substring(0,
						4)).intValue() - 1900, new Integer(strEnd.substring(5,
						7)).intValue() - 1,
						new Integer(strEnd.substring(8, 10)).intValue(), 0, 0,
						0, 0);

				nDays = (int) java.lang.Math.ceil((tsEnd.getTime() - tsDate
						.getTime()) / 86400000)
						+ rs.getInt("nAddDays"); // 加上节假日增加计息天数

				if (nDays >= 0) {
					if (rs.getLong("nIsLocal") == Constant.YesOrNo.NO)
						nDays = nDays + 3;
					dAccrual = dAmount * (dRate / 360) * 0.01 * nDays;
					dAccrual = DataFormat.formatDouble(dAccrual, 2);
					dPurchaserInterest = dAccrual * dParchaserRate * 0.01;
					dPurchaserInterest = DataFormat.formatDouble(dPurchaserInterest, 2);
					// dAccrual = dAmount * dRate * 0.01 * nDays;
					//dRealAmount = dAmount - dAccrual;
					dRealAmount = dAmount - dAccrual + dPurchaserInterest;
				}
				Log.print("========================");
				Log.print("汇票金额=" + dAmount);
				Log.print("汇票利息=" + dAccrual);
				Log.print("实付金额=" + dRealAmount);
				Log.print("========================");
				// dTotalAccrual = DataFormat.formatDouble(dTotalAccrual, 2) +
				// DataFormat.formatDouble(dAccrual, 2);
				// dTotalRealAmount = DataFormat.formatDouble(dTotalRealAmount,
				// 2) + DataFormat.formatDouble(dRealAmount, 2);
				dTotalAccrual = dTotalAccrual + dAccrual;
				dTotalRealAmount = dTotalRealAmount + dRealAmount;

				dAmount = 0; // 票据金额
				dAccrual = 0; // 贴现利息
				dRealAmount = 0; // 实付贴现金额

			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			Log.print("======结束查询所有票据信息======");

			Log.print("======开始查询票据总数和总金额======");

			// 计算记录总数
			strSelect = " select count(*),sum(nvl(mAmount,0)) ";
			strSQL = " from Loan_DiscountFormBill where nStatusID="
					+ Constant.RecordStatus.VALID + " and nLoanID="
					+ lDiscountApplyID;

			Log.print(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
				dTotalAmount = rs.getDouble(2);
			}
			Log.print("==============");
			Log.print("票据总张数=" + lRecordCount);
			Log.print("票据总金额=" + dTotalAmount);
			Log.print("票据总利息=" + dTotalAccrual);
			Log.print("总实付金额=" + dTotalRealAmount);
			Log.print("==============");
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			Log.print("======结束查询票据总数和总金额======");

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			switch ((int) lOrderParam) {
			case 1:
				strSQL += " order by nSerialNo";
				break;
			case 2:
				strSQL += " order by sUserName";
				break;
			case 3:
				strSQL += " order by sBank";
				break;
			case 4:
				strSQL += " order by nIsLocal";
				break;
			case 5:
				strSQL += " order by dtCreate";
				break;
			case 6:
				strSQL += " order by dtEnd";
				break;
			case 7:
				strSQL += " order by sCode";
				break;
			case 8:
				strSQL += " order by mAmount";
				break;
			case 9:
				strSQL += " order by nAddDays";
				break;
			case 10:
				strSQL += " order by nAcceptPOTypeID";
				break;
			case 11:
				strSQL += " order by sFormerOwner";
				break;
			default:
				strSQL += " order by nSerialNo ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			strSQL = "select * " + strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between "
					+ lRowNumStart + " and " + lRowNumEnd;

			Log.print("翻页查询开始");
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountBillInfo dbill = new DiscountBillInfo();

				dbill.setDiscountApplyID(lDiscountApplyID); // 贴现标示
				dbill.setID(rs.getLong("ID")); // 票据标示
				dbill.setSerialNo(rs.getLong("nSerialNo")); // 序列号
				dbill.setUserName(rs.getString("sUserName")); // 原始出票人
				dbill.setBank(rs.getString("sBank")); // 承兑银行
				dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
				dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbill.setCode(rs.getString("sCode")); // 汇票号码
				dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
				// //////////////////////////////////////////
				// 计算票据利息
				dAmount = rs.getDouble("mAmount"); // 汇票金额
				strEnd = rs.getTimestamp("dtEnd").toString();
				tsEnd = new java.sql.Timestamp(new Integer(strEnd.substring(0,
						4)).intValue() - 1900, new Integer(strEnd.substring(5,
						7)).intValue() - 1,
						new Integer(strEnd.substring(8, 10)).intValue(), 0, 0,
						0, 0);

				nDays = (int) java.lang.Math.ceil((tsEnd.getTime() - tsDate
						.getTime()) / 86400000)
						+ rs.getInt("nAddDays"); // 加上节假日增加计息天数
				if (nDays >= 0) {
					if (rs.getLong("nIsLocal") == Constant.YesOrNo.NO)
						nDays = nDays + 3;
					dAccrual = dAmount * (dRate / 360) * 0.01 * nDays;
					dAccrual = DataFormat.formatDouble(dAccrual, 2);
					dPurchaserInterest = dAccrual * dParchaserRate * 0.01;
					dPurchaserInterest = DataFormat.formatDouble(dPurchaserInterest, 2);
					// dAccrual = dAmount * dRate * 0.01 * nDays;
					//dRealAmount = dAmount - dAccrual;
					dRealAmount = dAmount - dAccrual + dPurchaserInterest;
					//dDiscountAccrual = dAccrual - dPurchaserInterest;
				    dDiscountAccrual = dAccrual - dPurchaserInterest;//贴现人付息
					dDiscountAcount = dAmount - dAccrual;
					//dRealAmount = dAmount - dAccrual;
				}
				dbill.setPurchaserAccrual(dPurchaserInterest);
				dbill.setDiscountAccrual(dDiscountAccrual);
				dbill.setDiscountAcount(dDiscountAcount);
				dbill.setDays(nDays);
				dbill.setAccrual(dAccrual);
				dbill.setRealAmount(dRealAmount);
				// //////////////////////////////////////////
				dbill.setCount(lRecordCount);
				// dbill.setTotalAmount(DataFormat.formatDouble(dTotalAmount,
				// 2));
				// dbill.setTotalAccrual(DataFormat.formatDouble(dTotalAccrual,
				// 2));
				dbill.setTotalAmount(dTotalAmount);
				dbill.setTotalAccrual(dTotalAccrual);
				// dbill.dTotalRealAmount =
				// DataFormat.formatDouble(dTotalRealAmount,2);
				// dbill.setTotalRealAmount(DataFormat.formatDouble(dTotalAmount,
				// 2) - DataFormat.formatDouble(dTotalAccrual, 2));
				//dbill.setTotalRealAmount(dTotalAmount - dTotalAccrual);
				//dbill.setTotalRealAmount(dTotalAmount - dTotalAccrual*(100-dParchaserRate)*0.01);
				dbill.setTotalRealAmount(dTotalRealAmount);
				v.add(dbill);

				strUpdate = "update Loan_DiscountFormBill set mCheckAmount = ? where ID = ? ";
				ps1 = con.prepareStatement(strUpdate);
				ps1.setDouble(1, dRealAmount);
				ps1.setLong(2, rs.getLong("ID"));
				ps1.executeUpdate();
				ps1.close();
				ps1 = null;
			}
			Log.print("翻页查询结束");
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		Log.print("======退出贴现计息(findDiscountBillByDiscountID)方法======");

		return (v.size() > 0 ? v : null);

	}

	public Collection findDiscountBillByContractID(long lDiscountContractID,
			long lPageLineCount, long lPageNo, long lOrderParam, long lDesc)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		double dTotalAmount = 0; // 总票据金额

		try {
			con = Database.getConnection();

			// 计算记录总数
			strSelect = " select count(*),sum(mAmount) ";
			strSQL = " from Loan_DiscountContractBill where nStatusID="
					+ Constant.RecordStatus.VALID + " and nContractID="
					+ lDiscountContractID;

			Log.print(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
				dTotalAmount = rs.getDouble(2);
			}
			Log.print("==============");
			Log.print(lRecordCount);
			Log.print(dTotalAmount);
			Log.print("==============");
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			switch ((int) lOrderParam) {
			case 1:
				strSQL += " order by nSerialNo";
				break;
			case 2:
				strSQL += " order by sUserName";
				break;
			case 3:
				strSQL += " order by sBank";
				break;
			case 4:
				strSQL += " order by nIsLocal";
				break;
			case 5:
				strSQL += " order by dtCreate";
				break;
			case 6:
				strSQL += " order by dtEnd";
				break;
			case 7:
				strSQL += " order by sCode";
				break;
			case 8:
				strSQL += " order by mAmount";
				break;
			case 9:
				strSQL += " order by nAddDays";
				break;
			case 10:
				strSQL += " order by nAcceptPOTypeID";
				break;
			case 11:
				strSQL += " order by sFormerOwner";
				break;
			default:
				strSQL += " order by nSerialNo ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			strSQL = "select * " + strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between "
					+ lRowNumStart + " and " + lRowNumEnd;

			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountBillInfo dbill = new DiscountBillInfo();

				dbill.setDiscountContractID(lDiscountContractID); // 贴现标示
				dbill.setID(rs.getLong("ID")); // 票据标示
				dbill.setSerialNo(rs.getLong("nSerialNo")); // 序列号
				dbill.setUserName(rs.getString("sUserName")); // 原始出票人
				dbill.setBank(rs.getString("sBank")); // 承兑银行
				dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
				dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbill.setCode(rs.getString("sCode")); // 汇票号码
				dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手

				dbill.setCount(lRecordCount);
				dbill.setTotalAmount(dTotalAmount);
				v.add(dbill);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return (v.size() > 0 ? v : null);
	}

	/**
	 * 删除贴现票据，操作DiscountBill表，更改状态为已删除
	 * 
	 * @param lDiscountBillID
	 *            贴现票据标识
	 * @return
	 */
	public long deleteDiscountBill(long lDiscountBillID[])
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		long lMaxID = -1;
		int i = 0;
		long lBillID = -1;
		long lDiscountApplyID = -1;
		long nStatusID = -1;
		long nSerialNo = -1;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.DELETE);
        logInfo.setBusinessType("贴现-贷款申请-贴现票据明细");
        // add by jbpan 20120606 end
		try {
			conn = Database.getConnection();

			for (i = 0; i < lDiscountBillID.length; i++) {
				if (lDiscountBillID[i] > 0) {
					lBillID = lDiscountBillID[i];
				}
			}
			// 贴现申请标示
			strSQL = " select nLoanID from Loan_DiscountFormBill where ID=? ";
			Log.print(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lBillID);

			rs = ps.executeQuery();
			if (rs.next()) {
				lDiscountApplyID = rs.getLong("nLoanID");
			}
			Log.print(lDiscountApplyID);
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(lDiscountApplyID));  //操作日志-业务主键-交易号
			for (i = 0; i < lDiscountBillID.length; i++) {
				if (lDiscountBillID[i] > 0) {
					// 更新记录
					strSQL = " update Loan_DiscountFormBill set nStatusID=? where ID=? ";

					Log.print(strSQL);
					ps = conn.prepareStatement(strSQL);
					ps.setLong(1, Constant.RecordStatus.INVALID);
					ps.setLong(2, lDiscountBillID[i]);

					ps.executeUpdate();
					ps.close();
					ps = null;

					// 更新序列号
					strSQL = " select nSerialNo from Loan_DiscountFormBill where ID=? ";

					Log.print(strSQL);
					ps = conn.prepareStatement(strSQL);
					ps.setLong(1, lDiscountBillID[i]);

					rs = ps.executeQuery();
					if (rs.next()) {
						nSerialNo = rs.getLong("nSerialNo");
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;

					if (lDiscountApplyID > 0 && nSerialNo > 0) {
						strSQL = " update Loan_DiscountFormBill set nSerialNo=nSerialNo-1 where nSerialNo>? and nLoanID=? ";

						Log.print("更新序列号");
						Log.print(strSQL);
						ps = conn.prepareStatement(strSQL);
						ps.setLong(1, nSerialNo);
						ps.setLong(2, lDiscountApplyID);

						ps.executeUpdate();
						ps.close();
						ps = null;
					}
				}
			}

			strSQL = " select nStatusID from Loan_LoanForm where ID=? ";
			Log.print(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, lDiscountApplyID);
			rs = ps.executeQuery();
			if (rs.next()) {
				nStatusID = rs.getLong("nStatusID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			// 已审核状态不允许修改
			/*
			 * if (nStatusID == LOANConstant.LoanStatus.CHECK) { //更新记录 strSQL = "
			 * update Loan_LoanForm set
			 * nStatusID=?,nNextCheckUserID=nInputUserID where ID=? ";
			 * Log.print(strSQL); ps = conn.prepareStatement(strSQL);
			 * ps.setLong(1, LOANConstant.LoanStatus.SUBMIT); ps.setLong(2,
			 * lDiscountApplyID); ps.executeUpdate(); ps.close(); ps = null;
			 * //删除以前的审核纪录 strSQL = " delete from reviewOpinion where
			 * nReviewTypeID=? and nReviewContentID=? "; Log.print(strSQL); ps =
			 * conn.prepareStatement(strSQL); ps.setLong(1,
			 * Notes.CODE_EXAMINE_TYPE_DISCOUNT); ps.setLong(2,
			 * lDiscountApplyID); ps.executeUpdate(); ps.close(); ps = null; }
			 */
			conn.close();
			conn = null;
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			// add by jbpan 20120606 start
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

		return (lDiscountBillID.length);

	}

	/**
	 * 将贴现凭证存盘，操作DiscountCredence表
	 * 
	 * @param lDiscountCredenceID
	 *            贴现凭证标识，如果<=0新增，否则修改
	 * @param lDiscountApplyID
	 *            贴现申请标识
	 * @param tsInputDate
	 *            填写日期
	 * @param lDraftTypeID
	 *            贴现汇票种类
	 * @param strDraftCode
	 *            贴现汇票号码
	 * @param tsPublicData
	 *            发票日
	 * @param tsAtTerm
	 *            到期日
	 * @param strApplyClient
	 *            申请单位名称
	 * @param strApplyAccount
	 *            申请单位账户号
	 * @param strApplyBank
	 *            申请单位开户银行
	 * @param strAcceptClient
	 *            承兑单位名称
	 * @param strAcceptAccount
	 *            承兑单位账户
	 * @param strAcceptBank
	 *            承兑单位开户银行
	 * @param dAmount
	 *            承兑金额
	 * @param fRate
	 *            利率
	 * @param dInterest
	 *            应付利息
	 * @return 返回贴现凭证标识
	 */
	public long saveDiscountCredence(DiscountCredenceInfo info)
			throws RemoteException, IException {
		if(info.isPayForm()){
			return saveDiscountCredencePayForm(info);
		}
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		long lMaxID = -1;
		long nStatusID = -1;
		String strCredenceCode = "";
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setBusinessType("贴现-贴现凭证");
        // add by jbpan 20120606 end
		try {
			if(info.getID()>0){
				logInfo.setTransCode(NameRef.getContractNoByID(info.getDiscountContractID())+"-"+NameRef.getCredenceCodeByDiscountID(info.getID()));  //操作日志-业务主键-合同编号+凭证编号  
			}
			conn = Database.getConnection();
			if (info.getID() <= 0) {
				// 第一次暂存
				// 得到最大的ID
				strSQL = " select Seq_Loan_PayFrm_DiscountCred.Nextval from dual ";
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					lMaxID = rs.getLong(1);
				}
				// add by jbpan 20120606 操作日志-操作类型-创建保存
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				strCredenceCode = createCredenceCode(info
						.getDiscountContractID());
				logInfo.setTransCode(NameRef.getContractNoByID(info.getDiscountContractID())+"-"+strCredenceCode);  //操作日志-业务主键-合同编号+凭证编号
				// 存储记录
				strSQL = " Insert into Loan_DiscountCredence(ID,nContractID,dtFillDate,nDraftTypeID,sDraftCode, "
						+ " dtPublicDate,dtAtTerm,sApplyClient,sApplyAccount,sApplyBank,sAcceptClient,sAcceptAccount,sAcceptBank, "
						+ " mAmount,mRate,mInterest,nStatusID,nInputUserID,nNextCheckUserID,dtInputDate,sCode, "
						+ " nGrantTypeID,nAccountBankID,sReceiveAccount,sReceiveClientName,sRemitBank,sRemitInProvince"
						+ ",sRemitInCity,nGrantCurrentAccountID,nNextCheckLevel,PurchaserInterest"
						+ ",nOfficeID,nCurrencyID) "
						+ " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,sysdate,?,?,?,?,?,?,?,?,?,1,?,?,?) ";

				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lMaxID);
				ps.setLong(2, info.getDiscountContractID());
				ps.setTimestamp(3, info.getFillDate());
				ps.setLong(4, info.getDraftTypeID());
				ps.setString(5, info.getDraftCode());
				ps.setTimestamp(6, info.getPublicDate());
				ps.setTimestamp(7, info.getAtTerm());
				ps.setString(8, info.getApplyClientName());
				ps.setString(9, info.getApplyAccount());
				ps.setString(10, info.getApplyBank());
				ps.setString(11, info.getAcceptClientName());
				ps.setString(12, info.getAcceptAccount());
				ps.setString(13, info.getAcceptBank());
				ps.setDouble(14, info.getBillAmount());
				ps.setDouble(15, info.getDiscountRate());
				ps.setDouble(16, info.getBillInterest());
				ps.setLong(17, LOANConstant.DiscountCredenceStatus.SAVE);
				ps.setLong(18, info.getInputUserID());
				ps.setLong(19, info.getInputUserID());
				ps.setString(20, strCredenceCode);
				ps.setLong(21, info.getGrantTypeID());
				ps.setLong(22, info.getAccountBankID());
				ps.setString(23, info.getReceiveClientCode());
				ps.setString(24, info.getReceiveClientName());
				ps.setString(25, info.getRemitBank());
				ps.setString(26, info.getRemitInProvince());
				ps.setString(27, info.getRemitInCity());
				ps.setLong(28, info.getGrantCurrentAccountID());
				ps.setDouble(29, info.getPurchaserInterest());
				ps.setLong(30, info.getOfficeID());
				ps.setLong(31, info.getCurrencyID());

				ps.executeUpdate();
				ps.close();
				ps = null;
			} else {
				// 更新记录
				strSQL = " update Loan_DiscountCredence set sApplyAccount=?,sApplyBank=?,sAcceptClient=?,sAcceptAccount=?,sAcceptBank=?, "
						+ " nGrantTypeID=?,nAccountBankID=?,sReceiveAccount=?,sReceiveClientName=?,sRemitBank=?,sRemitInProvince=?,sRemitInCity=?,nGrantCurrentAccountID=? "
						+ " where ID=? ";
				// add by jbpan 20120606 操作日志-操作类型-修改保存
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				// ps.setLong(1, lDraftTypeID);
				ps.setString(1, info.getApplyAccount());
				ps.setString(2, info.getApplyBank());
				ps.setString(3, info.getAcceptClientName());
				ps.setString(4, info.getAcceptAccount());
				ps.setString(5, info.getAcceptBank());
				ps.setLong(6, info.getGrantTypeID());
				ps.setLong(7, info.getAccountBankID());
				ps.setString(8, info.getReceiveClientCode());
				ps.setString(9, info.getReceiveClientName());
				ps.setString(10, info.getRemitBank());
				ps.setString(11, info.getRemitInProvince());
				ps.setString(12, info.getRemitInCity());
				ps.setLong(13, info.getGrantCurrentAccountID());
				ps.setLong(14, info.getID());

				Log.print("lGrantTypeID=" + info.getGrantTypeID());
				Log.print("lAccountBankID=" + info.getAccountBankID());
				Log
						.print("strReceiveClientCode="
								+ info.getReceiveClientCode());
				Log
						.print("strReceiveClientName="
								+ info.getReceiveClientName());
				Log.print("strRemitBank=" + info.getRemitBank());
				Log.print("strRemitInProvince=" + info.getRemitInProvince());
				Log.print("strRemitInCity=" + info.getRemitInCity());
				Log.print("lGrantCurrentAccountID="
						+ info.getGrantCurrentAccountID());

				ps.executeUpdate();
				ps.close();
				ps = null;
				lMaxID = info.getID();
				// Insert,Update 统一得到 ID
			}
			
		    saveDiscountCredenceBill(lMaxID, info.getDiscountContractID(), info.getLBillIDArray());
			
			InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
			
			if(inutParameterInfo != null){
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
				inutParameterInfo.setTransID(String.valueOf(lMaxID));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+lMaxID);
				inutParameterInfo.setDataEntity(info);
				
				// 提交审批
				FSWorkflowManager.initApproval(inutParameterInfo);
				// add by jbpan 20120606 操作日志-操作类型-提交审批
				
			    new DiscountDao().updateDiscountCredenceStatus(lMaxID, LOANConstant.DiscountCredenceStatus.APPROVALING);
			    
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			conn.close();
			conn = null;
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

		return (lMaxID);
	}
	/**
	 * 将贴现凭证存盘，操作DiscountCredence表
	 * 
	 * @param lDiscountCredenceID
	 *            贴现凭证标识，如果<=0新增，否则修改
	 * @param lDiscountApplyID
	 *            贴现申请标识
	 * @param tsInputDate
	 *            填写日期
	 * @param lDraftTypeID
	 *            贴现汇票种类
	 * @param strDraftCode
	 *            贴现汇票号码
	 * @param tsPublicData
	 *            发票日
	 * @param tsAtTerm
	 *            到期日
	 * @param strApplyClient
	 *            申请单位名称
	 * @param strApplyAccount
	 *            申请单位账户号
	 * @param strApplyBank
	 *            申请单位开户银行
	 * @param strAcceptClient
	 *            承兑单位名称
	 * @param strAcceptAccount
	 *            承兑单位账户
	 * @param strAcceptBank
	 *            承兑单位开户银行
	 * @param dAmount
	 *            承兑金额
	 * @param fRate
	 *            利率
	 * @param dInterest
	 *            应付利息
	 * @return 返回贴现凭证标识
	 */
	public long saveDiscountCredencePayForm(DiscountCredenceInfo info)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		DiscountDao dao = new DiscountDao();
		String strCredenceCode = "";
		String[] amounts = info.getAmounts().split(",");
		String[] purchaseraccruals = info.getPurchaserAccruals().split(",");
		String[] discountaccruals = info.getDiscountAccruals().split(",");
		String[] draftcode = info.getDraftcodes().split(",");
		String[] ids = info.getIds().split(",");
		Long[]  maxIds = new Long[ids.length];
		long discountpayform =info.getDiscountpayform();
		long billids[] = info.getLBillIDArray();
		try {
			conn = Database.getConnection();
			if(discountpayform==-1){
				//新增放款通知单
				strSQL = " select Seq_Loan_PayFrm_DiscountCred.Nextval from dual ";
				ps = conn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				if (rs.next()) {
					discountpayform =  rs.getLong(1);
				}
				strCredenceCode = createPayFormCode(info
						.getDiscountContractID());
				// 存储放款通知单
				strSQL = " Insert into LOAN_DISCOUNTPAYFORM(ID,nContractID,dtFillDate,nDraftTypeID,sDraftCode, "
						+ " dtPublicDate,dtAtTerm,sApplyClient,sApplyAccount,sApplyBank,sAcceptClient,sAcceptAccount,sAcceptBank, "
						+ " mAmount,mRate,mInterest,nStatusID,nInputUserID,nNextCheckUserID,dtInputDate,sCode, "
						+ " nGrantTypeID,nAccountBankID,sReceiveAccount,sReceiveClientName,sRemitBank,sRemitInProvince"
						+ ",sRemitInCity,nGrantCurrentAccountID,nNextCheckLevel,PurchaserInterest"
						+ ",nOfficeID,nCurrencyID) "
						+ " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,sysdate,?,?,?,?,?,?,?,?,?,1,?,?,?) ";
				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, discountpayform);
				ps.setLong(2, info.getDiscountContractID());
				ps.setTimestamp(3, info.getFillDate());
				ps.setLong(4, info.getDraftTypeID());
				ps.setString(5, info.getDraftCode());
				ps.setTimestamp(6, info.getPublicDate());
				ps.setTimestamp(7, info.getAtTerm());
				ps.setString(8, info.getApplyClientName());
				ps.setString(9, info.getApplyAccount());
				ps.setString(10, info.getApplyBank());
				ps.setString(11, info.getAcceptClientName());
				ps.setString(12, info.getAcceptAccount());
				ps.setString(13, info.getAcceptBank());
				ps.setDouble(14, info.getBillAmount());
				ps.setDouble(15, info.getDiscountRate());
				ps.setDouble(16, info.getBillInterest());
				ps.setLong(17, LOANConstant.DiscountCredenceStatus.SAVE);
				ps.setLong(18, info.getInputUserID());
				ps.setLong(19, info.getInputUserID());
				ps.setString(20, strCredenceCode);
				ps.setLong(21, info.getGrantTypeID());
				ps.setLong(22, info.getAccountBankID());
				ps.setString(23, info.getReceiveClientCode());
				ps.setString(24, info.getReceiveClientName());
				ps.setString(25, info.getRemitBank());
				ps.setString(26, info.getRemitInProvince());
				ps.setString(27, info.getRemitInCity());
				ps.setLong(28, info.getGrantCurrentAccountID());
				ps.setDouble(29, info.getPurchaserInterest());
				ps.setLong(30, info.getOfficeID());
				ps.setLong(31, info.getCurrencyID());
				ps.executeUpdate();
				//存储贴现凭证
				
			}else{
				long lMaxID = -1;
				// 更新更新放款通知单
				strSQL = " update LOAN_DISCOUNTPAYFORM set sApplyAccount=?,sApplyBank=?,sAcceptClient=?,sAcceptAccount=?,sAcceptBank=?, "
						+ " nGrantTypeID=?,nAccountBankID=?,sReceiveAccount=?,sReceiveClientName=?,sRemitBank=?,sRemitInProvince=?,sRemitInCity=?,nGrantCurrentAccountID=? ,mamount=?,mInterest=?,PurchaserInterest=?"
						+ " where ID=? ";
				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setString(1, info.getApplyAccount());
				ps.setString(2, info.getApplyBank());
				ps.setString(3, info.getAcceptClientName());
				ps.setString(4, info.getAcceptAccount());
				ps.setString(5, info.getAcceptBank());
				ps.setLong(6, info.getGrantTypeID());
				ps.setLong(7, info.getAccountBankID());
				ps.setString(8, info.getReceiveClientCode());
				ps.setString(9, info.getReceiveClientName());
				ps.setString(10, info.getRemitBank());
				ps.setString(11, info.getRemitInProvince());
				ps.setString(12, info.getRemitInCity());
				ps.setLong(13, info.getGrantCurrentAccountID());
				ps.setDouble(14, info.getBillAmount());
				ps.setDouble(15, info.getBillInterest());
				ps.setDouble(16, info.getPurchaserInterest());
				ps.setLong(17, info.getID());

				Log.print("lGrantTypeID=" + info.getGrantTypeID());
				Log.print("lAccountBankID=" + info.getAccountBankID());
				Log
						.print("strReceiveClientCode="
								+ info.getReceiveClientCode());
				Log
						.print("strReceiveClientName="
								+ info.getReceiveClientName());
				Log.print("strRemitBank=" + info.getRemitBank());
				Log.print("strRemitInProvince=" + info.getRemitInProvince());
				Log.print("strRemitInCity=" + info.getRemitInCity());
				Log.print("lGrantCurrentAccountID="
						+ info.getGrantCurrentAccountID());
				ps.executeUpdate();
				// Insert,Update 统一得到 ID
			}
			//存储贴现凭证明细
			for (int i=0;i<ids.length;i++){
				long lMaxID = -1;
				//新增贴现凭证
				if (Integer.parseInt(ids[i]) <= 0) {
					strSQL = " select Seq_Loan_PayFrm_DiscountCred.Nextval from dual ";
					ps = conn.prepareStatement(strSQL);
					rs = ps.executeQuery();
					if (rs.next()) {
						lMaxID = rs.getLong(1);
					}
					strCredenceCode = createCredenceCode(info
							.getDiscountContractID());
					strSQL = " Insert into loan_discountcredence(ID,nContractID,dtFillDate,nDraftTypeID,sDraftCode, "
							+ " dtPublicDate,dtAtTerm,sApplyClient,sApplyAccount,sApplyBank,sAcceptClient,sAcceptAccount,sAcceptBank, "
							+ " mAmount,mRate,mInterest,nStatusID,nInputUserID,nNextCheckUserID,dtInputDate,sCode, "
							+ " nGrantTypeID,nAccountBankID,sReceiveAccount,sReceiveClientName,sRemitBank,sRemitInProvince"
							+ ",sRemitInCity,nGrantCurrentAccountID,nNextCheckLevel,PurchaserInterest"
							+ ",nOfficeID,nCurrencyID,DISCOUNTPAYFORM) "
							+ " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,sysdate,?,?,?,?,?,?,?,?,?,1,?,?,?,?) ";
					Log.print(strSQL);
					ps = conn.prepareStatement(strSQL);
					ps.setLong(1, lMaxID);
					ps.setLong(2, info.getDiscountContractID());
					ps.setTimestamp(3, info.getFillDate());
					ps.setLong(4, info.getDraftTypeID());
					ps.setString(5, draftcode[i]);
					ps.setTimestamp(6, info.getPublicDate());
					ps.setTimestamp(7, info.getAtTerm());
					ps.setString(8, info.getApplyClientName());
					ps.setString(9, info.getApplyAccount());
					ps.setString(10, info.getApplyBank());
					ps.setString(11, info.getAcceptClientName());
					ps.setString(12, info.getAcceptAccount());
					ps.setString(13, info.getAcceptBank());
					ps.setDouble(14, Double.valueOf(amounts[i]).doubleValue());
					ps.setDouble(15, info.getDiscountRate());
					ps.setDouble(16, Double.valueOf(discountaccruals[i]).doubleValue());
					ps.setLong(17, LOANConstant.DiscountCredenceStatus.SAVE);
					ps.setLong(18, info.getInputUserID());
					ps.setLong(19, info.getInputUserID());
					ps.setString(20, strCredenceCode);
					ps.setLong(21, info.getGrantTypeID());
					ps.setLong(22, info.getAccountBankID());
					ps.setString(23, info.getReceiveClientCode());
					ps.setString(24, info.getReceiveClientName());
					ps.setString(25, info.getRemitBank());
					ps.setString(26, info.getRemitInProvince());
					ps.setString(27, info.getRemitInCity());
					ps.setLong(28, info.getGrantCurrentAccountID());
					ps.setDouble(29, Double.valueOf(purchaseraccruals[i]).doubleValue());
					ps.setLong(30, info.getOfficeID());
					ps.setLong(31, info.getCurrencyID());
					ps.setLong(32, discountpayform);
					ps.executeUpdate();
				} else {
					//更新贴现放款通知单
					strSQL = " update loan_discountcredence set sApplyAccount=?,sApplyBank=?,sAcceptClient=?,sAcceptAccount=?,sAcceptBank=?, "
							+ " nGrantTypeID=?,nAccountBankID=?,sReceiveAccount=?,sReceiveClientName=?,sRemitBank=?,sRemitInProvince=?,sRemitInCity=?,nGrantCurrentAccountID=? "
							+ " where ID=? ";
	
					Log.print(strSQL);
					ps = conn.prepareStatement(strSQL);
					ps.setString(1, info.getApplyAccount());
					ps.setString(2, info.getApplyBank());
					ps.setString(3, info.getAcceptClientName());
					ps.setString(4, info.getAcceptAccount());
					ps.setString(5, info.getAcceptBank());
					ps.setLong(6, info.getGrantTypeID());
					ps.setLong(7, info.getAccountBankID());
					ps.setString(8, info.getReceiveClientCode());
					ps.setString(9, info.getReceiveClientName());
					ps.setString(10, info.getRemitBank());
					ps.setString(11, info.getRemitInProvince());
					ps.setString(12, info.getRemitInCity());
					ps.setLong(13, info.getGrantCurrentAccountID());
					ps.setLong(14, discountpayform);
	
					Log.print("lGrantTypeID=" + info.getGrantTypeID());
					Log.print("lAccountBankID=" + info.getAccountBankID());
					Log
							.print("strReceiveClientCode="
									+ info.getReceiveClientCode());
					Log
							.print("strReceiveClientName="
									+ info.getReceiveClientName());
					Log.print("strRemitBank=" + info.getRemitBank());
					Log.print("strRemitInProvince=" + info.getRemitInProvince());
					Log.print("strRemitInCity=" + info.getRemitInCity());
					Log.print("lGrantCurrentAccountID="
							+ info.getGrantCurrentAccountID());
	
					ps.executeUpdate();
					// Insert,Update 统一得到 ID
				}
				long billid[] = {billids[i]};
				saveDiscountCredenceBill(lMaxID, info.getDiscountContractID(), billid);
				maxIds[i] = new Long(lMaxID);
			}
			
			InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
			
			if(inutParameterInfo != null){
				inutParameterInfo.setTransID(String.valueOf(discountpayform));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+discountpayform);
				inutParameterInfo.setDataEntity(info);
				// 提交审批
				FSWorkflowManager.initApproval(inutParameterInfo);
				strSQL = " update LOAN_DISCOUNTPAYFORM  set NSTATUSID = ? where ID = ? ";
				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, LOANConstant.DiscountCredenceStatus.APPROVALING);
				ps.setLong(2, discountpayform);
				ps.executeUpdate();
				for(int j=0;j<maxIds.length;j++){
					dao.updateDiscountCredenceStatus(maxIds[j].longValue(), LOANConstant.DiscountCredenceStatus.APPROVALING);
				}
			    
			}
			
		} catch (Exception ex) {
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

		return discountpayform;
	}
	/**
	 * 查找贴现,操作DiscountCredence
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lCurrencyID
	 *            币种标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lActionID
	 *            操作标识
	 * @param lUserID
	 *            操作人标识
	 * @param lDiscountApplyID
	 *            贴现标识
	 * @param lClientID
	 *            申请单位标识
	 * @param dAmountFrom
	 *            贴现金额起始
	 * @param dAmountTo
	 *            贴现金额结束
	 * @param tsInputStart
	 *            录入日期起始
	 * @param tsInputEnd
	 *            录入日期结束
	 * @param lStatusID
	 *            状态标识
	 */
	public Collection findDiscountCredenceByMultiOption(long lCurrencyID,
			long lOfficeID, long lActionID, long lUserID, long lContractID,
			long lClientID, double dAmountFrom, double dAmountTo,
			Timestamp tsStart, Timestamp tsEnd, long lStatusID,
			long lPageLineCount, long lPageNo, long lOrderParam, long lDesc)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;
		String strIn = null;
		String strUserID = null;
		String strNextSql = "";

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		// 模块类型
		long lModule = Constant.ModuleType.LOAN;
		// 业务类型
		long lLoanType = Constant.ApprovalLoanType.TX;
		// 操作类型
		long lAction = Constant.ApprovalAction.DISCOUNT_CREDENCE;

		try {
			Log.print(" findDiscountCredenceByMultiOption () Start ...");

			con = Database.getConnection();
//			Modifyed by qhzhou 2007.7.2
//			strIn = LOANConstant.DiscountCredenceStatus.SUBMIT + ","
			strIn = LOANConstant.DiscountCredenceStatus.SAVE + ","
					+ LOANConstant.DiscountCredenceStatus.CHECK + ","
					+ LOANConstant.DiscountCredenceStatus.USED;

			// 计算记录总数
			strSelect = " select count(*) ";
			strSQL = " from Loan_DiscountCredence aa, Loan_ContractForm bb ";
			strSQL = strSQL + " where aa.nContractID=bb.ID ";

			// ////////////////////查询条件////////////////////////////////////////////////////
			if (lOfficeID != -1) {
				strSQL = strSQL + " and aa.nOfficeID=" + lOfficeID;
			}
			if (lCurrencyID != -1) {
				strSQL = strSQL + " and aa.nCurrencyID = " + lCurrencyID;
			}
			if (lContractID != -1) {
				strSQL = strSQL + " and bb.ID=" + lContractID;
			}
			if (lClientID != -1) {
				strSQL = strSQL + " and bb.nBorrowClientID=" + lClientID;
			}
			if (dAmountFrom != 0) {
				strSQL = strSQL + " and aa.mAmount>=" + dAmountFrom;
			}
			if (dAmountTo != 0) {
				strSQL = strSQL + " and aa.mAmount<=" + dAmountTo;
			}
			if (tsStart != null) {
				strSQL = strSQL
						+ " and to_char(bb.dtDiscountDate,'yyyy-mm-dd') >= '"
						+ DataFormat.getDateString(tsStart) + "'";
			}
			if (tsEnd != null) {
				strSQL = strSQL
						+ " and to_char(bb.dtDiscountDate,'yyyy-mm-dd') <= '"
						+ DataFormat.getDateString(tsEnd) + "'";
			}

			strSQL = strSQL + " and aa.nStatusID in (" + strIn + ")";

			if (lUserID > 0) {
				// 修改查找
				if (lActionID == 1) {
					strSQL += " and aa.nInputUserID = " + lUserID;
					// strSQL += " and aa.nNextCheckUserID = " + lUserID;
					strSQL += " and aa.nNextCheckLevel = 1 ";
					strSQL += " and aa.nStatusID = "
						//Modifyed by qhzhou 2007.7.2
							//+ LOANConstant.DiscountCredenceStatus.SUBMIT;
						+ LOANConstant.DiscountCredenceStatus.SAVE;

				}
				// 审核查找
				else if (lActionID == 2) 
				{
					ApprovalDelegation appBiz = new ApprovalDelegation();
					// 获得真正来审批这个记录的人（真实或传给的虚拟的人！）
					// strUserID = appBiz.findTheVeryUser(lModule, lLoanType,
					// lAction, lOfficeID, lCurrencyID, lUserID);
					LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
					// 获取所有子类型
					long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(
							lOfficeID, lCurrencyID, new long[] { LOANConstant.LoanType.TX });
					if (a_SubLoanType != null && a_SubLoanType.length > 0) 
					{
						strNextSql += " ( ";
						for (int i = 0; i < a_SubLoanType.length; i++) 
						{
							strUserID = appBiz.findTheVeryUser(lModule,a_SubLoanType[i], lAction, lOfficeID,lCurrencyID, lUserID);						
							if (strUserID != null ) 
							{
								strNextSql += " ( bb.NSUBTYPEID = "
										+ a_SubLoanType[i]
										+ " and aa.NNEXTCHECKUSERID in "
										+ strUserID +" ) ";
							} 
							if ( i < a_SubLoanType.length - 1) 
							{
								strNextSql += " or ";
							} 
							else 
							{
								strNextSql += " ) ";
							}
						}
					}
					else
					{
						return null;
					}
					
					if(lStatusID == LOANConstant.DiscountCredenceStatus.SUBMIT)
					{
						strSQL += " and aa.nStatusID = "
								+ LOANConstant.DiscountCredenceStatus.SUBMIT
								+ " and " + strNextSql;
					}
					else if(lStatusID == LOANConstant.DiscountCredenceStatus.CHECK)
					{
						strSQL += " and aa.nStatusID = "
							+ LOANConstant.DiscountCredenceStatus.CHECK;
					}
					else
					{
						strSQL += " and ("
							+"  (aa.nStatusID = "
							+ LOANConstant.DiscountCredenceStatus.SUBMIT
							+ " and " + strNextSql
							+ " ) or ( "
							+ " aa.nStatusID = "
							+ LOANConstant.DiscountCredenceStatus.CHECK
							+"))";
					}
				}
			}
			Log.print("2:"+strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			switch ((int) lOrderParam) {
			case 1:
				strSQL += " order by bb.sContractCode ";
				break;
			case 2:
				strSQL += " order by aa.sApplyClient ";
				break;
			case 3:
				strSQL += " order by aa.mAmount ";
				break;
			case 4:
				strSQL += " order by bb.mDiscountRate ";
				break;
			case 5:
				strSQL += " order by aa.mAmount-aa.mInterest ";
				break;
			case 6:
				strSQL += " order by bb.dtDiscountDate";
				break;
			case 7:
				strSQL += " order by aa.nStatusID";
				break;
			default:
				strSQL += " order by bb.sContractCode ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			strSQL = " select bb.ID lContractID,bb.sContractCode,bb.mDiscountRate,bb.dtDiscountDate,bb.mExamineAmount,bb.mCheckAmount,"
					+ " aa.ID lCredenceID,aa.sApplyClient,aa.nStatusID nCredenceStatusID,aa.mAmount mBillAmount,aa.mInterest mBillInterest,aa.PurchaserInterest,nvl(aa.nNextCheckLevel,1) nNextCheckLevel "
					+ strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between "
					+ lRowNumStart + " and " + lRowNumEnd;
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountCredenceInfo dci = new DiscountCredenceInfo();

				dci.setDiscountContractID(rs.getLong("lContractID")); // 免还标示
				dci.setDiscountContractCode(rs.getString("sContractCode")); // 免还编号
				dci.setApplyClientName(rs.getString("sApplyClient")); // 借款单位
				dci.setExamineAmount(rs.getDouble("mExamineAmount")); // 贴现申请金额
				dci.setCheckAmount(rs.getDouble("mCheckAmount")); // 贴现审核金额
				dci.setDiscountRate(rs.getDouble("mDiscountRate")); // 贴现利率
				dci.setDiscountDate(rs.getTimestamp("dtDiscountDate")); // 贴现计息日
				dci.setID(rs.getLong("lCredenceID")); // 贴现凭证标示
				dci.setStatusID(rs.getInt("nCredenceStatusID")); // 贴现凭证状态

				dci.setBillAmount(rs.getDouble("mBillAmount"));
				dci.setBillInterest(rs.getDouble("mBillInterest"));
				dci.setPurchaserInterest(rs.getDouble("PurchaserInterest")); // 买方支付贴现凭证利息
				dci.setBillCheckAmount(rs.getDouble("mBillAmount")
						- rs.getDouble("mBillInterest"));

				dci.setNextCheckLevel(rs.getLong("nNextCheckLevel")); // 下一个审核级别

				dci.setCount(lRecordCount);
				v.add(dci);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

			Log.print(" findDiscountCredenceByMultiOption () End ...");
		} catch (Exception ex) {
			log4j.error(ex.getMessage());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return (v.size() > 0 ? v : null);
	}

	/**
	 * 贴现信息
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <ul>
	 * <li>操作数据库表DiscountApply
	 * <li>
	 * <li>
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * 
	 * @param long
	 *            lID 贴现标识
	 * @param double
	 *            mExamineAmount 批准贴现金额
	 * @param double
	 *            fDiscountRate 贴现利率
	 * @param double
	 *            mCheckAmount 核定贴现金额
	 * @return long 新增或修改成功，返回值 == lID，失败，返回值 == 0。
	 * 
	 * @exception Exception
	 */

	// public long saveCheck(long lID, double mExamineAmount, double
	// fDiscountRate, double mCheckAmount, Timestamp tsDate) throws
	// RemoteException,IException
	public long saveCheck(DiscountLoanInfo info) throws RemoteException,
			IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
        try {
			logInfo.setBusinessType("贴现-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.LOAN_APPLY) + "-" + "本公司审批信息");
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(info.getID()));  //操作日志-业务主键-交易号
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try {
			Log.print("============= saveCheck() begin ============");
			conn = Database.getConnection();
			strSQL = " update Loan_LoanForm set mExamineAmount=?,mDiscountRate=?,mCheckAmount=?,dtDiscountDate=?,PurchaserInterestRate=? ,CHECKOPINION=?,MDISCOUNTACCRUAL=?,MPURCHASERAMOUNT=? where ID=? ";
			Log.print(strSQL);
			System.out.println("-----info.getPurchaserAmount()-="+info.getPurchaserAmount());
			Log.print("贴现日=" + info.getDiscountDate());
			Log.print(DataFormat.formatRate(info.getDiscountRate()));
			ps = conn.prepareStatement(strSQL);
			ps.setDouble(1, info.getExamineAmount());
			ps.setDouble(2, info.getDiscountRate());
			ps.setDouble(3, info.getCheckAmount());
			ps.setTimestamp(4, info.getDiscountDate());
			ps.setDouble(5, info.getPurchaserInterestRate());
			ps.setString(6, info.getCheckOpinion());//增加审批意见
			ps.setDouble(7, info.getDiscountAccrual());
			ps.setDouble(8, info.getPurchaserAmount());
			ps.setLong(9, info.getID());
			//ps.setLong(7, info.getID());
			ps.executeUpdate();
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			Log.print("============= saveCheck() end ============");
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
        	  
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
	        //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

		return (info.getID());

	}

	
	/**
     * added by xwhe 2007/06/14
     * @param info
     * @return
     * @throws RemoteException
     * @throws IRollbackException
     */
    public long submitApplyAndApprovalInit(DiscountLoanInfo info)
			throws RemoteException, IRollbackException {
		String strContractCode = "";
		long lReturnId = -1;
		// add by jbpan 20120606 操作日志 start
	    LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
	    logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
	    try {
			logInfo.setBusinessType("贴现-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.LOAN_APPLY));
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(info.getID()));  //操作日志-业务主键-交易号  
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	    // add by jbpan 20120606 end
		try {
			
			saveCheck(info);

			LoanApplyDao loanApplyDao = new LoanApplyDao();
			InutParameterInfo inutParameterInfo = info
					.getInutParameterInfo();

			// 提交审批
			FSWorkflowManager.initApproval(inutParameterInfo);
			
			// 更新状态到"审批中"
			loanApplyDao.updateLoanStatus(info.getID(), info
					.getInputUserID(), LOANConstant.LoanStatus.APPROVALING);
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
	        logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception e) {
			//add by jbpan 20120606 加上操作日志-操作结果-失败        
	        logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
	    finally
	    {
	    	
	        LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
	    }     
	    //add by jbpan 20120606 end
		return lReturnId;
	}
    
    public long modifyApplyAndApprovalInit(DiscountLoanInfo info)
	throws RemoteException, IRollbackException {
	long lReturnId = -1;
	// add by jbpan 20120606 操作日志 start
    LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
    logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
    try {
    	logInfo.setBusinessType("贴现" + "-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.LOAN_APPLY) );
    	logInfo.setTransCode(NameRef.getApplyCodeByLoanID(info.getID()));  //操作日志-业务主键-交易号
    } catch (Exception e1) {
		e1.printStackTrace();
	}
    // add by jbpan 20120606 end
	try 
	{
		LoanApplyDao loanApplyDao = new LoanApplyDao();
		InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
		//提交审批
		FSWorkflowManager.initApproval(inutParameterInfo);
		//更新状态到"审批中"
		loanApplyDao.updateLoanStatus(info.getID(), info.getInputUserID(), LOANConstant.LoanStatus.APPROVALING);
		//add by jbpan 20120606 加上操作日志-操作结果-成功        
        logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
	} catch (Exception e) {
//      add by jbapn 20120606 start
        // 加上操作日志       
        logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
        logInfo.setFailReason(e.getMessage()); //失败原因
        // add by jbpan 20120606 end
		throw new IRollbackException(context, e.getMessage(), e);
	}
	//add by jbpan 20120606 start
    finally
    {
    	  
        LoggerResults vResult = LoggerResults.getInstance(); 
		// 将日志记录保存到内存中
		vResult.getResult().add(logInfo);
    }     
    //add by jbpan 20120606 end
		return lReturnId;
	}
    
    public long examinePass(DiscountLoanInfo lepInfo) throws RemoteException, IRollbackException
    {
    	long ret=-1;
    	// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        try {
			logInfo.setBusinessType("贴现-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.LOAN_APPLY) );
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(lepInfo.getID()));  //操作日志-业务主键-交易号
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end			
		try
		{    long lLoanTypeID = -1;
			lLoanTypeID=lepInfo.getSubTypeId();
			long status=lepInfo.getStatusID(); 
			long lLoanID=lepInfo.getID();
			long lUserID=lepInfo.getInputUserID() ;
			long lResultID = Constant.ApprovalDecision.PASS;
			long lContractID = -1;
			String strFileName = "";
			//---- added by xwhe 2007/06/18 审批流 begin
			
			InutParameterInfo inutParameterInfo = lepInfo.getInutParameterInfo();
			InutParameterInfo returnInfo = new InutParameterInfo();
			LoanApplyDao ldao=new LoanApplyDao();
			ContractDao conDao=new ContractDao();
			//将业务记录置入pinfo,转换成标准map传递到审批流引擎
			inutParameterInfo.setDataEntity(lepInfo);
			
			//提交审批
			returnInfo = FSWorkflowManager.doApproval(inutParameterInfo);
			// 如果是最后一级,且为审批通过,更新状态为已审批
			if (returnInfo.isLastLevel()) {
				ldao.updateLoanStatus(lLoanID, lUserID,
						LOANConstant.LoanStatus.CHECK);
				
				// 审批完成后需要做的操作
				// 将贷款申请信息复制到合同表
				lContractID = conDao.insert(lLoanID, LOANConstant.LoanType.TX);				

				ContractContentDao conconDao = new ContractContentDao();
				strFileName = conconDao.addTX(lContractID);
				
				ContractContentInfo CCInfo = new ContractContentInfo();
				CCInfo.setParentID(lContractID);
				CCInfo.setContractID(lContractID);
				CCInfo.setContractTypeID(LOANConstant.ContractType.TX);
				CCInfo.setDocName(strFileName);
				
				conconDao.saveContractContent(CCInfo);
				
				//贴现票据自动入库
				DiscountDao discountDao = new DiscountDao();
				discountDao.saveBill(lLoanID,lContractID);
				
				lResultID = Constant.ApprovalDecision.FINISH;

			}
			// 如果是最后一级,且为审批拒绝,更新状态为已保存
			else if(returnInfo.isRefuse())
			{
				ldao.updateLoanStatus(
						lLoanID,
						lUserID,
						LOANConstant.LoanStatus.SAVE);
				// add by jbpan 20120606 操作日志-操作类型-审批
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
			}	
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
        finally
        {
        	  
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120606 end
		return ret;    	
    }
	// ///////////////////////////////////////////////////////////////////// 
   
    
    
	public long doApprovalDiscountCredence(DiscountCredenceInfo cInfo) throws RemoteException,
		IRollbackException,IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		long lResult = -1;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        try {
			logInfo.setBusinessType("贴现-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.DISCOUNT_CREDENCE) );
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		DiscountCredenceInfo cInfo1 = null;
		try {
			conn = Database.getConnection();
			
			DiscountDao discountDao = new DiscountDao();
			cInfo1 = new DiscountCredenceInfo();
			if(cInfo.isPayForm())
				cInfo1 = discountDao.findDiscountPayFormByID(cInfo.getID());
			else
				cInfo1 = discountDao.findDiscountCredenceByID(cInfo.getID());
			logInfo.setTransCode(NameRef.getContractNoByID(cInfo1.getDiscountContractID())+"-"+NameRef.getCredenceCodeByDiscountID(cInfo1.getID()));  //操作日志-业务主键-交易号  
			
			InutParameterInfo inutParameterInfo = cInfo.getInutParameterInfo();
			InutParameterInfo returnInfo = new InutParameterInfo();
		
			// 将业务记录置入cInfo1,转换成标准map传递到审批流引擎
			inutParameterInfo.setDataEntity(cInfo1);
		
			// 提交审批
			returnInfo = FSWorkflowManager.doApproval(inutParameterInfo);
			// 如果是最后一级,且为审批通过,更新状态为已审批
			if (returnInfo.isLastLevel()) {
				long lll=cInfo.getID();
				if(cInfo.isPayForm()){
					lResult = discountDao.updateDiscountPayFormStatus(cInfo.getID(),LOANConstant.DiscountCredenceStatus.CHECK);		
					String sql = "select id from loan_discountcredence where discountpayform =?";
					ps = conn.prepareStatement(sql);
					ps.setLong(1, lll);
					rs = ps.executeQuery();
					while(rs.next()){
						discountDao.updateDiscountCredenceStatus(rs.getLong("id"),LOANConstant.DiscountCredenceStatus.CHECK);		
						UpdateOBDiscountCredenceStatus(rs.getLong("id"),
								LOANConstant.DiscountCredenceStatus.CHECK, conn);
						updateDiscountBillStatus(rs.getLong("id"),
								LOANConstant.CheckDiscountBillStatus.ZZSC);
					}
				}else{
						lResult = discountDao.updateDiscountCredenceStatus(lll,LOANConstant.DiscountCredenceStatus.CHECK);		
						// 审批完成后需要做的操作
						UpdateOBDiscountCredenceStatus(cInfo.getID(),
								LOANConstant.DiscountCredenceStatus.CHECK, conn);
						updateDiscountBillStatus(cInfo.getID(),
								LOANConstant.CheckDiscountBillStatus.ZZSC);
				}
			}
			// 如果是最后一级,且为审批拒绝,更新状态为已保存
			else if (returnInfo.isRefuse()) {
				// add by jbpan 20120606 操作日志-操作类型-拒绝
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				if(cInfo.isPayForm()){
					lResult = discountDao.updateDiscountPayFormStatus(cInfo.getID(),LOANConstant.DiscountCredenceStatus.SAVE);

					String sql = "select id from loan_discountcredence where discountpayform =?";
					ps = conn.prepareStatement(sql);
					ps.setLong(1, cInfo.getID());
					rs = ps.executeQuery();
					while(rs.next()){
						lResult = discountDao.updateDiscountCredenceStatus(rs.getLong("id"),LOANConstant.DiscountCredenceStatus.SAVE);
						UpdateOBDiscountCredenceStatus(rs.getLong("id"),
								LOANConstant.DiscountCredenceStatus.REFUSE, conn);
					}
					
				}else{
					lResult = discountDao.updateDiscountCredenceStatus(cInfo.getID(),LOANConstant.DiscountCredenceStatus.SAVE);
					
					UpdateOBDiscountCredenceStatus(cInfo.getID(),
							LOANConstant.LoanStatus.REFUSE, conn);
				}
			}
		
			// ---- added by mzh_fu 2007/06/11 审批流 end
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception e) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(e.toString());
			throw new IRollbackException(context, e.getMessage(), e);
		}finally {
			//add by jbpan 20120606 start
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}	
	
	
	
	// /////////////////////////////////////////////////////////////////////

	/**
	 * 新增审批意见
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol>
	 * <b>新增审批意见</b>
	 * <ul>
	 * <li>操作数据库表ReviewOpinion,discountApply
	 * <li>如果审批决定是拒绝，修改带审批的主体状态
	 * </ul>
	 * </ol>
	 * 
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param long
	 *            nReviewTypeID 审批类型
	 * @param long
	 *            nReviewContentID 审批类型
	 * @param String
	 *            sOpinion 审批意见
	 * @param long
	 *            nUserID 审批人标示
	 * @param long
	 *            nNextUserID 下一个审批人标示
	 * @param long
	 *            nResultID 审批结果
	 * @param long
	 *            nStatusID 是否最终审批 1--是 0--否
	 * @param long
	 *            action 审批，拒绝，修改
	 * @param double
	 *            mExamineAmount 批准贴现金额
	 * @param double
	 *            fDiscountRate 贴现利率
	 * @param double
	 *            mCheckAmount 核定贴现金额
	 * @return long 新增成功，返回值 == 1，失败，返回值 == -1
	 * @exception Exception
	 */
	public long checkDiscount(long lApprovalContentID, String sOpinion,
			long lUserID, long lNextUserID, long lAction,
			double mExamineAmount, double fDiscountRate, double mCheckAmount,
			long lCurrencyID, long lOfficeID) throws RemoteException,
			IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		long lMaxID = -1;
		long lSerialID = -1;
		long lStatusID = -1;
		long lResultID = -1;
		long lOBStatusID = 0;
		long lContractID = -1;
		String strFileName = "";
		String strSQL = "";

		// 定义相应操作常量
		// 模块类型
		long lModuleID = Constant.ModuleType.LOAN;
		// 业务类型
		long lLoanTypeID = getLoanSubTypeID(lApprovalContentID);// Constant.ApprovalLoanType.TX;
		// 操作类型
		long lActionID = Constant.ApprovalAction.LOAN_APPLY;
		long lApprovalID = -1;
		long lLevel = -1;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        try {
			logInfo.setBusinessType("贴现-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.LOAN_APPLY) );
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(lApprovalContentID));  //操作日志-业务主键-交易号
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();

		try {
			// 获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID,
					lActionID, lOfficeID, lCurrencyID);
			// 下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			// 审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);

			conn = Database.getConnection();

			// //////////////////////////////////////////////////////////////////////////////////////////////////////////////
			strSQL = "";
			if (lAction == 1) // 拒绝
			{
				// add by jbpan 20120606 操作日志-操作类型-拒绝
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				// 逻辑删除
				appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID, lActionID,
						lOfficeID, lCurrencyID, lApprovalContentID, 2);

				lStatusID = Constant.RecordStatus.INVALID;
				lResultID = Constant.ApprovalDecision.REFUSE;
				strSQL = "update Loan_LoanForm set nStatusID="
						+ LOANConstant.LoanStatus.REFUSE + " where ID="
						+ lApprovalContentID;
				UpdateDiscountOBApplyStatus(lApprovalContentID,
						LOANConstant.LoanStatus.REFUSE, conn);
			}
			if (lAction == 2) // 审批
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0) {
					strSQL = "update Loan_LoanForm set nNextCheckUserID="
							+ lNextUserID + ", nStatusID="
							+ LOANConstant.LoanStatus.SUBMIT
							+ ", nNextCheckLevel=" + lLevel + " where ID="
							+ lApprovalContentID;
					Log.print("更新下一个审核级别（可越级）：" + lLevel);
				} else {
					strSQL = "update Loan_LoanForm set nNextCheckUserID="
							+ lNextUserID + ", nStatusID="
							+ LOANConstant.LoanStatus.SUBMIT
							+ ", nNextCheckLevel=nNextCheckLevel+1 where ID="
							+ lApprovalContentID;
					Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
			}

			if (lAction == 3) // 审批&&最后
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.FINISH;
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				strSQL = " update Loan_LoanForm set nNextCheckUserID = "
						+ lNextUserID + ", nStatusID = "
						+ LOANConstant.LoanStatus.CHECK + " where ID = "
						+ lApprovalContentID;
				UpdateDiscountOBApplyStatus(lApprovalContentID,
						LOANConstant.LoanStatus.CHECK, conn);

				// 审批完成后需要做的操作
				// 将贷款申请信息复制到合同表
				ContractDao conDao = new ContractDao();
				lContractID = conDao.insert(lApprovalContentID,
						LOANConstant.LoanType.TX);

				/* TOCONFIG―TODELETE */
				/*
				 * 产品化不再区分项目,以中电子为参考; ninh 2005-03-24
				 */

				ContractContentDao conconDao = new ContractContentDao();
				// 上海电气不生成贴现合同文本 modified by zntan
				// if (Config.GLOBAL.getProjectType() !=
				// Constant.ProjectType.SEFC)
				// {
				// if (Config.GLOBAL.getProjectType() ==
				// Constant.ProjectType.CEC)
				// {
				// strFileName = conconDao.addCECTX(lContractID);
				// }
				// else
				// strFileName = conconDao.addTX(lContractID);
				//
				// ContractContentInfo CCInfo = new ContractContentInfo();
				// CCInfo.setParentID(lContractID);
				// CCInfo.setContractID(lContractID);
				// CCInfo.setContractTypeID(LOANConstant.ContractType.TX);
				// CCInfo.setDocName(strFileName);
				// conconDao.saveContractContent(CCInfo);
				// }

				strFileName = conconDao.addTX(lContractID);

				ContractContentInfo CCInfo = new ContractContentInfo();
				CCInfo.setParentID(lContractID);
				CCInfo.setContractID(lContractID);
				CCInfo.setContractTypeID(LOANConstant.ContractType.TX);
				CCInfo.setDocName(strFileName);
				conconDao.saveContractContent(CCInfo);

				/* TOCONFIG―END */

			}
			if (lAction == 4) // 修改
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.RETURN;
				// add by jbpan 20120606 操作日志-操作类型-返回修改
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
				strSQL = " update Loan_LoanForm set nNextCheckUserID=nInputUserID, nStatusID="
						+ LOANConstant.LoanStatus.SUBMIT
						+ ", nNextCheckLevel=1 where ID=" + lApprovalContentID;
			}

			Log.print(strSQL);
			ps = conn.prepareStatement(strSQL);
			Log.print("SQL end");
			ps.executeUpdate();
			ps.close();
			ps = null;

			// //////////////////////////////////////////////////////////////////////////////////////////////////////////////

			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lApprovalContentID);
			// info.setSerialID(lSerialID);
			info.setUserID(lUserID);
			info.setNextUserID(lNextUserID);
			info.setOpinion(sOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			Log.print("saveApprovalTracing begin");
			appbiz.saveApprovalTracing(info);
			Log.print("saveApprovalTracing end");

			conn.close();
			conn = null;
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			// ////////////////////
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			  
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		Log.print("checkDiscount end");
		return lApprovalContentID;
	}

	// //////////////////////////////////////////////////////////////

	/**
	 * 取消贴现申请，
	 * 
	 * @param lDiscountID
	 *            贴现标识
	 */
	public long cancelDiscountByID(long lDiscountID) throws RemoteException,
			IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		long lResult = 0;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPLY);
		try {
			logInfo.setBusinessType("贴现-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.LOAN_APPLY) );
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(lDiscountID));  //操作日志-业务主键-交易号  
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try {
			con = Database.getConnection();

			strSQL = " update Loan_LoanForm set nStatusID = ? where ID = ? ";
			ps = con.prepareStatement(strSQL);

			ps.setLong(1, LOANConstant.LoanStatus.CANCEL);
			ps.setLong(2, lDiscountID);

			lResult = ps.executeUpdate();

			if (lResult > 0) {
				UpdateDiscountOBApplyStatus(lDiscountID,
						LOANConstant.LoanStatus.CANCEL, con);
			}

			ps.close();
			ps = null;
			con.close();
			con = null;

			if (lResult > 0) {
				//add by jbpan 20120606 加上操作日志-操作结果-成功        
	            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
				return 1; // sucess
			} else {
				//add by jbpan 20120606 加上操作日志-操作结果-失败        
	            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);
				return 0; // lost because tech reason
			}
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

	}

	public long cancelDiscountCredenceByID(long lDiscountCredenceID)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		long lResult = 0;
		String id = "";

		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.DELETE);
		try {
			logInfo.setBusinessType("贴现-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.DISCOUNT_CREDENCE) );
			logInfo.setTransCode(NameRef.getContractNoByDiscountNoticeID(lDiscountCredenceID)+"-"+NameRef.getCredenceCodeByDiscountID(lDiscountCredenceID));  //操作日志-业务主键-交易号  
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try {
			con = Database.getConnection();
			strSQL = "select id from Loan_DiscountCredence where  discountpayform=?";
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lDiscountCredenceID);
			rs = ps.executeQuery();
			while(rs.next()){
				id += rs.getLong("id")+",";
			}
			if(!id.equals(""))
				id =id.substring(0,id.length()-1); 
			if(!id.equals("")){
				//更新转账单变
				strSQL = " update LOAN_DISCOUNTPAYFORM set nStatusID = ? where ID = ? ";
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, Constant.RecordStatus.INVALID);
				ps.setLong(2, lDiscountCredenceID);
				lResult = ps.executeUpdate();
				//更新合同票据表
				strSQL = " update Loan_DiscountContractBill set nDiscountCredenceID = null,ob_nDiscountCredenceID = null where nDiscountCredenceID in ("+id+") ";
				ps = con.prepareStatement(strSQL);
				lResult = ps.executeUpdate();
				//更新凭证表
				strSQL = " update Loan_DiscountCredence set nStatusID = "+Constant.RecordStatus.INVALID+" where ID in ("+id+")";
				ps = con.prepareStatement(strSQL);
				lResult = ps.executeUpdate();
			}else{
				//更新合同票据表
				strSQL = " update Loan_DiscountContractBill set nDiscountCredenceID = null,ob_nDiscountCredenceID = null where nDiscountCredenceID =? ";
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lDiscountCredenceID);
				lResult = ps.executeUpdate();
				//更新凭证表
				strSQL = " update Loan_DiscountCredence set nStatusID = ? where ID = ?";
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, Constant.RecordStatus.INVALID);
				ps.setLong(2, lDiscountCredenceID);
				lResult = ps.executeUpdate();
			}
			

			if (!id.equals("")) {
				String ids[]= id.split(",");
				for(int i =0;i<ids.length;i++){
					lDiscountCredenceID = Long.valueOf(ids[i]).longValue();
					UpdateOBDiscountCredenceStatus(lDiscountCredenceID,
							LOANConstant.LoanStatus.CANCEL, con);
				}
			}else{
				UpdateOBDiscountCredenceStatus(lDiscountCredenceID,
						LOANConstant.LoanStatus.CANCEL, con);
			}

			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start 
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}

	public long checkDiscountCredence(long lApprovalContentID, String sOpinion,
			long lUserID, long lNextUserID, long lAction, long lCurrencyID,
			long lOfficeID) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		long lMaxID = -1;
		long lSerialID = -1;
		long lStatusID = -1;
		long lResultID = -1;
		String strSQL = "";

		// 定义相应操作常量
		// 模块类型
		long lModuleID = Constant.ModuleType.LOAN;
		// 业务类型
		long lLoanTypeID = Constant.ApprovalLoanType.TX;
		// 操作类型
		long lActionID = Constant.ApprovalAction.DISCOUNT_CREDENCE;
		long lApprovalID = -1;
		long lLevel = -1;
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        try {
			logInfo.setBusinessType(Constant.ApprovalLoanType.getName(lLoanTypeID) + "-" + Constant.CodingruleAction.getName(lActionID) );
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
			logInfo.setTransCode(NameRef.getContractNoByDiscountNoticeID(lApprovalContentID)+"-"+NameRef.getCredenceCodeByDiscountID(lApprovalContentID));  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}		
        // add by jbpan 20120606 end
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();

		try {
			conn = Database.getConnection();
		   //获得子类型lLoanTypeID
			strSQL = " select lc.nSubTypeId from Loan_DiscountCredence ld,loan_contractform lc where ld.id="+lApprovalContentID+" and ld.ncontractid=lc.id";
			System.out.println("获得子类型lLoanTypeID:"+strSQL);
			ps = conn.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs.next())
			{
				
				lLoanTypeID=rs.getLong("nSubTypeId");	
				
			}
			else
			{
				lLoanTypeID=lLoanTypeID;	
			}	
			System.out.println("lLoanTypeID:"+lLoanTypeID);
			// 获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID,
					lActionID, lOfficeID, lCurrencyID);
			// 下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			// 审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);

			

			// //////////////////////////////////////////////////////////////////////////////////////////////////////////////
			strSQL = "";
			if (lAction == 1) // 拒绝
			{
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				// 逻辑删除
				appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID, lActionID,
						lOfficeID, lCurrencyID, lApprovalContentID, 2);
				
				lStatusID = Constant.RecordStatus.INVALID;
				lResultID = Constant.ApprovalDecision.REFUSE;
				strSQL = "update Loan_DiscountCredence set nStatusID="
						+ LOANConstant.DiscountCredenceStatus.REFUSE
						+ " where ID=" + lApprovalContentID;

				UpdateOBDiscountCredenceStatus(lApprovalContentID,
						LOANConstant.LoanStatus.REFUSE, conn);
//				// 被拒绝时应该清除票据与该凭证的关联，这样票据才能再次被选择做凭证 added by zntan 2005-10-21
//				String strSQL2 = " update Loan_DiscountContractBill set nDiscountCredenceID = null,ob_nDiscountCredenceID = null where nDiscountCredenceID = ? ";
//				Log.print("清除据凭证关联 SQL：" + strSQL2);
//				ps = conn.prepareStatement(strSQL2);
//				ps.setLong(1, lApprovalContentID);
//				ps.executeUpdate();
//				ps.close();
//				ps = null;
			}
			if (lAction == 2) // 审批
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0) {
					strSQL = "update Loan_DiscountCredence set nNextCheckUserID="
							+ lNextUserID
							+ ", nStatusID="
							+ LOANConstant.DiscountCredenceStatus.SUBMIT
							+ ", nNextCheckLevel="
							+ lLevel
							+ " where ID="
							+ lApprovalContentID;
					Log.print("更新下一个审核级别（可越级）：" + lLevel);
				} else {
					strSQL = "update Loan_DiscountCredence set nNextCheckUserID="
							+ lNextUserID
							+ ", nStatusID="
							+ LOANConstant.DiscountCredenceStatus.SUBMIT
							+ ", nNextCheckLevel=nNextCheckLevel+1 where ID="
							+ lApprovalContentID;
					Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
			}

			if (lAction == 3) // 审批&&最后
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.FINISH;
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				strSQL = " update Loan_DiscountCredence set nNextCheckUserID = "
						+ lNextUserID
						+ ", nStatusID = "
						+ LOANConstant.DiscountCredenceStatus.CHECK
						+ " where ID = " + lApprovalContentID;

				// 审批完成后需要做的操作
				UpdateOBDiscountCredenceStatus(lApprovalContentID,
						LOANConstant.LoanStatus.CHECK, conn);
				updateDiscountBillStatus(lApprovalContentID,
						LOANConstant.CheckDiscountBillStatus.ZZSC);

				//
			}
			if (lAction == 4) // 修改
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.RETURN;
				// add by jbpan 20120606 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
				strSQL = " update Loan_DiscountCredence set nNextCheckUserID=nInputUserID, nStatusID="
						+ LOANConstant.DiscountCredenceStatus.SUBMIT
						+ ", nNextCheckLevel=1 where ID=" + lApprovalContentID;
			}

			Log.print(strSQL);
			ps = conn.prepareStatement(strSQL);
			Log.print("SQL end");
			ps.executeUpdate();
			ps.close();
			ps = null;

			// //////////////////////////////////////////////////////////////////////////////////////////////////////////////

			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lApprovalContentID);
			// info.setSerialID(lSerialID);
			info.setUserID(lUserID);
			info.setNextUserID(lNextUserID);
			info.setOpinion(sOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			Log.print("saveApprovalTracing begin");
			appbiz.saveApprovalTracing(info);
			Log.print("saveApprovalTracing end");

			conn.close();
			conn = null;
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			// ////////////////////
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start 
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		Log.print("checkDiscountCredence end");
		return lApprovalContentID;
	}

	/**
	 * 将贴现凭证对应的贴现票据存盘，操作DiscountCredence表
	 * （贴现凭证中票据信息的修改不需要记录日志）
	 * @param lDiscountCredenceID
	 *            贴现凭证标识，如果<=0计算，否则计算并修改
	 * @param lDiscountContractID
	 *            贴现合同标识
	 * @return 返回贴现凭证标识
	 */
	public long saveDiscountCredenceBill(long lDiscountCredenceID,
			long lDiscountContractID, long lDiscountBillID[])
			throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSelect = null;
		String strSQL = null;
		long nStatusID = -1;
		int i = 0;
		long lRecordCount = -1;
		// add by jbpan 20120606 操作日志 start
//        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
//        logInfo.setActionTypeID(Constant.LoggerOfOperationType.UPDATE);
//		logInfo.setBusinessType("贴现-贴现凭证-贴现票据");
        // add by jbpan 20120606 end
		double dDiscountRate = 0; // 利率
		Timestamp tsDiscountDate = null; // 计息日
		double dExamineAmount = 0; // 批准金额
		double dDiscountAccrual = 0; // 利息
		double dCheckAmount = 0; // 实付金额

		Timestamp tsEnd = null; // 贴现到期日期
		String strEnd = ""; // 贴现日期
		long nDays = 0; // 实际贴现天数
		double dAmount = 0; // 票据金额
		double dAccrual = 0; // 每张票据贴现利息
		double dAccrualTotal = 0;//该凭证下所有票据的总利息
		double dRealAmount = 0; // 实付贴现金额
		double dTotalAmount = 0; // 总票据金额
		double dTotalAccrual = 0; // 总票据利息
		double dTotalRealAmount = 0; // 总票据实付金额
		long lCredenceStatusID = -1; // 贴现凭证状态
		double purchaserInterestRate = 0;
		double dPurchaserInterest =0;
		double dTotalPurchaserInterest =0;
		double dTotalDiscountAccrual =0;

		try {
//			logInfo.setTransCode(NameRef.getContractNoByID(lDiscountContractID)+"-"+NameRef.getDiscountCredenceNoByID(lDiscountCredenceID));  //操作日志-业务主键-合同编号
			conn = Database.getConnection();

			if (lDiscountContractID > 0) {
				strSQL = " select purchaserInterestRate,mDiscountrate,dtDiscountdate from Loan_ContractForm a where a.ID = ?  ";

				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lDiscountContractID);
				rs = ps.executeQuery();
				if (rs.next()) {
					purchaserInterestRate = rs.getDouble("purchaserInterestRate");//买方付息比例
					tsDiscountDate = rs.getTimestamp("dtDiscountdate");//贴现计息日
					dDiscountRate = rs.getDouble("mDiscountrate");//贴现利率
					
				}
			}
			if (lDiscountCredenceID > 0 && lDiscountBillID !=null && lDiscountBillID.length>0) {
				// 更新记录
				strSQL = " update Loan_DiscountContractBill set nDiscountCredenceID=null where nDiscountCredenceID=? ";

				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				//ps.setLong(1, -1);
				ps.setLong(1, lDiscountCredenceID);

				ps.executeUpdate();
				ps.close();
				ps = null;

				// 更新记录
				for (i = 0; lDiscountBillID !=null && i < lDiscountBillID.length; i++) {
					if (lDiscountBillID[i] > 0) {
						// 更新记录
						strSQL = " update Loan_DiscountContractBill set nDiscountCredenceID=? where ID=? ";

						Log.print(strSQL);
						ps = conn.prepareStatement(strSQL);
						ps.setLong(1, lDiscountCredenceID);
						ps.setLong(2, lDiscountBillID[i]);

						ps.executeUpdate();
						ps.close();
						ps = null;
					}
				}
				//得到每张票据的到期日期、是否异地加天、是否节假日加天，再根据合同中贴现利率、贴现日期、买方付息比例算出最后的利息以及买方付息比例。
				
				for (i = 0; lDiscountBillID !=null && i < lDiscountBillID.length; i++) {
					if (lDiscountBillID[i] > 0) {
						// 更新记录
						strSQL = " select MAMOUNT,mCheckAmount,NISLOCAL,NADDDAYS,DTEND from Loan_DiscountContractBill where ID=? ";

						Log.print(strSQL);
						ps = conn.prepareStatement(strSQL);
						ps.setLong(1, lDiscountBillID[i]);
						rs = ps.executeQuery();
						if(rs.next()){
							tsEnd = rs.getTimestamp("DTEND");
							dAmount = rs.getDouble("MAMOUNT");
							dCheckAmount = rs.getDouble("mCheckAmount");
							nDays = 0;
							if (tsEnd != null && tsDiscountDate != null) {
								strEnd = tsEnd.toString();
								tsEnd = new java.sql.Timestamp(new Integer(strEnd
										.substring(0, 4)).intValue() - 1900, new Integer(
										strEnd.substring(5, 7)).intValue() - 1,
										new Integer(strEnd.substring(8, 10)).intValue(), 0,
										0, 0, 0);
								nDays = (int) java.lang.Math
										.ceil((tsEnd.getTime() - tsDiscountDate.getTime()) / 86400000)
										+ rs.getInt("NADDDAYS"); // 加上节假日增加计息天数
							}
							if (nDays >= 0) {
								if (rs.getLong("NISLOCAL") == LOANConstant.YesOrNo.NO) {
									nDays = nDays + 3;
								}
								System.out.println("the dDiscountRate is "+dDiscountRate);
								System.out.println("the dAmount is "+dAmount);
								System.out.println("the nDays is "+nDays);
								System.out.println("the dAccrual is "+dAccrual);
								dAccrual = dAmount * (dDiscountRate / 360) * 0.01 *nDays;
								dAccrual = DataFormat.formatDouble(dAccrual, 2);
							    dPurchaserInterest = dAccrual * purchaserInterestRate  * 0.01;
								dPurchaserInterest = DataFormat.formatDouble(dPurchaserInterest, 2);
				                dDiscountAccrual = dAccrual - dPurchaserInterest;//贴现人付息
				                dDiscountAccrual=DataFormat.formatDouble(dDiscountAccrual, 2);
								System.out.println("the RealdAccrual is "+dAccrual);
								
								System.out.println("the RealdAccrual is "+dAccrual);
								dAccrualTotal+=dAccrual;
								dTotalAmount+=dAmount;
								dTotalRealAmount+=dCheckAmount;
								dTotalPurchaserInterest+=dPurchaserInterest ;
								dTotalDiscountAccrual+= dDiscountAccrual;
							}
						}
						rs.close();
						rs = null;
						ps.close();
						ps = null;
					}
				}
				/*strSQL = " select sum(nvl(mAmount,0)) mTotalAmount,sum(nvl(mCheckAmount,0)) mTotalCheckAmount from Loan_DiscountContractBill a where a.nDiscountCredenceID=? ";

				ps = conn.prepareStatement(strSQL);
				ps.setLong(1, lDiscountCredenceID);
				rs = ps.executeQuery();
				if (rs.next()) {
					// dTotalAmount = Data.formatDouble(rs.getDouble(1),2);
					// dTotalRealAmount =
					// DataFormat.formatDouble(rs.getDouble(2),2);
					// dTotalAccrual = DataFormat.formatDouble(dTotalAmount,2) -
					// DataFormat.formatDouble(dTotalRealAmount,2);
					dTotalAmount = rs.getDouble(1);
					dTotalRealAmount = rs.getDouble(2);
					dTotalAccrual = dTotalRealAmount;
					//dTotalAccrual = (dTotalAmount - dTotalRealAmount)*100/(100-purchaserInterestRate);
				}
				Log.print("==============");
				Log.print("汇票金额=" + dTotalAmount);
				Log.print("汇票利息=" + dTotalAccrual);
				Log.print("实付金额=" + dTotalRealAmount);
				Log.print("==============");
				rs.close();
				rs = null;
				ps.close();
				ps = null;*/
				dAccrualTotal = DataFormat.formatDouble(dAccrualTotal, 2);
				dTotalPurchaserInterest = DataFormat.formatDouble(dTotalPurchaserInterest, 2);
				dTotalDiscountAccrual = DataFormat.formatDouble(dTotalDiscountAccrual, 2);
				System.out.println("汇票金额=" + dTotalAmount);
				System.out.println("汇票利息=" + dAccrualTotal);
				System.out.println("实付金额=" + dTotalRealAmount);
				strSQL = " update Loan_DiscountCredence set mAmount=?, mInterest=?, PurchaserInterest=? where ID=? ";

				Log.print(strSQL);
				ps = conn.prepareStatement(strSQL);
				ps.setDouble(1, DataFormat.formatDouble(dTotalAmount));
				/**ps.setDouble(2, DataFormat.formatDouble(dAccrualTotal)
						- DataFormat.formatDouble(dAccrualTotal
								* purchaserInterestRate * 0.01));
								
				ps.setDouble(3, DataFormat.formatDouble(dAccrualTotal
						* purchaserInterestRate * 0.01));
						* */
				ps.setDouble(2, DataFormat.formatDouble(dTotalDiscountAccrual));
				ps.setDouble(3, DataFormat.formatDouble(dTotalPurchaserInterest));
				ps.setLong(4, lDiscountCredenceID);

				ps.executeUpdate();

				ps.close();
				ps = null;

				conn.close();
				conn = null;
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
//            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception e) {
//          add by jbapn 20120606 start
            // 加上操作日志       
//            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
//            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} finally {
			//add by jbpan 20120606 start
			  
//			LoggerResults vResult = LoggerResults.getInstance(); 
//			// 将日志记录保存到内存中
//			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

		return lDiscountCredenceID;
	}

	/**
	 * 查询一个贴现申请下的贴现票据并计息，操作DiscountBill表
	 * 
	 * @param lContractID
	 *            贴现合同标识
	 * @param lDiscountCredenceID
	 *            贴现凭证标识
	 * @return 返回贴现票据的列表
	 */
	public Collection findBillInterestByID(long lContractID,
			long lDiscountCredenceID, long lPageLineCount, long lPageNo,
			long lOrderParam, long lDesc) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		double dDiscountRate = 0; // 利率
		Timestamp tsDiscountDate = null; // 计息日
		double dExamineAmount = 0; // 批准金额
		double dDiscountAccrual = 0; // 利息
		double dCheckAmount = 0; // 实付金额

		Timestamp tsEnd = null; // 贴现日期
		String strEnd = ""; // 贴现日期
		int nDays = 0; // 实际贴现天数
		double dAmount = 0; // 票据金额
		double dAccrual = 0; // 贴现利息
		double dRealAmount = 0; // 实付贴现金额
		double dTotalAmount = 0; // 总票据金额
		double dTotalAccrual = 0; // 总票据利息
		double dTotalRealAmount = 0; // 总票据实付金额
		double dTotalPurchaserAmount = 0; //买方付息
		double dTotalDiscountAccrual = 0; //贴现人付息
		double dPurchaserAmount = 0; //买方付息
		double dPurchaserRate = 0; //买方利率

		try {
			con = Database.getConnection();

			Log.print("======进入贴现计息(findBillInterestByID)方法======");

			Log.print("合同标示：" + lContractID);
			Log.print("凭证标示：" + lDiscountCredenceID);

			if (lContractID > 0) {
				strSQL = " select a.* from Loan_ContractForm a where a.ID=? ";

				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lContractID);
				rs = ps.executeQuery();
				if (rs.next()) {
					dExamineAmount = rs.getDouble("mExamineAmount"); // 批准金额
					dRealAmount = rs.getDouble("mCheckAmount"); // 核定金额
					dAccrual = dExamineAmount - dRealAmount; // 贴现利息
					dDiscountRate = rs.getDouble("mDiscountRate"); // 贴现利率
					tsDiscountDate = rs.getTimestamp("dtDiscountDate"); // 贴现计息日
					dTotalDiscountAccrual = rs.getDouble("mDiscountAccrual"); //贴现人付息
					dTotalPurchaserAmount = rs.getDouble("mPurchaserAmount"); //买方付息
					dPurchaserRate = rs.getDouble("purchaserInterestRate"); //买方利率
					dTotalDiscountAccrual = rs.getDouble("mDiscountAccrual"); //贴现人付息
					dTotalPurchaserAmount = rs.getDouble("mPurchaserAmount"); //买方付息
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				strSQL = " from Loan_DiscountContractBill where nStatusID="
						+ Constant.RecordStatus.VALID + " and nContractID="
						+ lContractID;

			} else if (lDiscountCredenceID > 0) {
				strSQL = " select id from Loan_DiscountCredence where discountpayform=? and nstatusid=1";
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lDiscountCredenceID);
				String ids = "";
				rs = ps.executeQuery();
				while(rs.next()){
					ids += rs.getLong("id")+",";
				}
				if(!ids.equals("")){
					ids = ids.substring(0,ids.length()-1);
					lDiscountCredenceID = Long.valueOf(ids.split(",")[0]).longValue();
				}
					strSQL = " select a.* from Loan_ContractForm a, Loan_DiscountCredence b where a.ID=b.nContractID and b.ID=? ";
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lDiscountCredenceID);
				rs = ps.executeQuery();
				if (rs.next()) {
					dExamineAmount = rs.getDouble("mExamineAmount"); // 批准金额
					dRealAmount = rs.getDouble("mCheckAmount"); // 核定金额
					dAccrual = dExamineAmount - dRealAmount; // 贴现利息
					dDiscountRate = rs.getDouble("mDiscountRate"); // 贴现利率
					tsDiscountDate = rs.getTimestamp("dtDiscountDate"); // 贴现计息日
					dTotalDiscountAccrual = rs.getDouble("mDiscountAccrual"); //贴现人付息
					//dTotalPurchaserAmount = rs.getDouble("mPurchaserAmount"); //买方付息
					dPurchaserRate = rs.getDouble("purchaserInterestRate"); //买方利率
					dTotalDiscountAccrual = rs.getDouble("mDiscountAccrual"); //贴现人付息
					dTotalPurchaserAmount = rs.getDouble("mPurchaserAmount"); //买方付息
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				strSQL = " from Loan_DiscountContractBill where nStatusID="
						+ Constant.RecordStatus.VALID
						+ " and nDiscountCredenceID=" + lDiscountCredenceID;

			}

			Log.print("======开始查询票据总数和总金额======");

			// 计算记录总数
			strSelect = " select count(*),sum(nvl(mAmount,0)),sum(nvl(mCheckAmount,0)) ";
			// strSQL = " from DiscountBill where nStatusID=" +
			// Constant.RecordStatus.VALID + " and nDiscountApplyID=" +
			// lDiscountApplyID;

			Log.print(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
				dTotalAmount = rs.getDouble(2);
				dTotalRealAmount = rs.getDouble(3);
				dTotalAccrual = dTotalAmount - dTotalRealAmount + dTotalPurchaserAmount;
			}
			Log.print("==============");
			Log.print("票据总张数=" + lRecordCount);
			Log.print("票据总金额=" + dTotalAmount);
			Log.print("票据总利息=" + dTotalAccrual);
			Log.print("总实付金额=" + dTotalRealAmount);
			Log.print("==============");
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			Log.print("======结束查询票据总数和总金额======");

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}
			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			switch ((int) lOrderParam) {
			case 1:
				strSQL += " order by nSerialNo ";
				break;
			case 2:
				strSQL += " order by sUserName ";
				break;
			case 3:
				strSQL += " order by sBank ";
				break;
			case 4:
				strSQL += " order by nIsLocal ";
				break;
			case 5:
				strSQL += " order by dtCreate ";
				break;
			case 6:
				strSQL += " order by dtEnd ";
				break;
			case 7:
				strSQL += " order by nAddDays ";
				break;
			case 8:
				strSQL += " order by sCode ";
				break;
			case 9:
				strSQL += " order by mAmount ";
				break;
			case 10:
				strSQL += " order by nAcceptPOTypeID";
				break;
			case 11:
				strSQL += " order by sFormerOwner";
				break;
			case 12:
				strSQL += " order by nDiscountCredenceID,scode";
				break;
			default:
				strSQL += " order by nSerialNo ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			strSQL = "select * " + strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between "
					+ lRowNumStart + " and " + lRowNumEnd;

			Log.print("翻页查询开始");
			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountBillInfo dbill = new DiscountBillInfo();

				dbill.setDiscountContractID(lContractID); // 贴现合同标示
				dbill.setDiscountDate(tsDiscountDate); // 计息日
				dbill.setDiscountRate(dDiscountRate); // 计息利率

				dbill.setDiscountCredenceID(rs.getLong("nDiscountCredenceID")); // 凭证标示
				dbill.setOBDiscountCredenceID(rs
						.getLong("OB_nDiscountCredenceID")); // 网银凭证标示
				// dbill.OB_lDiscountCredenceID =
				// rs.getLong("ob_nDiscountCredenceID");
				dbill.setID(rs.getLong("ID")); // 票据标示
				dbill.setSerialNo(rs.getLong("nSerialNo")); // 序列号
				dbill.setUserName(rs.getString("sUserName")); // 原始出票人
				dbill.setBank(rs.getString("sBank")); // 承兑银行
				dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
				dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbill.setCode(rs.getString("sCode")); // 汇票号码
				dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
				// ////////////////////////////////////////////////////////

				 dAmount = rs.getDouble("mAmount"); //汇票金额

				tsEnd = rs.getTimestamp("dtEnd");
				nDays = 0;
				if (tsEnd != null && tsDiscountDate != null) {
					strEnd = tsEnd.toString();
					tsEnd = new java.sql.Timestamp(new Integer(strEnd
							.substring(0, 4)).intValue() - 1900, new Integer(
							strEnd.substring(5, 7)).intValue() - 1,
							new Integer(strEnd.substring(8, 10)).intValue(), 0,
							0, 0, 0);
					nDays = (int) java.lang.Math
							.ceil((tsEnd.getTime() - tsDiscountDate.getTime()) / 86400000)
							+ rs.getInt("nAddDays"); // 加上节假日增加计息天数
				}
				if (nDays >= 0) {
					if (rs.getLong("nIsLocal") == LOANConstant.YesOrNo.NO) {
						nDays = nDays + 3;
					}
					dAccrual = dAmount * (dDiscountRate / 360) * 0.01 *nDays;
					dAccrual = DataFormat.formatDouble(dAccrual, 2);
					dPurchaserAmount = dAccrual * dPurchaserRate * 0.01;
					dPurchaserAmount = DataFormat.formatDouble(dPurchaserAmount, 2);
					// dRealAmount = dAmount - dAccrual;
				}
				/*
				 * Log.print("========================"); Log.print("贴现天数=" +
				 * nDays); Log.print("汇票金额=" + dAmount); Log.print("汇票利息=" +
				 * dAccrual); Log.print("实付金额=" + dRealAmount);
				 * Log.print("========================"); dTotalAccrual =
				 * DataFormat.formatDouble(dTotalAccrual, 2) +
				 * DataFormat.formatDouble(dAccrual, 2); dTotalRealAmount =
				 * DataFormat.formatDouble(dTotalRealAmount, 2) +
				 * DataFormat.formatDouble(dRealAmount, 2);
				 */
				dbill.setDays(nDays); // 实际贴现天数
				dbill.setRealAmount(rs.getDouble("mCheckAmount"));// 实付贴现金额
//				dbill.setAccrual(rs.getDouble("mAmount")
//						- rs.getDouble("mCheckAmount")+dPurchaserAmount);// 贴现利息
				
				System.out.println("贴现总利息"+dAccrual);
				//dbill.setRealAmount(rs.getDouble("mCheckAmount")-dAccrual);//实付贴现金额
				dbill.setAccrual(dAccrual);//贴现利息
				dbill.setPurchaserAccrual(dPurchaserAmount);
				dbill.setDiscountAcount(dAmount - dAccrual);
				dbill.setDiscountAccrual(dAccrual - dPurchaserAmount);

				// ////////////////////////////////////////////////////////

				dbill.setCount(lRecordCount);
				// dbill.setTotalAmount(DataFormat.formatDouble(dTotalAmount,
				// 2));
				// dbill.setTotalAccrual(DataFormat.formatDouble(dTotalAccrual,
				// 2));
				// dbill.setTotalRealAmount(DataFormat.formatDouble(dTotalRealAmount,2));
				// dbill.setTotalRealAmount(DataFormat.formatDouble(dTotalAmount,
				// 2) - DataFormat.formatDouble(dTotalAccrual, 2));
				dbill.setTotalAmount(dTotalAmount);
				dbill.setTotalAccrual(dTotalAccrual);
				dbill.setTotalRealAmount(dTotalRealAmount);
				v.add(dbill);
			}
			Log.print("翻页查询结束");
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		Log.print("======退出贴现计息(findBillInterestByID)方法======");

		return (v.size() > 0 ? v : null);

	}

	/**
	 * 计算给定的贴现票据利息，操作DiscountBill表
	 * 
	 * @param lContractID
	 *            贴现合同标识
	 * @param strBillID
	 *            贴现票据标识字符串，逗号分割
	 * @return 返回贴现票据的列表
	 */
	public DiscountBillInfo findBillInterestByBillID(long lContractID,
			String strBillID) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		double dDiscountRate = 0; // 利率
		Timestamp tsDiscountDate = null; // 计息日
		double dExamineAmount = 0; // 批准金额
		double dDiscountAccrual = 0; // 利息
		double dCheckAmount = 0; // 实付金额
		long lDiscountBillID = -1;
		long lBankCount = 0;

		Timestamp tsEnd = null; // 贴现日期
		String strEnd = ""; // 贴现日期
		int nDays = 0; // 实际贴现天数
		double dAmount = 0; // 票据金额
		double dAccrual = 0; // 贴现利息
		double dRealAmount = 0; // 实付贴现金额
		double dTotalAmount = 0; // 总票据金额
		double dTotalAccrual = 0; // 总票据利息
		double dTotalRealAmount = 0; // 总票据实付金额

		DiscountBillInfo dbi = new DiscountBillInfo();

		try {
			conn = Database.getConnection();
			/*
			 * strSQL = " select a.* from Loan_ContractForm a where a.ID=? ";
			 * 
			 * ps = conn.prepareStatement(strSQL); ps.setLong(1, lContractID);
			 * rs = ps.executeQuery(); if (rs.next()) { //dExamineAmount =
			 * rs.getDouble ("mExamineAmount"); //批准金额 //dCheckAmount =
			 * rs.getDouble ("mCheckAmount"); //核定金额 dDiscountRate =
			 * rs.getDouble("mDiscountRate"); //贴现利率 //dDiscountAccrual =
			 * dExamineAmount - dCheckAmount; //贴现利息 tsDiscountDate =
			 * rs.getTimestamp("dtDiscountDate"); //贴现计息日 } rs.close(); rs =
			 * null; ps.close(); ps = null;
			 */
			Log.print("======开始查询票据总数和总金额======");

			// 计算记录总数
			strSelect = " select count(*),sum(nvl(mAmount,0)),sum(nvl(mCheckAmount,0)) ";
			strSQL = " from Loan_DiscountContractBill where nStatusID="
					+ Constant.RecordStatus.VALID + " and ID in ( " + strBillID
					+ " ) ";

			Log.print(strSelect + strSQL);
			ps = conn.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
				dTotalAmount = rs.getDouble(2);
				dTotalRealAmount = rs.getDouble(3);
			}
			Log.print("==============");
			Log.print("票据总张数=" + lRecordCount);
			Log.print("票据总金额=" + dTotalAmount);
			Log.print("==============");
			rs.close();
			rs = null;
			ps.close();
			ps = null;

			Log.print("======结束查询票据总数和总金额======");

			if (strBillID.indexOf(",") == -1) {
				if (Long.parseLong(strBillID.trim()) > 0) {
					// dbi =
					// findDiscountBillByID(Long.parseLong(strBillID.trim()));
					dbi = findDiscountContractBillByID(Long.parseLong(strBillID
							.trim()));
				}
			} else {
				strSelect = " select count(*) ";
				strSQL = " from Loan_DiscountContractBill where nStatusID="
						+ Constant.RecordStatus.VALID + " and ID in ( "
						+ strBillID + " ) and nAcceptPOTypeID = "
						+ LOANConstant.DraftType.BANK;

				Log.print(strSelect + strSQL);
				ps = conn.prepareStatement(strSelect + strSQL);
				rs = ps.executeQuery();

				if (rs != null && rs.next()) {
					lBankCount = rs.getLong(1);
				}

				rs.close();
				rs = null;
				ps.close();
				ps = null;

				if (lBankCount == lRecordCount) {
					dbi.setAcceptPOTypeID(LOANConstant.DraftType.BANK);
				} else if (lBankCount == 0) {
					dbi.setAcceptPOTypeID(LOANConstant.DraftType.BIZ);
				} else {
					dbi.setAcceptPOTypeID(-1);
				}

				dbi.setCode("详见明细表");
				dbi.setCreate(null);
				dbi.setEnd(null);
				dbi.setUserName("详见明细表");
			//modify by xwhe 2008-03-22 当有两张不同的票据类型时，不显示承兑单位名称	
				//dbi.setBank("详见明细表");
			}
			// dbi.setTotalAmount(DataFormat.formatDouble(dTotalAmount,2));
			// dbi.setTotalAccrual(DataFormat.formatDouble(dTotalAmount,2) -
			// DataFormat.formatDouble(dTotalRealAmount,2));
			// dbi.setTotalRealAmount(DataFormat.formatDouble(dTotalRealAmount,2));
			dbi.setTotalAmount(dTotalAmount);
			dbi.setTotalAccrual(dTotalAmount - dTotalRealAmount);
			dbi.setTotalRealAmount(dTotalRealAmount);

			/*
			 * strSQL = "select * " + strSQL;
			 * 
			 * Log.print(strSQL); ps = conn.prepareStatement(strSQL); rs =
			 * ps.executeQuery();
			 * 
			 * while (rs != null && rs.next()) {
			 * 
			 * dAmount = rs.getDouble("mAmount"); //汇票金额
			 * 
			 * tsEnd = rs.getTimestamp("dtEnd"); nDays = 0; if (tsEnd != null &&
			 * tsDiscountDate != null) { strEnd = tsEnd.toString(); tsEnd = new
			 * java.sql.Timestamp( new Integer(strEnd.substring(0,
			 * 4)).intValue() - 1900, new Integer(strEnd.substring(5,
			 * 7)).intValue() - 1, new Integer(strEnd.substring(8,
			 * 10)).intValue(), 0, 0, 0, 0); nDays = (int)
			 * java.lang.Math.ceil((tsEnd.getTime() - tsDiscountDate.getTime()) /
			 * 86400000) + rs.getInt("nAddDays"); //加上节假日增加计息天数 }
			 * 
			 * if (nDays >= 0) { if (rs.getInt("nIsLocal") == 0) { nDays = nDays +
			 * 3; } dAccrual = dAmount * (dDiscountRate / 360) * 0.01 * nDays;
			 * dAccrual = DataFormat.formatDouble(dAccrual, 2); dRealAmount =
			 * dAmount - dAccrual; } Log.print("========================");
			 * Log.print("贴现天数=" + nDays); Log.print("汇票金额=" + dAmount);
			 * Log.print("汇票利息=" + dAccrual); Log.print("实付金额=" + dRealAmount);
			 * Log.print("========================"); dTotalAccrual =
			 * DataFormat.formatDouble(dTotalAccrual, 2) +
			 * DataFormat.formatDouble(dAccrual, 2); dTotalRealAmount =
			 * DataFormat.formatDouble(dTotalRealAmount, 2) +
			 * DataFormat.formatDouble(dRealAmount, 2);
			 * 
			 * dAmount = 0; //票据金额 dAccrual = 0; //贴现利息 dRealAmount = 0;
			 * //实付贴现金额
			 * 
			 * //////////////////////////////////////////////////////////
			 * 
			 * dResult[0] = DataFormat.formatDouble(dTotalAmount, 2); dResult[1] =
			 * DataFormat.formatDouble(dTotalAccrual, 2); dResult[2] =
			 * DataFormat.formatDouble(dTotalAmount, 2) -
			 * DataFormat.formatDouble(dTotalAccrual, 2); }
			 * 
			 * rs.close(); rs = null; ps.close(); ps = null;
			 */
			conn.close();
			conn = null;

		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return (dbi);

	}

	/**
	 * 
	 * 生成贴现凭证编号
	 * 
	 */
	private String createCredenceCode(long lContractID) throws RemoteException,
			IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";

		String strCode = "000";
		long lCode = 0;

		try {
			con = Database.getConnection();

			strSQL = " select nvl(max(sCode),0) sCode from Loan_DiscountCredence where nContractID = ? ";
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lContractID);

			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				strCode = rs.getString(1);
				lCode = Long.parseLong(strCode) + 1;
				strCode = DataFormat.formatInt(lCode, 3, true);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;
		} catch (Exception e) {
			Log.print(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
		}
		Log.print(":::::::::: ::::strcode::::::" + strCode);

		return strCode;

	}
	
	/**
	 * 
	 * 生成贴现凭证编号
	 * 
	 */
	private String createPayFormCode(long lContractID) throws RemoteException,
			IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";

		String strCode = "000";
		long lCode = 0;

		try {
			con = Database.getConnection();

			strSQL = " select nvl(max(sCode),0) sCode from LOAN_DISCOUNTPAYFORM where nContractID = ? ";
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lContractID);

			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				strCode = rs.getString(1);
				lCode = Long.parseLong(strCode) + 1;
				strCode = DataFormat.formatInt(lCode, 3, true);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;
		} catch (Exception e) {
			Log.print(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception e) {
				log4j.error(e.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
		}
		Log.print(":::::::::: ::::strcode::::::" + strCode);

		return strCode;

	}

	/**
	 * 
	 * 更新网银提交过来的贴现申请状态
	 * 
	 */
	private long UpdateDiscountOBApplyStatus(long lInID, long lStatusID,
			Connection conn) throws RemoteException, Exception, IException {
		long lStatusIDTmp = -4;
		long lReturnTmp = -1;
		try {
			if (lStatusID == LOANConstant.LoanStatus.CANCEL)// 已取消
			{
				lStatusIDTmp = OBConstant.LoanInstrStatus.CANCEL;
			} else if (lStatusID == LOANConstant.LoanStatus.CHECK)// 已审核
			{
				lStatusIDTmp = OBConstant.LoanInstrStatus.APPROVE;
			} else if (lStatusID == LOANConstant.LoanStatus.REFUSE)// 已拒绝
			{
				lStatusIDTmp = OBConstant.LoanInstrStatus.REFUSE;
			} else if (lStatusID == Constant.RecordStatus.INVALID)// 已删除
			{
				lStatusIDTmp = OBConstant.LoanInstrStatus.DELETE;
			}

			if (lStatusIDTmp > -4) {
				OBLoanDao dao = new OBLoanDao(conn);
				lReturnTmp = dao.updateOBStatus(lInID, lStatusIDTmp);
				if (lReturnTmp <= 0) {
					Log.print("===不是网银提交过来的===");
				} else {
					Log.print("===更新网银贴现申请状态成功===");
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			//modified by mzh_fu 2007/08/07
			//e.printStackTrace();
			throw new IRollbackException(context, e.getMessage(), e);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			//modified by mzh_fu 2007/08/07
			//e.printStackTrace();
			throw new IRollbackException(context, e.getMessage(), e);
		}

		return lReturnTmp;
	}

	/**
	 * 
	 * 更新网银提交过来的贴现申请状态
	 * 
	 */
	private long UpdateOBDiscountCredenceStatus(long lInID, long lStatusID,
			Connection conn) throws RemoteException, Exception, IException {
		long lStatusIDTmp = -4;
		long lReturnTmp = -1;
		try {
			if (lStatusID == LOANConstant.LoanStatus.CANCEL)// 已取消
			{
				lStatusIDTmp = OBConstant.LoanInstrStatus.CANCEL;
			} else if (lStatusID == LOANConstant.LoanStatus.CHECK)// 已审核
			{
				lStatusIDTmp = OBConstant.LoanInstrStatus.APPROVE;
			} else if (lStatusID == LOANConstant.LoanStatus.REFUSE)// 已拒绝
			{
				lStatusIDTmp = OBConstant.LoanInstrStatus.REFUSE;
			}
			// else if(lStatusID == Constant.RecordStatus.INVALID)//已删除
			// {
			// lStatusIDTmp = OBConstant.LoanInstrStatus.DELETE;
			// }

			if (lStatusIDTmp > -4) {
				OBDiscountCredenceDao dao = new OBDiscountCredenceDao(conn);
				lReturnTmp = dao.updateOBStatus(lInID, lStatusIDTmp);
				if (lReturnTmp <= 0) {
					Log.print("===不是网银贴现凭证提交过来的===");
				} else {
					Log.print("===更新网银贴现凭证申请状态成功===");
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			//modified by mzh_fu 2007/08/07
			//e.printStackTrace();
			throw new IRollbackException(context, e.getMessage(), e);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			//modified by mzh_fu 2007/08/07
			//e.printStackTrace();
			throw new IRollbackException(context, e.getMessage(), e);
		}

		return lReturnTmp;
	}

	/**
	 * 更新票据状态
	 * 
	 * @param lLoanID
	 * @param
	 * @return
	 * @throws RemoteException
	 * @throws IException
	 */

	public long updateDiscountBillStatus(long loanID, long checkID)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		Connection conn = null;
		String strSQL = null;
		long lResult = -1;
		
		try {
			conn = Database.getConnection();
			strSQL = " update loan_discountcontractbill  set NCHECKSTATUS = ? where ID = ? ";

			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, checkID);
			ps.setLong(2, loanID);

			lResult = ps.executeUpdate();

			ps.close();
			ps = null;
			conn.close();
			conn = null;

			if (lResult < 0) {
				Log.print(" update loan updateDiscountBillStatus error : "
						+ lResult);
				return -1;
			} else {
				return loanID;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} finally {
			try {
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

	}

	/**
	 * 更新贷款申请是否走最小审核级别字段
	 * 
	 * @param lLoanID
	 * @param isLowLevel
	 * @return
	 * @throws RemoteException
	 * @throws IException
	 */
	public long updateLoanCheckLevel(long loanID, long isLowLevel)
			throws RemoteException, IException {
		PreparedStatement ps = null;
		Connection conn = null;
		String strSQL = null;
		long lResult = -1;

		try {
			conn = Database.getConnection();
			strSQL = " update loan_LoanForm set isLowLevel = ? where ID = ? ";

			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, isLowLevel);
			ps.setLong(2, loanID);

			lResult = ps.executeUpdate();

			ps.close();
			ps = null;
			conn.close();
			conn = null;

			if (lResult < 0) {
				Log.print(" update loan isLowLevel error : " + lResult);
				return -1;
			} else {
				return loanID;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} finally {
			try {
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

	}

	// /////////////////////////////////////////////////////////////////////////////////////////

	public static void main(String[] args) {
		try {
			DiscountEJB ejb = new DiscountEJB();
			ejb.ejbCreate();
			ejb.findDiscountCredenceByID(1);
			// Log.print(DataFormat.formatDouble(229.515, 2));
			// Log.print(ejb.createApplyCode());
			/*
			 * Timestamp time1 = DataFormat.getDateTime("2002-04-16"); Timestamp
			 * time2 = DataFormat.getDateTime("2002-04-16"); if
			 * (time1.before(time2)) {
			 * Log.print("===============before=============="); } else if
			 * (time1.after(time2)) {
			 * Log.print("===============after=============="); } else if
			 * (time1.equals(time2)) {
			 * Log.print("===============equals=============="); }
			 * 
			 * 
			 * //Log.print(ejb.createApplyCode(655));
			 * //ejb.findDiscountByID(21); ejb.findDiscountCredenceByID(1);
			 * Collection temp = null; //temp =
			 * ejb.findDiscountCredenceByMultiOption(1,1,1,140,-1,-1,0.0,0.0,null,null,-1,10,1,1,1);
			 * //ejb.findBillInterestByID(946,-1,1000,1,1,1); if ((temp != null) &&
			 * (temp.size() > 0)) { Iterator it = temp.iterator(); while
			 * (it.hasNext()) { DiscountCredenceInfo info =
			 * (DiscountCredenceInfo) it.next();
			 * 
			 * Log.print(info.lDiscountID); //免还标示
			 * Log.print(info.sDiscountCode); //免还编号
			 * Log.print(info.sApplyClientName); //借款单位
			 * Log.print(info.dExamineAmount); //贴现申请金额
			 * Log.print(info.dCheckAmount); //贴现审核金额
			 * Log.print(info.dDiscountRate); //贴现利率
			 * Log.print(info.tsDiscountDate); //贴现计息日 Log.print(info.lID);
			 * //贴现凭证标示 Log.print(info.nStatusID); } }
			 * 
			 * //Log.print(ejb.save_GDZC_GF_ContractContent(5));
			 * //Log.print(ejb.saveExtendRepayContract(12)); //
			 * Log.print(ejb.save_ASSURE_XD_ContractContent(140)); 保证合同
			 */
		} catch (Exception e) {
			Log.print(e.toString());
		}
	}

	/**
	 * 查询一个贴现凭证下的贴现票据，操作DiscountBill表
	 * 
	 * @param lDiscountCredenceID
	 *            贴现凭证标识]
	 * @param dRate
	 *            贴现利率
	 * @param tsDate
	 *            贴现日
	 * @return 返回贴现票据的列表
	 */
	public Collection calBillByCredenceID(long lDiscountCredenceID,
			long lPageLineCount, long lPageNo, long lOrderParam, long lDesc// ,
	// double dRate,
	// Timestamp tsDate
	) throws RemoteException, IException {
		PreparedStatement ps = null;
		PreparedStatement ps1 = null;
		ResultSet rs = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;
		String strSQLUpdate = null;

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		long lContractID = -1;
		double dDiscountRate = 0; // 利率
		Timestamp tsDiscountDate = null; // 计息日
		Timestamp tsFillDate = null; // Credence计息日
		double dExamineAmount = 0; // 批准金额
		double dDiscountAccrual = 0; // 利息
		double dCheckAmount = 0; // 实付金额

		Timestamp tsEnd = null; // 贴现日期
		String strEnd = ""; // 贴现日期
		int nDays = 0; // 实际贴现天数
		double dAmount = 0; // 票据金额
		double dAccrual = 0; // 贴现利息
		double dRealAmount = 0; // 实付贴现金额
		double dTotalAmount = 0; // 总票据金额
		double dTotalAccrual = 0; // 总票据利息
		double dTotalRealAmount = 0; // 总票据实付金额

		double purchaserInterestRate = 0; // 买方付息比例

		try {
			con = Database.getConnection();

			Log.print("====进入贴现凭证计息(calBillByCredenceID)方法======");

			Log.print("凭证标示：" + lDiscountCredenceID);

			if (lDiscountCredenceID > 0) {
				strSQL = " select a.*,b.dtfilldate "
						+ " from Loan_ContractForm a, Loan_DiscountCredence b "
						+ " where a.ID=b.nContractID and b.ID=? ";

				ps = con.prepareStatement(strSQL);
				ps.setLong(1, lDiscountCredenceID);
				rs = ps.executeQuery();
				if (rs.next()) {
					lContractID = rs.getLong("id");
					tsFillDate = rs.getTimestamp("dtfilldate");
					dDiscountRate = rs.getDouble("mDiscountRate"); // 贴现利率
					/*
					 * dExamineAmount = rs.getDouble("mExamineAmount"); //批准金额
					 * dRealAmount = rs.getDouble("mCheckAmount"); //核定金额
					 * dAccrual = dExamineAmount - dRealAmount; //贴现利息
					 * tsDiscountDate = rs.getTimestamp("dtDiscountDate");
					 * //贴现计息日 //
					 */
					purchaserInterestRate = rs
							.getDouble("PurchaserInterestRate");// 买方付息比例
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				// strSQL = " update Loan_ContractForm set dtDiscountDate = ? ";

				// strSQL = " from Loan_DiscountContractBill where nStatusID=" +
				// Constant.RecordStatus.VALID + " and nDiscountCredenceID=" +
				// lDiscountCredenceID;

				Log.print("======开始校验贴现日，贴现日应该大于所有票据到期日======");

				// 贴现日输入校验，应该大于所有票据到期日
				strSQL = " select count(*) from Loan_DiscountFormBill where nStatusID="
						+ Constant.RecordStatus.VALID
						+ " and nDiscountCredenceID=" + lDiscountCredenceID;
				strSQL = strSQL + " and to_char(dtEnd,'yyyy-mm-dd') < '"
						+ DataFormat.getDateString(tsFillDate) + "'";

				Log.print(strSQL);
				ps = con.prepareStatement(strSQL);
				rs = ps.executeQuery();

				if (rs != null && rs.next()) {
					lRecordCount = rs.getLong(1);
				}
				if (lRecordCount > 0) {
					// 抛出异常 贴现日应该小于所有票据到期日
					throw new IException("Loan_E006");
					// throw new IException("Loan_E006");
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				Log.print("======贴现日校验结束======");// */

				Log.print("======开始查询所有票据信息======");

				strSelect = " select * ";
				// strSQL = " from Loan_DiscountFormBill where nStatusID=" +
				// Constant.RecordStatus.VALID + " and nLoanID=" +
				// lDiscountApplyID;
				strSQL = " from Loan_DiscountContractBill where nStatusID="
						+ Constant.RecordStatus.VALID
						+ " and nDiscountCredenceID=" + lDiscountCredenceID;

				Log.print(strSelect + strSQL);
				ps = con.prepareStatement(strSelect + strSQL);
				rs = ps.executeQuery();

				while (rs != null && rs.next()) {

					dAmount = rs.getDouble("mAmount"); // 汇票金额

					strEnd = rs.getTimestamp("dtEnd").toString();
					tsEnd = new java.sql.Timestamp(new Integer(strEnd
							.substring(0, 4)).intValue() - 1900, new Integer(
							strEnd.substring(5, 7)).intValue() - 1,
							new Integer(strEnd.substring(8, 10)).intValue(), 0,
							0, 0, 0);

					nDays = (int) java.lang.Math
							.ceil((tsEnd.getTime() - tsFillDate.getTime()) / 86400000)
							+ rs.getInt("nAddDays"); // 加上节假日增加计息天数

					if (nDays >= 0) {
						if (rs.getLong("nIsLocal") == Constant.YesOrNo.NO)
							nDays = nDays + 3;
						dAccrual = dAmount * (dDiscountRate / 360) * 0.01
								* nDays;
						dAccrual = DataFormat.formatDouble(dAccrual);
						// dAccrual = dAmount * dRate * 0.01 * nDays;
						dRealAmount = dAmount - dAccrual;
					}
					Log.print("========================");
					Log.print("汇票金额=" + dAmount);
					Log.print("汇票利息=" + dAccrual);
					Log.print("实付金额=" + dRealAmount);
					Log.print("========================");
					// dTotalAccrual = DataFormat.formatDouble(dTotalAccrual, 2)
					// + DataFormat.formatDouble(dAccrual, 2);
					// dTotalRealAmount =
					// DataFormat.formatDouble(dTotalRealAmount, 2) +
					// DataFormat.formatDouble(dRealAmount, 2);
					dTotalAccrual = dTotalAccrual + dAccrual;
					dTotalRealAmount = dTotalRealAmount + dRealAmount;

					dAmount = 0; // 票据金额
					dAccrual = 0; // 贴现利息
					dRealAmount = 0; // 实付贴现金额

				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				Log.print("======结束查询所有票据信息======");

				Log.print("======开始查询票据总数和总金额======");

				// 计算记录总数
				strSelect = " select count(*),sum(nvl(mAmount,0)) ";
				// strSQL = " from Loan_DiscountFormBill where nStatusID=" +
				// Constant.RecordStatus.VALID + " and nLoanID=" +
				// lDiscountApplyID;

				Log.print(strSelect + strSQL);
				ps = con.prepareStatement(strSelect + strSQL);
				rs = ps.executeQuery();

				if (rs != null && rs.next()) {
					lRecordCount = rs.getLong(1);
					dTotalAmount = rs.getDouble(2);
				}
				Log.print("==============");
				Log.print("票据总张数=" + lRecordCount);
				Log.print("票据总金额=" + dTotalAmount);
				Log.print("票据总利息=" + dTotalAccrual);
				Log.print("总实付金额=" + dTotalRealAmount);
				Log.print("==============");
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				Log.print("======结束查询票据总数和总金额======");

				lPageCount = lRecordCount / lPageLineCount;

				if ((lRecordCount % lPageLineCount) != 0) {
					lPageCount++;
				}
				// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
				switch ((int) lOrderParam) {
				case 1:
					strSQL += " order by nSerialNo";
					break;
				case 2:
					strSQL += " order by sUserName";
					break;
				case 3:
					strSQL += " order by sBank";
					break;
				case 4:
					strSQL += " order by nIsLocal";
					break;
				case 5:
					strSQL += " order by dtCreate";
					break;
				case 6:
					strSQL += " order by dtEnd";
					break;
				case 7:
					strSQL += " order by sCode";
					break;
				case 8:
					strSQL += " order by mAmount";
					break;
				case 9:
					strSQL += " order by nAddDays";
					break;
				case 10:
					strSQL += " order by nAcceptPOTypeID";
					break;
				case 11:
					strSQL += " order by sFormerOwner";
					break;
				default:
					strSQL += " order by nSerialNo ";
				}

				if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
					strSQL += " desc";
				}

				// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				// 返回需求的结果集
				lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
				lRowNumEnd = lRowNumStart + lPageLineCount - 1;

				strSQL = "select * " + strSQL;
				strSQL = " select a.*, rownum r from " + " ( " + strSQL
						+ " ) a ";
				strSQL = " select * from ( " + strSQL
						+ " ) b  where b.r between " + lRowNumStart + " and "
						+ lRowNumEnd;

				Log.print("翻页查询开始");
				Log.print(strSQL);
				ps = con.prepareStatement(strSQL);
				rs = ps.executeQuery();

				while (rs != null && rs.next()) {
					DiscountBillInfo dbill = new DiscountBillInfo();

					// dbill.setDiscountApplyID(lDiscountApplyID); //贴现标示
					dbill.setID(rs.getLong("ID")); // 票据标示
					dbill.setSerialNo(rs.getLong("nSerialNo")); // 序列号
					dbill.setUserName(rs.getString("sUserName")); // 原始出票人
					dbill.setBank(rs.getString("sBank")); // 承兑银行
					dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
					dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
					dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
					dbill.setCode(rs.getString("sCode")); // 汇票号码
					dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
					dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
					dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
					dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
					// //////////////////////////////////////////
					// 计算票据利息
					dAmount = rs.getDouble("mAmount"); // 汇票金额
					strEnd = rs.getTimestamp("dtEnd").toString();
					tsEnd = new java.sql.Timestamp(new Integer(strEnd
							.substring(0, 4)).intValue() - 1900, new Integer(
							strEnd.substring(5, 7)).intValue() - 1,
							new Integer(strEnd.substring(8, 10)).intValue(), 0,
							0, 0, 0);

					nDays = (int) java.lang.Math
							.ceil((tsEnd.getTime() - tsFillDate.getTime()) / 86400000)
							+ rs.getInt("nAddDays"); // 加上节假日增加计息天数
					if (nDays >= 0) {
						if (rs.getLong("nIsLocal") == Constant.YesOrNo.NO)
							nDays = nDays + 3;
						dAccrual = dAmount * (dDiscountRate / 360) * 0.01
								* nDays;
						dAccrual = DataFormat.formatDouble(dAccrual);
						dRealAmount = dAmount - dAccrual;
					}

					dbill.setDiscountDate(tsFillDate);
					dbill.setDiscountRate(dDiscountRate);

					dbill.setDays(nDays);
					dbill.setAccrual(dAccrual);
					dbill.setRealAmount(dRealAmount);
					// //////////////////////////////////////////
					dbill.setCount(lRecordCount);
					// dbill.setTotalAmount(DataFormat.formatDouble(dTotalAmount,
					// 2));
					// dbill.setTotalAccrual(DataFormat.formatDouble(dTotalAccrual,
					// 2));
					dbill.setTotalAmount(dTotalAmount);
					dbill.setTotalAccrual(dTotalAccrual);
					// dbill.dTotalRealAmount =
					// DataFormat.formatDouble(dTotalRealAmount,2);
					// dbill.setTotalRealAmount(DataFormat.formatDouble(dTotalAmount,
					// 2) - DataFormat.formatDouble(dTotalAccrual, 2));
					dbill.setTotalRealAmount(dTotalAmount - dTotalAccrual);
					v.add(dbill);

					// 更新票据核定金额

					strSQLUpdate = "update Loan_DiscountContractBill set mCheckAmount = ? where ID = ? ";
					ps1 = con.prepareStatement(strSQLUpdate);
					ps1.setDouble(1, dRealAmount);
					ps1.setLong(2, dbill.getID());
					ps1.executeUpdate();
					ps1.close();
					ps1 = null;
				}
				Log.print("翻页查询结束");

				// 更新 凭证 核定金额 和 利息
				Log.print("====更新 凭证 核定金额 和利息====");
				strSQLUpdate = "update Loan_DiscountCredence "
						+ " set mAmount = ?, mInterest=?, purchaserInterest=? "
						+
						// " , dtDiscountDate = ? " +
						" where ID = ? ";
				ps1 = con.prepareStatement(strSQLUpdate);
				int nIndex = 1;
				ps1.setDouble(nIndex++, DataFormat.formatDouble(dTotalAmount));
				ps1.setDouble(nIndex++, DataFormat.formatDouble(dTotalAccrual)
						- DataFormat.formatDouble(dTotalAccrual
								* purchaserInterestRate * 0.01));
				ps1.setDouble(nIndex++, DataFormat.formatDouble(dTotalAccrual
						* purchaserInterestRate * 0.01));
				// ps1.setTimestamp(nIndex++,tsFillDate);
				ps1.setLong(nIndex++, lDiscountCredenceID);
				ps1.executeUpdate();
				if (ps1 != null) {
					ps1.close();
					ps1 = null;
				}
				Log.print("====更新 凭证 核定金额 和利息 结束====");

			}
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (ps1 != null) {
				ps1.close();
				ps1 = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		Log.print("======退出贴现凭证计息(calCredenceBillInterestByID)方法======");

		return (v.size() > 0 ? v : null);

	}

	/**
	 * 查找一条贴现信息，操作数据库表DiscountContractBill，
	 * 
	 * @param lDiscountID
	 *            贴现标识
	 */
	private DiscountBillInfo findDiscountContractBillByID(
			long lDiscountContractBillID) throws RemoteException, IException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		int nBillCount = 0;
		DiscountBillInfo dbi = new DiscountBillInfo();

		try {
			con = Database.getConnection();
			strSQL = " select * from Loan_DiscountContractBill where ID=? ";

			Log.print(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lDiscountContractBillID);
			rs = ps.executeQuery();
			if (rs.next()) {

				dbi.setID(lDiscountContractBillID); // 票据标示
				dbi.setDiscountContractID(rs.getLong("nContractID")); // 贴现标识
				dbi.setSerialNo(rs.getLong("nSerialNo")); // 序列号
				dbi.setUserName(rs.getString("sUserName")); // 原始出票人
				dbi.setBank(rs.getString("sBank")); // 承兑银行
				dbi.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地
				dbi.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbi.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbi.setCode(rs.getString("sCode")); // 汇票号码
				dbi.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbi.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbi.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbi.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		}

		finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

		return dbi;

	}

	public Collection saveDiscountBillInfo(long recordId, // 记录编号
			long lPageLineCount, long lPageNo, Timestamp nCheckDate, // 审查日期
			String nCheckId, // '查复编号';
			long nCheckStatus // '审查状态';
	) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		String strSQL = null;
		Vector v = new Vector();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
        try {
			logInfo.setBusinessType("贴现-贴现凭证");
			logInfo.setTransCode(NameRef.getContractNoByNoticeID(recordId)+"-"+NameRef.getCredenceCodeByDiscountID(recordId));  //操作日志-业务主键-交易号
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try {
			Log.print("============= saveCheck() begin ============");
			conn = Database.getConnection();
			strSQL = " update  LOAN_DISCOUNTCONTRACTBILL  set SCHECKCODE=?, DTCHECKDATE=?,NCHECKSTATUS=? where ID=? ";
			Log.print(strSQL);

			ps = conn.prepareStatement(strSQL);

			ps.setString(1, nCheckId);
			ps.setTimestamp(2, nCheckDate);
			ps.setLong(3, nCheckStatus);
			ps.setLong(4, recordId);

			ps.executeUpdate();
			ps.close();
			ps = null;
			conn.close();
			conn = null;
			Log.print("============= saveCheck() end ============");
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		} catch (Exception ex) {
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(ex.getMessage()); //失败原因
            // add by jbpan 20120606 end
			log4j.error(ex.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, ex.getMessage(), ex);
		} finally {
			//add by jbpan 20120606 start
			  
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			 //add by jbpan 20120606 end
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

		return (v.size() > 0 ? v : null);
	}

	// /贴现票据查询
	public Collection findDiscountBillInfo(long lPageLineCount, long lPageNo,
			long lOrderParam, long lDesc, long nContractId, // 票据id
			long nContractIdFrom, // 合同From
			long nContractIdTo, // 合同to
			String sCode, // 汇票号码
			double mAmountFrom, // 汇票金额from
			double mAmountTo, // 汇票金额to
			Timestamp dtCheckDateFrom, // 审查日期From
			Timestamp dtCheckDateTo, // 审查日期To
			long nCheckStatus // '审查状态';
	) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		StringBuffer sbNum = new StringBuffer();
		StringBuffer sbDetail = new StringBuffer();

		Vector v = new Vector();
		long lRecordCount = -1;

		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		double dTotalAmount = 0; // 总票据金额
		double dTotalCheckAmount = 0; // 总票据金额
		try {

			con = Database.getConnection();

			sbNum.append(" select count(*), sum(mAmount),sum(MCHECKAMOUNT) ");
			sbNum.append(" from Loan_DiscountContractBill  where 1=1 ");

			if (nContractIdFrom != -1) {
				sbNum.append(" and  NCONTRACTID>=" + nContractIdFrom);
			}
			if (nContractIdTo != -1) {
				sbNum.append(" and NCONTRACTID<=" + nContractIdTo);
			}
			if (sCode != null && sCode.length() > 0) {
				sbNum.append(" and SCODE =" + sCode);
			}
			if (mAmountFrom != 0) {
				sbNum.append(" and  mAmount>=" + mAmountFrom);
			}
			if (mAmountTo != 0) {
				sbNum.append(" and  mAmount<=" + mAmountTo);
			}
			if (dtCheckDateFrom != null) {
				sbNum.append(" and  DtcheckDate>=? ");// +dtCheckDateFrom);
			}
			if (dtCheckDateTo != null) {
				sbNum.append(" and  DtcheckDate<=?");// +dtCheckDateTo);
			}
			if (nCheckStatus != -1) {
				sbNum.append(" and  NCHECKSTATUS =" + nCheckStatus);
			}
			// sbNum.append(" and SCODE=7749 ");
			// sbNum.append(" and mAmount>=500000 and mAmount<=2000000 ");
			// sbNum.append(" and ScheckID='234234' ");
			// sbNum.append("and DtcheckDate>=? and DtcheckDate<=?");

			Log.print(sbNum.toString());

			ps = con.prepareStatement(sbNum.toString());
			int index = 1;

			if (dtCheckDateFrom != null) {
				ps.setTimestamp(index, dtCheckDateFrom);
				index++;
			}
			if (dtCheckDateTo != null) {
				ps.setTimestamp(index, dtCheckDateTo);
				index++;
			}
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
				dTotalAmount = rs.getDouble(2);
				dTotalCheckAmount = rs.getDouble(3);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			sbDetail.append("SELECT * FROM (");
			sbDetail.append(" SELECT A.*,rownum r from (select ");
			sbDetail
					.append(" A.ID  ID, A.NCONTRACTID   NCONTRACTID, A.NSERIALNO  NSERIALNO,A.SUSERNAME  SUSERNAME, A.SBANK  SBANK, ");
			sbDetail
					.append("A.NISLOCAL   NISLOCAL, A.DTCREATE  DTCREATE,  A.DTEND   DTEND, A.SCODE     SCODE,  ");
			sbDetail
					.append("A.MAMOUNT    MAMOUNT, A.NSTATUSID  NSTATUSID, A.NADDDAYS   NADDDAYS,A.NDISCOUNTCREDENCEID   NDISCOUNTCREDENCEID,");
			sbDetail
					.append("A.OB_NDISCOUNTCREDENCEID   OB_NDISCOUNTCREDENCEID, A.NACCEPTPOTYPEID  NACCEPTPOTYPEID,  A.SFORMEROWNER   SFORMEROWNER,");
			sbDetail
					.append("A.MCHECKAMOUNT    MCHECKAMOUNT, A.NBILLSOURCETYPEID   NBILLSOURCETYPEID,  A.NISCANSELL   NISCANSELL, ");
			sbDetail
					.append("A.REPURCHASEDATE   REPURCHASEDATE,  A.REPURCHASETERM      REPURCHASETERM,");
			sbDetail
					.append("A.NISABATEMENT    NISABATEMENT, A.NSELLSTATUSID    NSELLSTATUSID,   A.NCHECKSTATUS   NCHECKSTATUS,");
			sbDetail
					.append("A.SCHECKCODE    SCHECKCODE,   A.DTCHECKDATE     DTCHECKDATE, A.NBILLSTATUSID  NBILLSTATUSID, A.DTCANCELDATE DTCANCELDATE, B.sContractCode  sContractCode    from    LOAN_DISCOUNTCONTRACTBILL   A,  loan_ContractForm  B   WHERE   A.NCONTRACTID=B.ID  ");

			if (nContractIdFrom != -1) {
				sbDetail.append(" and  NCONTRACTID>=" + nContractIdFrom);
			}
			if (nContractIdTo != -1) {
				sbDetail.append(" and NCONTRACTID<=" + nContractIdTo);
			}
			if (sCode != null && sCode.length() > 0) {
				sbDetail.append(" and SCODE =" + sCode);
			}
			if (mAmountFrom != 0) {
				sbDetail.append(" and  mAmount>=" + mAmountFrom);
			}
			if (mAmountTo != 0) {
				sbDetail.append(" and  mAmount<=" + mAmountTo);
			}
			if (dtCheckDateFrom != null) {
				sbDetail.append(" and  DtcheckDate>=? ");// +dtCheckDateFrom);
			}
			if (dtCheckDateTo != null) {
				sbDetail.append(" and  DtcheckDate<=? ");// +dtCheckDateTo);
			}
			if (nCheckStatus != -1) {
				sbDetail.append(" and  NCHECKSTATUS =" + nCheckStatus);
			}

			switch ((int) lOrderParam) {
			case 1:
				sbDetail.append(" order by nSerialNo ");
				break;
			case 2:
				sbDetail.append(" order by sUserName ");
				break;
			case 3:
				sbDetail.append(" order by sBank ");
				break;
			case 4:
				sbDetail.append(" order by dtCreate ");
				break;
			case 5:
				sbDetail.append(" order by  dtEnd ");
				break;
			case 6:
				sbDetail.append(" order by  sCode ");
				break;
			case 7:
				sbDetail.append(" order by  mAmount ");
				break;
			case 8:
				sbDetail.append(" order by  nAcceptPOTypeID ");
				break;
			default:
				sbDetail.append(" order by   ID ");
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				sbDetail.append(" desc");
			}

			sbDetail.append(" ) A )  WHERE   r between " + lRowNumStart
					+ " and " + lRowNumEnd + "");
			Log.print(sbDetail.toString());
			ps = con.prepareStatement(sbDetail.toString());

			index = 1;

			if (dtCheckDateFrom != null) {
				ps.setTimestamp(index, dtCheckDateFrom);
				index++;
			}
			if (dtCheckDateTo != null) {
				ps.setTimestamp(index, dtCheckDateTo);
				index++;
			}
			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountBillInfo dbill = new DiscountBillInfo();

				dbill.setDiscountContractID(rs.getLong("NCONTRACTID")); // 贴现标示
				dbill.setID(rs.getLong("ID")); // 票据标示
				dbill.setSerialNo(rs.getLong("r")); // 序列号
				dbill.setUserName(rs.getString("sUserName")); // 原始出票人
				dbill.setBank(rs.getString("sBank")); // 承兑银行
				dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
				dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbill.setCode(rs.getString("sCode")); // 汇票号码
				dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
				dbill.setRealAmount(rs.getDouble("MCHECKAMOUNT")); // 汇票实付金额
				// dbill.setAccrual(rs.getDouble(""));//贴现利息
				dbill.setNcheckStatus(rs.getLong("NcheckStatus"));// 审查状态
				dbill.setScheckID(rs.getString("ScheckCODE"));// 复查编号
				dbill.setDtcheckDate(rs.getTimestamp("DtcheckDate"));// 审查日期

				dbill.setDiscountContractCode(rs.getString("sContractCode"));

				dbill.setNbillStatusId(rs.getLong("NBILLSTATUSID")); // 票据状态-haier
				dbill.setDcancelDate(rs.getTimestamp("DTCANCELDATE"));// 销账日期-haier

				dbill.setCount(lRecordCount);
				dbill.setTotalAmount(dTotalAmount);
				dbill.setTotalRealAmount(dTotalCheckAmount);
				v.add(dbill);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception ex) {
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}
		return (v.size() > 0 ? v : null);
	}

	// /贴现票据查询
	public Collection findDiscountBillStatusInfo(long lPageLineCount,
			long lPageNo, long lOrderParam, long lDesc, long nContractId, // 票据id
			long nContractIdFrom, // 合同From
			long nContractIdTo, // 合同to
			String sCode, // 汇票号码
			double mAmountFrom, // 汇票金额from
			double mAmountTo, // 汇票金额to
			Timestamp dtCheckDateFrom, // 审查日期From
			Timestamp dtCheckDateTo, // 审查日期To
			long nCheckStatus, // '审查状态';

			long nBillStatusId, // 票据状态-
			Timestamp dCancelDateFrom, // 销账日期From-
			Timestamp dCancelDateTo, // 销账日期To-

			String checkcodestr, // 复查编号
			Timestamp dtendFrom, // 票据到期日期 from
			Timestamp dtendTo // 票据到期日期 to

	) throws RemoteException, IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		StringBuffer sbNum = new StringBuffer();
		StringBuffer sbDetail = new StringBuffer();

		Vector v = new Vector();
		long lRecordCount = -1;

		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;
		double dTotalAmount = 0; // 总票据金额
		double dTotalCheckAmount = 0; // 总票据金额
		try {

			con = Database.getConnection();

			sbNum.append(" select count(*), sum(mAmount),sum(MCHECKAMOUNT) ");
			sbNum.append(" from Loan_DiscountContractBill  where 1=1 ");

			if (nContractIdFrom != -1) {
				sbNum.append(" and  NCONTRACTID>=" + nContractIdFrom);
			}
			if (nContractIdTo != -1) {
				sbNum.append(" and NCONTRACTID<=" + nContractIdTo);
			}
			if (sCode != null && sCode.length() > 0) {
				sbNum.append(" and SCODE =" + sCode);
			}
			if (mAmountFrom != 0) {
				sbNum.append(" and  mAmount>=" + mAmountFrom);
			}
			if (mAmountTo != 0) {
				sbNum.append(" and  mAmount<=" + mAmountTo);
			}
			if (dtCheckDateFrom != null) {
				sbNum.append(" and  DtcheckDate>=? ");// +dtCheckDateFrom);
			}
			if (dtCheckDateTo != null) {
				sbNum.append(" and  DtcheckDate<=?");// +dtCheckDateTo);
			}
			if (nCheckStatus != -1) {
				sbNum.append(" and  NCHECKSTATUS =" + nCheckStatus);
			}
			if (nBillStatusId != -1) {
				sbNum.append(" and  NBILLSTATUSID =" + nBillStatusId);
			}
			if (dCancelDateFrom != null) {
				sbNum.append(" and  DTCANCELDATE>=? ");// +dtCheckDateFrom);
			}
			if (dCancelDateTo != null) {
				sbNum.append(" and  DTCANCELDATE<=?");// +dtCheckDateTo);
			}
			if (checkcodestr != null && checkcodestr.length() > 0) {
				sbNum.append(" and SCHECKCODE ='" + checkcodestr + "'");
			}
			if (dtendFrom != null) {
				sbNum.append(" and  DTEND>=? ");// +dtCheckDateFrom);
			}
			if (dtendTo != null) {
				sbNum.append(" and  DTEND<=? ");// +dtCheckDateFrom);
			}

			Log.print(sbNum.toString());

			ps = con.prepareStatement(sbNum.toString());
			int index = 1;

			if (dtCheckDateFrom != null) {
				ps.setTimestamp(index, dtCheckDateFrom);
				index++;
			}
			if (dtCheckDateTo != null) {
				ps.setTimestamp(index, dtCheckDateTo);
				index++;
			}
			if (dCancelDateFrom != null) {
				System.out.println("dCancelDateFrom==" + dCancelDateFrom);
				ps.setTimestamp(index, dCancelDateFrom);
				index++;
			}
			if (dCancelDateTo != null) {
				System.out.println("dCancelDateTo==" + dCancelDateTo);
				ps.setTimestamp(index, dCancelDateTo);
				index++;
			}
			if (dtendFrom != null) {
				System.out.println("dtendFrom==" + dtendTo);
				ps.setTimestamp(index, dtendFrom);
				index++;
			}
			if (dtendTo != null) {
				System.out.println("dtendTo==" + dtendTo);
				ps.setTimestamp(index, dtendTo);
				index++;
			}
			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lRecordCount = rs.getLong(1);
				dTotalAmount = rs.getDouble(2);
				dTotalCheckAmount = rs.getDouble(3);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;

			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0) {
				lPageCount++;
			}

			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;

			sbDetail.append("SELECT * FROM (");
			sbDetail.append(" SELECT A.*,rownum r from (select ");
			sbDetail
					.append(" A.ID  ID, A.NCONTRACTID   NCONTRACTID, A.NSERIALNO  NSERIALNO,A.SUSERNAME  SUSERNAME, A.SBANK  SBANK, ");
			sbDetail
					.append("A.NISLOCAL   NISLOCAL, A.DTCREATE  DTCREATE,  A.DTEND   DTEND, A.SCODE     SCODE,  ");
			sbDetail
					.append("A.MAMOUNT    MAMOUNT, A.NSTATUSID  NSTATUSID, A.NADDDAYS   NADDDAYS,A.NDISCOUNTCREDENCEID   NDISCOUNTCREDENCEID,");
			sbDetail
					.append("A.OB_NDISCOUNTCREDENCEID   OB_NDISCOUNTCREDENCEID, A.NACCEPTPOTYPEID  NACCEPTPOTYPEID,  A.SFORMEROWNER   SFORMEROWNER,");
			sbDetail
					.append("A.MCHECKAMOUNT    MCHECKAMOUNT, A.NBILLSOURCETYPEID   NBILLSOURCETYPEID,  A.NISCANSELL   NISCANSELL, ");
			sbDetail
					.append("A.REPURCHASEDATE   REPURCHASEDATE,  A.REPURCHASETERM      REPURCHASETERM,");
			sbDetail
					.append("A.NISABATEMENT    NISABATEMENT, A.NSELLSTATUSID    NSELLSTATUSID,   A.NCHECKSTATUS   NCHECKSTATUS,");
			sbDetail
					.append("A.SCHECKCODE    SCHECKCODE,   A.DTCHECKDATE     DTCHECKDATE, A.NBILLSTATUSID  NBILLSTATUSID, A.DTCANCELDATE DTCANCELDATE, B.sContractCode  sContractCode    from    LOAN_DISCOUNTCONTRACTBILL   A,  loan_ContractForm  B   WHERE   A.NCONTRACTID=B.ID  ");

			if (nContractIdFrom != -1) {
				sbDetail.append(" and  NCONTRACTID>=" + nContractIdFrom);
			}
			if (nContractIdTo != -1) {
				sbDetail.append(" and NCONTRACTID<=" + nContractIdTo);
			}
			if (sCode != null && sCode.length() > 0) {
				sbDetail.append(" and SCODE =" + sCode);
			}
			if (mAmountFrom != 0) {
				sbDetail.append(" and  mAmount>=" + mAmountFrom);
			}
			if (mAmountTo != 0) {
				sbDetail.append(" and  mAmount<=" + mAmountTo);
			}
			if (dtCheckDateFrom != null) {
				sbDetail.append(" and  DtcheckDate>=? ");// +dtCheckDateFrom);
			}
			if (dtCheckDateTo != null) {
				sbDetail.append(" and  DtcheckDate<=? ");// +dtCheckDateTo);
			}
			if (nCheckStatus != -1) {
				sbDetail.append(" and  NCHECKSTATUS =" + nCheckStatus);
			}
			if (nBillStatusId != -1) {
				sbDetail.append(" and  NBILLSTATUSID =" + nBillStatusId);
			}

			if (dCancelDateFrom != null) {
				sbDetail.append(" and  DTCANCELDATE>=? ");// +dtCheckDateFrom);
			}
			if (dCancelDateTo != null) {
				sbDetail.append(" and  DTCANCELDATE<=? ");// +dtCheckDateTo);
			}
			if (checkcodestr != null && checkcodestr.length() > 0) {
				sbDetail.append(" and SCHECKCODE ='" + checkcodestr + "'");
			}
			if (dtendFrom != null) {
				sbDetail.append(" and  DTEND>=? ");// +dtCheckDateFrom);
			}
			if (dtendTo != null) {
				sbDetail.append(" and  DTEND<=? ");// +dtCheckDateFrom);
			}

			switch ((int) lOrderParam) {
			case 1:
				sbDetail.append(" order by nSerialNo ");
				break;
			case 2:
				sbDetail.append(" order by sUserName ");
				break;
			case 3:
				sbDetail.append(" order by sBank ");
				break;
			case 4:
				sbDetail.append(" order by dtCreate ");
				break;
			case 5:
				sbDetail.append(" order by  dtEnd ");
				break;
			case 6:
				sbDetail.append(" order by  sCode ");
				break;
			case 7:
				sbDetail.append(" order by  mAmount ");
				break;
			case 8:
				sbDetail.append(" order by  nAcceptPOTypeID ");
				break;
			default:
				sbDetail.append(" order by   ID ");
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				sbDetail.append(" desc");
			}

			sbDetail.append(" ) A )  WHERE   r between " + lRowNumStart
					+ " and " + lRowNumEnd + "");
			Log.print(sbDetail.toString());
			ps = con.prepareStatement(sbDetail.toString());

			index = 1;

			if (dtCheckDateFrom != null) {
				ps.setTimestamp(index, dtCheckDateFrom);
				index++;
			}
			if (dtCheckDateTo != null) {
				ps.setTimestamp(index, dtCheckDateTo);
				index++;
			}
			if (dCancelDateFrom != null) {
				System.out.println("dCancelDateFrom2==" + dCancelDateFrom);
				ps.setTimestamp(index, dCancelDateFrom);
				index++;
			}
			if (dCancelDateTo != null) {
				System.out.println("dCancelDateTo2==" + dCancelDateTo);
				ps.setTimestamp(index, dCancelDateTo);
				index++;
			}
			if (dtendFrom != null) {
				System.out.println("dtendFrom==" + dtendTo);
				ps.setTimestamp(index, dtendFrom);
				index++;
			}
			if (dtendTo != null) {
				System.out.println("dtendTo==" + dtendTo);
				ps.setTimestamp(index, dtendTo);
				index++;
			}

			rs = ps.executeQuery();

			while (rs != null && rs.next()) {
				DiscountBillInfo dbill = new DiscountBillInfo();

				dbill.setDiscountContractID(rs.getLong("NCONTRACTID")); // 贴现标示
				dbill.setID(rs.getLong("ID")); // 票据标示
				dbill.setSerialNo(rs.getLong("r")); // 序列号
				dbill.setUserName(rs.getString("sUserName")); // 原始出票人
				dbill.setBank(rs.getString("sBank")); // 承兑银行
				dbill.setIsLocal(rs.getLong("nIsLocal")); // 承兑银行所在地（是否在本地）
				dbill.setCreate(rs.getTimestamp("dtCreate")); // 出票日
				dbill.setEnd(rs.getTimestamp("dtEnd")); // 到期日
				dbill.setCode(rs.getString("sCode")); // 汇票号码
				dbill.setAmount(rs.getDouble("mAmount")); // 汇票金额
				dbill.setAddDays(rs.getLong("nAddDays")); // 节假日增加计息天数
				dbill.setAcceptPOTypeID(rs.getLong("nAcceptPOTypeID")); // 汇票类型
				dbill.setFormerOwner(rs.getString("sFormerOwner")); // 贴现单位直接前手
				dbill.setRealAmount(rs.getDouble("MCHECKAMOUNT")); // 汇票实付金额
				// dbill.setAccrual(rs.getDouble(""));//贴现利息
				dbill.setNcheckStatus(rs.getLong("NcheckStatus"));// 审查状态
				dbill.setScheckID(rs.getString("ScheckCODE"));// 复查编号
				dbill.setDtcheckDate(rs.getTimestamp("DtcheckDate"));// 审查日期

				dbill.setDiscountContractCode(rs.getString("sContractCode"));

				dbill.setNbillStatusId(rs.getLong("NBILLSTATUSID")); // 票据状态-haier
				dbill.setDcancelDate(rs.getTimestamp("DTCANCELDATE"));// 销账日期-haier

				dbill.setCount(lRecordCount);
				dbill.setTotalAmount(dTotalAmount);
				dbill.setTotalRealAmount(dTotalCheckAmount);
				v.add(dbill);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		} catch (Exception ex) {
			System.out.println(ex.toString());
			log4j.error(ex.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}
		return (v.size() > 0 ? v : null);
	}

	/**
	 * 更新贷款申请是否走最小审核级别字段
	 * 
	 * @param lLoanID
	 * @param isLowLevel
	 * @return
	 * @throws RemoteException
	 * @throws IException
	 */
	public long getLoanSubTypeID(long loanID) throws RemoteException,
			IException {
		PreparedStatement ps = null;
		Connection conn = null;
		ResultSet rs = null;
		String strSQL = null;
		long lSubTypeID = -1;

		try {
			conn = Database.getConnection();
			strSQL = " select nSubTypeID from loan_LoanForm  where ID =  "
					+ loanID;

			Log.print(" sql : " + strSQL);

			ps = conn.prepareStatement(strSQL);

			rs = ps.executeQuery();

			if (rs != null && rs.next()) {
				lSubTypeID = rs.getLong(1);
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;
			conn.close();
			conn = null;

			if (lSubTypeID < 0) {
				Log.print("  loan lSubTypeID error : " + lSubTypeID);
				return -1;
			} else {
				return lSubTypeID;
			}
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}

	}
	
	/**
	 * Modify by leiyang date 2007/07/11
	 * 审批流：取消审批方法（贴现.取消贴现凭证）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(DiscountCredenceInfo dInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = dInfo.getInutParameterInfo();
		DiscountDao discountDao = new DiscountDao();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
        logInfo.setBusinessType("贴现-贴现凭证");
		
        // add by jbpan 20120606 end
		try
		{
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(dInfo.getID()));  //操作日志-业务主键-交易号  
			//取消审批
			if (dInfo.isPayForm()){
				lReturn = discountDao.updatePayFormStatusAndCheckStatus(dInfo.getID(), LOANConstant.DiscountCredenceStatus.SAVE);
			}else{
				lReturn = discountDao.updateStatusAndCheckStatus(dInfo.getID(), LOANConstant.DiscountCredenceStatus.SAVE);
			}			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}				
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
        finally
        {
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120606 end
		return lReturn;
	}
	
	/**
	 * Modify by leiyang date 2007/07/26
	 * 审批流：校验合同状态
	 * @param loanInfo
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long checkContract(DiscountLoanInfo dlInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		LoanApplyDao dao = new LoanApplyDao();
		try
		{
			//校验合同状态
			lReturn = dao.checkContractState(dlInfo.getID());					
		}
		catch (Exception e)
		{
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return lReturn;
	}
	
	
	/**
	 * Modify by leiyang date 2007/07/26
	 * 审批流：取消审批方法（贴现.贷款合同）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(DiscountLoanInfo dlInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = dlInfo.getInutParameterInfo();
		LoanApplyDao dao = new LoanApplyDao();
		// add by jbpan 20120606 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
        try {
			logInfo.setBusinessType("贴现-" + Constant.CodingruleAction.getName(Constant.CodingruleAction.LOAN_APPLY) );
			logInfo.setTransCode(NameRef.getApplyCodeByLoanID(dlInfo.getID()));  //操作日志-业务主键-交易号  
        } catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120606 end
		try
		{
			//取消审批
			lReturn = dao.updateStatusAndCheckStatus(dlInfo.getID(),dlInfo.getInputUserID(),LOANConstant.LoanStatus.SAVE);
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}				
			}
			//add by jbpan 20120606 加上操作日志-操作结果-成功        
            logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
//          add by jbapn 20120606 start
            // 加上操作日志       
            logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
            logInfo.setFailReason(e.getMessage()); //失败原因
            // add by jbpan 20120606 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120606 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120606 end
		return lReturn;
	}

}
