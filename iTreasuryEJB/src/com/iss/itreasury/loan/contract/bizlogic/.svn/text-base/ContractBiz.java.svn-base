package com.iss.itreasury.loan.contract.bizlogic;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.contract.dataentity.ContractQueryInfo;
import com.iss.itreasury.loan.contract.dataentity.RateInfo;
import com.iss.itreasury.loan.contractcontent.dao.ContractContentDao;
import com.iss.itreasury.loan.loanapply.dao.LoanApplyDao;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.util.Config;
import com.iss.itreasury.util.ConfigConstant;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;


/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public class ContractBiz implements SessionBean
{
	private Log4j log4j = new Log4j(Constant.ModuleType.CRAFTBROTHER, this); //
	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */
	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context)
	{
		this.context = context;
	}
	private SessionContext context;
	/**
	 * No argument constructor required by container.
	 */
	public ContractBiz()
	{
	}
	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate()
	{
	}
	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove()
	{
	}
	/**
	 * 为转贴现合同激活添加单独的查询方法，关联成员单位
	 * @param lLoanType
	 * @param lCurrencyID
	 * @param lOfficeID
	 * @param lUserID
	 * @param lContractIDFrom
	 * @param lContractIDTo
	 * @param lClientID
	 * @param dAmountFrom
	 * @param dAmountTo
	 * @param lPageLineCount
	 * @param lPageNo
	 * @param lOrderParam
	 * @param lDesc
	 * @return
	 * @throws RemoteException
	 */
	public Collection findZTXContractByMultiOption(
			long lLoanType,
			long lCurrencyID,
			long lOfficeID,
			long lUserID,
			long lContractIDFrom,
			long lContractIDTo,
			long lClientID,
			double dAmountFrom,
			double dAmountTo,
			long lPageLineCount,
			long lPageNo,
			long lOrderParam,
			long lDesc)
			throws RemoteException
		{
			Vector vReturn = new Vector(); //当前页结果集
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			int iIndex = 0;
			String strSQL = ""; //主SQL语句
			String strSQL_Count = ""; //SQL计算语句
			String strSQL_Select = ""; //SQL查找语句
			String strSQL_Table = ""; //SQL的表以及其之间联系语句
			String strSQL_Option = ""; //SQL查找条件
			String strSQL_Order = ""; //SQL排序条件
			long[] lLoanTypeTmp = null; //贷款类型值字符串
			String strLoanTypeTmp = "";
			long lRecordCount = -1; //总记录数
			double dLoanSum = 0.0; //满足条件的合同贷款总金额
			long lPageCount = -1; //总页数
			long lRowNumStart = -1; //开始记录
			long lRowNumEnd = -1; //结束记录
			try
			{
				con = Database.getConnection();
				//取所有贷款类型的值
				lLoanTypeTmp = LOANConstant.LoanType.getAllCode(lOfficeID,lCurrencyID);
				for (int i = 0; i < lLoanTypeTmp.length; i++)
				{
					if (i == 0)
						strLoanTypeTmp += "" + lLoanTypeTmp[i];
					else
						strLoanTypeTmp += "," + lLoanTypeTmp[i];
				}
				/********** 查找满足条件的--合同数目--和--总金额**********/
				strSQL_Count = " select count(*),sum(a.mloanamount) dsum ";
				strSQL_Table =
					"       from LOAN_CONTRACTFORM a,sec_counterpart c "
						+ "      ,CLIENT c2,USERINFO u,LOAN_INTERESTRATE r "
						+ " where c.ID=a.NBORROWCLIENTID "
						+ "   and u.ID=a.NINPUTUSERID "
						+ "   and a.NCONSIGNCLIENTID=c2.ID(+) "
						+ "   and a.NINTERESTTYPEID=r.ID(+) ";
				/**************设置查找条件*****************/
				//加入项目的贷款类型（大桥只有自营短期贷款）
				strSQL_Table += " and a.nTypeID in (" + strLoanTypeTmp + ")";
				strSQL_Option += " and a.nStatusID =" + LOANConstant.ContractStatus.CHECK;
				if (lOfficeID > -1)
				{
					strSQL_Option += " and a.nOfficeID = " + lOfficeID;
				}
				if (lCurrencyID > -1)
				{
					strSQL_Option += " and a.nCurrencyID = " + lCurrencyID;
				}
				if (lUserID > -1)
				{
					strSQL_Option += " and a.nInputUserID= " + lUserID;
				}
				if (lLoanType > -1) //合同贷款类型
				{
					strSQL_Option += " and a.nTypeID = " + lLoanType;
				}
				if (lContractIDFrom > -1) //合同起始ID
				{
					strSQL_Option += " and a.ID >= " + lContractIDFrom;
				}
				if (lContractIDTo > -1) //合同结束ID
				{
					strSQL_Option += " and a.ID <= " + lContractIDTo;
				}
				if (lClientID > -1) //贷款单位
				{
					strSQL_Option += " and a.NBORROWCLIENTID = " + lClientID;
				}
				if (lUserID > -1) //合同管理人（才能激活） 不是，参考中油
				{
					//strSQL_Option += " and a.NINPUTUSERID = " + lUserID;
				}
				if (dAmountFrom > 0) //最小金额
				{
					strSQL_Option += " and a.MEXAMINEAMOUNT>=? ";
				}
				if (dAmountTo > 0) //最大金额
				{
					strSQL_Option += " and a.MEXAMINEAMOUNT<=? ";
				}
				strSQL = strSQL_Count + strSQL_Table + strSQL_Option;
				log4j.info("  SQL=  " + strSQL);
				ps = con.prepareStatement(strSQL);
				/***********对条件赋值***********/
				iIndex = 1;
				if (dAmountFrom > 0)
				{
					ps.setDouble(iIndex, dAmountFrom);
					iIndex++;
				}
				if (dAmountTo > 0)
				{
					ps.setDouble(iIndex, dAmountTo);
					iIndex++;
				}
				rs = ps.executeQuery();
				if (rs.next())
				{
					lRecordCount = rs.getLong(1); //得到总记录数
					dLoanSum = rs.getDouble(2);//得到总金额
				}
				//计算总页数
				lPageCount = lRecordCount / lPageLineCount;
				if ((lRecordCount % lPageLineCount) != 0)
				{
					lPageCount++;
				}
				log4j.info("符合条件的总记录数=" + lRecordCount);
				log4j.info("总金额=" + dLoanSum);
				if (lRecordCount > 0)
				{
					//返回结果集， 分页显示，显示下一页
					lRowNumStart = (lPageNo - 1) * lPageLineCount + 1; //开始
					lRowNumEnd = lRowNumStart + lPageLineCount - 1; //结束
					log4j.info("Start=" + lRowNumStart + " End=" + lRowNumEnd);
					///////////////////////////////////////////////////////////
						strSQL_Select = " select a.ID as ContractID," //合同ID
			+" a.SCONTRACTCODE as ContractCode," //合同编号
			+" a.NTYPEID," //贷款种类
			+" a.NBORROWCLIENTID,c.Name as BorrowClientName," //借款单位
			+" a.NCONSIGNCLIENTID," //委托单位ID
		+" c2.sName as ConsignClientName, " + " a.mLoanAmount,"
						//金额
			+" a.MEXAMINEAMOUNT," //批准金额
			+" a.NBANKINTERESTID as RateID, " + " r.MRATE as fRate," //利率
			+" a.mdiscountrate, " + " a.NINTERVALNUM as RateName," //利率期限
			+" a.NSTATUSID," //状态
			+" a.assurechargerate," //担保费率--担保合同的利率
			+" a.NINPUTUSERID as InputUserID," //合同管理人ID
			+" u.sName as InputUserName," //合同管理人
			+" nvl(a.nNextCheckLevel,1) nNextCheckLevel," //下一个审核级别
		+" a.NCURRENCYID," + " a.NOFFICEID ";
					//--------------排序---------------//
					switch ((int) lOrderParam)
					{
						case 1 : //按合同编号排序
							strSQL_Order += " order by a.SCONTRACTCODE ";
							break;
						case 2 : //按贷款种类排序
							strSQL_Order += " order by a.nTypeID ";
							break;
						case 3 : //按贷款单位排序
							strSQL_Order += " order by c.Name ";
							break;
						case 4 : //按委托单位排序，须单独访问委托合同表
							strSQL_Order += " order by c2.sName ";
							break;
						case 5 : //按金额排序
							strSQL_Order += " order by a.MEXAMINEAMOUNT ";
							break;
						case 6 : //按执行利率排序
							strSQL_Order += " order by a.mInterestRate,a.mAdjustRate,a.mDiscountRate,AssureChargeRate ";
							break;
						case 7 : //按期限排序
							strSQL_Order += " order by a.NINTERVALNUM ";
							break;
						case 8 : //按状态排序
							strSQL_Order += " order by a.nStatusID ";
							break;
						default :
							strSQL_Order += " order by a.SCONTRACTCODE ";
					}
					//判断是升序还是降序，升序是系统默认的，降序是desc
					if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
					{
						strSQL_Order += " desc ";
					}
					//加上查找限制条件  加上排序条件  排序方式
					strSQL = " select * from ( select b.*, rownum num from  ( " + strSQL_Select + strSQL_Table + strSQL_Option + strSQL_Order + " ) b ) ";
					strSQL += " WHERE num BETWEEN ? AND ? "; //当前页行记录范围
					log4j.info("  SQL = " + strSQL);
					ps = con.prepareStatement(strSQL);
					/***********对条件赋值***********/
					iIndex = 1;
					if (dAmountFrom > 0)
					{
						ps.setDouble(iIndex, dAmountFrom);
						iIndex++;
					}
					if (dAmountTo > 0)
					{
						ps.setDouble(iIndex, dAmountTo);
						iIndex++;
					}
					ps.setLong(iIndex, lRowNumStart); //给入起始行号
					iIndex++;
					ps.setLong(iIndex, lRowNumEnd); //给入结束行号
					rs = ps.executeQuery();
					while (rs != null && rs.next())
					{
						//返回ContractInfo
						ContractInfo ci = new ContractInfo();
						ci.setContractID(rs.getLong("ContractID"));
						ci.setContractCode(rs.getString("ContractCode")); //合同编号
						ci.setLoanTypeID(rs.getLong("nTypeID")); //贷款类型
						ci.setLoanTypeName(LOANConstant.LoanType.getName(ci.getLoanTypeID()));
						//贷款单位
						ci.setBorrowClientID(rs.getLong("NBORROWCLIENTID"));
						ci.setBorrowClientName(rs.getString("BorrowClientName"));
						//这里同业往来转贴现取的是这个金额 modify by xwhe
						ci.setLoanAmount(rs.getDouble("mLoanAmount")); //金额
						//ci.setLoanAmount(rs.getDouble("MEXAMINEAMOUNT")); //金额
						ci.setExamineAmount(rs.getDouble("MEXAMINEAMOUNT")); //批准金额
						ci.setIntervalNum(rs.getLong("RateName")); //利率期限
						ci.setStatusID(rs.getLong("NSTATUSID")); //状态
						//状态描述
						ci.setStatus(LOANConstant.ContractStatus.getName(ci.getStatusID()));
						ci.setPageCount(lPageCount); //总页码
						ci.setAllRecord(lRecordCount); //总记录
						ci.setAllAmount(dLoanSum); //总金额
						//委托单位ID
						ci.setClientID(rs.getLong("NCONSIGNCLIENTID"));
						//ci.setClientName(rs.getString("ConsignClientName"));
						//委托单位名称
						if (rs.getString("ConsignClientName") != null)
						{
							ci.setClientName(rs.getString("ConsignClientName"));
						}
						else
						{
							ci.setClientName("");
						}
						//--------------得到合同执行利率--------------//
	                    //=========ninh 2004-08-30 转贴现 需要加判断=========//
						if (ci.getLoanTypeID() == LOANConstant.LoanType.TX || ci.getLoanTypeID() == LOANConstant.LoanType.ZTX)
						{
							ci.setInterestRate(rs.getDouble("mdiscountrate"));
						}
						else if(ci.getLoanTypeID() == LOANConstant.LoanType.DB)
						{
							ci.setInterestRate(rs.getDouble("assurechargerate"));
							System.out.println("===============assurechargerate="+rs.getDouble("assurechargerate"));
						}
						else
						{
							RateInfo ri = new RateInfo();
							ContractDao dao = new ContractDao();
							ri = dao.getLatelyRate(-1, ci.getContractID(), null);
							ci.setInterestRate(ri.getLateRate());
							ci.setLateRateString(ri.getLateRateString());
						}
						ci.setNextCheckLevel(rs.getLong("nNextCheckLevel"));
						System.out.println("===============rate="+ci.getInterestRate());

						vReturn.addElement(ci);
					}
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				log4j.info(e.toString());
				throw new RemoteException("remote exception : " + e.toString());
			}
			finally
			{
				try
				{
					if (rs != null)
					{
						rs.close();
						rs = null;
					}
					if (ps != null)
					{
						ps.close();
						ps = null;
					}
					if (con != null)
					{
						con.close();
						con = null;
					}
				}
				catch (Exception e)
				{
					throw new RemoteException("remote exception : " + e.toString());
				}
			}
			return (vReturn.size() > 0 ? vReturn : null);
		}

	/**
	 * 激活合同查找，
	 * @Copyright (c) Jan. 2002, by iSoftStone Inc. All Rights Reserved
	 * @param lLoanType        贷款种类，对应Notes中CODETYPE_LOANTYPE_CODE
	 * @param lCurrencyID 币种标识
	 * @param lOfficeID 办事处标识
	 * @param lContractIDFrom 合同编号起始
	 * @param lContractIDTo 合同编号结束
	 * @param lClientID 借款单位标识
	 * @param dAmountFrom 金额起始
	 * @param dAmountTo 金额结束
	 * @return Collection
	 * @exception Exception
	 */
	public Collection findContractByMultiOption(
		long lLoanType,
		long lCurrencyID,
		long lOfficeID,
		long lUserID,
		long lContractIDFrom,
		long lContractIDTo,
		long lClientID,
		double dAmountFrom,
		double dAmountTo,
		long lPageLineCount,
		long lPageNo,
		long lOrderParam,
		long lDesc)
		throws RemoteException
	{
		Vector vReturn = new Vector(); //当前页结果集
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		int iIndex = 0;
		String strSQL = ""; //主SQL语句
		String strSQL_Count = ""; //SQL计算语句
		String strSQL_Select = ""; //SQL查找语句
		String strSQL_Table = ""; //SQL的表以及其之间联系语句
		String strSQL_Option = ""; //SQL查找条件
		String strSQL_Order = ""; //SQL排序条件
		long[] lLoanTypeTmp = null; //贷款类型值字符串
		String strLoanTypeTmp = "";
		long lRecordCount = -1; //总记录数
		double dLoanSum = 0.0; //满足条件的合同贷款总金额
		long lPageCount = -1; //总页数
		long lRowNumStart = -1; //开始记录
		long lRowNumEnd = -1; //结束记录
		try
		{
			con = Database.getConnection();
			//取所有贷款类型的值
			lLoanTypeTmp = LOANConstant.LoanType.getAllCode(lOfficeID,lCurrencyID);
			for (int i = 0; i < lLoanTypeTmp.length; i++)
			{
				if (i == 0)
					strLoanTypeTmp += "" + lLoanTypeTmp[i];
				else
					strLoanTypeTmp += "," + lLoanTypeTmp[i];
			}
			/********** 查找满足条件的--合同数目--和--总金额**********/
			strSQL_Count = " select count(*),sum(a.MEXAMINEAMOUNT) dsum ";
			strSQL_Table =
				"       from LOAN_CONTRACTFORM a,CLIENT c "
					+ "      ,CLIENT c2,USERINFO u,LOAN_INTERESTRATE r "
					+ " where c.ID=a.NBORROWCLIENTID "
					+ "   and u.ID=a.NINPUTUSERID "
					+ "   and a.NCONSIGNCLIENTID=c2.ID(+) "
					+ "   and a.NINTERESTTYPEID=r.ID(+) ";
			/**************设置查找条件*****************/
			//加入项目的贷款类型（大桥只有自营短期贷款）
			strSQL_Table += " and a.nTypeID in (" + strLoanTypeTmp + ")";
			strSQL_Option += " and a.nStatusID =" + LOANConstant.ContractStatus.CHECK;
			if (lOfficeID > -1)
			{
				strSQL_Option += " and a.nOfficeID = " + lOfficeID;
			}
			if (lCurrencyID > -1)
			{
				strSQL_Option += " and a.nCurrencyID = " + lCurrencyID;
			}
			if (lUserID > -1)
			{
				strSQL_Option += " and a.nInputUserID= " + lUserID;
			}
			if (lLoanType > -1) //合同贷款类型
			{
				strSQL_Option += " and a.nTypeID = " + lLoanType;
			}
			if (lContractIDFrom > -1) //合同起始ID
			{
				strSQL_Option += " and a.ID >= " + lContractIDFrom;
			}
			if (lContractIDTo > -1) //合同结束ID
			{
				strSQL_Option += " and a.ID <= " + lContractIDTo;
			}
			if (lClientID > -1) //贷款单位
			{
				strSQL_Option += " and a.NBORROWCLIENTID = " + lClientID;
			}
			if (lUserID > -1) //合同管理人（才能激活） 不是，参考中油
			{
				//strSQL_Option += " and a.NINPUTUSERID = " + lUserID;
			}
			if (dAmountFrom > 0) //最小金额
			{
				strSQL_Option += " and a.MEXAMINEAMOUNT>=? ";
			}
			if (dAmountTo > 0) //最大金额
			{
				strSQL_Option += " and a.MEXAMINEAMOUNT<=? ";
			}
			strSQL = strSQL_Count + strSQL_Table + strSQL_Option;
			log4j.info("  SQL=  " + strSQL);
			ps = con.prepareStatement(strSQL);
			/***********对条件赋值***********/
			iIndex = 1;
			if (dAmountFrom > 0)
			{
				ps.setDouble(iIndex, dAmountFrom);
				iIndex++;
			}
			if (dAmountTo > 0)
			{
				ps.setDouble(iIndex, dAmountTo);
				iIndex++;
			}
			rs = ps.executeQuery();
			if (rs.next())
			{
				lRecordCount = rs.getLong(1); //得到总记录数
				dLoanSum = rs.getDouble(2);//得到总金额
			}
			//计算总页数
			lPageCount = lRecordCount / lPageLineCount;
			if ((lRecordCount % lPageLineCount) != 0)
			{
				lPageCount++;
			}
			log4j.info("符合条件的总记录数=" + lRecordCount);
			log4j.info("总金额=" + dLoanSum);
			if (lRecordCount > 0)
			{
				//返回结果集， 分页显示，显示下一页
				lRowNumStart = (lPageNo - 1) * lPageLineCount + 1; //开始
				lRowNumEnd = lRowNumStart + lPageLineCount - 1; //结束
				log4j.info("Start=" + lRowNumStart + " End=" + lRowNumEnd);
				///////////////////////////////////////////////////////////
					strSQL_Select = " select a.ID as ContractID," //合同ID
		+" a.SCONTRACTCODE as ContractCode," //合同编号
		+" a.NTYPEID," //贷款种类
		+" a.NBORROWCLIENTID,c.sName as BorrowClientName," //借款单位
		+" a.NCONSIGNCLIENTID," //委托单位ID
	+" c2.sName as ConsignClientName, " + " a.mLoanAmount,"
					//金额
		+" a.MEXAMINEAMOUNT," //批准金额
		+" a.NBANKINTERESTID as RateID, " + " r.MRATE as fRate," //利率
		+" a.mdiscountrate, " + " a.NINTERVALNUM as RateName," //利率期限
		+" a.NSTATUSID," //状态
		+" a.assurechargerate," //担保费率--担保合同的利率
		+" a.NINPUTUSERID as InputUserID," //合同管理人ID
		+" u.sName as InputUserName," //合同管理人
		+" nvl(a.nNextCheckLevel,1) nNextCheckLevel," //下一个审核级别
	+" a.NCURRENCYID," + " a.NOFFICEID ";
				//--------------排序---------------//
				switch ((int) lOrderParam)
				{
					case 1 : //按合同编号排序
						strSQL_Order += " order by a.SCONTRACTCODE ";
						break;
					case 2 : //按贷款种类排序
						strSQL_Order += " order by a.nTypeID ";
						break;
					case 3 : //按贷款单位排序
						strSQL_Order += " order by c.sName ";
						break;
					case 4 : //按委托单位排序，须单独访问委托合同表
						strSQL_Order += " order by c2.sName ";
						break;
					case 5 : //按金额排序
						strSQL_Order += " order by a.MEXAMINEAMOUNT ";
						break;
					case 6 : //按执行利率排序
						strSQL_Order += " order by a.mInterestRate,a.mAdjustRate,a.mDiscountRate,AssureChargeRate ";
						break;
					case 7 : //按期限排序
						strSQL_Order += " order by a.NINTERVALNUM ";
						break;
					case 8 : //按状态排序
						strSQL_Order += " order by a.nStatusID ";
						break;
					default :
						strSQL_Order += " order by a.SCONTRACTCODE ";
				}
				//判断是升序还是降序，升序是系统默认的，降序是desc
				if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
				{
					strSQL_Order += " desc ";
				}
				//加上查找限制条件  加上排序条件  排序方式
				strSQL = " select * from ( select b.*, rownum num from  ( " + strSQL_Select + strSQL_Table + strSQL_Option + strSQL_Order + " ) b ) ";
				strSQL += " WHERE num BETWEEN ? AND ? "; //当前页行记录范围
				log4j.info("  SQL = " + strSQL);
				ps = con.prepareStatement(strSQL);
				/***********对条件赋值***********/
				iIndex = 1;
				if (dAmountFrom > 0)
				{
					ps.setDouble(iIndex, dAmountFrom);
					iIndex++;
				}
				if (dAmountTo > 0)
				{
					ps.setDouble(iIndex, dAmountTo);
					iIndex++;
				}
				ps.setLong(iIndex, lRowNumStart); //给入起始行号
				iIndex++;
				ps.setLong(iIndex, lRowNumEnd); //给入结束行号
				rs = ps.executeQuery();
				while (rs != null && rs.next())
				{
					//返回ContractInfo
					ContractInfo ci = new ContractInfo();
					ci.setContractID(rs.getLong("ContractID"));
					ci.setContractCode(rs.getString("ContractCode")); //合同编号
					ci.setLoanTypeID(rs.getLong("nTypeID")); //贷款类型
					ci.setLoanTypeName(LOANConstant.LoanType.getName(ci.getLoanTypeID()));
					//贷款单位
					ci.setBorrowClientID(rs.getLong("NBORROWCLIENTID"));
					ci.setBorrowClientName(rs.getString("BorrowClientName"));
					//ci.setLoanAmount(rs.getDouble("mLoanAmount")); //金额
					ci.setLoanAmount(rs.getDouble("MEXAMINEAMOUNT")); //金额
					ci.setExamineAmount(rs.getDouble("MEXAMINEAMOUNT")); //批准金额
					ci.setIntervalNum(rs.getLong("RateName")); //利率期限
					ci.setStatusID(rs.getLong("NSTATUSID")); //状态
					//状态描述
					ci.setStatus(LOANConstant.ContractStatus.getName(ci.getStatusID()));
					ci.setPageCount(lPageCount); //总页码
					ci.setAllRecord(lRecordCount); //总记录
					ci.setAllAmount(dLoanSum); //总金额
					//委托单位ID
					ci.setClientID(rs.getLong("NCONSIGNCLIENTID"));
					//ci.setClientName(rs.getString("ConsignClientName"));
					//委托单位名称
					if (rs.getString("ConsignClientName") != null)
					{
						ci.setClientName(rs.getString("ConsignClientName"));
					}
					else
					{
						ci.setClientName("");
					}
					//--------------得到合同执行利率--------------//
                    //=========ninh 2004-08-30 转贴现 需要加判断=========//
					if (ci.getLoanTypeID() == LOANConstant.LoanType.TX || ci.getLoanTypeID() == LOANConstant.LoanType.ZTX)
					{
						ci.setInterestRate(rs.getDouble("mdiscountrate"));
					}
					else if(ci.getLoanTypeID() == LOANConstant.LoanType.DB)
					{
						ci.setInterestRate(rs.getDouble("assurechargerate"));
						System.out.println("===============assurechargerate="+rs.getDouble("assurechargerate"));
					}
					else
					{
						RateInfo ri = new RateInfo();
						ContractDao dao = new ContractDao();
						ri = dao.getLatelyRate(-1, ci.getContractID(), null);
						ci.setInterestRate(ri.getLateRate());
						ci.setLateRateString(ri.getLateRateString());
					}
					ci.setNextCheckLevel(rs.getLong("nNextCheckLevel"));
					System.out.println("===============rate="+ci.getInterestRate());

					vReturn.addElement(ci);
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;
				con.close();
				con = null;
			}
		}
		catch (Exception e)
		{
			log4j.info(e.toString());
			throw new RemoteException("remote exception : " + e.toString());
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				throw new RemoteException("remote exception : " + e.toString());
			}
		}
		return (vReturn.size() > 0 ? vReturn : null);
	}

	/**
	 * 激活一个合同，操作ContractInfo表，将状态改为已激活
	 * <br>如果状态不是已复核，返回错误
	 * @param lContractID 合同标识
	 * @return 返回值lResult为-2表明状态不对失败，为-1为操作失败，成功返回1
	 * @writen by haoning 2003-8-29
	 */
	public long activateContract(long lContractID) throws RemoteException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ResultSet rsBatch = null;
		String strSQL = null;
		long lResult = -1;
		long lLoanID = -1;
        /*	浦发银行用到的变量
         *  修改：王利
         *  日期：2006-03-16
         */ 
		String sFileName="";
		String contractCode="";
		String data=Env.getSystemDateString();
		String year="";
		String month="";
		String day="";
		year=data.substring(0, 4);
		month=data.substring(5, 7);
		day=data.substring(8, 10);
		year=year+month+day;
		//1. 判断记录为复核状态
		//2. UPDATE记录的状态字为激活
		try
		{
			con = Database.getConnection();
			ContractContentDao ccdo=new ContractContentDao();
			
			//log4j.info("lContractID=" + lContractID);
			//验证记录为复核状态
			strSQL = "SELECT lc.ntypeid,lc.NSTATUSID,lc.SCONTRACTCODE,lc1.SDOCNAME FROM LOAN_CONTRACTFORM lc,LOAN_CONTRACTCONTENT lc1 WHERE lc.ID=lc1.NCONTRACTID(+) and lc.ID=? AND lc.NSTATUSID=?";
			log4j.info("SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lContractID);
			ps.setLong(2, LOANConstant.ContractStatus.CHECK);
			rsBatch = ps.executeQuery();
			if (Config.getBoolean( ConfigConstant.LOAN_CONTRACT_REBUILD,false ))
			{
				//循环更改所有合同文本中的合同编号
				while (rsBatch != null && rsBatch.next())//表示该记录目前不是复核状态，不能被激活
				{					
					lResult = 0;
					//浦发银行用到的变量					
	                contractCode = rsBatch.getString("SCONTRACTCODE");
					//contractCode=contractCode.replaceAll(contractCode.substring(0, 8),year.substring(0, 8));
	                //System.out.println("要更改的合同号:"+contractCode);
					sFileName=rsBatch.getString("SDOCNAME");
					//System.out.println("要更改的合同文本文件:"+sFileName);
					if (sFileName!=null && sFileName.length()>0)
					{	
					   // if (rsBatch.getLong("ntypeid")!=3)
					    //{
					    	ccdo.ChangeContent(sFileName, 1, contractCode);	
					    //}						
					}
					contractCode=year+contractCode.substring(8, contractCode.length());
					//System.out.println("更改后的合同号:"+contractCode);
				}
			}
			else
			{
				if (rsBatch != null && rsBatch.next())
				{
					contractCode = rsBatch.getString("SCONTRACTCODE");
					lResult = 0;	
				}				
			}	
			if (rsBatch != null)
			{
				
				rsBatch.close();
				rsBatch = null;
				
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			if (lResult == 0)
			{
				strSQL = "UPDATE LOAN_CONTRACTFORM SET NSTATUSID = ?, DTACTIVE=TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'), 'YYYY-MM-DD'),SCONTRACTCODE='"+contractCode+"' WHERE ID = ?";
				//************************************
				//log4j.info("SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, LOANConstant.ContractStatus.NOTACTIVE);
				ps.setLong(2, lContractID);
				lResult = ps.executeUpdate();
				if (lResult <= 0)
				{
					lResult = -1; //失败
				}
				else
				{
					lResult = 1; //成功
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				//同时更新贷款信息表
				strSQL = "update LOAN_LOANFORM set isCanModify=? WHERE ID=( " + "SELECT NLOANID FROM LOAN_CONTRACTFORM WHERE ID=? )";
				log4j.info("SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, Constant.YesOrNo.YES);
				ps.setLong(2, lContractID);
				lResult = ps.executeUpdate();
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
			}
			con.close();
			con = null;
		}
		catch (Exception e)
		{
			lResult = -1;
			throw new RemoteException(e.toString());
		}
		finally
		{
			try
			{
				if (rsBatch != null)
				{
					rsBatch.close();
					rsBatch = null;
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				throw new RemoteException(e.getMessage());
			}
		}
		return lResult;
	}

	/**
	 * 激活一个合同，操作ContractInfo表，将状态改为已激活
	 * <br>如果状态不是已复核，返回错误
	 * @param lContractID 合同标识
	 * @return 返回值lResult为-2表明状态不对失败，为-1为操作失败，成功返回1
	 * @writen by haoning 2003-8-29
	 */
	public long activateDiscountContract(long lContractID) throws RemoteException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ResultSet rsBatch = null;
		String strSQL = null;
		long lResult = -1;
		long lLoanID = -1;
        /*	浦发银行用到的变量
         *  修改：王利
         *  日期：2006-03-16
         */ 
		String sFileName="";
		String contractCode="";
		String data=Env.getSystemDateString();
		String year="";
		String month="";
		String day="";
		year=data.substring(0, 4);
		month=data.substring(5, 7);
		day=data.substring(8, 10);
		year=year+month+day;
		//1. 判断记录为复核状态
		//2. UPDATE记录的状态字为激活
		try
		{
			con = Database.getConnection();
			ContractContentDao ccdo=new ContractContentDao();
			
			//log4j.info("lContractID=" + lContractID);
			//验证记录为复核状态
			strSQL = "SELECT lc.ntypeid,lc.NSTATUSID,lc.SCONTRACTCODE,lc1.SDOCNAME FROM LOAN_CONTRACTFORM lc,LOAN_CONTRACTCONTENT lc1 WHERE lc.ID=lc1.NCONTRACTID(+) and lc.ID=? AND lc.NSTATUSID=?";
			log4j.info("SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lContractID);
			ps.setLong(2, LOANConstant.ContractStatus.CHECK);
			rsBatch = ps.executeQuery();
			if (Config.getBoolean( ConfigConstant.LOAN_CONTRACT_REBUILD,false ))
			{
				//循环更改所有合同文本中的合同编号
				while (rsBatch != null && rsBatch.next())//表示该记录目前不是复核状态，不能被激活
				{					
					lResult = 0;
					//浦发银行用到的变量					
	                contractCode = rsBatch.getString("SCONTRACTCODE");
					//contractCode=contractCode.replaceAll(contractCode.substring(0, 8),year.substring(0, 8));
	                //System.out.println("要更改的合同号:"+contractCode);
					sFileName=rsBatch.getString("SDOCNAME");
					//System.out.println("要更改的合同文本文件:"+sFileName);
					if (sFileName!=null && sFileName.length()>0)
					{	
					   // if (rsBatch.getLong("ntypeid")!=3)
					    //{
					    	ccdo.ChangeContent(sFileName, 1, contractCode);	
					    //}						
					}
					contractCode=year+contractCode.substring(8, contractCode.length());
					//System.out.println("更改后的合同号:"+contractCode);
				}
			}
			else
			{
				if (rsBatch != null && rsBatch.next())
				{
					contractCode = rsBatch.getString("SCONTRACTCODE");
					lResult = 0;	
				}				
			}	
			if (rsBatch != null)
			{
				
				rsBatch.close();
				rsBatch = null;
				
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			if (lResult == 0)
			{
				strSQL = "UPDATE LOAN_CONTRACTFORM SET NSTATUSID = ?, DTACTIVE=TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'), 'YYYY-MM-DD'),SCONTRACTCODE='"+contractCode+"' WHERE ID = ?";
				//************************************
				//log4j.info("SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, LOANConstant.ContractStatus.NOTACTIVE);
				ps.setLong(2, lContractID);
				lResult = ps.executeUpdate();
				if (lResult <= 0)
				{
					lResult = -1; //失败
				}
				else
				{
					lResult = 1; //成功
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				//同时更新贷款信息表
				//暂时修改成这样,
				strSQL = "update cra_loanform set isCanModify=? WHERE ID=( " + "SELECT NLOANID FROM LOAN_CONTRACTFORM WHERE ID=? )";
				log4j.info("SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setLong(1, Constant.YesOrNo.YES);
				ps.setLong(2, lContractID);
				lResult = ps.executeUpdate();
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
			}
			con.close();
			con = null;
		}
		catch (Exception e)
		{
			lResult = -1;
			throw new RemoteException(e.toString());
		}
		finally
		{
			try
			{
				if (rsBatch != null)
				{
					rsBatch.close();
					rsBatch = null;
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				throw new RemoteException(e.getMessage());
			}
		}
		return lResult;
	}

	
	
	/**
	 * 新增一个合同，操作loan_Contractform表
	 * @param Contractinfo oInfo 合同信息
	 * @return long 成功返回1 失败返回-1
	 * @writen by  2003-9-30
	 */
	public long add(ContractInfo oInfo) throws RemoteException
	{
		return -1;

		// 首先，调用ContractDao.java中的insert()
		// 如果成功，根据贷款申请的类型（自营短期、自营中长期等），调用ContractContentDao.java中的相应方法
		// 如果成功，按照担保的情况，
		// 调用ContractContentDao中的方法
		// 给每条担保记录生成一条合同记录

	}

	/**
	 * 查询合同信息，操作loan_Contractform表和它的附属表
	 * @param long lID 合同标示
	 * @return ContractInfo
	 * @writen by  2003-10-6
	 */
	public ContractInfo findByID(long lID) throws RemoteException, IException
	{
		ContractInfo info = null;
		try
		{
			log4j.info("findByID begin");
			ContractDao contractDao = new ContractDao();
			info = contractDao.findByID(lID);
			log4j.info("findByID end");
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return info;
	}

	/**
	* 查询合同信息(修改)
	* Create Date: 2003-10-15
	* @param ContractQueryInfo 查询条件
	* @return Collection
	* @exception Exception
	*/
	public Collection queryForUpdate(ContractQueryInfo qInfo) throws RemoteException, IException
	{
		long lReturn = -1;
		Collection c = null;

		try
		{
			ContractDao contractDao = new ContractDao();
			c = contractDao.queryForUpdate(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		return c;
	}

	/**
	* 查询合同信息(审核)
	* Create Date: 2003-10-15
	* @param ContractQueryInfo 查询条件
	* @return Collection
	* @exception Exception
	*/
	public Collection queryForExamine(ContractQueryInfo qInfo) throws RemoteException, IException
	{
		long lReturn = -1;
		Collection c = null;

		try
		{
			ContractDao contractDao = new ContractDao();
			c = contractDao.queryForExamine(qInfo);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		return c;
	}

	/**
	* 修改合同信息
	* Create Date: 2003-10-15
	* @param ContractInfo 合同信息
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long commit(ContractInfo info) throws RemoteException, IException
	{
		long lResult = -1;
		try
		{
			info.setNextCheckLevel(1);
			ContractDao contractDao = new ContractDao();
			//中电子的贴现合同文本需要做的特殊处理 added by zntan 2004-11-15
			
			lResult = contractDao.update(info);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lResult;
	}

	public long delete(long loanID) throws RemoteException, IException
	{
		long ret = -1;
		try
		{
			ContractDao conDao = new ContractDao();
			ret = conDao.deleteByLoanID(loanID);
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new RemoteException(e.getMessage());
		}
		return ret;
	}
	/**
	* 取消合同
	* Create Date: 2003-10-15
	* @param lID 合同ID
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long cancel(long lID) throws RemoteException, IException
	{
		long lResult = -1;
		try
		{
			//更新合同状态为已取消
			ContractInfo info = new ContractInfo();
			info.setContractID(lID);
			info.setStatusID(LOANConstant.ContractStatus.CANCEL);
			ContractDao contractDao = new ContractDao();
			lResult = contractDao.update(info);
			
			//add by yanliu 2004-09-15
			ContractInfo tempInfo = new ContractInfo();
			tempInfo = contractDao.findByID(lID);
			if( tempInfo.getLoanTypeID() == LOANConstant.LoanType.TX )
			{
				//贴现合同的取消需更新该贴现合同票据得卖出状态 
				contractDao.updateContractBillSellStatus(lID,Constant.YesOrNo.NO);
			}
			
			//add end yaniu
			
			//更新贷款申请状态为已取消
			info = contractDao.findByID(lID);
			LoanApplyDao loanApplyDao = new LoanApplyDao();
			lResult = loanApplyDao.updateLoanStatus(info.getLoanID(), -1, LOANConstant.LoanStatus.CANCEL);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lResult;
	}

	/**
	* 审核通过 
	* Create Date: 2003-10-15
	* @param lContractID 合同ID
	* @param strOpinion 审核意见
	* @param lUserID 登录人ID
	* @param  lNextUserID 下一级审核人
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long examinePass(long lContractID, String strOpinion, long lUserID, long lNextUserID,long lCurrencyID,long lOfficeID) throws RemoteException, IException
	{
		long lResult = -1;
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();
		ContractInfo cInfo = new ContractInfo();

		try
		{
			ContractDao cDao = new ContractDao();
			long lApprovalID = -1;
			long lModuleID = Constant.ModuleType.LOAN; //模块类型
			long lLoanTypeID = -1; //贷款类型
			long lActionID = Constant.ApprovalAction.LOAN_CONTRACT; //合同审核
			long lStatusID = Constant.RecordStatus.VALID; //记录状态
			long lResultID = -1; //审批通过
			long lLevel = -1;

			cInfo = cDao.findByID(lContractID);
			
			//取得审核的贷款类型
			//lLoanTypeID = cDao.getApprovalLoanType(cInfo.getLoanTypeID());
			lLoanTypeID = cInfo.getSubTypeID();
			
			//获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
			//下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			//审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);

			
			if (lNextUserID > 0)
			{
				lResultID = Constant.ApprovalDecision.PASS; //审批通过
			}
			else if (lNextUserID == -2)
			{
				lResultID = Constant.ApprovalDecision.FINISH; //审批完成
			}

			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lContractID);
			info.setUserID(lUserID);
			info.setNextUserID(lNextUserID);
			info.setOpinion(strOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);

			lResult = appbiz.saveApprovalTracing(info); //保存审批信息

			ContractInfo cInfo1 = new ContractInfo();
			if (lNextUserID == -2)
			{
				cInfo1.setStatusID(LOANConstant.ContractStatus.CHECK);
			}
			else
			{
				cInfo1.setStatusID(LOANConstant.ContractStatus.SUBMIT);
			}
			cInfo1.setContractID(lContractID);
			cInfo1.setCheckUserID(lNextUserID);
			ContractDao contractDao = new ContractDao();
			lResult = contractDao.update(cInfo1); //重新设置合同的审核人和状态

			if (lNextUserID == -2)
			{
				//贴现合同的审核完成以后，需更新该合同票据的卖出状态 add by yanliu 2004-09-15
				if( cInfo.getLoanTypeID()==LOANConstant.LoanType.TX )
				{
					cDao.updateContractBillSellStatus(lContractID,Constant.YesOrNo.YES);
                     System.out.println("贴现合同的审核完成以后，需更新该合同票据的卖出状态");
					
					/*  TOCONFIG―TODELETE  */
					/*
					 * 产品化不再区分项目,以中电子为参考 
					 * ninh 
					 * 2005-03-24
					 */

//					if (Config.GLOBAL.getProjectType() == Constant.ProjectType.CEC )
//					{
//						ContractContentDao ccDao = new ContractContentDao();
//						ccDao.saveCECBillTab(lContractID);
//					}

					//ContractContentDao ccDao = new ContractContentDao();
					//ccDao.saveCECBillTab(lContractID);
					
					/*  TOCONFIG―END  */
				}
				//add end yanliu				
			}
			else
			{
			    if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
				{
			        contractDao.updateContractNextCheckLevel(lContractID, lLevel);
			        Log.print("更新下一个审核级别（可越级）：" + lLevel);
				}
				else
				{
				    //修改下一个审核级别为自动加一
					contractDao.updateContractNextCheckLevel(lContractID, -1);
					Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
			}
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lResult;
	}

	/**
	* 审核拒绝
	* Create Date: 2003-10-15
	* @param lContractID 合同ID
	* @param strOpinion 审核意见
	* @param lUserID 登录人ID
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long examineRefuse(long lContractID, String strOpinion, long lUserID,long lCurrencyID,long lOfficeID) throws RemoteException, IException
	{
		long lResult = -1;
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ContractInfo cInfo = new ContractInfo();

		try
		{
			ApprovalDelegation appbiz = new ApprovalDelegation();
			ContractDao cDao = new ContractDao();
			long lModuleID = Constant.ModuleType.LOAN; //模块类型
			long lLoanTypeID = -1; //贷款类型
			long lActionID = Constant.ApprovalAction.LOAN_CONTRACT; //合同审核
			long lStatusID = Constant.RecordStatus.VALID; //记录状态
			long lResultID = Constant.ApprovalDecision.REFUSE; //审批拒绝

			cInfo = cDao.findByID(lContractID);

			//取得审核的贷款类型
			//lLoanTypeID = cDao.getApprovalLoanType(cInfo.getLoanTypeID());
			lLoanTypeID = cInfo.getSubTypeID();

			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lContractID);
			info.setUserID(lUserID);
			info.setOpinion(strOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			lResult = appbiz.saveApprovalTracing(info); //保存审批信息

			//取得审批设置标示
			long lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID, lActionID,lOfficeID,lCurrencyID);
			lResult = appbiz.deleteApprovalTracing(lModuleID, lLoanTypeID, lActionID,lOfficeID,lCurrencyID, lContractID, 2); //逻辑删除

			ContractInfo cInfo1 = new ContractInfo();
			cInfo1.setStatusID(LOANConstant.ContractStatus.REFUSE);
			cInfo1.setContractID(lContractID);

			ContractDao contractDao = new ContractDao();
			//修改合同状态为已拒绝
			lResult = contractDao.update(cInfo1);

			LoanApplyDao loanApplyDao = new LoanApplyDao();
			//修改贷款申请状态为已拒绝
			lResult = loanApplyDao.updateLoanStatus(cInfo.getLoanID(), lUserID, LOANConstant.LoanStatus.REFUSE);

		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lResult;
	}

	/**
	* 审核返回修正
	* Create Date: 2003-10-15
	* @param lContractID 合同ID
	* @param strOpinion 审核意见
	* @param lUserID 登录人ID
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long examineBack(long lContractID, String strOpinion, long lUserID,long lCurrencyID,long lOfficeID) throws RemoteException, IException
	{
		long lResult = -1;
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ContractInfo cInfo = new ContractInfo();

		try
		{
			ApprovalDelegation appbiz = new ApprovalDelegation();
			ContractDao cDao = new ContractDao();
			long lModuleID = Constant.ModuleType.LOAN; //模块类型
			long lLoanTypeID = -1; //贷款类型
			long lActionID = Constant.ApprovalAction.LOAN_CONTRACT; //合同审核
			long lStatusID = Constant.RecordStatus.VALID; //记录状态
			long lResultID = Constant.ApprovalDecision.RETURN; //审批返回修正

			cInfo = cDao.findByID(lContractID);

			//取得审核的贷款类型
			//lLoanTypeID = cDao.getApprovalLoanType(cInfo.getLoanTypeID());
			lLoanTypeID = cInfo.getSubTypeID();

			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lContractID);
			info.setUserID(lUserID);
			info.setOpinion(strOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			lResult = appbiz.saveApprovalTracing(info); //保存审批信息

			ContractInfo cInfo1 = new ContractInfo();
			cInfo1.setCheckUserID(cInfo.getInputUserID()); //下一个审批人修改为合同管理员
			cInfo1.setStatusID(LOANConstant.ContractStatus.SUBMIT); //合同状态变为“已提交”
			cInfo1.setContractID(lContractID);
			ContractDao contractDao = new ContractDao();
			lResult = contractDao.update(cInfo1);

			//修改下一个审核级别为一
			contractDao.updateContractNextCheckLevel(lContractID, 1);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lResult;
	}

	// 计算贷款余额：lContractID：合同标识 
	private static double getBalance(long lContractID) throws Exception
	{
		double dBalance = 0;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = "";

		try
		{
			/**********贷款余额（未还金额）**********/
			con = Database.getConnection();
			strSQL =
				" select ncontractid,sum(Balance) Balance from "
					+ " ( "
					+ "    select a.mBalance Balance  "
					+ "          ,b.nContractID "
					+ "    from sett_subaccount a,loan_payform b "
					+ "     where a.AL_nLoanNoteID = b.ID "
					+ "       and a.nStatusID = "
					+ Constant.RecordStatus.VALID
				//+ "    union "  TODO  ninghao 一发多收待定
		//+ "    select ncontractid,dtexecute,mamount "
		//+ "    from transmultiloanrepayment "
	+" ) " + " where nContractID = " + lContractID + " group by nContractID " + " ";
			Log.print("SQL=" + strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				dBalance = rs.getDouble("Balance");
			}
			if (rs != null)
			{
				rs.close();
				rs = null;
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			con.close();
			con = null;

		}
		catch (Exception e)
		{
			throw new IException("Gen_E001");
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new IException("Gen_E001");
			}
		}
		return dBalance;
	}

	/**
	* 增加参与行信息
	* Create Date: 2003-10-15
	* @param Collection 银团信息
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long addMember(Collection c) throws RemoteException, IException
	{
		long lResult = -1;
		try
		{
			ContractDao contractDao = new ContractDao();
			lResult = contractDao.addMember(c);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lResult;
	}

	/**
	* 删除参与行信息
	* Create Date: 2003-10-15
	* @param Collection 银团信息
	* @return long 如大于0表示成功，小于等于0表示失败
	* @exception Exception
	*/
	public long delMember(Collection c) throws RemoteException, IException
	{
		long lResult = -1;
		try
		{
			ContractDao contractDao = new ContractDao();
			lResult = contractDao.delMember(c);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lResult;
	}
	
	
	public ContractInfo findContractBasicInfoByID(long lID) throws Exception{
		return new ContractDao().findContractBasicInfoByID(lID);
	}
}
