/* Generated by Together */

package com.iss.itreasury.loan.creditext.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

import com.iss.itreasury.loan.creditext.dataentity.VarietyInfo;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.Log4j;

public class VarietyDAO {
	private static Log4j log4j = null;
	
	public VarietyDAO(){
		log4j = new Log4j(Constant.ModuleType.LOAN, this);
	}
	
	private Connection conn = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
 
	/**
	 * 根据授信品种编号得到授信品种的信息   
	 * Create Date : 2006-10-13
	 * @param strCode
	 * @return
	 * @throws SQLException
	 */
	public VarietyInfo getVarietyInfoByCode(String strCode) throws Exception {
		VarietyInfo vInfo = null;
		String strSQL = "select * from loan_creditext_variety where scode=?";
		try{
			conn = Database.getConnection();
			pstmt = conn.prepareStatement(strSQL);
			pstmt.setString(1,strCode);
			rs = pstmt.executeQuery();
			if(rs.next()){
				vInfo = new VarietyInfo();
				vInfo.setCode(rs.getString("scode"));
				
				if(strCode != null && strCode.length() > 4){
					vInfo.setSuperCode(strCode.substring(0,strCode.length()-2));
					
				}else{
					vInfo.setSuperCode(strCode);
					
				}
				vInfo.setName(rs.getString("sname"));
				vInfo.setPredefined(rs.getInt("npredefined"));
				vInfo.setRemark(rs.getString("sremark"));
			}
		}catch(Exception e){
			log4j.error(e.toString());
			e.printStackTrace();
			throw e;
		}
		finally{
			if(rs != null){
				rs.close();
				rs = null;
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
			if(conn != null){
				conn.close();
				conn = null;
			}
		}
		return vInfo;
	}
	
	/**
	 * 得到所有授信品种的信息   
	 * Create Date : 2006-10-13
	 * @param 
	 * @return
	 * @throws SQLException
	 */
	public Collection getAllVarietyInfo() throws Exception {
		Collection vList = null;
		String strSQL = "select * from loan_creditext_variety order by scode";
		try{
			conn = Database.getConnection();
			pstmt = conn.prepareStatement(strSQL);
			rs = pstmt.executeQuery();
			vList = new ArrayList();
			while(rs.next()){
				VarietyInfo vInfo = new VarietyInfo();
				vInfo.setCode(rs.getString("scode"));
				vInfo.setName(rs.getString("sname"));
				vInfo.setPredefined(rs.getInt("npredefined"));
				vInfo.setRemark(rs.getString("sremark"));
				vList.add(vInfo);
			}
		}catch(Exception e){
			log4j.error(e.toString());
			e.printStackTrace();
			throw e;
		}
		finally{
			if(rs != null){
				rs.close();
				rs = null;
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
			if(conn != null){
				conn.close();
				conn = null;
			}
		}
		return vList;
	}
	
	/**
	 * 新增一项授信品种
	 * Create Date : 2006-10-13
	 * @param info
	 * @return
	 * @throws SQLException
	 */
	public boolean insert(VarietyInfo info) throws Exception {
		String strSQL = "insert into loan_creditext_variety values(?,?,?,?)";
		boolean isInserted = false;
		String supercode = info.getSuperCode();
		String code = info.getCode();
		if(supercode != null && !supercode.equals("")){
			if(code == null || !code.equals(getNextCode(supercode)) || code.equals(""))
				code = getNextCode(supercode);
		}
		try {
			conn = Database.getConnection();
			pstmt = conn.prepareStatement(strSQL);
			pstmt.setString(1,code);
			pstmt.setString(2,info.getName());
			pstmt.setInt(3,info.getPredefined());
			pstmt.setString(4,info.getRemark());
			pstmt.executeUpdate();
			isInserted = true;
		} catch (Exception e) {
			log4j.error(e.toString());
			e.printStackTrace();
			throw e;
		}
		finally{
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
			if(conn != null){
				conn.close();
				conn = null;
			}
		}
		return isInserted;
	}
	
	/**
	 * 删除一项授信品种
	 * Create Date : 2006-10-13
	 * @param code
	 * @return
	 * @throws SQLException
	 */
	public boolean delete(String code) throws Exception {
		String strSQL = "delete from loan_creditext_variety where npredefined=1 and scode=?";
		boolean isDeleted = false;
		try{
			conn = Database.getConnection();
			pstmt = conn.prepareStatement(strSQL);
			pstmt.setString(1,code);
			pstmt.executeUpdate();
			isDeleted = true;
		}catch(Exception e){
			log4j.error(e.toString());
			e.printStackTrace();
			throw e;
		}
		finally{
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
			if(conn != null){
				conn.close();
				conn = null;
			}
		}
		return isDeleted;
	}
	
	/**
	 * 判断该授信品种是否被使用
	 * Create Date : 2006-10-13
	 * @param code
	 * @return
	 */
	public boolean isUsed(String code) {
		return true;
	}
	
	/**
	 * 修改授信品种信息
	 * Create Date : 2006-10-13
	 * @param info
	 * @return
	 * @throws SQLException
	 */
	public boolean modify(VarietyInfo info) throws Exception {
		String strSQL = "update loan_creditext_variety set sname=?,sremark=? where npredefined=1 and scode=?";
		boolean isModified = false;
		try{
			conn = Database.getConnection();
			pstmt = conn.prepareStatement(strSQL);
			pstmt.setString(1,info.getName());
			pstmt.setString(2,info.getRemark());
			pstmt.setString(3,info.getCode());
			pstmt.executeUpdate();
			isModified = true;
		}catch(Exception e){
			log4j.error(e.toString());
			e.printStackTrace();
			throw e;
		}
		finally{
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
			if(conn != null){
				conn.close();
				conn = null;
			}
		}
		return isModified;
	}
	
	/**
	 * 获得下一个可用的授信品种编号
	 * Create Date : 2006-10-13
	 * @param superCode
	 * @return
	 * @throws SQLException
	 */
	public String getNextCode(String superCode) throws Exception {
		String strSQL = "select scode from loan_creditext_variety where scode like ?";
		String sCode = null;
		try{
			conn = Database.getConnection();
			pstmt = conn.prepareStatement(strSQL);
			pstmt.setString(1,superCode + "%");
			rs = pstmt.executeQuery();
			int iCode = 0;
			while(rs.next()){
				String scode = rs.getString("scode");
				if(scode.equals(superCode)){
					iCode = 0;
				}
				else{
					String strTemp = scode.substring(superCode.length(),superCode.length() + 2);
					if(strTemp != null && !strTemp.equals("")){
						int iTemp = Integer.parseInt(strTemp);
						if(iCode < iTemp){
							iCode = iTemp;
						}
					}
				}
			}
			iCode += 1;
			sCode = "" + iCode;
			if(sCode.length() < 2){
				sCode = "0" + sCode;
			}
		}catch(Exception e){
			log4j.error(e.toString());
			e.printStackTrace();
			throw e;
		}finally{
			if(rs != null){
				rs.close();
				rs = null;
			}
			if(pstmt != null){
				pstmt.close();
				pstmt = null;
			}
			if(conn != null){
				conn.close();
				conn = null;
			}
		}
		return superCode + sCode;
	}
	
}