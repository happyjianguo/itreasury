package com.iss.itreasury.loan.loanpaynotice.bizlogic;


import javax.ejb.EJBObject;
import java.rmi.RemoteException;
import java.security.Identity;
import javax.ejb.*;
import java.util.*;
import java.sql.*;

import com.iss.itreasury.loan.loanpaynotice.dataentity.*;
import com.iss.itreasury.util.*;
/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */

public interface LoanPayNotice extends EJBObject {

	/**
	 * 提交、修改放款通知单，操作loan_payform
	 * @param lpninfo 放款通知单信息
	 * <br>新增LoanPayNotice信息,ID取最大值
	 */													
	public long saveLoanPayNotice(LoanPayNoticeInfo lpninfo)throws RemoteException, IRollbackException;																				
 
	/**
	 * 查找放款通知单，查找loan_payform
	 * <br>如果lContractID后面的参数的值合法，做查询条件；否则不做查询条件。
	 * @param lCurrencyID 币种标识
	 * @param lOfficeID 办事处标识
	 * @param lUserID 查询人
	 * @param lActionID 动作，提交或者复核
	 * @param lContractID 合同标识
	 * @param lClientID 借款单位标识
	 * @param dAmountFrom 金额(由)
	 * @param dAmountTo 金额(到)
	 * @param tsDateFrom 提交日期起始
	 * @param tsDateTo 提交日期结束
	 * @param lStatusID 放款通知单状态
	 */
	public Collection findLoanPayNoticeByMultiOption(
						long lCurrencyID,
						long lOfficeID,
						long lUserID, 
						long lActionID,
						long lContractID,
						long lClientID,
						double dAmountFrom,
						double dAmountTo,
						Timestamp tsDateFrom,
						Timestamp tsDateTo,
                        long lStatusID,
                        long lPageLineCount,
                        long lPageNo,
                        long lOrderParam,
                        long lDesc
    ) throws RemoteException;
    
																					
	/**
	 * 通过一个放款通知单，操作LoanPayNotice表
	 * <br>审核放款通知单（包括拒绝、返回修改）
	 * @param lLoanPayNoticeID 放款通知单标识
	 * @param sOpinion 审核意见
	 * @param lUserID 审核人
	 * @param lNextUserID 下一级审核人
	 * @param lActionID 操作标示
	 *		  1：审核通过
	 *		  2：最后一级审核通过
	 *		  3：返回修改
	 *		  4：拒绝
	 */																					
	public long checkLoanPayNotice(
		long lLoanPayNoticeID,
		String sOpinion,
		long lUserID,
		long lNextUserID,
		long lActionID,
		long lCurrencyID,
		long lOfficeID
	) throws RemoteException, IRollbackException;																						
	

  /**
   * 取消放款通知单，
   * @param lLoanPayNoticeID 放款通知单标识
   */
  public long cancelLoanPayNotice(long lLoanPayNoticeID,long lCurrencyID,long lOfficeID) throws IException, RemoteException ;

  
  /**
  * 查找放款通知单
  * @param lLoanPayNoticeID 放款通知单标识
  */     
  public LoanPayNoticeInfo findLoanPayNoticeByID(long lLoanPayNoticeID) throws RemoteException;
  
  //public double getLatelyRate(long lContractID,long lOfficeID) throws RemoteException ;
  
  public long initApproval(LoanPayNoticeInfo lpninfo) throws RemoteException,IRollbackException;
  
  public long doApproval(LoanPayNoticeInfo lpninfo)throws RemoteException, IRollbackException;
  
  public long doApprovalYT(LoanPayNoticeInfo lpninfo)throws RemoteException, IRollbackException;
  
  public long cancelApproval(LoanPayNoticeInfo loanInfo)throws RemoteException, IRollbackException;
  
  public double checkPayNotice(long lContractID, double amount, long isCircle,long nLoannoteId )throws RemoteException;
  
}
