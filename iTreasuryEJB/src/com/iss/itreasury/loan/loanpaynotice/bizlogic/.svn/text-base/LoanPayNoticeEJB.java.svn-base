package com.iss.itreasury.loan.loanpaynotice.bizlogic;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.ebank.util.OBConstant;
import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.loandrawnotice.dao.LoanDrawNoticeDao;
import com.iss.itreasury.loan.loanpaynotice.dao.LoanPayNoticeDao;
import com.iss.itreasury.loan.loanpaynotice.dataentity.LoanPayNoticeInfo;
import com.iss.itreasury.loan.obinterface.dao.OBPayNoticeDao;
import com.iss.itreasury.loan.setting.dao.LoanTypeRelationDao;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.loan.util.LOANNameRef;
import com.iss.itreasury.settlement.transcurrentdeposit.dao.Sett_TransCurrentDepositDAO;
import com.iss.itreasury.settlement.transcurrentdeposit.dataentity.TransCurrentDepositAssembler;
import com.iss.itreasury.settlement.transcurrentdeposit.dataentity.TransCurrentDepositInfo;
import com.iss.itreasury.settlement.util.NameRef;
import com.iss.itreasury.settlement.util.SETTConstant;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.system.logger.dataentity.LoggerBtnLevelInfo;
import com.iss.itreasury.system.logger.dataentity.LoggerResults;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;


/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */

public class LoanPayNoticeEJB implements SessionBean
{
	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */

	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context)
	{
		this.context = context;
	}

	private SessionContext context;
	private static Log4j log4j = null;
	/**
	 * No argument constructor required by container.
	 */
	public LoanPayNoticeEJB()
	{
		log4j = new Log4j(Constant.ModuleType.SETTLEMENT, this);
	}

	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate()
	{
	}

	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate()
	{
	}

	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate()
	{
	}

	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove()
	{
	}

	/**
	 * 查找放款通知单
	 * @param lLoanPayNoticeID 放款通知单标识
	 */
	public LoanPayNoticeInfo findLoanPayNoticeByID(long lLoanPayNoticeID) throws RemoteException
	{
		LoanPayNoticeInfo info = new LoanPayNoticeInfo();
		try
		{
			LoanPayNoticeDao loanPayNoticeDao = new LoanPayNoticeDao();
			info = loanPayNoticeDao.findLoanPayNoticeByID(lLoanPayNoticeID);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new RemoteException("Gen_E001");
		}
		return info;
	}

	//
	/**
	 * 查找放款通知单，查找loan_payform
	 * <br>如果lContractID后面的参数的值合法，做查询条件；否则不做查询条件。
	 * @param lCurrencyID 币种标识
	 * @param lOfficeID 办事处标识
	 * @param lUserID 查询人
	 * @param lActionID 动作，提交或者复核
	 * @param lContractID 合同标识
	 * @param lClientID 借款单位标识
	 * @param dAmountFrom 金额(由)
	 * @param dAmountTo 金额(到)
	 * @param tsDateFrom 提交日期起始
	 * @param tsDateTo 提交日期结束
	 * @param lStatusID 放款通知单状态
	 */
	public Collection findLoanPayNoticeByMultiOption(
		long lCurrencyID,
		long lOfficeID,
		long lUserID,
		long lActionID,
		long lContractID,
		long lClientID,
		double dAmountFrom,
		double dAmountTo,
		Timestamp tsDateFrom,
		Timestamp tsDateTo,
		long lStatusID,
		long lPageLineCount,
		long lPageNo,
		long lOrderParam,
		long lDesc)
		throws RemoteException
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		PreparedStatement ps1 = null;
		ResultSet rs1 = null;
		Connection con = null;
		String strSelect = null;
		String strSQL = null;
		String strOrder = null;

		Vector v = new Vector();
		long lRecordCount = -1;
		long lPageCount = -1;
		long lRowNumStart = -1;
		long lRowNumEnd = -1;

		try
		{

			con = Database.getConnection();

			//计算记录总数
			strSelect = " select count(*) ";
			strSQL = "  from loan_payform aa, loan_contractform bb,client cc,loan_yt_drawform dd ";
			strSQL += " where aa.ncontractid = bb.id(+) ";
			strSQL += " and bb.nborrowclientid = cc.id(+) ";
			strSQL += " and aa.NDRAWNOTICEID = dd.id(+) ";

			//////////////////////查询条件////////////////////////////////////////////////////
			if (lOfficeID != -1)
			{
				strSQL = strSQL + " and bb.nOfficeID = " + lOfficeID;
			}
			if (lCurrencyID != -1)
			{
				strSQL = strSQL + " and bb.nCurrencyID = " + lCurrencyID;
			}
			if (lOfficeID != -1)
			{
				strSQL = strSQL + " and aa.nOfficeID = " + lOfficeID;
			}
			if (lCurrencyID != -1)
			{
				strSQL = strSQL + " and aa.nCurrencyID = " + lCurrencyID;
			}
			/*if (lCurrencyID != -1) {
			 strSQL = strSQL + " and ee.nCurrencyID = " + lCurrencyID;
			 //strSQL = strSQL + " and ff.nCurrencyID = " + lCurrencyID;
			    }*/
			if (lClientID != -1)
			{
				strSQL = strSQL + " and bb.NBORROWCLIENTID = " + lClientID;
			}
			if (lContractID != -1)
			{
				strSQL = strSQL + " and aa.nContractID =" + lContractID;
			}
			if (dAmountFrom > 0)
			{
				strSQL = strSQL + " and aa.mAmount >= " + dAmountFrom;
			}
			if (dAmountTo > 0)
			{
				strSQL = strSQL + " and aa.mAmount <= " + dAmountTo;
			}
			if (tsDateFrom != null)
			{
				strSQL = strSQL + " and to_char(aa.dtInputDate,'yyyy-mm-dd') >= '" + DataFormat.getDateString(tsDateFrom) + "'";
			}
			if (tsDateTo != null)
			{
				strSQL = strSQL + " and to_char(aa.dtInputDate,'yyyy-mm-dd') <= '" + DataFormat.getDateString(tsDateTo) + "'";
			}
			//修改查询
			if (lActionID == 1)
			{
				strSQL += " and aa.NDRAWNOTICEID <= 0";

				if (lUserID != -1 && lStatusID == LOANConstant.LoanPayNoticeStatus.SUBMIT)
				{
					//strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.NNEXTCHECKUSERID = " + lUserID + " and aa.nStatusID = " + LOANConstant.LoanPayNoticeStatus.SUBMIT;
				    strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.nNextCheckLevel = 1 and aa.nStatusID = " + LOANConstant.LoanPayNoticeStatus.SUBMIT;
				}
				if (lUserID != -1 && lStatusID == LOANConstant.LoanPayNoticeStatus.CHECK)
				{
					strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.LoanPayNoticeStatus.CHECK;
				}
				if (lUserID != -1 && lStatusID == -1)
				{
					strSQL =
						strSQL
							+ " and (( aa.nInputUserID = "
							+ lUserID
							+ " and aa.nNextCheckLevel = 1 "
							+ " and aa.nStatusID = "
							+ LOANConstant.LoanPayNoticeStatus.SUBMIT
							+ " ) or ( aa.nInputUserID = "
							+ lUserID
							+ " and aa.nStatusID = "
							+ LOANConstant.LoanPayNoticeStatus.CHECK
							+ " )) ";
				}
			}
			//审核查询
			else if (lActionID == 2)
			{
				ApprovalDelegation appBiz = new ApprovalDelegation();
 
				//String strUser = appBiz.findTheVeryUser(Constant.ModuleType.LOAN, Constant.ApprovalLoanType.OTHER, Constant.ApprovalAction.LOANPAY_NOTICE,lOfficeID,lCurrencyID, lUserID);
				strSQL += " and aa.NDRAWNOTICEID <= 0";
				//没有 “贴现“、“担保“、“转贴现”、“融资租赁”、“银团”贷款类型
				LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
				long[] loanTypeId = {LOANConstant.LoanType.ZY,LOANConstant.LoanType.WT,
						LOANConstant.LoanType.ZGXE,LOANConstant.LoanType.MFXD,
						LOANConstant.LoanType.OTHER
				}; 
				String strUser = null;
				long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(
				lOfficeID,lCurrencyID, loanTypeId );
				if (a_SubLoanType != null && a_SubLoanType.length > 0) {
					strSQL += " and ( ";
					for (int i = 0; i < a_SubLoanType.length; i++) {
						strUser  =	 appBiz.findTheVeryUser(Constant.ModuleType.LOAN,
							a_SubLoanType[i], Constant.ApprovalAction.LOANPAY_NOTICE,lOfficeID,lCurrencyID,lUserID);
						if (strUser != null && strUser.length() > 0 && lStatusID == LOANConstant.LoanPayNoticeStatus.SUBMIT)
						{
							strSQL += " ( aa.NSTATUSID = " + LOANConstant.LoanPayNoticeStatus.SUBMIT + " and aa.NNEXTCHECKUSERID in " + strUser+" ) ";
						}
						if (strUser != null && strUser.length() > 0 && lStatusID == LOANConstant.LoanPayNoticeStatus.CHECK)
						{
							strSQL += "  aa.NSTATUSID = " + LOANConstant.LoanPayNoticeStatus.CHECK + " ) ";
							break;
						}
						if (strUser != null && strUser.length() > 0 && lStatusID == LOANConstant.LoanPayNoticeStatus.USED)
						{
							strSQL += " aa.NSTATUSID = " + LOANConstant.LoanPayNoticeStatus.USED + " ) ";
							break;
						}
						if (lUserID > 0 && (lStatusID <= 0 || lStatusID > 4))
						{
							strSQL += " ( ((aa.NSTATUSID = "
								+ LOANConstant.LoanPayNoticeStatus.SUBMIT
								+ " and aa.NNEXTCHECKUSERID in "
								+ strUser
								+ ") or (aa.NSTATUSID = "
								+ LOANConstant.LoanPayNoticeStatus.CHECK
								+ ") or (aa.NSTATUSID = "
								+ LOANConstant.LoanPayNoticeStatus.USED
								+ ")))";
						}
						if (i < a_SubLoanType.length - 1)
							strSQL += " or ";
						else
							strSQL += " ) ";
						}
				} else {
					return null;
				}
				
				if (lStatusID > 0)
				{
					strSQL += " and aa.nStatusID = " + lStatusID;
				}
				else
				{
					strSQL += " and aa.nStatusID in ( " + LOANConstant.LoanPayNoticeStatus.CHECK + "," + LOANConstant.LoanPayNoticeStatus.SUBMIT + "," + LOANConstant.LoanPayNoticeStatus.USED + ")";
				}

			}
			else if (lActionID == 3) //银团放款修改查询
			{
				strSQL += " and aa.NDRAWNOTICEID > 0";
				if (lUserID != -1 && lStatusID == LOANConstant.LoanPayNoticeStatus.SUBMIT)
				{
					strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.NNEXTCHECKUSERID = " + lUserID + " and aa.nStatusID = " + LOANConstant.LoanPayNoticeStatus.SUBMIT;
				}
				if (lUserID != -1 && lStatusID == LOANConstant.LoanPayNoticeStatus.CHECK)
				{
					strSQL = strSQL + " and aa.nInputUserID = " + lUserID + " and aa.nStatusID = " + LOANConstant.LoanPayNoticeStatus.CHECK;
				}
				if (lUserID != -1 && lStatusID == -1)
				{
					strSQL =
						strSQL
							+ " and (( aa.nInputUserID = "
							+ lUserID
							+ " and aa.NNEXTCHECKUSERID = "
							+ lUserID
							+ " and aa.nStatusID = "
							+ LOANConstant.LoanPayNoticeStatus.SUBMIT
							+ " ) or ( aa.nInputUserID = "
							+ lUserID
							+ " and aa.nStatusID = "
							+ LOANConstant.LoanPayNoticeStatus.CHECK
							+ " )) ";
				}
			}
			//审核查询
			else if (lActionID == 4)
			{
				ApprovalDelegation appBiz = new ApprovalDelegation();
				LoanTypeRelationDao loanTypeDao = new LoanTypeRelationDao();
				String strUser = appBiz.findTheVeryUser(Constant.ModuleType.LOAN, Constant.ApprovalLoanType.OTHER, Constant.ApprovalAction.LOANPAY_NOTICE,lOfficeID,lCurrencyID, lUserID);	
				/*
				String strUser = null;1245
				long[] a_SubLoanType = loanTypeDao.getAllSetSubLoanTypeID(lOfficeID,lCurrencyID,new long[]{qInfo.getTypeID()});
				if(a_SubLoanType!=null && a_SubLoanType.length>0)
				{
					strUser = " ( " ;
					for(int i=0 ; i<a_SubLoanType.length ; i++)
					{
						strUser = strUser
									+ " (a.nNextCheckUserID in "+appBiz.findTheVeryUser(Constant.ModuleType.LOAN, a_SubLoanType[i], Constant.ApprovalAction.LOAN_APPLY,lOfficeID,lCurrencyID, lUserID)
									+ " and a.NSUBTYPEID = "+a_SubLoanType[i]+ ")";
						if(i < a_SubLoanType.length-1)
							strUser += " or ";
						else
							strUser += " ) ";
					}	
				}
				*/
				strSQL += " and aa.NDRAWNOTICEID > 0";

				if (strUser != null && strUser.length() > 0 && lStatusID == LOANConstant.LoanPayNoticeStatus.SUBMIT)
				{
					strSQL += " and aa.NSTATUSID = " + LOANConstant.LoanPayNoticeStatus.SUBMIT + " and aa.NNEXTCHECKUSERID in " + strUser;
				}
				if (strUser != null && strUser.length() > 0 && lStatusID == LOANConstant.LoanPayNoticeStatus.CHECK)
				{
					strSQL += " and aa.NSTATUSID = " + LOANConstant.LoanPayNoticeStatus.CHECK;
				}
				if (strUser != null && strUser.length() > 0 && lStatusID == LOANConstant.LoanPayNoticeStatus.USED)
				{
					strSQL += " and aa.NSTATUSID = " + LOANConstant.LoanPayNoticeStatus.USED;
				}
				if (lUserID > 0 && (lStatusID <= 0 || lStatusID > 4))
				{
					strSQL += " and ((aa.NSTATUSID = "
						+ LOANConstant.LoanPayNoticeStatus.SUBMIT
						+ " and aa.NNEXTCHECKUSERID in "
						+ strUser
						+ ") or (aa.NSTATUSID = "
						+ LOANConstant.LoanPayNoticeStatus.CHECK
						+ ") or (aa.NSTATUSID = "
						+ LOANConstant.LoanPayNoticeStatus.USED
						+ "))";
				}
				if (lStatusID > 0)
				{
					strSQL += " and aa.nStatusID = " + lStatusID;
				}
				else
				{
					strSQL += " and aa.nStatusID in ( " + LOANConstant.LoanPayNoticeStatus.CHECK + "," + LOANConstant.LoanPayNoticeStatus.SUBMIT + "," + LOANConstant.LoanPayNoticeStatus.USED + ")";
				}

			}

			System.out.println(strSelect + strSQL);
			ps = con.prepareStatement(strSelect + strSQL);
			rs = ps.executeQuery();

			if (rs != null && rs.next())
			{
				lRecordCount = rs.getLong(1);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			lPageCount = lRecordCount / lPageLineCount;

			if ((lRecordCount % lPageLineCount) != 0)
			{
				lPageCount++;
			}

			//排序处理
			switch ((int) lOrderParam)
			{
				case 1 :
					strSQL += " order by aa.sCode ";
					break;
				case 2 :
					strSQL += " order by bb.sContractCode ";
					break;
				case 3 :
					strSQL += " order by cc.sname ";
					break;
				case 4 :
					strSQL += " order by bb.mexamineamount ";
					break;
				case 5 :
					strSQL += " order by aa.mAmount ";
					break;
				case 6 :
					strSQL += " order by aa.dtOutDate ";
					break;
				case 7 :
					strSQL += " order by aa.dtend ";
					break;
				case 8 :
					strSQL += " order by aa.dtInputDate ";
					break;
				case 9 :
					strSQL += " order by aa.nStatusID ";
					break;
				case 10 :
					strSQL += " order by bb.sContractCode,dd.sCode ";
					break;

				default :
					strSQL += " order by bb.sContractCode,aa.sCode ";
			}

			if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				strSQL += " desc";
			}

			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//返回需求的结果集
			lRowNumStart = (lPageNo - 1) * lPageLineCount + 1;
			lRowNumEnd = lRowNumStart + lPageLineCount - 1;
			strSQL = " select aa.*,dd.scode as sDrawCode,bb.scontractcode," + " cc.sname as sBorrowClientName,bb.mexamineamount" + strSQL;
			strSQL = " select a.*, rownum r from " + " ( " + strSQL + " ) a ";
			strSQL = " select * from ( " + strSQL + " ) b  where b.r between " + lRowNumStart + " and " + lRowNumEnd;
			System.out.println(strSQL);
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			while (rs != null && rs.next())
			{
				LoanPayNoticeInfo info = new LoanPayNoticeInfo();

				info.setID(rs.getLong("ID"));
				info.setContractID(rs.getLong("nContractID"));
				info.setDrawNoticeID(rs.getLong("NDRAWNOTICEID"));
				info.setPageCount(lPageCount);

				//以下是链接查找－修改所需要显示的字段
				info.setCode(rs.getString("sCode"));
				info.setDrawNoticeCode(rs.getString("sDrawCode"));
				info.setContractCode(rs.getString("sContractCode"));
				info.setLoanClientName(rs.getString("sBorrowClientName"));
				info.setLoanAmount(rs.getDouble("mexamineamount"));
				info.setAmount(rs.getDouble("mAmount"));
				info.setOutDate(rs.getTimestamp("dtOutDate"));
				info.setEnd(rs.getTimestamp("dtend"));
				info.setInputDate(rs.getTimestamp("dtInputDate"));
				info.setStatusID(rs.getLong("nStatusID"));
				info.setNextCheckLevel(rs.getLong("nNextCheckLevel"));
				
				info.setCount(lRecordCount);
				v.add(info);
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		}
		catch (Exception e)
		{
			//System.out.println(e.toString ());
			e.printStackTrace();
			throw new RemoteException(e.getMessage());
		}
		finally
		{
			try
			{
				if (rs1 != null)
				{
					rs1.close();
					rs1 = null;
				}
				if (ps1 != null)
				{
					ps1.close();
					ps1 = null;
				}
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}
		return (v.size() > 0 ? v : null);

	}

	/**
	 * 提交、修改放款通知单，操作loan_payform
	 * @param lpninfo 放款通知单信息
	 * <br>新增LoanPayNotice信息,ID取最大值
	 * @throws IRollbackException 
	 */
	public long saveLoanPayNotice(LoanPayNoticeInfo lpninfo) throws RemoteException, IRollbackException
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		long lMaxID = 0;
		long lResult = 0;
		double unPayAmount = 0.0;
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		try {
			logInfo.setBusinessType(Constant.ApprovalAction.getName(Constant.ApprovalAction.LOANPAY_NOTICE) );
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		if(lpninfo.getID()>0){
			logInfo.setTransCode(NameRef.getCodeByPayID(lpninfo.getID()));
		}
        // add by jbpan 20120607 end
		try
		{
			con = Database.getConnection();
			
            //Add Boxu 208年3月11日 并发处理
            if(lpninfo.getContractID() <= 0)
            {
            	throw new IException("合同ID为空"); 
            }
            ContractDao contractDao = new ContractDao();
            unPayAmount = contractDao.findUnPayAmountByID(lpninfo.getContractID(),lpninfo.getID());
            if(lpninfo.getAmount() > unPayAmount)
            {
        	    throw new IException("本次发放金额大于合同未录入放款单金额 " + DataFormat.formatDisabledAmount(unPayAmount)); 
            }
			
			//如果是新增
			if (lpninfo.getID() < 0)
			{
				//add by jbpan 20120607 操作日志-操作类型-创建保存
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.CREATESAVE);
				//获得最大ID＋1
				strSQL = " select Seq_Loan_PayFrm_DiscountCred.Nextval from dual ";
				System.out.println("here333" + strSQL);
				ps = con.prepareStatement(strSQL);
				//log4j.info("sql="+strSQL);
				rs = ps.executeQuery();
				if (rs.next())
				{
					lMaxID = rs.getLong(1);
					lResult = lMaxID;
					rs.close();
					rs = null;
					ps.close();
					ps = null;
				}
				else
				{
					rs.close();
					rs = null;
					ps.close();
					ps = null;
					con.close();
					con = null;
					return -1;
				}
				//获得放款通知单编号
				lpninfo.setCode(getPayNoticeCode(lpninfo.getContractID()));
				//进行插入操作
				strSQL =
					"insert into loan_payform(id,scode,nContractID,dtOutDate,"
						+ "mamount,sConsignAccount,nBankInterestID,mCommissionRate,"
						+ "mSuretyFeeRate,dtStart,dtEnd,sReceiveClientName,"
						+ "sReceiveAccount,sRemitBank,sCompanyLeader,sHandlingPerson,"
						+ "sDepartmentLeader,nStatusID,nInputUserID,dtInputDate,"
						+ "nNextCheckUserID,nSourceTypeID,nGrantCurrentAccountID,"
						+ "nGrantTypeID,"
						+ "sRemitinProvince,sRemitincity,"
						+ "nDrawNoticeID,sLoanAccount,sCheckPerson,naccountbankid,"
						+ "minterestrate,MSTAIDADJUSTRATE,MADJUSTRATE,nNextCheckLevel,"
						+ "nInterestTypeID,nLiborRateID"
						+ ",nCurrencyID,nOfficeID,nIntervalNoticeNum,isRemitCompoundInterest,isRemitOverDueInterest,overDueAdjustRate,overDueStaidAdjustRate "
						+ ") values"
						+ "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,1,?,?,?,?,?,?,?,?,?)";
				System.out.println("sql=" + strSQL);
				ps = con.prepareStatement(strSQL);

				ps.setLong(1, lMaxID);
				ps.setString(2, lpninfo.getCode());
				ps.setLong(3, lpninfo.getContractID());
				ps.setTimestamp(4, lpninfo.getOutDate());
				ps.setDouble(5, lpninfo.getAmount());
				ps.setString(6, lpninfo.getConsignAccount());
				ps.setLong(7, lpninfo.getBankInterestID());
				ps.setDouble(8, lpninfo.getCommissionRate());
				ps.setDouble(9, lpninfo.getSuretyFeeRate());
				ps.setTimestamp(10, lpninfo.getStart());
				ps.setTimestamp(11, lpninfo.getEnd());
				ps.setString(12, lpninfo.getReceiveClientName());
				ps.setString(13, lpninfo.getReceiveAccount());
				ps.setString(14, lpninfo.getRemitBank());
				ps.setString(15, lpninfo.getCompanyLeader());
				ps.setString(16, lpninfo.getHandlingPerson());
				ps.setString(17, lpninfo.getDepartmentLeader());
				ps.setLong(18, LOANConstant.LoanPayNoticeStatus.SUBMIT);
				//装态已提交
				ps.setLong(19, lpninfo.getInputUserID());
				ps.setTimestamp(20, lpninfo.getInputDate());
				ps.setLong(21, lpninfo.getNextCheckUserID());
				ps.setLong(22, LOANConstant.LoanPayNoticeModifySourceType.XD);
				//信贷
				ps.setLong(23, lpninfo.getGrantCurrentAccountID());
				ps.setLong(24, lpninfo.getGrantTypeID());
				//ps.setLong(25,lpninfo.getRemitoutBankID());
				//ps.setString(26,lpninfo.getRemitinAccountNo());
				ps.setString(25, lpninfo.getRemitinProvince());
				ps.setString(26, lpninfo.getRemitinCity());
				//ps.setLong(29,lpninfo.getRemitinBankID());
				//ps.setLong(30,lpninfo.getCashFlowID());
				ps.setLong(27, lpninfo.getDrawNoticeID());
				ps.setString(28, lpninfo.getLoanAccount());
				ps.setString(29, lpninfo.getCheckPerson());
				ps.setLong(30, lpninfo.getAccountBankID());
				ps.setDouble(31, lpninfo.getWTInterestRate());
				
				ps.setDouble(32, lpninfo.getStaidAdjustRate());
				ps.setDouble(33, lpninfo.getAdjustRate());
				ps.setLong(34, lpninfo.getInterestTypeID());
				ps.setLong(35, lpninfo.getLiborRateID());
				ps.setLong(36, lpninfo.getCurrencyID());
				ps.setLong(37, lpninfo.getOfficeID());
				ps.setDouble(38, lpninfo.getIntervalNoticeNum());
				ps.setLong(39, lpninfo.getIsRemitCompoundInterest());
				ps.setLong(40, lpninfo.getIsRemitOverDueInterest());
				ps.setDouble(41, lpninfo.getOverDueAdjustRate());
				ps.setDouble(42, lpninfo.getOverDueStaidAdjustRate());
				ps.executeUpdate();
				ps.close();
				ps = null;
				
				lpninfo.setID(lMaxID);
			}
			else //如果是更新操作
				{
				//首先，删除以前的审核记录（物理删除)
				//ApprovalDelegation appbiz = new ApprovalDelegation();
				//lpninfo.setApprovalID(getApprovalID(lpninfo.getModuleID(),lpninfo.getLoanTypeID(),lpninfo.getActionID()));
				//appbiz.deleteApprovalTracing(lpninfo.getApprovalID(),lpninfo.getID(),1);
				//add by jbpan 20120607 操作日志-操作类型-修改保存
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.MODIFYSAVE);
				//进行update操作
				strSQL = "UPDATE loan_payform set "
						+ "dtOutDate = ? ,mamount = ? ,sConsignAccount = ? ,nBankInterestID = ? ,mCommissionRate = ? ,"
						+ "mSuretyFeeRate = ? ,dtStart = ? ,dtEnd = ? ,sReceiveClientName = ? ,sReceiveAccount = ? ,"
						+ "sRemitBank = ? ,sCompanyLeader = ? ,sHandlingPerson = ? ,sDepartmentLeader = ? ,nStatusID = ? ,"
						+ "nInputUserID = ? ,dtInputDate = ? ,nNextCheckUserID = ? ,nSourceTypeID = ? ,nGrantCurrentAccountID = ? ,"
						+ "nGrantTypeID = ? ,sRemitinProvince = ? ,sRemitincity = ? ,nDrawNoticeID = ? ,sLoanAccount = ? ,"
						+ "sCheckPerson = ? ,naccountbankid = ? ,minterestrate = ? ,MSTAIDADJUSTRATE = ? ,MADJUSTRATE = ? ,"
						+ "nInterestTypeID = ? ,nLiborRateID = ? ,nIntervalNoticeNum = ?, isRemitCompoundInterest = ?,isRemitOverDueInterest = ?, overDueAdjustRate = ?, overDueStaidAdjustRate = ? "
						+ "where id = ?";
				ps = con.prepareStatement(strSQL);
				ps.setTimestamp(1, lpninfo.getOutDate());
				ps.setDouble(2, lpninfo.getAmount());
				ps.setString(3, lpninfo.getConsignAccount());
				ps.setLong(4, lpninfo.getBankInterestID());
				ps.setDouble(5, lpninfo.getCommissionRate());
				ps.setDouble(6, lpninfo.getSuretyFeeRate());
				ps.setTimestamp(7, lpninfo.getStart());
				ps.setTimestamp(8, lpninfo.getEnd());
				ps.setString(9, lpninfo.getReceiveClientName());
				ps.setString(10, lpninfo.getReceiveAccount());
				ps.setString(11, lpninfo.getRemitBank());
				ps.setString(12, lpninfo.getCompanyLeader());
				ps.setString(13, lpninfo.getHandlingPerson());
				ps.setString(14, lpninfo.getDepartmentLeader());
				ps.setLong(15, LOANConstant.LoanPayNoticeStatus.SUBMIT); //装态已提交
				ps.setLong(16, lpninfo.getInputUserID());
				ps.setTimestamp(17, lpninfo.getInputDate());
				ps.setLong(18, lpninfo.getNextCheckUserID());
				ps.setLong(19, LOANConstant.LoanPayNoticeModifySourceType.XD);
				ps.setLong(20, lpninfo.getGrantCurrentAccountID());
				ps.setLong(21, lpninfo.getGrantTypeID());
				ps.setString(22, lpninfo.getRemitinProvince());
				ps.setString(23, lpninfo.getRemitinCity());
				ps.setLong(24, lpninfo.getDrawNoticeID());
				ps.setString(25, lpninfo.getLoanAccount());
				ps.setString(26, lpninfo.getCheckPerson());
				ps.setLong(27, lpninfo.getAccountBankID());
				ps.setDouble(28, lpninfo.getWTInterestRate());
				ps.setDouble(29, lpninfo.getStaidAdjustRate());
				ps.setDouble(30, lpninfo.getAdjustRate());
				ps.setLong(31, lpninfo.getInterestTypeID());
				ps.setLong(32, lpninfo.getLiborRateID());
				ps.setDouble(33, lpninfo.getIntervalNoticeNum());
				ps.setLong(34, lpninfo.getIsRemitCompoundInterest());
				ps.setLong(35, lpninfo.getIsRemitOverDueInterest());
				ps.setDouble(36, lpninfo.getOverDueAdjustRate());
				ps.setDouble(37, lpninfo.getOverDueStaidAdjustRate());
				ps.setLong(38, lpninfo.getID());
				ps.executeUpdate();
				lResult = lpninfo.getID();
				ps.close();
				ps = null;

			}
			
			if (con != null)
			{
				con.close();
				con = null;
			}

			//added by mzh_fu 2007/08/16			
			//更新银团提款通知单状态
			LoanPayNoticeDao loanPayNoticeDao = new LoanPayNoticeDao();
			if (loanPayNoticeDao.findLoanTypeByPayNoticeId(lResult) == LOANConstant.LoanType.YT) {
				
				if(lpninfo.getDrawNoticeID() <= 0)
					throw new IRollbackException(context,"未找到相应的提款通知单");
				
				new LoanPayNoticeDao().updateYTDrawNoticeStatusById(lpninfo
						.getDrawNoticeID(),
						LOANConstant.LoanDrawNoticeStatus.USED);
			}
			
			saveExternalAccount(lpninfo);
						
			//审批流 added by mzh_fu 2007/06/18
			if(lpninfo.getInutParameterInfo()!=null)
			{		
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.SAVEANDINITAPPROVAL);
				InutParameterInfo inutParameterInfo = lpninfo.getInutParameterInfo();
				
				inutParameterInfo.setTransID(String.valueOf(lResult));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+lResult);
				inutParameterInfo.setDataEntity(lpninfo);
	
				//提交审批
				FSWorkflowManager.initApproval(inutParameterInfo);
				
				//更新状态到审批中
				new LoanPayNoticeDao().updateStatus(lResult,LOANConstant.LoanPayNoticeStatus.APPROVALING);			
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context,"保存失败，原因：" + e.getMessage(),e);
		}
		finally
		{
			// add by jbpan 20120607 操作日志 start
			if(logInfo.getTransCode().equals("")){
				logInfo.setTransCode(NameRef.getCodeByPayID(lpninfo.getID()));
			}
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			// add by jbpan 20120607 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new IRollbackException(context,"保存失败",ex);
			}
		}
		return lResult;
	}

	/**
	 * 取消放款通知单，
	 * @param     long        lModuleIDID           模块
	 * @param     long        lLoanTypeID           类型
	 * @param     long        lActionID             操作
	 * @param lLoanPayNoticeID : loan_payform.ID
	 * @param lLoanPayNoticeID 放款通知单标识
	 */
	public long cancelLoanPayNotice(long lLoanPayNoticeID,long lCurrencyID,long lOfficeID) throws IException, RemoteException
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;

		long lStatusID = -1;
		long lResult = -1;
		long lYTDrawNoticeId = -1;

		//定义相应操作常量
		//贷款
		long lModuleID = Constant.ModuleType.LOAN;
		//模块类型
		long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		long lActionID = Constant.ApprovalAction.LOANPAY_NOTICE;

		long lApprovalID = -1;
		ApprovalDelegation appbiz = new ApprovalDelegation();
		// add by jbpan 20120607 操作日志 start
		LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCEL);
		try {
			logInfo.setBusinessType(Constant.ApprovalAction.getName(Constant.ApprovalAction.LOANPAY_NOTICE) );
			logInfo.setTransCode(NameRef.getCodeByPayID(lLoanPayNoticeID));  //业务主键-合同编号+放款通知单编号
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		// add by jbpan 20120607 end
		try
		{
			OBPayNoticeDao payNoticeDao = new OBPayNoticeDao();
			//连结数据库
			con = Database.getConnection();
			//获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID, lLoanTypeID, lActionID,lOfficeID,lCurrencyID);
			log4j.info("approalID:" + lApprovalID);
			//先删除以前的审核记录（物理删除）
			try
			{
				appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID, lLoanPayNoticeID, 1);
			}
			catch (Exception e)
			{
				log4j.error(e.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, e.getMessage(), e);
			}
			//modified by mzh_fu 2007/08/16
			//strSQL = " SELECT a.NSTATUSID " + " FROM loan_payForm a  " + " WHERE  " + " a.ID = " + lLoanPayNoticeID;
			strSQL = " SELECT a.NSTATUSID,a.ndrawnoticeid " + " FROM loan_payForm a  " + " WHERE  " + " a.ID = " + lLoanPayNoticeID;
			
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				log4j.info("can cancel");
				lStatusID = rs.getLong("NSTATUSID");
				lYTDrawNoticeId = rs.getLong("NDRAWNOTICEID");
				lResult = 1;
			}
			if (rs != null)
			{
				rs.close();
				rs = null;
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			if (!(lStatusID == LOANConstant.LoanDrawNoticeStatus.SUBMIT || (lStatusID == LOANConstant.LoanDrawNoticeStatus.CHECK)))
			{
				log4j.info("status not right");
				lResult = -1;
			}
			if (lResult > 0)
			{
				//逻辑删除本条记录
				strSQL = " Update LOAN_payform " + " SET nStatusID =" + Constant.RecordStatus.INVALID + " WHERE ID = " + lLoanPayNoticeID + "";
				log4j.info("删除 SQL=" + strSQL);
				ps = con.prepareStatement(strSQL);
				lResult = ps.executeUpdate();
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
			}
			if (rs != null)
			{
				rs.close();
				rs = null;
			}
			if (ps != null)
			{
				ps.close();
				ps = null;
			}
			if (con != null)
			{
				con.close();
				con = null;
			}
			

			//added by mzh_fu 2007/08/16			
			//更新银团提款通知单状态
			LoanPayNoticeDao loanPayNoticeDao = new LoanPayNoticeDao();
			if (loanPayNoticeDao.findLoanTypeByPayNoticeId(lLoanPayNoticeID) == LOANConstant.LoanType.YT) {
				
				if(lYTDrawNoticeId <= 0)
					throw new IRollbackException(context,"未找到相应的提款通知单");
				
				new LoanPayNoticeDao().updateYTDrawNoticeStatusById(lYTDrawNoticeId,
						LOANConstant.LoanDrawNoticeStatus.CHECK);
			}
			
			payNoticeDao.updateOBStatus(lLoanPayNoticeID, OBConstant.LoanInstrStatus.CANCEL);
			// 加上操作日志   add by jbapn 20120607
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);//操作结果-成功
		}
		catch (SQLException e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			log4j.error(e.toString());
			//modified by mzh_fu 2007/08/07
			//throw new IException("Gen_E001");
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//-----------------------
		finally
		{
			// add by jbpan 20120607 操作日志 start NameRef.getContractNoByID(lpninfo.getContractID())
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			// add by jbpan 20120607 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}

		return lResult;
	}

	/**
	 * 新增审批意见、审批
	 * <p>
	 * <b>&nbsp;</b>
	 * <ol><b>新增审批意见、审批</b>
	 * <ul>
	 * <li>操作数据库表loan_approvalTracing,loan_payform
	 * <li>如果审批决定是拒绝，修改带审批的主体状态
	 * </ul>
	 * </ol>
	 * @Copyright (c) Jan. 2003, by iSoftStone Inc. All Rights Reserved
	 * @param     long        lModuleIDID           模块
	 * @param     long        lLoanTypeID           类型
	 * @param     long        lActionID             操作
	 * @param     long        lReviewContentID      审批内容类型
	 * @param     String      sOpinion              审批意见
	 * @param     long        lUserID               审批人标示
	 * @param     long        lNextUserID           下一个审批人标示
	 * @param     long        action                审批，拒绝，修改，最后审批
	 * @return    long        成功，返回值 == 1，失败，返回值 == -1
	 * @throws IRollbackException 
	 * @exception Exception
	 **/
	public long checkLoanPayNotice(long lApprovalContentID, String sOpinion, long lUserID, long lNextUserID, long lAction,long lCurrencyID,long lOfficeID) throws RemoteException, IRollbackException
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;

		long lModuleID = Constant.ModuleType.LOAN;
		LoanPayNoticeInfo loaninfo = findLoanPayNoticeByID(lApprovalContentID);
		//long lLoanTypeID = loaninfo.getLoanTypeID();
		//long lLoanTypeID = Constant.ApprovalLoanType.OTHER;
		long lActionID = Constant.ApprovalAction.LOANPAY_NOTICE;
        
		String sContractID = LOANNameRef.getNameByID("ncontractid","loan_payform","id",String.valueOf(lApprovalContentID),null);
		long conID = -1;
		if( sContractID != null && sContractID.length() > 0 )
		{
			conID = Long.valueOf(sContractID).longValue();
		}
		
		long lLoanTypeID = -1;
		String sSubType = LOANNameRef.getSubTypeByContractID(conID);
		if( sSubType != null && sSubType.length() > 0 )
		{
			lLoanTypeID = Long.valueOf(sSubType).longValue();
		}

		System.out.println("********** lModuleID = " + lModuleID + ";lLoanTypeID = " + lLoanTypeID + ";lActionID = " + lActionID);

		long lMaxID = -1;
		long lSerialID = -1;
		long lStatusID = -1;
		long lResultID = -1;
		long lDeleteID = -1;
		long lApprovalID = -1;
		long lLevel = -1;

		Timestamp dtValiDate = null;
		long lContractID = -1;
		long lLoanPayNoticeID = -1;
		//long lOBStatusID = 0;
		String strSQL = "";
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        try {
			logInfo.setBusinessType(Constant.ApprovalAction.getName(Constant.ApprovalAction.LOANPAY_NOTICE) );
			logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
			logInfo.setTransCode(NameRef.getCodeByPayID(lApprovalContentID));  //业务主键-合同编号+放款通知单编号
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalDelegation appbiz = new ApprovalDelegation();
		try
		{
			lLoanPayNoticeID = lApprovalContentID;
			OBPayNoticeDao payNoticeDao = new OBPayNoticeDao();
			//获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
			//下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			//审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);
			//////////////////////
			System.out.println("here");
			conn = Database.getConnection();

			////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			strSQL = "";
			System.out.println("laction=" + lAction);
			if (lAction == 1) //拒绝
			{
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				//删除以前的审核纪录(逻辑删除)
				appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID, lApprovalContentID, 2);

				lStatusID = Constant.RecordStatus.INVALID;

				//-------ninghao 2004-2-10 审批拒绝错误--错误更改--begin--//
				//lResultID = LOANConstant.InterestRateSettingStatus.REFUSE ;
				lResultID = LOANConstant.ApprovalDecision.REFUSE;
				//-----------------end------------------------------------//
				strSQL = "update loan_payform set nStatusID=" + LOANConstant.LoanPayNoticeStatus.REFUSE + " where ID=" + lApprovalContentID;
				payNoticeDao.updateOBStatus(lLoanPayNoticeID, OBConstant.LoanInstrStatus.REFUSE);
			}
			else if (lAction == 2) //审批
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
				{
				    strSQL = "update loan_payform set nnextcheckuserid=" + lNextUserID + ", nNextCheckLevel=" + lLevel + " where ID=" + lApprovalContentID;
				    Log.print("更新下一个审核级别（可越级）：" + lLevel);
				}
				else
				{
				    strSQL = "update loan_payform set nnextcheckuserid=" + lNextUserID + ", nNextCheckLevel=nNextCheckLevel+1 where ID=" + lApprovalContentID;
				    Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
			}
			else if (lAction == 3) //审批&&最后
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.FINISH;
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
				strSQL = "update loan_payform set nnextcheckuserid=" + lNextUserID + ", nStatusID=" + LOANConstant.LoanPayNoticeStatus.CHECK + " where ID=" + lApprovalContentID;

				payNoticeDao.updateOBStatus(lLoanPayNoticeID, OBConstant.LoanInstrStatus.APPROVE);
				//审批完成后需要做的操作
				//
			}
			else if (lAction == 4) //修改
			{
				lStatusID = Constant.RecordStatus.VALID;
				//装态也置为已提交
				lResultID = Constant.ApprovalDecision.RETURN;
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.RETURN);
				strSQL = "update loan_payform set nnextcheckuserid=ninputuserid, nStatusID=" + LOANConstant.LoanPayNoticeStatus.SUBMIT + ", nNextCheckLevel=1 where ID=" + lApprovalContentID;
				payNoticeDao.updateOBStatus(lLoanPayNoticeID, OBConstant.LoanInstrStatus.ACCEPT);

			}

			System.out.println(strSQL);
			ps = conn.prepareStatement(strSQL);
			ps.executeUpdate();
			ps.close();
			ps = null;
			conn.close();
			conn = null;

			////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			info.setModuleID(lModuleID);
			info.setLoanTypeID(lLoanTypeID);
			info.setActionID(lActionID);
			info.setApprovalContentID(lApprovalContentID);
			//info.setSerialID(lSerialID);
			info.setUserID(lUserID);
			info.setNextUserID(lNextUserID);
			info.setOpinion(sOpinion);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			info.setOfficeID(lOfficeID);
			info.setCurrencyID(lCurrencyID);
			appbiz.saveApprovalTracing(info);
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception ex)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(ex.getMessage()); //失败原因
			// add by jbpan 20120607 end
			ex.printStackTrace();
			//modified by mzh_fu 2007/08/07
			//throw new RemoteException(ex.getMessage());
			throw new IRollbackException(context, ex.getMessage(), ex);
		}
		finally
		{
			// add by jbpan 20120607 操作日志 start
			
			LoggerResults vResult = LoggerResults.getInstance(); 
			// 将日志记录保存到内存中
			vResult.getResult().add(logInfo);
			// add by jbpan 20120607 end
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}

			}
			catch (Exception ex)
			{
				//modified by mzh_fu 2007/08/07
				//throw new RemoteException(ex.getMessage());
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return 1;

	}

	//获得放款通知单编号
	private String getPayNoticeCode(long lContractID) throws Exception
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		String sTemp = "";
		long lCode = 0;
		String sCode = "";
		String sReturnCode = "";
		try
		{
			con = Database.getConnection();
			strSQL = "select max(l.scode) from loan_payform l where l.NCONTRACTID = ? and l.nstatusid !=0 ";
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lContractID);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				sCode = rs.getString(1);
				if(sCode==null)
				{
					lCode = 1;
				}else
				{
					lCode = Long.parseLong(sCode)+1;
				}
			}
			rs.close();
			ps.close();
			//凑齐三位
			if (lCode < 10)
			{
				sReturnCode = "00" + lCode;
			}
			else if (lCode < 100 && lCode >= 10)
			{
				sReturnCode = "0" + lCode;
			}
			if (lCode >= 100)
			{
				sReturnCode = "" + lCode;
			}
		}
		catch (Exception e)
		{
			log4j.error("catch a error");
			throw e;
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}

			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		return sReturnCode;

	}

	//lModuleID,lLoanTypeID,lActionID确定lApprovalID
	private long getApprovalID(long lModuleID, long lLoanTypeID, long lActionID) throws RemoteException, Exception
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		long lApprovalID = -1;

		try
		{
			con = Database.getConnection();
			//查询
			strSQL = "select id from loan_approvalsetting where nModuleID=? " + "and nLoanTypeID=? and nActionID=? ";
			System.out.println(strSQL);
			ps = con.prepareStatement(strSQL);
			ps.setLong(1, lModuleID);
			ps.setLong(2, lLoanTypeID);
			ps.setLong(3, lActionID);
			rs = ps.executeQuery();
			if (rs != null && rs.next())
			{
				lApprovalID = rs.getLong("id");
			}

			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;

		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw e;
		}

		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new RemoteException(ex.getMessage());
			}
		}

		return lApprovalID;
	}

	private void saveExternalAccount(LoanPayNoticeInfo lpninfo) throws RemoteException, Exception
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String strSQL = null;
		boolean bIsNew = true;

		try
		{
			if (lpninfo != null && lpninfo.getReceiveAccount() != null && lpninfo.getReceiveAccount().length() > 0)
			{
				con = Database.getConnection();
				//查询
				strSQL = "select id from sett_ExternalAccount where SEXTACCTNO = ? ";
				System.out.println(strSQL);
				ps = con.prepareStatement(strSQL);
				ps.setString(1, lpninfo.getReceiveAccount());
				rs = ps.executeQuery();
				if (rs != null && rs.next())
				{
					bIsNew = false;
				}
				rs.close();
				rs = null;
				ps.close();
				ps = null;

				if (bIsNew)
				{
					strSQL =
						"insert into sett_ExternalAccount "
							+ " (id,nofficeid,sextacctno,sextacctname,sbankname,sprovince,scity,ncurrencyid) "
							+ " values "
							+ " (nvl((select max(id) from sett_ExternalAccount),0)+1,?,?,?,?,?,?,?)";
					ps = con.prepareStatement(strSQL);
					ps.setLong(1, lpninfo.getOfficeID());
					ps.setString(2, lpninfo.getReceiveAccount());
					ps.setString(3, lpninfo.getReceiveClientName());
					ps.setString(4, lpninfo.getRemitBank());
					ps.setString(5, lpninfo.getRemitinProvince());
					ps.setString(6, lpninfo.getRemitinCity());
					ps.setLong(7, lpninfo.getCurrencyID());
					ps.executeUpdate();
					ps.close();
					ps = null;

				}

				con.close();
				con = null;
			}

		}
		catch (Exception e)
		{
			throw new IRollbackException(context,"保存失败",e);
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new IRollbackException(context,"保存失败",ex);
			}
		}

	}
	
	public long initApproval(LoanPayNoticeInfo lpninfo) throws RemoteException,IRollbackException{		
		InutParameterInfo inutParameterInfo = lpninfo.getInutParameterInfo();
		long lId = lpninfo.getID();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.INITAPPROVAL);
        try {
			logInfo.setBusinessType(Constant.ApprovalAction.getName(Constant.ApprovalAction.LOANPAY_NOTICE) );
			logInfo.setTransCode(NameRef.getCodeByPayID(lpninfo.getID()));  //操作日志-业务主键-交易号
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			//提交审批
			FSWorkflowManager.initApproval(inutParameterInfo);
			
			//更新状态到审批中
			new LoanPayNoticeDao().updateStatus(lId,LOANConstant.LoanPayNoticeStatus.APPROVALING);
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	  
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lId;		
	}

	/**
	 * 审批方法。
	 * @param info
	 * @return long
	 * @throws IRollbackException
	 */
	public long doApproval(LoanPayNoticeInfo lpninfo)throws RemoteException, IRollbackException
	{
		long lId = lpninfo.getID();
		InutParameterInfo inutParameterInfo = lpninfo.getInutParameterInfo();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
		logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);

		try {
			logInfo.setBusinessType(Constant.ApprovalAction.getName(Constant.ApprovalAction.LOANPAY_NOTICE) );
			logInfo.setTransCode(NameRef.getCodeByPayID(lId));  //操作日志-业务主键-交易号 
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			LoanPayNoticeDao loanPayNoticeDao=new LoanPayNoticeDao();
			LoanPayNoticeInfo _lpninfo=new LoanPayNoticeInfo();
			_lpninfo = loanPayNoticeDao.findLoanPayNoticeByID(lId);
			

			inutParameterInfo.setDataEntity(_lpninfo);
			
			//提交审批
			InutParameterInfo _inutParameterInfo = FSWorkflowManager.doApproval(inutParameterInfo);
			
			//如果是最后一级,且为审批通过,更新状态为已审批
			if(_inutParameterInfo.isLastLevel())
			{	
				loanPayNoticeDao.updateStatus(lId,LOANConstant.LoanPayNoticeStatus.CHECK);	
				
			}
			//如果是最后一级,且为审批拒绝,更新状态为已保存
			else if(_inutParameterInfo.isRefuse())
			{
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				loanPayNoticeDao.updateStatus(lId,LOANConstant.LoanPayNoticeStatus.SUBMIT);
			}
			//add by jbpan 20120607 操作日志-操作结果-成功
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
			
		}catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end
		return lId;
	}	
	
	/**
	 * 审批方法。
	 * @param info
	 * @return long
	 * @throws IRollbackException
	 */
	public long doApprovalYT(LoanPayNoticeInfo lpninfo)throws RemoteException, IRollbackException
	{
		long lId = lpninfo.getID();
		InutParameterInfo inutParameterInfo = lpninfo.getInutParameterInfo();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.DOAPPRVOAL);
        try {
			logInfo.setBusinessType(Constant.ApprovalAction.getName(Constant.ApprovalAction.LOANPAY_NOTICE) );
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			LoanPayNoticeDao loanPayNoticeDao=new LoanPayNoticeDao();
			OBPayNoticeDao payNoticeDao = new OBPayNoticeDao();
			LoanPayNoticeInfo _lpninfo=new LoanPayNoticeInfo();
			_lpninfo = loanPayNoticeDao.findLoanPayNoticeByID(lId);
			

			inutParameterInfo.setDataEntity(_lpninfo);
			
			//提交审批
			InutParameterInfo _inutParameterInfo = FSWorkflowManager.doApproval(inutParameterInfo);
			
			//如果是最后一级,且为审批通过,更新状态为已审批
			if(_inutParameterInfo.isLastLevel())
			{	
				loanPayNoticeDao.updateStatus(lId,LOANConstant.LoanPayNoticeStatus.CHECK);	
				payNoticeDao.updateOBStatus(lpninfo.getID(), OBConstant.LoanInstrStatus.APPROVE);
			}
			//如果是最后一级,且为审批拒绝,更新状态为已保存
			else if(_inutParameterInfo.isRefuse())
			{
				//add by jbpan 20120607 操作日志-操作类型-
				logInfo.setActionTypeID(Constant.LoggerOfOperationType.REFLUSE);
				loanPayNoticeDao.updateStatus(lId,LOANConstant.LoanPayNoticeStatus.SUBMIT);
				payNoticeDao.updateOBStatus(lpninfo.getID(), OBConstant.LoanInstrStatus.REFUSE);
			}	
			//add by jbpan 20120607 操作日志-操作结果-成功
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return lId;
	}	
	
	/**
	 * Modify by leiyang date 2007/07/10
	 * 审批流：取消审批方法（自营贷款.放款通知单）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(LoanPayNoticeInfo loanInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = loanInfo.getInutParameterInfo();
		LoanPayNoticeDao loanDao = new LoanPayNoticeDao();
		// add by jbpan 20120607 操作日志 start
        LoggerBtnLevelInfo logInfo = new LoggerBtnLevelInfo();
        logInfo.setActionTypeID(Constant.LoggerOfOperationType.CANCELAPPROVAL);
        try {
			logInfo.setBusinessType(Constant.ApprovalAction.getName(Constant.ApprovalAction.LOANPAY_NOTICE) );
			logInfo.setTransCode(NameRef.getCodeByPayID(loanInfo.getID()));  //操作日志-业务主键-交易号  
		} catch (Exception e1) {
			e1.printStackTrace();
		}
        // add by jbpan 20120607 end
		try
		{
			//取消审批
			lReturn = loanDao.updateStatusAndCheckStatus(loanInfo.getID(), LOANConstant.LoanPayNoticeStatus.SUBMIT);
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}				
			}
			//add by jbpan 20120607 加上操作日志-操作结果-成功        
			logInfo.setResult(Constant.LoggerOfOperResult.SUCCESS);
		}
		catch (Exception e)
		{
			// add by jbapn 20120607 start
			// 加上操作日志       
			logInfo.setResult(Constant.LoggerOfOperResult.FAIL);//操作结果-失败
			logInfo.setFailReason(e.getMessage()); //失败原因
			// add by jbpan 20120607 end
			throw new IRollbackException(context, e.getMessage(), e);
		}
		//add by jbpan 20120607 start
        finally
        {
        	
            LoggerResults vResult = LoggerResults.getInstance(); 
    		// 将日志记录保存到内存中
    		vResult.getResult().add(logInfo);
        }     
        //add by jbpan 20120607 end

		return lReturn;
	}
	
	
	 public double checkPayNotice(long lContractID, double amount, long isCircle ,long nLoannoteId)throws RemoteException
	 {
		 double tempamount = 0.0;
		 LoanPayNoticeDao loanPayNoticeDao=new LoanPayNoticeDao();
		 try
		 {
			 tempamount = loanPayNoticeDao.checkPayNotice(lContractID, amount, isCircle,nLoannoteId );
		 }
		 catch(Exception e)
		 {
			 e.printStackTrace();
			 throw new RemoteException(e.getMessage());
		 }
		 return tempamount;
	 }
}
