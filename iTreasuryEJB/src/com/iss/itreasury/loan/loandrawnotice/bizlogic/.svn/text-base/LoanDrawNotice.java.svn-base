package com.iss.itreasury.loan.loandrawnotice.bizlogic;

import javax.ejb.EJBObject;
import java.rmi.RemoteException;
import java.security.Identity;
import javax.ejb.*;
import java.util.*;
import java.sql.*;

import com.iss.itreasury.loan.loandrawnotice.dataentity.*;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;

/**
 * Created 2003-8-15 14:50:59 Code generated by the Forte for Java EJB Module
 * 
 * @author yfan
 */

public interface LoanDrawNotice extends EJBObject {

	/**
	 * 提交、修改放款通知单，操作loan_payform
	 * 
	 * @param ldninfo
	 *            放款通知单信息 <br>
	 *            新增LoanDrawNotice信息,ID取最大值
	 */
	public long saveLoanDrawNotice(LoanDrawNoticeInfo ldninfo)
			throws RemoteException, Exception;

	/**
	 * 查找放款通知单，查找loan_payform <br>
	 * 如果lContractID后面的参数的值合法，做查询条件；否则不做查询条件。
	 * 
	 * @param lCurrencyID
	 *            币种标识
	 * @param lOfficeID
	 *            办事处标识
	 * @param lUserID
	 *            查询人
	 * @param lActionID
	 *            动作，提交或者审核核
	 * @param lContractID
	 *            合同标识（由）
	 * @param lContractID
	 *            合同标识（到）
	 * @param lClientID
	 *            借款单位标识
	 * @param tsDateFrom
	 *            提交日期起始
	 * @param tsDateTo
	 *            提交日期结束
	 * @param lStatusID
	 *            放款通知单状态
	 */
	public Collection findLoanDrawNoticeByMultiOption(long lCurrencyID,
			long lOfficeID, long lUserID, long lActionID, long lContractIDFrom,
			long lContractIDTo, long lClientID, long lDrawNoticeID,
			long lLoanTypeID, Timestamp tsDateFrom, Timestamp tsDateTo,
			long lStatusID, long lPageLineCount, long lPageNo,
			long lOrderParam, long lDesc) throws RemoteException, Exception;

	/**
	 * 通过一个提款通知单，操作LoanDrawNotice表 <br>
	 * 审核提款通知单（包括拒绝、返回修改）
	 * 
	 * @param lLoanDrawNoticeID
	 *            提款通知单标识
	 * @param sOpinion
	 *            审核意见
	 * @param lUserID
	 *            审核人
	 * @param lNextUserID
	 *            下一级审核人
	 * @param lActionID
	 *            操作标示 1：审核通过 2：最后一级审核通过 3：返回修改 4：拒绝
	 */
	public long checkLoanDrawNotice(long lLoanDrawNoticeID, long lLoanTypeID,
			String sOpinion, long lUserID, long lNextUserID, long lActionID,
			long lCurrencyID, long lOfficeID) throws RemoteException, Exception;

	/**
	 * 取消提款通知单，
	 * 
	 * @param lLoanDrawNoticeID
	 *            提款通知单标识
	 */
	public long cancelLoanDrawNotice(long lLoanDrawNoticeID, long lLoanTypeID,
			long lCurrencyID, long lOfficeID) throws RemoteException, Exception;

	/**
	 * 查找提款通知单
	 * 
	 * @param lLoanDrawNoticeID
	 *            提款通知单标识
	 */
	public LoanDrawNoticeInfo findLoanDrawNoticeByID(long lLoanDrawNoticeID)
			throws RemoteException, Exception;

	/**
	 * 提款通知单审批方法
	 * 
	 * @param nInfo
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 * @throws IException
	 */
	public long doApprovalLoanDrawNotice(LoanDrawNoticeInfo nInfo)
			throws RemoteException, IRollbackException, IException;

	public long checkPayNotice(LoanDrawNoticeInfo nInfo)
			throws RemoteException, IRollbackException;

	public long cancelApproval(LoanDrawNoticeInfo nInfo)
			throws RemoteException, IRollbackException;

	public double getYTUnDrawAmountByContractId(long lContractId)
			throws RemoteException, Exception;
	
	public double getYTDrawAmountByDrawNoticeId(long lDrawNoticeId)
	throws RemoteException, Exception;
	
	public Collection validateYTDrawAllAmountInfo(long contractID,long drawNoticeID)
	throws RemoteException, Exception;
	
	public Collection getYTDraw(long lDrawId)throws RemoteException,Exception;
}
