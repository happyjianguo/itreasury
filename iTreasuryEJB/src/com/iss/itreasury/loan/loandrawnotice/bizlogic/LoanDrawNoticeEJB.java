package com.iss.itreasury.loan.loandrawnotice.bizlogic;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.loan.assuremanagementnotice.dao.AssureManagementNoticeDao;
import com.iss.itreasury.loan.assuremanagementnotice.dataentity.AssureManagementNoticeInfo;
import com.iss.itreasury.loan.contract.dao.ContractDao;
import com.iss.itreasury.loan.contract.dataentity.ContractInfo;
import com.iss.itreasury.loan.contract.dataentity.YTFormatInfo;
import com.iss.itreasury.loan.loanapply.dao.LoanApplyDao;
import com.iss.itreasury.loan.loanapply.dataentity.LoanExaminePassInfo;
import com.iss.itreasury.loan.loandrawnotice.dao.LoanDrawNoticeDao;
import com.iss.itreasury.loan.loandrawnotice.dataentity.LoanDrawNoticeInfo;
import com.iss.itreasury.loan.loandrawnotice.dataentity.YTDrawAllAmountInfo;
import com.iss.itreasury.loan.loandrawnotice.dataentity.YTDrawInfo;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.system.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.system.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.system.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;

/**
 * Created 2003-8-15 14:50:59
 * Code generated by the Forte for Java EJB Module
 * @author yfan
 */
public class LoanDrawNoticeEJB
	implements SessionBean
{
	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */

	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context)
	{
		this.context = context;
	}

	private SessionContext context;
	private static Log4j log4j = null;
	/**
	 * No argument constructor required by container.
	 */
	public LoanDrawNoticeEJB()
	{
		log4j = new Log4j(Constant.ModuleType.LOAN, this);
	}

	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate()
	{
	}

	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate()
	{
	}

	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate()
	{
	}

	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove()
	{
	}

	//获得提款通知单编号
	private String getDrawNoticeCode(long lContractID) throws Exception
	{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;
		String strSQL = null;
		String sTemp = "";
		long lCode = 1;
		String sReturnCode = "";
		try
		{
			con = Database.getConnection();
			strSQL = " select nvl(max(sCode),'TK0') sCode "
                   + " from Loan_YT_DrawForm where nContractID = ? "
                   + " and nStatusID > 0 ";
			ps = con.prepareStatement(strSQL);
			ps.setLong(1,lContractID);
			rs = ps.executeQuery();
			if(rs != null && rs.next())
			{
				sTemp = rs.getString("sCode");
                sTemp=sTemp.substring(2);
				lCode = Long.parseLong(sTemp) + 1;
			}
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
			
			//凑齐三位
			sReturnCode = "TK"+DataFormat.formatInt((int)lCode,3,true);
		}
		catch (Exception e)
		{
			log4j.error("catch a error");
			throw e;
		}
		finally
		{
			try
			{
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		return sReturnCode;

	}
	
	
	/**
	 * 提交、修改放款通知单，操作loan_payform
	 * @param ldninfo 放款通知单信息
	 * <br>新增LoanDrawNotice信息,ID取最大值
	 */													
	public long saveLoanDrawNotice(LoanDrawNoticeInfo ldninfo)
    throws RemoteException,Exception
	{
        long lResult = -1;
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int nIndex = 0;
        
        String strSQL = ""; //主SQL语句
        long lMaxID = -1;
        long lStatusID = -1;
        String strCode ="";

        //定义相应操作常量

        //long lApprovalID = -1;
        //ApprovalDelegation appbiz = new ApprovalDelegation();
        //ApprovalDao appdao = new ApprovalDao(con);
        
        try
        {            
            //连结数据库
            con = Database.getConnection();
            
            //added by mzh_fu 2007/08/18 并发处理
            if(ldninfo.getContractID()<= 0 ){
            	 throw new IException("合同ID为空"); 
            }
            //校验参与行剩余金额 add by zcwang 2008-10-5 
           ContractInfo  contractinfo = new ContractDao().findByID(ldninfo.getContractID());
           YTFormatInfo YTinfo = contractinfo.getYTInfo();
            if(YTinfo != null)
		    {
            	String[] strBankName = YTinfo.getBankName();
            	String[] strBankLoanAmount = YTinfo.getLoanAmount();
            	Collection coll = new LoanDrawNoticeDao().validateYTDrawAllAmountInfo(ldninfo.getContractID(),ldninfo.getID());
            	Collection c = ldninfo.getYTDrawInfo();
            	for(int i=0;i<strBankLoanAmount.length;i++)
            	{
	            	YTDrawAllAmountInfo info = null;
	            	YTDrawInfo drawinfo = null;
					if(coll!=null&& coll.size()>0)
					{
						 info =(YTDrawAllAmountInfo)coll.toArray()[i];
					}
				   // 得到承贷剩余金额
					double dtemp = 0.0;
					if(strBankLoanAmount[i].equals(""))
					{
						strBankLoanAmount[i] = "0.00";
					}
					if(coll!=null&& coll.size()>0)
					{
						dtemp = Double.parseDouble(DataFormat.reverseFormatAmount(strBankLoanAmount[i]))-info.getDrawAllAmount();
					}
					else
					{
						dtemp = Double.parseDouble(DataFormat.reverseFormatAmount(strBankLoanAmount[i]));
					}
					//得到提款金额
					if(c!=null&& c.size()>0)
					{
						drawinfo =(YTDrawInfo)c.toArray()[i];
					}
					if(dtemp<drawinfo.getDrawAmount())
					{
						 throw new IException(strBankName[i]+"提款金额不能大于承贷剩余金额 " + DataFormat.formatDisabledAmount(dtemp)); 
					}
            	}
		    
		    }
            //end
           double dYTUnDrawAmount= new LoanDrawNoticeDao().getYTUnDrawAmountByContractId(ldninfo.getContractID());
           double dYTDrawNoticeAmount = 0.00d;
           if(ldninfo.getID() > 0){
   			dYTDrawNoticeAmount = new LoanDrawNoticeDao().getYTDrawAmountByDrawNoticeId(ldninfo.getID());
			dYTUnDrawAmount += dYTDrawNoticeAmount; 
           }
           if(ldninfo.getDrawAmount()>dYTUnDrawAmount){
        	   throw new IException("提款金额不能大于合同的未提款金额 " + DataFormat.formatDisabledAmount(dYTUnDrawAmount)); 
           }
           
            if (ldninfo.getID() <= 0) //新增
            {
                Log.print("--new--");
                strCode=getDrawNoticeCode(ldninfo.getContractID());
                //首先获得新id
                strSQL = "select nvl(max(ID)+1,1) ID from Loan_YT_DrawForm ";
                ps = con.prepareStatement(strSQL);
                rs = ps.executeQuery();
                if (rs.next())
                {
                    lMaxID = rs.getLong("ID");
                }
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                ///////////////////////新增//////////////////////////
                if (lMaxID > 0)
                {
                    strSQL =
                        "insert into Loan_YT_DrawForm ( "
                            + " ID, nContractID,sCode "//
                            + " , mAmount, nInputUserID,nNextCheckUserID "
                            + " , dtInput, nStatusID, nNextCheckLevel "
                            + " "
                            + " ) "
                            + " values (?, ?, ?, ?, ?, ?, SYSDATE, ?, 1)";
                    log4j.info(strSQL);
                    log4j.info("lMaxID=" +lMaxID);
                    log4j.info("strCode=" +strCode);
                    ps = con.prepareStatement(strSQL);
                    nIndex = 1;
                    ps.setLong(nIndex, lMaxID);
                    nIndex++;
                    ps.setLong(nIndex, ldninfo.getContractID());
                    nIndex++;
                    ps.setString(nIndex, strCode);
                    nIndex++;
                    ps.setDouble(nIndex, ldninfo.getDrawAmount());
                    nIndex++;
                    ps.setLong(nIndex, ldninfo.getInputUserID());
                    nIndex++;
                    //ps.setLong(nIndex, ldninfo.getNextCheckUserID());
                    ps.setLong(nIndex, ldninfo.getInputUserID());
                    nIndex++;
                    //ps.setTimestamp(nIndex, ldninfo.getInputDate());
                    //nIndex++;
                    ps.setLong(nIndex, LOANConstant.LoanDrawNoticeStatus.SUBMIT);//TODO
                    lResult = ps.executeUpdate();
                    if (ps != null)
                    {
                        ps.close();
                        ps = null;
                    }
                    if (lResult < 0)
                    {
                        log4j.info("insert into failed：" + lResult);
                        lResult = -1;
                    }
                    else
                    {
                        lResult = lMaxID;
                    }
                } //end lMaxID>0  可以新增
                
				if (ldninfo.getYTDrawInfo() != null)
				{
					Vector v = new Vector();
					Iterator it = ldninfo.getYTDrawInfo().iterator();
					while (it.hasNext())
					{
						YTDrawInfo info = new YTDrawInfo();
						info = (YTDrawInfo) it.next();
						info.setDrawID(lMaxID);
						v.add(info);
					}
					ldninfo.setYTDrawInfo(v);
				}
				//added by qhzhou 2007.07.06
	            InutParameterInfo inutParameterInfo = ldninfo.getInutParameterInfo();
				
				if(inutParameterInfo != null){
					inutParameterInfo.setTransID(String.valueOf(lMaxID));
					inutParameterInfo.setUrl(inutParameterInfo.getUrl()+lMaxID);
					inutParameterInfo.setDataEntity(ldninfo);
					
					// 提交审批
					FSWorkflowManager.initApproval(inutParameterInfo);
					
				    new LoanDrawNoticeDao().updateLoanDrawNoticeStatus(lMaxID, LOANConstant.LoanDrawNoticeStatus.APPLOVING);
				}
							
            }
            else //lFreeApplyID > 0 修改
            {                
                //---------是否审核后重新提交-------------//
                //首先获得免还的状态
                strSQL = "select nStatusID from Loan_YT_DrawForm "
                        +" where ID = "+ldninfo.getID();
                ps = con.prepareStatement(strSQL);
                rs = ps.executeQuery();
                if (rs.next())
                {
                    lStatusID = rs.getLong("nStatusID");
                }
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }                
                //-----------------修改-------------------//
                if(lStatusID == LOANConstant.LoanDrawNoticeStatus.SUBMIT)
                {
                    strSQL =
                        " Update Loan_YT_DrawForm  "
                            + " set mAmount = ? "
                            //+ " ,nInputUserID = ? "
                            + " ,nNextCheckUserID = nInputUserID "
                            + "   , dtInput = SYSDATE "
                            + "   , nStatusID = ? " 
                            + " ,nNextCheckLevel = 1 "
                            + " where ID = " +ldninfo.getID()
                            + " ";
                    log4j.info(strSQL);
                    ps = con.prepareStatement(strSQL);
                    nIndex = 1;
                    ps.setDouble(nIndex, ldninfo.getDrawAmount());
                    nIndex++;
                    //ps.setLong(nIndex, ldninfo.getInputUserID());
                    //nIndex++;
                    //ps.setLong(nIndex, ldninfo.getInputUserID());
                    //nIndex++;
                    //ps.setTimestamp(nIndex, ldninfo.getInputDate());
                    //nIndex++;
                    ps.setLong(nIndex, LOANConstant.LoanDrawNoticeStatus.SUBMIT);
                    lResult = ps.executeUpdate();
                    if (lResult < 0)
                    {
                        //修改失败，返回值 -1
                        lResult = -1;
                    }
                    else
                    {
                        lResult = ldninfo.getID();
                    }
                    if (ps != null)
                    {
                        ps.close();
                        ps = null;
                    }
                }
                //added by qhzhou 2007.07.06
                InutParameterInfo inutParameterInfo = ldninfo.getInutParameterInfo();
    			
    			if(inutParameterInfo != null){
    				inutParameterInfo.setTransID(String.valueOf(ldninfo.getID()));
    				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+ldninfo.getID());
    				inutParameterInfo.setDataEntity(ldninfo);
    				
    				// 提交审批
    				FSWorkflowManager.initApproval(inutParameterInfo);
    				
    			    new LoanDrawNoticeDao().updateLoanDrawNoticeStatus(ldninfo.getID(), LOANConstant.LoanDrawNoticeStatus.APPLOVING);
    			} 
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
        
	        if (ldninfo.getYTDrawInfo() != null)
	        {
				LoanDrawNoticeDao dao = new LoanDrawNoticeDao();
				dao.updateYTDraw(ldninfo.getYTDrawInfo()); 
	        }
	      
        }
        catch (SQLException e)
        {
            log4j.error(e.toString());
            //modified by mzh_fu 2007/08/07
            //throw new IException("Gen_E001");
            throw new IRollbackException(context, e.getMessage(), e);
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            //modified by mzh_fu 2007/08/07
            //throw new IException("Gen_E001");
            throw new IRollbackException(context, e.getMessage(), e);
        }
        //////////////////////////////////////////
        finally
        {
            try
            {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (Exception e)
            {
                log4j.error(e.toString());
                //modified by mzh_fu 2007/08/07
                //throw new IException("Gen_E001");
                throw new IRollbackException(context, e.getMessage(), e);
            }
        }
        return lResult;
    }	
																					

	/**
	 * 查找放款通知单，查找loan_payform
	 * <br>如果lContractID后面的参数的值合法，做查询条件；否则不做查询条件。
	 * @param lCurrencyID 币种标识
	 * @param lOfficeID 办事处标识
	 * @param lUserID 查询人
	 * @param lActionID 动作，提交或者审核核
	 * @param lContractID 合同标识（由）
	 * @param lContractID 合同标识（到）
	 * @param lClientID 借款单位标识	 
	 * @param tsDateFrom 提交日期起始
	 * @param tsDateTo 提交日期结束
	 * @param lStatusID 放款通知单状态
	 */
	public Collection findLoanDrawNoticeByMultiOption(
						long lCurrencyID,
						long lOfficeID,
						long lUserID, 
						long lActionID,
						long lContractIDFrom,
						long lContractIDTo,
						long lClientID,
						long lDrawNoticeID,
						long lLoanTypeID,
						Timestamp tsDateFrom,
						Timestamp tsDateTo,
                        long lStatusID,
                        long lPageLineCount,
                        long lPageNo,
                        long lOrderParam,
                        long lDesc
    ) throws RemoteException,Exception
    {
        Vector vReturn = new Vector(); //当前页结果集
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int nIndex = 0;
        String strSQL = ""; //主SQL语句
        String strSQL_Count = ""; //SQL计算语句
        String strSQL_Select = ""; //SQL查找语句
        String strSQL_Table = ""; //SQL的表以及其之间联系语句
        String strSQL_Option = ""; //SQL查找条件
        String strSQL_Order = ""; //SQL排序条件
        long lRecordCount = -1; //总记录数
        long lPageCount = -1; //总页数
        long lRowNumStart = -1; //开始记录
        long lRowNumEnd = -1; //结束记录
        //定义相应操作常量
        //贷款模块
        long lModuleID = Constant.ModuleType.LOAN;
        //业务类型
       // long lLoanTypeID = (long)Constant.ApprovalLoanType.YT;
        long lYTActionID = Constant.ApprovalAction.LOANDRAW_NOTICE;
        try
        {
            log4j.info("查询");
            con = Database.getConnection();
            strSQL_Count = " select count(*) ";
            strSQL_Table =
                "    from Loan_YT_DrawForm a "
                    + "      ,loan_contractForm b,CLIENT c "
                    + "      ,loan_yt_drawformbankassign d "
                    + "      ,UserInfo u1,UserInfo u2 "
                    + " where a.nContractID=b.ID  "
                    + "   and b.NBORROWCLIENTID=c.ID(+) "
                    + "   and d.NDRAWID(+)=a.ID "
                    + "   and d.nIsHead = " + LOANConstant.IsHead.YES
                    + "   and a.nInputUserID=u1.ID(+) "
                    + "   and a.nNextCheckUserID=u2.ID(+) "
                    + "   and b.nTypeID = "+LOANConstant.LoanType.YT;
            strSQL_Option = " ";
			if (lLoanTypeID > 0)
			{
				strSQL_Option += " and b.nTypeID= " + lLoanTypeID;
			}
            if (lCurrencyID > -1)
            {
                strSQL_Option += " and b.nCurrencyID= " + lCurrencyID;
            }
            if (lOfficeID > -1)
            {
                strSQL_Option += " and b.nOfficeID = " + lOfficeID;
            }
            if (lContractIDFrom > -1)
            {
                strSQL_Option += " and b.ID >= " + lContractIDFrom;
            }
            if (lContractIDTo > -1)
            {
                strSQL_Option += " and b.ID <= " + lContractIDTo;
            }
            if (lClientID > -1)
            {
                strSQL_Option += " and b.NBORROWCLIENTID = " + lClientID;
            }
            if (lDrawNoticeID > -1)
            {
                strSQL_Option += " and a.ID = " + lDrawNoticeID;
            }
            if (tsDateFrom != null)
            {
                strSQL_Option += " and TO_CHAR(a.DTInput,'yyyy-mm-dd') "
                    + " >= TO_CHAR(?,'yyyy-mm-dd') ";
            }
            if (tsDateTo != null)
            {
                strSQL_Option += " and TO_CHAR(a.DTInput,'yyyy-mm-dd') "
                    + " <= TO_CHAR(?,'yyyy-mm-dd') ";
            }
            if(lActionID==LOANConstant.LoanDrawNoticeStatus.SUBMIT)//修改查找
            {
                strSQL_Option += " and a.nStatusID= " 
                              + LOANConstant.LoanDrawNoticeStatus.SUBMIT;
                //strSQL_Option += " and a.nNextCheckUserID= " + lUserID;
                strSQL_Option += " and a.nNextCheckLevel=1 ";
                strSQL_Option += " and a.nInputUserID= " + lUserID;
            }
            else if(lActionID==LOANConstant.LoanDrawNoticeStatus.CHECK)//审核查找
            {
                ApprovalDelegation appBiz = new ApprovalDelegation();
                //获得真正来审批这个记录的人（真实或传给的虚拟的人！）
                String strUserID = "";
                strUserID = appBiz.findTheVeryUser(lModuleID,lLoanTypeID,lYTActionID,lOfficeID,lCurrencyID,lUserID);
                if (lStatusID > -1) //状态
                {
                    //如果是提交状态 录入人、下一个审核人必须是当前登录人的逾期合同
                    //如果是审核完成 则所有审核状态的逾期合同
                    if (lStatusID == LOANConstant.LoanDrawNoticeStatus.SUBMIT)
                    {
                        strSQL_Option += " and a.nStatusID= " + lStatusID;
                        strSQL_Option += " and a.nNextCheckUserID in " + strUserID;//lUserID;
                    }
                    //如果是审核完成 则所有审核状态的逾期合同
                    else if (lStatusID == LOANConstant.LoanDrawNoticeStatus.CHECK)
                    {
                        strSQL_Option += " and a.nStatusID= " + lStatusID;
                    }
                }
                else //两种状态都不选，则把条件 或（or）起来
                {
                    strSQL_Option += " and ( ( a.nStatusID= "
                        + LOANConstant.LoanDrawNoticeStatus.SUBMIT;
                    strSQL_Option += "      and a.NNEXTCHECKUSERID in " + strUserID;//lUserID;
                    strSQL_Option += "        )";
                    strSQL_Option += " or     ( a.nStatusID= "
                                  + LOANConstant.LoanDrawNoticeStatus.CHECK;
                    strSQL_Option += "        )";
                    strSQL_Option += "       ) ";
                }
            }
            strSQL = strSQL_Count + strSQL_Table + strSQL_Option;
            log4j.info("  SQL : ");
            log4j.info(strSQL);
            ps = con.prepareStatement(strSQL);
            //查找条件设置
            nIndex = 1;
            if (tsDateFrom != null) //
            {
                ps.setTimestamp(nIndex, tsDateFrom);
                nIndex++;
            }
            if (tsDateTo != null) //
            {
                ps.setTimestamp(nIndex, tsDateTo);
                nIndex++;
            }
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                lRecordCount = rs.getLong(1); //得到总记录数
                log4j.info("记录数=" + lRecordCount);
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            //计算总页数
            lPageCount = lRecordCount / lPageLineCount;
            if ((lRecordCount % lPageLineCount) != 0)
            {
                lPageCount++;
            }
            log4j.info("总记录数=" + lRecordCount);
            log4j.info("总页数=" + lPageCount);
            if (lRecordCount > 0)
            {
                //返回结果集， 分页显示，显示下一页
                lRowNumStart = (lPageNo - 1) * lPageLineCount + 1; //开始
                lRowNumEnd = lRowNumStart + lPageLineCount - 1; //结束
                if (lRowNumEnd > lRecordCount)
                {
                    lRowNumEnd = lRecordCount;
                }
                switch ((int) lOrderParam)
                {
                    case 1 : //提款编号
                        strSQL_Order += " order by a.sCode ";
                        break;
                    case 2 : //合同编号
                        strSQL_Order += " order by b.sContractCode ";
                        break;
                    case 3 : //贷款单位
                        strSQL_Order += " order by c.sName ";
                        break;
                    case 4 : //合同金额
                        strSQL_Order += " order by b.MEXAMINEAMOUNT ";
                        break;
                    case 5 : //提款金额
                        strSQL_Order += " order by a.mAmount ";
                        break;
                    case 6 : //代理费
                        strSQL_Order += " order by a.mAmount ";
                        break;
                    case 7 : //提交日期
                        strSQL_Order += " order by a.DTINPUT ";
                        break;
                    case 8 : //状态
                        strSQL_Order += " order by a.nStatusID ";
                        break;
                    default :
                        strSQL_Order += "";
                }
                if (lDesc == Constant.PageControl.CODE_ASCORDESC_DESC)
                {
                    strSQL_Order += " desc ";
                }
                ///////////////////////////////////////////////////////////
                    strSQL_Select = " select a.ID as ID " //免还ID
                +" ,a.sCode as Code " //免还编号
                +" ,a.nContractID as ContractID " //合同ID
                +" ,b.sContractCode as ContractCode " //合同编号
                //+" ,b.mLoanAmount " //贷款金额
                +" ,b.MEXAMINEAMOUNT"//批准金额
                +" ,b.mChargeRate "//手续费率
                +" ,a.mAmount " //
                +" ,a.dtInput "
                + " ,a.nStatusID "
                + " ,a.nInputUserID "
                + " ,u1.sName as InputUserName "
                + " ,a.nNextCheckUserID "
                + " ,u2.sName as CheckUserName "
                + " ,c.sName as ClientName " //借款单位
                + " ,d.MDRAWAMOUNT " //提款金额 牵头行
                //+ " ,d.mAssureAmount " //担保金额 牵头行
                //+ " ,d.mCreditAmount " //信用金额 牵头行
                + " ,nvl(a.nNextCheckLevel,1) nNextCheckLevel "
                +"  ";
                strSQL =
                      " select * from ( select b.*, rownum num from "
                    + " ( "
                    + strSQL_Select
                    + strSQL_Table
                    + strSQL_Option
                    + strSQL_Order
                    + " ) b )"
                    + " WHERE num BETWEEN ? AND ? "; 
                log4j.info(""+strSQL);
                ps = con.prepareStatement(strSQL);
                //查找条件设置
                nIndex = 1;
                if (tsDateFrom != null) //
                {
                    ps.setTimestamp(nIndex, tsDateFrom);
                    nIndex++;
                }
                if (tsDateTo != null) //
                {
                    ps.setTimestamp(nIndex, tsDateTo);
                    nIndex++;
                }
                ps.setLong(nIndex, lRowNumStart); //给入起始行号
                nIndex++;
                ps.setLong(nIndex, lRowNumEnd); //给入结束行号
                rs = ps.executeQuery();
                while(rs != null && rs.next())
                {
                    LoanDrawNoticeInfo Info = new LoanDrawNoticeInfo();
                    Info.setID(rs.getLong("ID"));
                    Info.setCode(rs.getString("Code"));
                    Info.setContractID(rs.getLong("ContractID"));
                    Info.setContractCode(rs.getString("ContractCode"));
                    Info.setClientName(rs.getString("ClientName"));
                    //Info.setAmount(rs.getDouble("mLoanAmount"));
                    Info.setContractAmount(rs.getDouble("MEXAMINEAMOUNT"));
                    Info.setAgentRate(rs.getDouble("mChargeRate"));
                    //ContractAmountInfo aInfo = new ContractAmountInfo();
                    //ContractInfo cInfo = new ContractInfo();
                    //ContractDao dao = new ContractDao();
                    //aInfo = dao.getLateAmount(Info.getContractID());
                    //cInfo.setAInfo(aInfo); //合同金额
                    //Info.setBalance(cInfo.getAInfo().getBalanceAmount());//合同当前余额
                    Info.setInputDate(rs.getTimestamp("dtInput"));
                    Info.setDrawAmount(rs.getDouble("mAmount"));
                    //代理费
                    Info.setDrawAgentAmount(rs.getDouble("mChargeRate")/1000*(Info.getDrawAmount()-rs.getDouble("MDRAWAMOUNT")));
                    Info.setInputUserID(rs.getLong("nInputUserID"));
                    Info.setInputUserName(rs.getString("InputUserName"));
                    Info.setNextCheckUserID(rs.getLong("nNextCheckUserID"));
                    Info.setCheckUserName(rs.getString("CheckUserName"));
                    Info.setStatusID(rs.getLong("nStatusID"));
                    Info.setCount(lRecordCount);
                    Info.setPageCount(lPageCount);
                    Info.setNextCheckLevel(rs.getLong("nNextCheckLevel"));
                    
                    vReturn.addElement(Info);
                }
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
        }
        catch (SQLException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        finally
        {
            try
            {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (SQLException e)
            {
                log4j.error(e.toString());
                throw new IException("Gen_E001");
            }
        }

        //////////////////////////
        return vReturn.size() <= 0 ? null : vReturn;
    }
    
																					
	/**
	 * 通过一个提款通知单，操作LoanDrawNotice表
	 * <br>审核提款通知单（包括拒绝、返回修改）
	 * @param lLoanDrawNoticeID 提款通知单标识
	 * @param sOpinion 审核意见
	 * @param lUserID 审核人
	 * @param lNextUserID 下一级审核人
	 * @param lActionID 操作标示
	 *		  1：审核通过
	 *		  2：最后一级审核通过
	 *		  3：返回修改
	 *		  4：拒绝
	 */																					
	public long checkLoanDrawNotice(
		long lApprovalContentID,//lLoanDrawNoticeID,
		long lLoanTypeID,
		String sOpinion,
		long lUserID,
		long lNextUserID,
		long lActionID,
		long lCurrencyID,long lOfficeID) 
    throws RemoteException,Exception
	{
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        long lResult = -1;
        String strSQL = ""; //主SQL语句

        //定义相应操作常量
        //贷款
        long lModuleID = Constant.ModuleType.LOAN;
        //业务类型
        //long lLoanTypeID = Constant.ApprovalLoanType.YT;
        long lYTActionID = Constant.ApprovalAction.LOANDRAW_NOTICE;
        
        long lStatusID = -1;
        long lResultID = -1;
        long lApprovalID = -1;
        long lLevel = -1;
        
        ApprovalTracingInfo info = new ApprovalTracingInfo();
        ApprovalDelegation appbiz = new ApprovalDelegation();
        ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
        try
        {
            con = Database.getConnection();

            //获得ApprovalID
			lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lYTActionID,lOfficeID,lCurrencyID);
			//下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			//审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);

            if (lActionID == 1) //拒绝
            {
                //逻辑删除审批意见
                appbiz.deleteApprovalTracing(
				lModuleID,lLoanTypeID,lYTActionID,lOfficeID,lCurrencyID,
                    lApprovalContentID,
                    2);
                lStatusID = Constant.RecordStatus.INVALID;
                lResultID = Constant.ApprovalDecision.REFUSE;
                //-------拒绝逻辑删除本条免还申请----------//
                strSQL =
                    "update Loan_YT_DrawForm  set nStatusID="
                        + LOANConstant.LoanDrawNoticeStatus.REFUSE
                        + " where ID="
                        + lApprovalContentID;
                //拒绝后需要做的操作//*/
                //log4j.info("审批拒绝 SQL=" + strSQL);
                lResult=ApplyUpdate(strSQL);
                log4j.info("审批拒绝 ");
            }
            if (lActionID == 2) //审批
            {
                lStatusID = Constant.RecordStatus.VALID;
                lResultID = Constant.ApprovalDecision.PASS;
                if (appInfo.getIsPass() == Constant.YesOrNo.YES && lLevel > 0)
				{
                    strSQL = " update Loan_YT_DrawForm "
                        + "set nnextcheckuserid = "
                        + lNextUserID
                        + ", nNextCheckLevel = " 
                        + lLevel
                        + " where ID = "
                        + lApprovalContentID;
                    Log.print("更新下一个审核级别（可越级）：" + lLevel);
				}
				else
				{
				    strSQL = " update Loan_YT_DrawForm "
	                        + "set nnextcheckuserid = "
	                        + lNextUserID
	                        + ", nNextCheckLevel = nNextCheckLevel + 1 where ID = "
	                        + lApprovalContentID;
				    Log.print("更新下一个审核级别（不可越级）：" + lLevel);
				}
                
                //log4j.info("审批通过");
                lResult=ApplyUpdate(strSQL);
                log4j.info("审批通过 ");
            }
            if (lActionID == 3) //审批&&最后
            {
                lStatusID = Constant.RecordStatus.VALID;
                lResultID = Constant.ApprovalDecision.FINISH;
                strSQL =
                    "update Loan_YT_DrawForm set nnextcheckuserid="
                        + lNextUserID
                        + ", nStatusID="
                        + LOANConstant.LoanDrawNoticeStatus.CHECK
                        + " where ID = "
                        + lApprovalContentID;
                //审批完成后需要做的操作，状态变为已审核
                log4j.info("审批完成");
                lResult=ApplyUpdate(strSQL);
                //log4j.info("审批完成");
            }
            if (lActionID == 4) //返回修改
            {
                lStatusID = Constant.RecordStatus.VALID;
                //装态也置为已提交
                lResultID = Constant.ApprovalDecision.RETURN;
                strSQL =
                    " update Loan_YT_DrawForm set "
                        + " nnextcheckuserid=ninputuserid, nStatusID="
                        + LOANConstant.LoanDrawNoticeStatus.SUBMIT
                        + ", nNextCheckLevel=1 where ID="
                        + lApprovalContentID;
                log4j.info("返回修改");
                lResult=ApplyUpdate(strSQL);
                //log4j.info("返回修改");
            }
            //---------------录入审批意见---------------//
            if (lActionID != 1) //不是拒绝
            {
                info.setModuleID(lModuleID);
                info.setLoanTypeID(lLoanTypeID);
                info.setActionID(lYTActionID);
                info.setApprovalContentID(lApprovalContentID);
                info.setUserID(lUserID);
                info.setNextUserID(lNextUserID);
                info.setOpinion(sOpinion);
                info.setResultID(lResultID);
                info.setStatusID(lStatusID);
				info.setOfficeID(lOfficeID);
				info.setCurrencyID(lCurrencyID);
                appbiz.saveApprovalTracing(info);//保存审批意见
                log4j.info("保存审批意见");
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
        }
        catch (Exception ex)
        {
            log4j.error(ex.toString());
            //modified by mzh_fu 2007/08/07
            //throw new IException("Gen_E001");
            throw new IRollbackException(context, ex.getMessage(), ex);
        }
        finally
        {
            try
            {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (SQLException e)
            {
                log4j.error(e.toString());
                //modified by mzh_fu 2007/08/07
                //throw new IException("Gen_E001");
                throw new IRollbackException(context, e.getMessage(), e);
            }
        }
        return lResult;
    }																						
	

	/**
	 * 取消提款通知单，
   	 * @param lLoanDrawNoticeID 提款通知单标识
     */
	public long cancelLoanDrawNotice(long lLoanDrawNoticeID,long lLoanTypeID,long lCurrencyID,long lOfficeID) 
    throws RemoteException,Exception
	{
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        String strSQL = null;
        
        long lStatusID = -1;
        long lResult = -1;

        //定义相应操作常量
        //模块贷款
        long lModuleID = Constant.ModuleType.LOAN;
        //业务类型
        //long lLoanTypeID = Constant.ApprovalLoanType.YT;
        //操作类型
        long lActionID = Constant.ApprovalAction.LOANDRAW_NOTICE;


        long lApprovalID = -1;
        ApprovalDelegation appbiz = new ApprovalDelegation();
        
        try
        {
            //连结数据库
            con = Database.getConnection();
            //获得ApprovalID
//            ApprovalDao appdao = new ApprovalDao(con);
            lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
            log4j.info("approalID:"+lApprovalID);
            //先删除以前的审核记录（物理删除）
            try
            {
                appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID, lLoanDrawNoticeID, 1);
            }
            catch(Exception e)
            {
                log4j.error(e.toString());
                throw new IException("Gen_E001");
            }
            strSQL =
                " SELECT a.NSTATUSID "
                    + " FROM Loan_YT_DrawForm a  "
                    + " WHERE  "
                    + " a.ID = "
                    + lLoanDrawNoticeID;
            log4j.info(" SQL=" + strSQL);
            ps = con.prepareStatement(strSQL);
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                log4j.info("can cancel");
                lStatusID = rs.getLong("NSTATUSID");
                lResult = 1;
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (!(lStatusID == LOANConstant.LoanDrawNoticeStatus.SUBMIT))
            {
                log4j.info("status not right");
                lResult = -1;
            }
            if (lResult > 0)
            {
                //逻辑删除本条记录
                strSQL =
                    " Update Loan_YT_DrawForm "
                        + " SET nStatusID ="
                        + Constant.RecordStatus.INVALID
                        + " WHERE ID = "+lLoanDrawNoticeID
                        + "";
                log4j.info("delete SQL=" + strSQL);
                ps = con.prepareStatement(strSQL);
                lResult = ps.executeUpdate();
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
        }
        catch (SQLException e)
        {
            log4j.error(e.toString());
            //modified by mzh_fu 2007/08/07
            //throw new IException("Gen_E001");
            throw new IRollbackException(context, e.getMessage(), e);
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            //modified by mzh_fu 2007/08/07
            //throw new IException("Gen_E001");
            throw new IRollbackException(context, e.getMessage(), e);
        }
        //-----------------------
        finally
        {
            try
            {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (Exception ex)
            {
                log4j.error(ex.toString());
                //modified by mzh_fu 2007/08/07
                //throw new IException("Gen_E001");
                throw new IRollbackException(context, ex.getMessage(), ex);
            }
        }
        return lResult;
    }
  
	/**
	 * 查找提款通知单
	 * @param lLoanDrawNoticeID 提款通知单标识
	 */     
	public LoanDrawNoticeInfo findLoanDrawNoticeByID(long lLoanDrawNoticeID) 
    throws RemoteException,Exception
	{
        LoanDrawNoticeInfo Info = null;
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String strSQL = ""; //主SQL语句
        try
        {
            con = Database.getConnection();
            strSQL =
                " select a.*  "
                    + "  ,b.sName as InputUserName "
                    + "  ,c.sName as CheckUserName "
                    + " from Loan_YT_DrawForm a, UserInfo b, UserInfo c "
                    + "  where  a.nInputUserID=b.ID(+) "
                    + "     and a.nNextCheckUserID = c.ID(+)   "
                    + "     and a.ID = "
                    + lLoanDrawNoticeID
                    + " ";
            log4j.info("SQL :" + strSQL);
            ps = con.prepareStatement(strSQL);
            rs = ps.executeQuery();
            if (rs != null && rs.next())
            {
                Info = new LoanDrawNoticeInfo();
                Info.setID(rs.getLong("ID"));
                Info.setContractID(rs.getLong("nContractID"));
                Info.setCode(rs.getString("sCode"));
                Info.setDrawAmount(rs.getDouble("mAmount"));
                Info.setNextCheckUserID(rs.getLong("nNextCheckUserID"));
                Info.setInputUserID(rs.getLong("nInputUserID"));
                Info.setInputDate(rs.getTimestamp("dtInput"));
                Info.setStatusID(rs.getLong("nStatusID"));
                Info.setInputUserName(rs.getString("InputUserName"));
                Info.setCheckUserName(rs.getString("CheckUserName"));
                Info.setNextCheckLevel(rs.getLong("nNextCheckLevel"));
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
            if (Info != null)
            {
				LoanDrawNoticeDao dao = new LoanDrawNoticeDao();
				Info.setYTDrawInfo(dao.getYTDraw(lLoanDrawNoticeID));
            }
        }
        catch (SQLException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        finally
        {
            try
            {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (SQLException e)
            {
                log4j.error(e.toString());
                throw new IException("Gen_E001");
            }
        }
        return Info;
    }
	
	/**
	 * added by mzh_fu 2007/08/18
	 * 查找未提款金额
	 * 
	 * @param lContractId
	 *            合同ID
	 */
	public double getYTUnDrawAmountByContractId(long lContractId)
			throws RemoteException, Exception {
		return new LoanDrawNoticeDao()
				.getYTUnDrawAmountByContractId(lContractId);
	}
    
	/**
	 * added by mzh_fu 2007/08/18
	 * 查找提款通知单金额
	 * 
	 * @param lContractId
	 *            合同ID
	 */
	public double getYTDrawAmountByDrawNoticeId(long lDrawNoticeId)
			throws RemoteException, Exception {
		return new LoanDrawNoticeDao()
				.getYTDrawAmountByDrawNoticeId(lDrawNoticeId);
	}
	
    /*
	 * 
	 * @author haoning @time 2003-12-2 @param strSQL function
	 */
    //审批完成后需要做的操作
    private long ApplyUpdate(String strSQL)
        throws Exception
    {
        Connection con = null;
        PreparedStatement ps = null;
        long lResult = -1;
        try
        {
            if(strSQL != null && strSQL !="")
            {
                con = Database.getConnection();
                log4j.info("SQL:"+strSQL);
                ps=con.prepareStatement(strSQL);
                lResult = ps.executeUpdate();  
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }            
            }
            if (ps != null)
            {
                ps.close();
                ps = null;
            }
            if (con != null)
            {
                con.close();
                con = null;
            }
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        finally
        {
            try
            {
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (con != null)
                {
                    con.close();
                    con = null;
                }
            }
            catch (Exception e)
            {
                log4j.error(e.toString());
                throw new IException("Gen_E001");
            }
        }
        return lResult;
    }
    /**
     * 提款通知单审批方法
     * @param nInfo
     * @return
     * @throws RemoteException
     * @throws IRollbackException
     * @throws IException
     */
	public long doApprovalLoanDrawNotice(LoanDrawNoticeInfo nInfo) throws RemoteException,
	IRollbackException,IException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection conn = null;
		long lResult = -1;
		
		try {
			conn = Database.getConnection();
			
			LoanDrawNoticeDao LoanDrawNoticeDao = new LoanDrawNoticeDao();
			
			LoanDrawNoticeInfo nInfo1 = new LoanDrawNoticeInfo();
			nInfo1 = findLoanDrawNoticeByID(nInfo.getID());
		
			
			InutParameterInfo inutParameterInfo = nInfo.getInutParameterInfo();
			InutParameterInfo returnInfo = new InutParameterInfo();
		
			// 将业务记录置入nInfo1,转换成标准map传递到审批流引擎
			inutParameterInfo.setDataEntity(nInfo1);
		
			// 提交审批
			returnInfo = FSWorkflowManager.doApproval(inutParameterInfo);
			// 如果是最后一级,且为审批通过,更新状态为已审批
			if (returnInfo.isLastLevel()) {
				long lll=nInfo.getID();
		
				lResult = LoanDrawNoticeDao.updateLoanDrawNoticeStatus(lll,LOANConstant.LoanDrawNoticeStatus.CHECK);		
				//审批完成后需要做的操作
			}
			// 如果是最后一级,且为审批拒绝,更新状态为已保存
			else if (returnInfo.isRefuse()) {
				
				lResult = LoanDrawNoticeDao.updateLoanDrawNoticeStatus(nInfo.getID(),LOANConstant.LoanDrawNoticeStatus.SUBMIT);
				
				// 被拒绝时应该清除的关联

			}
		
		
		
		} catch (Exception e) {
			log4j.error(e.toString());
			throw new IRollbackException(context, e.getMessage(), e);
		}finally {
			try {
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log4j.error(ex.toString());
				//modified by mzh_fu 2007/08/07
				//throw new IException("Gen_E001");
				throw new IRollbackException(context, ex.getMessage(), ex);
			}
		}
		return lResult;
	}
	
	/**
	 * Modify by leiyang date 2007/07/10
	 * 审批流：校验放款通知单
	 * @param loanInfo
	 * @return
	 * @throws RemoteException
	 * @throws IRollbackException
	 */
	public long checkPayNotice(LoanDrawNoticeInfo nInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		LoanDrawNoticeDao loanDrawNoticeDao = new LoanDrawNoticeDao();
		//nInfo.get
		try
		{
			//校验放款通知单状态
			lReturn = loanDrawNoticeDao.checkPayNoticeState(nInfo.getID());					
		}
		catch (Exception e)
		{
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return lReturn;
	}
	
	/**
	 * Modify by leiyang date 2007/07/11
	 * 审批流：取消审批方法（银团贷款 提款单）
	 * @param loanInfo
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(LoanDrawNoticeInfo nInfo)throws RemoteException, IRollbackException
	{
		long lReturn = -1;
		InutParameterInfo inutParameterInfo = nInfo.getInutParameterInfo();
		LoanDrawNoticeDao loanDrawNoticeDao = new LoanDrawNoticeDao();
		
		try
		{
			//取消审批
			lReturn = loanDrawNoticeDao.updateLoanDrawNoticeStatus(nInfo.getID(), LOANConstant.LoanDrawNoticeStatus.SUBMIT);
			
			if(lReturn > 0){
				//将审批记录表内的该交易的审批记录状态置为无效
				if(inutParameterInfo.getApprovalEntryID()>0)
				{
					FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				}
			}
		}
		catch (Exception e)
		{
			throw new IRollbackException(context, e.getMessage(), e);
		}
		return lReturn;
	}
	
	/**
	 * 校验银团贷款，每个参与行累计发放金额，不包括本提款单
	 * @param contractID
	 * @param drawNoticeID
	 * @return
	 * @throws RemoteException
	 * @throws Exception
	 */
	public Collection validateYTDrawAllAmountInfo(long contractID,long drawNoticeID)throws RemoteException, Exception 
	{
		return new LoanDrawNoticeDao().validateYTDrawAllAmountInfo(contractID,drawNoticeID);
	}
	/**
	 * 得到银团提款单明细信息
	 * @param lDrawId
	 * @return
	 * @throws RemoteException
	 * @throws Exception
	 */
	public Collection getYTDraw(long lDrawId)throws RemoteException,Exception
	{
		return new LoanDrawNoticeDao().getYTDraw(lDrawId);
	}
}


