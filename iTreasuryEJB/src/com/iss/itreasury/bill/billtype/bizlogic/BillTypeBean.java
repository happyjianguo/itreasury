/* Generated by Together */

package com.iss.itreasury.bill.billtype.bizlogic;

import java.util.*;
import com.iss.itreasury.bill.util.*;
import com.iss.itreasury.bill.billtype.dataentity.*;
import com.iss.itreasury.bill.billtype.dao.*;
import com.iss.itreasury.dao.ITreasuryDAOException;

public class BillTypeBean {

	private BillTypeDAO dao = null;

	public BillTypeBean()
	{
		dao = new BillTypeDAO();
	}

    /**
     * 根据类型属性信息查找所有类型
     * @param abstractTypeID 票据属性id
     * @return Collection中的对象为BillTypeInfo
     * @throws BillException
     */
    public Collection findByAbstractType(long abstractTypeID) throws BillException {

		return dao.findByAbstractType(abstractTypeID);
    }

    /**
     *根据查询条件查询票据类型
     * @param qInfo 查询条件信息
     * @return Collection中的对象为BillTypeInfo
     * @throws BillException
     */
    public Collection findByMultiOption(BillTypeQueryInfo qInfo) throws BillException {

		return dao.findByMultiOption(qInfo);
    }

    /**
     * 新增票据类型信息
     * @param BillTypeInfo	类型信息
     * @return long 新增的类型信息的ID
     * @throws BillException
     */
    public long add(BillTypeInfo info) throws BillException {
		long id = -1;
			try
			{
				id=dao.findIdByCode(info.getCode(),-1);
			}
			catch (BillException e)
			{
				throw new BillException("Bill_E012", e);
			}
			if( id > 0)
			{
				throw new BillException("Bill_E010", null);
//				id = -2;
//				return id;
			}
			try
			{
				id=dao.findIdByName(info.getName(),-1);
			}
			catch (BillException e)
			{
				throw new BillException("Bill_E012", e);
			}

			if(id > 0)
			{
				throw new BillException("Bill_E011", null);
//				id = -3;
//				return id;
			}

			dao.setUseMaxID();
			try
			{

				id = dao.add(info);
			}
			catch (ITreasuryDAOException e)
			{
				throw new BillException("Bill_E012", e);
			}

		return id;
    }

    /**
     * 修改票据类型信息
     * @param BillTypeinfo	类型信息
     * @return void
     * @throws BillException
     */
    public long update(BillTypeInfo info) throws BillException {
		long id = -1;
		try
		{
			id=dao.findIdByCode(info.getCode(),info.getId());
			if( id > 0)
			{
				throw new BillException("Bill_E010", null);
//				id = -2;
//				return id;
			}
			id=dao.findIdByName(info.getName(),info.getId());
			if(id > 0)
			{
				throw new BillException("Bill_E011", null);
//				id = -3;
//				return id;
			}

			dao.update(info);
			id=info.getId();
		}
		catch (ITreasuryDAOException e)
		{
			throw new BillException("Bill_E012", e);
		}

		return id;
    }

    /**
     * 根据id删除类型信息
     * 删除票据前检查是否有该类型的处于注册、领用状态的票据，如果有，则提示需要先注销票据
     * @param id	类型id
     * @return void
     * @throws BillException
     */
    public void delete(long id) throws BillException {
		try
		{
			//逻辑删除
			if(id>0)// && c.isEmpty())
			{
				dao.delete(id);
			}
			else
			{
				throw new ITreasuryDAOException("Bill_E013", null);
			}
		}
		catch (ITreasuryDAOException e)
		{
			throw new BillException("Bill_E012", e);
		}
    }

	/**
  * 根据id查找类型信息 调用BillTypeBean的相应方法
  * @param id	类型id
  * @return BillTypeInfo
  * @throws BillException
  */
 public BillTypeInfo findByID(long id) throws BillException {

	 BillTypeInfo info = new BillTypeInfo();
	 try
	 {
		 info = (BillTypeInfo)dao.findByID(id, info.getClass());

	 }
	 catch (ITreasuryDAOException e)
	 {
		 throw new BillException("Bill_E012", e);
	 }
	 return info;
 }



 /**
  * 根据id查找类型信息 调用BillTypeBean的相应方法
  * @param id	类型id
  * @return BillTypeInfo
  * @throws BillException
  */
 public long findMaxBillTypeCode() throws BillException {
	 long code = 0;
	 try
	 {
		 code=dao.findMaxBillTypeCode();
		 if(code < 1)
		 {
			 code = 1;
		 }
	 }
	 catch (BillException e)
	 {
		 throw new BillException("Bill_E012", null);
	 }
	 return code;
 }




}
