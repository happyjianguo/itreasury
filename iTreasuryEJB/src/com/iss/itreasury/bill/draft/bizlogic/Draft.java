/* Generated by Together */

package com.iss.itreasury.bill.draft.bizlogic;

import java.rmi.RemoteException;
import java.util.Collection;
import java.util.Vector;

import javax.ejb.EJBObject;

import com.iss.itreasury.bill.draft.dataentity.DiscountContractBillInfo;
import com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftConsignAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftConsignReplyAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftQueryAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftQueryReplyAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftStorageAssembleInfo;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.loan.assurechargenotice.dataentity.AssureChargeNoticeInfo;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.bill.draft.dataentity.TransDraftOutInfo;
public interface Draft extends EJBObject {
    /**
     * 根据票据id查找有效状态的票据信息：操作table：Loan_DiscountContractBill 
     */
	DiscountContractBillInfo findDiscountContractBillInfoByID(long lBillID) throws RemoteException,BillException;

    /**
     * 根据汇票托收交易id查找有效的托收交易信息：操作table：Bill_TransDraftConsign 
     */
    DraftConsignAssembleInfo findDraftConsignByID(long lID) throws RemoteException,BillException;

    /**
     * 根据汇票托复交易id查找有效的托收交易信息：操作table：Bill_TransDraftConsignRelpy 
     */
    DraftConsignReplyAssembleInfo findDraftConsignReplyByID(long lID) throws RemoteException,BillException;

    /**
     * 根据汇票入库交易id查找有效的入库交易信息：操作table：Bill_TransDraftIn 
     */
    DraftStorageAssembleInfo findDraftInByID(long lID) throws RemoteException,BillException;

    /**
     * 根据汇票出库交易id查找有效的出库交易信息：操作table：Bill_TransDraftOut 
     */
    DraftStorageAssembleInfo findDraftOutByID(long lID) throws RemoteException,BillException;

    /**
     * 根据汇票查询交易id查找有效的查询交易信息：操作table：Bill_TransDraftQuery 
     */
    DraftQueryAssembleInfo findDraftQueryByID(long lID ) throws RemoteException,BillException;

    /**
     * 根据汇票查复交易id查找有效的查复交易信息：操作table：Bill_TransDraftQueryReply 
     */
    DraftQueryReplyAssembleInfo findDraftQueryReplyByID(long lID) throws RemoteException,BillException;

    /**
     * 根据查询条件查询相应有效的汇票信息，操作table：Loan_DiscountContractBill，这个方法在汇票查询，查复，托收，托付中都使用到，在不同的交易中查询条件不相同，因而这是一个综合查询类 
     */
    Vector queryDraftByCondition(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException;
    /**
     * 查询入库纪录(可以做出库交易的入库票据)，操作table：Loan_DiscountContractBill，BILL_TRANSDRAFTIN
     */
    Vector queryDraftByConditionForOut(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException;

    /**
     * 根据查询条件查询相应的有效汇票托收交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftConsign 
     */
    Vector queryDraftConsignByCondition(com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException;

    /**
     * 根据查询条件查询相应的汇票托复交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftConsignReply 
     */
    Vector queryDraftConsignReplyByCondition(com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException;

    /**
     * 根据查询条件查询相应的有效汇票入库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftIn 
     */
    Vector queryDraftInByCondition(com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException;

    /**
     * 根据查询条件查询相应的有效汇票出库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftOut 
     */
    Vector queryDraftOutByCondition(com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException;
    /**
     * 区分是否挂接了审批流
     * 根据查询条件查询相应的有效汇票出库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftOut 
     */
    Vector queryDraftOutByCondition(com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition multiBillQueryCondition,boolean isNeedApproval) throws RemoteException,BillException;

    /**
     * 根据查询条件查询相应的有效汇票查询交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftQuery 
     */
    Vector queryDraftQueryByCondition(com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException;

    /**
     * 根据查询条件查询相应的有效汇票查复交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftQueryReply 
     */
    Vector queryDraftQueryReplyByCondition(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException;

    /**
     * 保存汇票托收信息 
     */
    long saveDraftConsign(DraftConsignAssembleInfo draftConsignAssembleInfo) throws RemoteException,BillException;

    /**
     * 保存汇票托复信息 
     */
    long saveDraftConsignReply(DraftConsignReplyAssembleInfo draftConsignReplyAssembleInfo) throws RemoteException,BillException;

    /**
     * 保存汇票入库信息 
     */
    long saveDraftIn(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,BillException;

    /**
     * 保存汇票出库信息 
     */
    long saveDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,BillException;

    /**
     * 保存汇票查询信息 
     */
    long saveDraftQuery(DraftQueryAssembleInfo draftQueryAssembleInfo) throws RemoteException,BillException;

    /**
     * 保存汇票查复信息 
     */
    long saveDraftQueryReply(DraftQueryReplyAssembleInfo draftQueryReplyAssembleInfo) throws RemoteException,BillException;

    /** @link dependency */
    /*# DraftEJB lnkSession1Bean; */
    
    /**
     * 保存汇票信息
     */
    public long saveDiscountContractBillInfo(DiscountContractBillInfo info) throws RemoteException,BillException;
    
    /**
     * 删除汇票信息
     */
    public void deleteDiscountContractBillByID(long lBillID)  throws RemoteException,BillException;
    
    /**
     * 根据票据id查找该票据下所有入库记录
     */
    public Collection findDraftInByBillID(long lBillID)  throws RemoteException,BillException;
    /**
     * 根据票据id查找该票据下所有出库记录
     */
    public Collection findDraftOutByBillID(long lBillID)  throws RemoteException,BillException;
	
    /**
     * 根据票据id查找该票据下所有查询记录
     */
    public Collection findDraftQueryByBillID(long lBillID) throws RemoteException,BillException;
    /**
     * 根据票据id查找该票据下所有查复记录
     */
    public Collection findDraftQueryReplyByBillID(long lBillID) throws BillException, RemoteException;
    
    /**
     * 根据票据id查找该票据下所有托收记录
     */
    public Collection findDraftConsignByBillID(long lBillID) throws BillException, RemoteException;
    /**
     * 根据票据id查找该票据下所有托复记录
     */
    public Collection findDraftConsignReplyByBillID(long lBillID) throws BillException, RemoteException;
	
    public void deleteDraftInByID(long lID) throws BillException, RemoteException;
    public void deleteDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws BillException, RemoteException;
    public void deleteDraftQueryByID(long lID) throws BillException, RemoteException;
    public void deleteDraftQueryReplyByID(long lID) throws BillException, RemoteException;
    public void deleteDraftConsignByID(long lID) throws BillException, RemoteException;
    public void deleteDraftConsignReplyByID(long lID) throws BillException, RemoteException;
    
    public long doApprovalDraftOut(TransDraftOutInfo nInfo) throws RemoteException,IRollbackException;
    public long doCancelApproval(TransDraftOutInfo nInfo) throws RemoteException,IRollbackException;
    public DraftStorageAssembleInfo findLastDraftInByBillID(long lBillID) throws RemoteException,BillException;
    public DraftStorageAssembleInfo findLastDraftOutByBillID(long lBillID) throws RemoteException,BillException;
    public long autoDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,IRollbackException;
    public long autoCancelDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,IRollbackException;
}
