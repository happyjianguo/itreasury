/* Generated by Together */

package com.iss.itreasury.bill.draft.bizlogic;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Vector;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.bill.draft.dao.DiscountContractBillDao;
import com.iss.itreasury.bill.draft.dao.TransDraftConsignDao;
import com.iss.itreasury.bill.draft.dao.TransDraftConsignReplyDao;
import com.iss.itreasury.bill.draft.dao.TransDraftInDAO;
import com.iss.itreasury.bill.draft.dao.TransDraftOutDao;
import com.iss.itreasury.bill.draft.dao.TransDraftQueryDao;
import com.iss.itreasury.bill.draft.dao.TransDraftQueryReplyDao;
import com.iss.itreasury.bill.draft.dataentity.DiscountContractBillInfo;
import com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition;
import com.iss.itreasury.bill.draft.dataentity.TransDraftConsignInfo;
import com.iss.itreasury.bill.draft.dataentity.TransDraftConsignReplyInfo;
import com.iss.itreasury.bill.draft.dataentity.TransDraftInInfo;
import com.iss.itreasury.bill.draft.dataentity.TransDraftOutInfo;
import com.iss.itreasury.bill.draft.dataentity.TransDraftQueryInfo;
import com.iss.itreasury.bill.draft.dataentity.TransDraftQueryReplyInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftConsignAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftConsignReplyAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftQueryAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftQueryReplyAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftStorageAssembleInfo;
import com.iss.itreasury.bill.util.BILLConstant;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.bill.util.BillNameRef;
import com.iss.itreasury.bill.venture.dao.BlackBillDao;
import com.iss.itreasury.bill.venture.dataentity.BlackBillInfo;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log4j;

import com.iss.itreasury.loan.leasehold.dao.LoanAssureChargeFormDao;
import com.iss.itreasury.loan.leasehold.dataentity.LeaseholdPayNoticeInfo;
import com.iss.itreasury.loan.transdiscountapply.dao.TransDiscountApplyDAO;
import com.iss.itreasury.loan.transdiscountapply.dataentity.TransDiscountApplyInfo;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.system.approval.bizlogic.InutApprovalRelationBiz;
import com.iss.itreasury.system.approval.dataentity.InutApprovalRelationInfo;
import com.iss.itreasury.system.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.util.FSWorkflowManager;
import com.iss.itreasury.bill.draft.dataentity.TransDraftOutInfo;
/**
 * @ejbHome com.iss.itreasury.bill.draft.bizlogic.DraftHome
 * @ejbRemote com.iss.itreasury.bill.draft.bizlogic.Draft
 * @ejbDontSynchronizeNames 
 */
public class DraftEJB implements SessionBean {
	
	private Log4j logger = new Log4j(Constant.ModuleType.BILL, this);
	SessionContext sessionContext;
	
    private SessionContext ctx;

    public void setSessionContext(SessionContext context) throws RemoteException, EJBException {
        ctx = context;
    }

    public void ejbActivate() throws EJBException {
    }

    public void ejbPassivate() throws EJBException {
    }

    public void ejbRemove() throws EJBException {
    }

    public void ejbCreate() throws CreateException, EJBException {
            // Write your code here
    }

    /**
     * 根据票据id查找有效状态的票据信息：操作table：Loan_DiscountContractBill 
     */
    public DiscountContractBillInfo findDiscountContractBillInfoByID(long lBillID)  throws RemoteException,BillException{
    	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
    	DiscountContractBillInfo discountContractBillInfo=new DiscountContractBillInfo();
    	try {
			discountContractBillInfo=(DiscountContractBillInfo)discountContractBillDao.findByID(lBillID,new DiscountContractBillInfo().getClass());
		} catch (Exception e) {
			e.printStackTrace();
			throw new BillException("Bill_E012", e,this.ctx);
		}
    	return discountContractBillInfo;
    }

    /**
     * 根据汇票托收交易id查找有效的托收交易信息：操作table：Bill_TransDraftConsign 
     */
    public DraftConsignAssembleInfo findDraftConsignByID(long lID)  throws RemoteException,BillException{
    	TransDraftConsignDao consignDao = new TransDraftConsignDao();
    	try
		{
    		return consignDao.findDraftConsignByID(lID);
		}catch(BillException e)
		{
			throw new BillException(e,this.ctx);
		}
    }

    /**
     * 根据汇票托复交易id查找有效的托收交易信息：操作table：Bill_TransDraftConsignRelpy 
     */
    public DraftConsignReplyAssembleInfo findDraftConsignReplyByID(long lID)  throws RemoteException,BillException{
    	TransDraftConsignReplyDao consignReplyDao = new TransDraftConsignReplyDao();
    	try
		{
    		return consignReplyDao.findDraftConsignReplyByID(lID);
		}catch(BillException e)
		{
			throw new BillException(e,this.ctx);
		}
    }

    /**
     * 根据汇票入库交易id查找有效的入库交易信息：操作table：Bill_TransDraftIn 
     */
    public DraftStorageAssembleInfo findDraftInByID(long lID)  throws RemoteException,BillException{
		TransDraftInDAO transDraftInDAO=new TransDraftInDAO();
		try {
			return transDraftInDAO.findDraftInByID(lID);
		} catch (BillException e) {
			e.printStackTrace();
			throw new BillException(e.getErrorCode() ,e,this.ctx );
			//throw new BillException(e,this.ctx);
		}
    }

    /**
     * 根据汇票出库交易id查找有效的出库交易信息：操作table：Bill_TransDraftOut 
     */
    public DraftStorageAssembleInfo findDraftOutByID(long lID )  throws RemoteException,BillException{
    	TransDraftOutDao outDao = new TransDraftOutDao();
    	try
		{
    		return outDao.findDraftOutByID(lID);
		}catch(BillException e)
		{
			throw new BillException(e,this.ctx);
		}
    }

    /**
     * 根据汇票查询交易id查找有效的查询交易信息：操作table：Bill_TransDraftQuery 
     */
    public DraftQueryAssembleInfo findDraftQueryByID(long lID )  throws RemoteException,BillException{
    	TransDraftQueryDao queryDao = new TransDraftQueryDao();
    	try
		{
    		return queryDao.findDraftQueryByID(lID);
		}catch(BillException e)
		{
			throw new BillException(e,this.ctx);
		}
    }

    /**
     * 根据汇票查复交易id查找有效的查复交易信息：操作table：Bill_TransDraftQueryReply 
     */
    public DraftQueryReplyAssembleInfo findDraftQueryReplyByID(long lID) throws RemoteException,BillException{
    	TransDraftQueryReplyDao queryReplyDao = new TransDraftQueryReplyDao();
    	try
		{
    		return queryReplyDao.findDraftQueryReplyByID(lID);
		}catch(BillException e)
		{
			throw new BillException(e,this.ctx);
		}
    }

    /**
     * 根据查询条件查询相应有效的汇票信息，操作table：Loan_DiscountContractBill，这个方法在汇票查询，查复，托收，托付中都使用到，在不同的交易中查询条件不相同，因而这是一个综合查询类 
     */
    public Vector queryDraftByCondition(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException{
    	TransDraftQueryDao transDraftQueryDao=new TransDraftQueryDao();
    	try {
			return transDraftQueryDao.queryDraftByCondition(multiBillQueryCondition);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }
    /**
     * 查询入库纪录(可以做出库交易的入库票据)，操作table：Loan_DiscountContractBill，BILL_TRANSDRAFTIN
     */
    public Vector queryDraftByConditionForOut(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException{
    	TransDraftOutDao transDraftOutDao=new TransDraftOutDao();
    	try {
			return transDraftOutDao.queryDraftByConditionForOut(multiBillQueryCondition);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }
    /**
     * 根据查询条件查询相应的有效汇票托收交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftConsign 
     */
    public Vector queryDraftConsignByCondition(com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException{
    	TransDraftConsignDao transDraftConsignDao=new TransDraftConsignDao();
    	try {
			return transDraftConsignDao.queryDraftConsignByCondition(multiBillQueryCondition);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }

    /**
     * 根据查询条件查询相应的汇票托复交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftConsignReply 
     */
    public Vector queryDraftConsignReplyByCondition(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException{
    	TransDraftConsignReplyDao transDraftConsignReplyDao=new TransDraftConsignReplyDao();
    	try {
			return transDraftConsignReplyDao.queryDraftConsignReplyByCondition(multiBillQueryCondition);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }
    

    /**
     * 根据查询条件查询相应的有效汇票入库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftIn 
     */
    public Vector queryDraftInByCondition(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException{
    	TransDraftInDAO transDraftInDAO=new TransDraftInDAO();
    	try {
			return transDraftInDAO.queryDraftInByCondition(multiBillQueryCondition);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }

    /**
     * 根据查询条件查询相应的有效汇票出库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftOut 
     */
    public Vector queryDraftOutByCondition(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException{
    	TransDraftOutDao transDraftInDao=new TransDraftOutDao();
    	try {
			return transDraftInDao.queryDraftOutByCondition(multiBillQueryCondition);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }
    /**
     *区分是否挂接了审批流
     * 根据查询条件查询相应的有效汇票出库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftOut 
     */
    public Vector queryDraftOutByCondition(MultiBillQueryCondition multiBillQueryCondition,boolean isNeedApproval) throws RemoteException,BillException{
    	TransDraftOutDao transDraftInDao=new TransDraftOutDao();
    	try {
			return transDraftInDao.queryDraftOutByCondition(multiBillQueryCondition,isNeedApproval);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }

    /**
     * 根据查询条件查询相应的有效汇票查询交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftQuery 
     */
    public Vector queryDraftQueryByCondition(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException{
    	TransDraftQueryDao transDraftQueryDao=new TransDraftQueryDao();
    	try {
			return transDraftQueryDao.queryDraftQueryByCondition(multiBillQueryCondition);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }

    /**
     * 根据查询条件查询相应的有效汇票查复交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftQueryReply 
     */
    public Vector queryDraftQueryReplyByCondition(MultiBillQueryCondition multiBillQueryCondition) throws RemoteException,BillException{
    	TransDraftQueryReplyDao transDraftQueryReplyDao=new TransDraftQueryReplyDao();
    	try {
			return transDraftQueryReplyDao.queryDraftQueryReplyByCondition(multiBillQueryCondition);
		} catch (BillException e) {
			throw new BillException(e.getErrorCode(), e,this.ctx);
		}
    }

    /**
     * 保存汇票托收信息
     * 步骤 1：调用票据风险管理模块方法判断当前票据是否在黑名单中，如果是，给出提示信息“***票据在黑名单中，是  否继续？”；
     * 2： 如果是新增保存调用公用方法获取流水编号作为托收交易编号 ；
     * 判断票据是否已经存在，否则抛出相应的异常信息”×××票据不存在“ 
     * ，根据Loan_DiscountContractBill 的dtModify字段判断票据信息是否被修改过，如果修改过则抛出相应的提示异常信息”×××票据信息被修改过“；
     * 如果是修改保存，调用公用方法判断交易状态已经是否修改过，如果修改过则提示“××××信息被修改过”；
     * 根据Bill_TransDraftConsign的dtModifyDate字段判断托收交易信息是否被修改过，如果修改过则抛出相应异常信息“××××信息被修改过”；
     * 3  调用私有方法partsave方法   保存票据托收信息（操作table：Bill_TransDraftConsign），并对票据的的托收状态和托收次数进行赋值；
     * （注：partSave同时支持新增保存和修改保存）
     */
    public long saveDraftConsign(DraftConsignAssembleInfo draftConsignAssembleInfo) throws RemoteException,BillException{
    	DiscountContractBillInfo discountContractBillInfo;
    	TransDraftConsignInfo transDraftConsignInfo;
    	long returnID=-1;
    	Timestamp tsNow=Env.getSystemDateTime();
    	if(draftConsignAssembleInfo.getDiscountContractBillInfo()!=null&&draftConsignAssembleInfo.getTransDraftConsignInfo()!=null)
    	{
	    	discountContractBillInfo=draftConsignAssembleInfo.getDiscountContractBillInfo();
	    	transDraftConsignInfo=draftConsignAssembleInfo.getTransDraftConsignInfo();
    	}
    	else{
    		System.out.println("DraftConsignAssembleInfo，内容不全！");
    		throw new BillException("Bill_E036","DraftConsignAssembleInfo",null,this.ctx);
    	}
    	
    	try {
    		/* 托收暂不做黑名单校验
//			调用票据风险管理模块方法判断当前票据是否在黑名单中
			BlackBillInfo blackBillInfo=new BlackBillInfo();
			BlackBillDao blackBillDao=new BlackBillDao();
			
			blackBillInfo.setBillTypeID(discountContractBillInfo.getNDraftTypeID());
			blackBillInfo.setBillCode(discountContractBillInfo.getSCode());
			blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
			blackBillInfo.setOfficeID(discountContractBillInfo.getNOfficeID());
			blackBillInfo.setCurrencyID(discountContractBillInfo.getNCurrencyID());
			if(blackBillDao.isBillInBlackList(blackBillInfo))
			{
				//Bill_E028=该票据在黑名单中，不能?！
				throw new BillException("Bill_E028","托收",null,this.ctx);
			}
			*/
			
    		DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
    		TransDraftConsignDao transDraftConsignDao=new TransDraftConsignDao();
	    	//保存
	    	if(transDraftConsignInfo.getId()==-1)
	    	{
	    		//判断票据是否存在
	        	if(discountContractBillInfo.getId()==-1)
	        	{
	        		throw new BillException("Bill_E033",null,this.ctx);
	        	}
	        	DiscountContractBillInfo BillInfo=findDiscountContractBillInfoByID(discountContractBillInfo.getId());
	        	//判断该票据是否被修改过
	        	if(BillInfo==null||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()!=null&&!BillInfo.getDtModifyDate().equals(discountContractBillInfo.getDtModifyDate()))
	        			||(BillInfo.getDtModifyDate()==null&&discountContractBillInfo.getDtModifyDate()!=null)||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()==null))
	        	{
	        		throw new BillException("Bill_E031",null,this.ctx);
	        	}
	        	//设置修改时间,修改人
	        	discountContractBillInfo.setDtModifyDate(tsNow);
	    		discountContractBillDao.update(discountContractBillInfo);
				returnID=transDraftConsignDao.add(transDraftConsignInfo);
	    	}
	    	//修改
	    	else
	    	{
	    		//discountContractBillDao.update(discountContractBillInfo);
	    		TransDraftConsignInfo DraftConsignInfo=(TransDraftConsignInfo)transDraftConsignDao.findByID(transDraftConsignInfo.getId(),new TransDraftConsignInfo().getClass());
	    		if(DraftConsignInfo==null||(DraftConsignInfo.getModifyDate()!=null&&transDraftConsignInfo.getModifyDate()!=null&&!DraftConsignInfo.getModifyDate().equals(transDraftConsignInfo.getModifyDate()))
	        			||(DraftConsignInfo.getModifyDate()==null&&transDraftConsignInfo.getModifyDate()!=null)||(DraftConsignInfo.getModifyDate()!=null&&transDraftConsignInfo.getModifyDate()==null))
	        	{
	        		throw new BillException("Bill_E039","托收",null,this.ctx);
	        	}
	    		transDraftConsignInfo.setModifyDate(tsNow);
	    		transDraftConsignDao.update(transDraftConsignInfo);
	    	}
    	} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw new  BillException("Bill_E012",e,this.ctx);
    	}
    	return returnID;
    }

    /**
     * 保存汇票托复信息
     * 步骤 1：调用票据风险管理模块方法判断当前票据是否在黑名单中，如果是，给出提示信息“***票据在黑名单中，是  否继续？”；
     * 2： 如果是新增保存调用公用方法获取流水编号作为托复交易编号， ； 
     * 判断票据是否已经存在，否则抛出相应的异常信息”×××票据不存在“ ;
     * 根据Loan_DiscountContractBill 的dtModifyDate字段判断票据信息是否被修改，如果修改过，则抛出相应异常信息“××××信息被修改过”；
     * 如果是修改保存，调用公用方法判断托付交易状态已经是否修改过，如果修改过则提示“××××信息被修改过”，
     * 根据Bill_TransDraftSign的dtModifyDate字段分别判断票据和交易信息是否被修改过，如果修改过则抛出相应异常信息“××××信息被修改过”；
     * 3  调用私有方法partsave方法   保存票据托复信息（操作table：Bill_TransDraftConsignReply），并对票据的的托收状态进行修改赋值；
     * （注：partSave同时支持新增保存和修改保存）
     */
    public long saveDraftConsignReply(DraftConsignReplyAssembleInfo draftConsignReplyAssembleInfo) throws RemoteException,BillException{
    	DiscountContractBillInfo discountContractBillInfo;
    	TransDraftConsignReplyInfo transDraftConsignReplyInfo;
    	long returnID=-1;
    	Timestamp tsNow=Env.getSystemDateTime();
    	if(draftConsignReplyAssembleInfo.getDiscountContractBillInfo()!=null&&draftConsignReplyAssembleInfo.getTransDraftConsignReplyInfo()!=null)
    	{
	    	discountContractBillInfo=draftConsignReplyAssembleInfo.getDiscountContractBillInfo();
	    	transDraftConsignReplyInfo=draftConsignReplyAssembleInfo.getTransDraftConsignReplyInfo();
    	}
    	else{
    		System.out.println("DraftConsignAssembleInfo，内容不全！");
    		throw new BillException("Bill_E036","DraftConsignAssembleInfo",null,this.ctx);
    	}    	
    	try {
    		/* 托复暂不做黑名单校验
//			调用票据风险管理模块方法判断当前票据是否在黑名单中
			BlackBillInfo blackBillInfo=new BlackBillInfo();
			BlackBillDao blackBillDao=new BlackBillDao();
			
			blackBillInfo.setBillTypeID(discountContractBillInfo.getNDraftTypeID());
			blackBillInfo.setBillCode(discountContractBillInfo.getSCode());
			blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
			blackBillInfo.setOfficeID(discountContractBillInfo.getNOfficeID());
			blackBillInfo.setCurrencyID(discountContractBillInfo.getNCurrencyID());
			if(blackBillDao.isBillInBlackList(blackBillInfo))
			{
				//Bill_E028=该票据在黑名单中，不能?！
				throw new BillException("Bill_E028","托复",null,this.ctx);
			}
			*/
    		DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
    		TransDraftConsignReplyDao transDraftConsignReplyDao=new TransDraftConsignReplyDao();
	    	//保存
	    	if(transDraftConsignReplyInfo.getId()==-1)
	    	{
	    		//判断票据是否存在
	        	if(discountContractBillInfo.getId()==-1)
	        	{
	        		throw new BillException("Bill_E033",null,this.ctx);
	        	}
	        	DiscountContractBillInfo BillInfo=findDiscountContractBillInfoByID(discountContractBillInfo.getId());
	        	System.out.println(BillInfo.toString()+"\n"+discountContractBillInfo.toString());
	        	
	        	//判断该票据是否被修改过
	        	if(BillInfo==null||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()!=null&&!BillInfo.getDtModifyDate().equals(discountContractBillInfo.getDtModifyDate()))
	        			||(BillInfo.getDtModifyDate()==null&&discountContractBillInfo.getDtModifyDate()!=null)||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()==null))
	        	{
	        		throw new BillException("Bill_E031",null,this.ctx);
	        	}
	    		//设置修改时间,修改人
	        	discountContractBillInfo.setDtModifyDate(tsNow);
	    		discountContractBillDao.update(discountContractBillInfo);
				returnID=transDraftConsignReplyDao.add(transDraftConsignReplyInfo);
	    	}
	    	//修改
	    	else
	    	{
	    		//discountContractBillDao.update(discountContractBillInfo);
	    		TransDraftConsignReplyInfo DraftConsignReplyInfo=(TransDraftConsignReplyInfo)transDraftConsignReplyDao.findByID(transDraftConsignReplyInfo.getId(),new TransDraftConsignReplyInfo().getClass());
	    		if(DraftConsignReplyInfo==null||(DraftConsignReplyInfo.getModifyDate()!=null&&transDraftConsignReplyInfo.getModifyDate()!=null&&!DraftConsignReplyInfo.getModifyDate().equals(transDraftConsignReplyInfo.getModifyDate()))
	        			||(DraftConsignReplyInfo.getModifyDate()==null&&transDraftConsignReplyInfo.getModifyDate()!=null)||(DraftConsignReplyInfo.getModifyDate()!=null&&transDraftConsignReplyInfo.getModifyDate()==null))
	        	{
	        		throw new BillException("Bill_E039","托复",null,this.ctx);
	        	}
	    		transDraftConsignReplyInfo.setModifyDate(tsNow);
	    		transDraftConsignReplyDao.update(transDraftConsignReplyInfo);
	    	}
    	} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw new  BillException("Bill_E012",e,this.ctx);
    	}
    	return returnID;
    }

    /**
     * 保存汇票入库信息:
     * 步骤 1：调用票据风险管理模块方法判断当前票据是否在黑名单中，如果是，给出提示信息“***票据在黑名单中，是  否继续？”；
     * 2： 如果是新增保存调用公用方法获取流水编号作为入库交易编号，   
     * 并判断票据是否已经存在，如果已经存在则判断该票据是否处于出库状态，否则抛异常信息”×××尚未出库！“
     * 如果是修改保存，根据Loan_DiscountContractBill 和Bill_TransDraftIn 的dtModifyDate   字段分别判断票据和交易信息是否被修改过，如果修改过则抛出相应异常信息“××××信息被修改过”
     * 
     * 3 调用私有方法partsave方法 ，保存票据信息（操作table：Loan_DiscountContractBill），
     * 保存票据入库信息（操作table：Bill_TransDraftIn），并将票据的的入库出库状态和对应交易id赋值
     */
    public long saveDraftIn(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,BillException{
    	System.out.println("--------------DraftEJB.saveDraftIn-------------");
    	DiscountContractBillDao billDao=new DiscountContractBillDao();
		TransDraftInDAO dao=new TransDraftInDAO();
		
		long newBillId=-1;
		long ReturnId=-1;//-1表示更新操作
		//取得保存所需实体
		DiscountContractBillInfo discountContractBillInfo = new DiscountContractBillInfo();
		TransDraftInInfo transDraftInInfo;
		if(draftStorageAssembleInfo.getDiscountContractBillInfo()!=null&&draftStorageAssembleInfo.getTransDraftInInfo()!=null)
		{
			discountContractBillInfo=draftStorageAssembleInfo.getDiscountContractBillInfo();
			transDraftInInfo=draftStorageAssembleInfo.getTransDraftInInfo();
		}
		else
		{
			System.out.println("集合类DraftStorageAssembleInfo，内容不全！");
			throw new BillException("Bill_E036","DraftStorageAssembleInfo",null,this.ctx);
		}
		
		try {
//			调用票据风险管理模块方法判断当前票据是否在黑名单中
			BlackBillInfo blackBillInfo=new BlackBillInfo();
			BlackBillDao blackBillDao=new BlackBillDao();
			
			blackBillInfo.setBillTypeID(discountContractBillInfo.getNDraftTypeID());
			blackBillInfo.setBillCode(discountContractBillInfo.getSCode());
			blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
			blackBillInfo.setOfficeID(discountContractBillInfo.getNOfficeID());
			blackBillInfo.setCurrencyID(discountContractBillInfo.getNCurrencyID());
			if(blackBillDao.isBillInBlackList(blackBillInfo))
			{
				//Bill_E028=该票据在黑名单中，不能?！
				throw new BillException("Bill_E028","入库",null,this.ctx);
			}
				//判断保存类型
			DiscountContractBillInfo billInfo=null;
			if(discountContractBillInfo.getId()!=-1)
			{
				billInfo=(DiscountContractBillInfo) billDao.findByID(discountContractBillInfo.getId(),new DiscountContractBillInfo().getClass());
			}
			TransDraftInInfo draftInfo=null;
			if(transDraftInInfo.getId()!=-1)
				draftInfo=(TransDraftInInfo) dao.findByID(transDraftInInfo.getId(),new TransDraftInInfo().getClass());
			
			/*检查票据来源是否是正回购购回类型的票据，如果不是的话，抛出异常
			if(billInfo.getNModuleSourceID()==)
			{
				throw new BillException("所选择票据不可以作正回购购回类型的交易！",null);
			}*/
			//判断保存类型：新增票据保存入库
			//设置修改时间,修改人
        	Timestamp tsNow=Env.getSystemDateTime();
			if((billInfo==null||billInfo.getId()==-1)&&(draftInfo==null||draftInfo.getId()==-1))
				{
					//开始保存
					System.out.println("判断保存类型：新增票据保存入库");
					//先判断这种类型这一编号的票据是否已经存在 added by zntan 2005-4-1
					DiscountContractBillInfo billTemp =(DiscountContractBillInfo) billDao.findBySCode(discountContractBillInfo.getSCode());
					if (billTemp != null && billTemp.getNDraftTypeID() == discountContractBillInfo.getNDraftTypeID()
							&& billTemp.getNStatusID() > Constant.RecordStatus.INVALID)
					{
						//Bill_E029=票据类型为[?]编号为[?]已经存在，不能新增入库！
						throw new BillException("Bill_E029",BILLConstant.DraftBillType.getName(discountContractBillInfo.getNDraftTypeID()),discountContractBillInfo.getSCode(),null,this.ctx);
					}
					//保存票据,入库信息  关联票据id，保存.
					newBillId=billDao.add(discountContractBillInfo);
					transDraftInInfo.setBillID(newBillId);
					ReturnId = dao.add(transDraftInInfo);
					//更新票据中的入库交易id
					discountContractBillInfo.setId(newBillId);
					discountContractBillInfo.setDtInputDate(transDraftInInfo.getInputDate());
					discountContractBillInfo.setSellStatusId(Constant.YesOrNo.YES);
					discountContractBillInfo.setNStorageStatusID(BILLConstant.DraftInOrOut.IN);
					discountContractBillInfo.setNStorageTransID(ReturnId);
					billDao.update(discountContractBillInfo);
				}
				//判断保存类型：修改票据状态保存入库
			else if((billInfo!=null||billInfo.getId()!=-1)&&(draftInfo==null||draftInfo.getId()==-1))
				{
					System.out.println("判断保存类型：修改票据状态保存入库");
					if(billInfo.getNStorageStatusID()==BILLConstant.DraftInOrOut.IN)
					{
						throw new BillException("Bill_E030",null,this.ctx);
					}
					//关联票据id，保存。
					transDraftInInfo.setBillID(billInfo.getId());
					ReturnId=dao.add(transDraftInInfo);
					//已存在票据做更新操作
					DiscountContractBillInfo updateBill = new DiscountContractBillInfo();
					updateBill.setId(billInfo.getId());
					updateBill.setNStorageTransID(ReturnId);
					updateBill.setDtModifyDate(tsNow);
					updateBill.setSellStatusId(Constant.YesOrNo.YES);
					updateBill.setNStorageStatusID(BILLConstant.DraftInOrOut.IN);
					updateBill.setNDraftTypeID(discountContractBillInfo.getNDraftTypeID());
					billDao.update(updateBill);
				}
				//判断保存类型:修改保存->更新票据信息，更新入库信息
			else if((billInfo!=null||billInfo.getId()!=-1)&&(draftInfo!=null||draftInfo.getId()!=-1))
				{	
					ReturnId = draftInfo.getId();
					System.out.println("判断保存类型：修改票据状态保存入库");
					if((draftInfo.getModifyDate()!=null&&transDraftInInfo.getModifyDate()!=null&&!draftInfo.getModifyDate().equals(transDraftInInfo.getModifyDate()))
							||(draftInfo.getModifyDate()==null&&transDraftInInfo.getModifyDate()!=null)||(draftInfo.getModifyDate()!=null&&transDraftInInfo.getModifyDate()==null))
					{
						throw new BillException("Bill_E031",new Exception(),this.ctx);
					}
					//已存在票据做更新操作
					//billDao.update(discountContractBillInfo);
					//修改。
					transDraftInInfo.setModifyDate(tsNow);
					dao.update(transDraftInInfo);
				}
				InutParameterInfo inutParameterInfo = draftStorageAssembleInfo.getTransDraftInInfo().getInutParameterInfo();
				if(inutParameterInfo != null){
					inutParameterInfo.setTransID(String.valueOf(ReturnId));
					inutParameterInfo.setUrl(inutParameterInfo.getUrl()+ReturnId);
					inutParameterInfo.setDataEntity(draftStorageAssembleInfo);
				
					// 提交审批
					
					FSWorkflowManager.initApproval(inutParameterInfo);
					
					transDraftInInfo.setStatusID(BILLConstant.TransctionStatus.APPROVALING);
					//更新状态为审批中
					if(transDraftInInfo!=null&&transDraftInInfo.getId()<0)
		    		{
						transDraftInInfo.setId(ReturnId);
		    		}
					dao.update(transDraftInInfo);
				}
			}
			catch (ITreasuryDAOException e) {
				e.printStackTrace();
				throw new BillException("Bill_E032",e,ctx);
			} catch (BillException ex){
				ex.printStackTrace();
				throw new BillException(ex,ctx);
			} catch (ClassNotFoundException e)
			{
				e.printStackTrace();
				throw new BillException("Gen_E001",e,ctx);
			}catch (IException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				throw new BillException("提交审批失败",e,ctx);
			}
			return ReturnId;
    }

    /**
     * 保存汇票出库信息
     * 步骤 1：调用票据风险管理模块方法判断当前票据是否在黑名单中，如果是，给出提示信息“***票据在黑名单中，是  否继续？”；
     * 2： 如果是新增保存调用公用方法获取流水编号作为出库交易编号， ； 
     * 如果是修改保存，调用公用方法判断交易状态已经是否修改过，如果修改过则提示“××××信息被修改过”；
     * 根据Loan_DiscountContractBill 和Bill_TransDraftOut 的dtModifyDate字段分别判断票据和交易信息是否被修改过，如果修改过则抛出相应异常信息“××××信息被修改过”；
     * 判断票据是否已经存在，否则抛出相应的异常信息”×××票据不存在“
     * 判断票据是否处于入库状态，否则抛出相应的异常信息”×××票据已经出库“
     * 3  调用私有方法partsave方法   保存票据出库信息（操作table：Bill_TransDraftOut），并将票据表的入库出库状态和对应交易id进行赋值，同时对于出库表记录对应的入库记录id
     * （注：partSave同时支持新增保存和修改保存）
     */
    public long saveDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,BillException{
    	System.out.println("----------保存汇票出库信息----------");
    	long ReturnId=-1;
    	Timestamp tsNow=Env.getSystemDateTime();
       	//取得保存所需实体
    	DiscountContractBillInfo discountContractBillInfo;
    	TransDraftInInfo transDraftInInfo;
    	TransDraftOutInfo transDraftOutInfo;
    	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
    	TransDraftInDAO transDraftInDAO=new TransDraftInDAO();
    	TransDraftOutDao transDraftOutDao=new TransDraftOutDao();
    	if(draftStorageAssembleInfo.getDiscountContractBillInfo()!=null&&draftStorageAssembleInfo.getTransDraftInInfo()!=null)
    	{
    		discountContractBillInfo=draftStorageAssembleInfo.getDiscountContractBillInfo();
    		transDraftInInfo=draftStorageAssembleInfo.getTransDraftInInfo();
    		transDraftOutInfo=draftStorageAssembleInfo.getTransDraftOutInfo();
    	}
    	else
    	{
    		System.out.println("集合类DraftStorageAssembleInfo，内容不全！");
    		throw new BillException("集合类DraftStorageAssembleInfo，内容不全",null,this.ctx);
    	}
    	//检查出库票据状态信息
    	if(discountContractBillInfo==null||discountContractBillInfo.getId()==-1)
    	{
    		throw new BillException("Bill_E033",new Exception(),this.ctx);
    	}
    	//检查是否已经入库
    	if(transDraftInInfo==null||transDraftInInfo.getId()==-1)
    	{
    		throw new BillException("Bill_E034",new Exception(),this.ctx);
    	}
    	//判断录入的出库信息是否存在
    	if(transDraftOutInfo==null)
    	{
    		throw new BillException("Bill_E038",new Exception(),this.ctx);
    	}
    	try {
//			调用票据风险管理模块方法判断当前票据是否在黑名单中
			BlackBillInfo blackBillInfo=new BlackBillInfo();
			BlackBillDao blackBillDao=new BlackBillDao();
			
			blackBillInfo.setBillTypeID(discountContractBillInfo.getNDraftTypeID());
			blackBillInfo.setBillCode(discountContractBillInfo.getSCode());
			blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
			blackBillInfo.setOfficeID(discountContractBillInfo.getNOfficeID());
			blackBillInfo.setCurrencyID(discountContractBillInfo.getNCurrencyID());
			if(blackBillDao.isBillInBlackList(blackBillInfo))
			{
				//Bill_E028=该票据在黑名单中，不能?！
				throw new BillException("编号为"+discountContractBillInfo.getSCode()+"的票据在黑名单中,不能执行该操作!",null,this.ctx);
			}
    		
    		if(transDraftOutInfo!=null&&transDraftOutInfo.getId()<0)
    		{
    			System.out.println("----------新增保存---------");
    			//新增保存
    			if(discountContractBillInfo.getNStorageStatusID()!=BILLConstant.DraftInOrOut.IN)
    	    	{
    				//throw new BillException("Bill_E037",discountContractBillInfo.getSCode(),transDraftOutInfo.getTransCode(),null,this.ctx);
    	    		throw new BillException("Bill_E037:票据号为"+discountContractBillInfo.getSCode()+"的票据未非入库状态，不能出库!",new Exception(),this.ctx);
    	    	}
    			DraftStorageAssembleInfo AssembleInfo=transDraftInDAO.findDraftInByID(transDraftInInfo.getId());
    	    	DiscountContractBillInfo BillInfo=AssembleInfo.getDiscountContractBillInfo();
    	    	TransDraftInInfo DraftInInfo=AssembleInfo.getTransDraftInInfo();
    	    	//并发控制
    	    	if(BillInfo==null||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()!=null&&!BillInfo.getDtModifyDate().equals(discountContractBillInfo.getDtModifyDate()))
    	    			||(BillInfo.getDtModifyDate()==null&&discountContractBillInfo.getDtModifyDate()!=null)||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()==null))
    	    	{
    	    		throw new BillException("Bill_E031",new Exception(),this.ctx);
    	    	}    	
    	    	if(DraftInInfo==null||(DraftInInfo.getModifyDate()!=null&&transDraftInInfo.getModifyDate()!=null&&!DraftInInfo.getModifyDate().equals(transDraftInInfo.getModifyDate()))
    	    			||(DraftInInfo.getModifyDate()==null&&transDraftInInfo.getModifyDate()!=null)||(DraftInInfo.getModifyDate()!=null&&transDraftInInfo.getModifyDate()==null))
    	    	{
    	    		throw new BillException("Bill_E035",new Exception(),this.ctx);
    	    	}
		    	//设置修改时间,修改人
		    	discountContractBillInfo.setDtModifyDate(tsNow);
		    	discountContractBillInfo.setNModifyUserID(transDraftOutInfo.getInputUserID());
		    	transDraftInInfo.setModifyDate(tsNow);
		    	transDraftInInfo.setModifyUserID(transDraftOutInfo.getInputUserID());
		    	//保存出库信息
	    		transDraftOutInfo.setBillID(discountContractBillInfo.getId());
	    		transDraftOutInfo.setTransDraftInID(transDraftInInfo.getId());
	    		ReturnId=transDraftOutDao.partSave(transDraftOutInfo);
	    		//---------------------------------判断是否关联审批流----------------------------------------------
	    		boolean isNeedApproval = false;
	    			//初始化查询类和参数类
				InutApprovalRelationBiz iaBiz = new InutApprovalRelationBiz();	
	    		InutApprovalRelationInfo qInfo = new InutApprovalRelationInfo();
				//构造参数类
				qInfo.setModuleID(Constant.ModuleType.BILL);
				qInfo.setOfficeID(transDraftOutInfo.getOfficeID());
				qInfo.setCurrencyID(transDraftOutInfo.getCurrencyID());
				qInfo.setTransTypeID(BILLConstant.TraceModule.DRAFT);
				qInfo.setActionID(BILLConstant.DraftOperationType.DraftOut);
				//根据条件查询给业务是否有审批流
				long lApprovalID = -1;
				try {
					lApprovalID= iaBiz.findApprovalID(qInfo);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new BillException("查找审批关联设置失败!",e,ctx);
				}
				
				if(lApprovalID>0)
				{
					isNeedApproval = true;		//有审批流返回true
				}
				else
				{
					isNeedApproval = false;	//没有审批流返回false
				}
				//----------------------------------------------------------------------------------------------
	    		if(!isNeedApproval){
	    			discountContractBillInfo.setNStorageStatusID(BILLConstant.DraftInOrOut.OUT);
	    		}else{
	    			discountContractBillInfo.setSellStatusId(Constant.YesOrNo.NO);
	    		}
	    		discountContractBillInfo.setNStorageTransID(ReturnId);
	    		discountContractBillDao.update(discountContractBillInfo);
	    		transDraftInDAO.update(transDraftInInfo);
    		}
    		else{
    			//修改保存
    			ReturnId=transDraftOutInfo.getId();
    			System.out.println("----------修改保存-----------");
    			TransDraftOutInfo DraftOutInfo=(TransDraftOutInfo)transDraftOutDao.findByID(transDraftOutInfo.getId(),new TransDraftOutInfo().getClass());
    			System.out.println("----------修改保存-----------1");
    			if((DraftOutInfo.getModifyDate()!=null&&transDraftOutInfo.getModifyDate()!=null&&!DraftOutInfo.getModifyDate().equals(transDraftOutInfo.getModifyDate()))
						||(DraftOutInfo.getModifyDate()==null&&transDraftOutInfo.getModifyDate()!=null)||(DraftOutInfo.getModifyDate()!=null&&transDraftOutInfo.getModifyDate()==null))
				{
					throw new BillException("Bill_E039","出库",new Exception(),this.ctx);
				}
    			System.out.println("----------修改保存-----------2");
    			transDraftOutInfo.setModifyDate(tsNow);
    			transDraftOutInfo.setStatusID(BILLConstant.TransctionStatus.SUBMIT);
    			transDraftOutDao.update(transDraftOutInfo);
    		}
    		InutParameterInfo inutParameterInfo = draftStorageAssembleInfo.getTransDraftOutInfo().getInutParameterInfo();
			if(inutParameterInfo != null){
				inutParameterInfo.setTransID(String.valueOf(ReturnId));
				inutParameterInfo.setUrl(inutParameterInfo.getUrl()+ReturnId);
				inutParameterInfo.setDataEntity(draftStorageAssembleInfo.getTransDraftOutInfo());
			
				// 提交审批
				try {
					logger.debug("--------票据出库提交审批-------");
					FSWorkflowManager.initApproval(inutParameterInfo);
				
					transDraftOutInfo.setStatusID(BILLConstant.TransctionStatus.APPROVALING);
					//更新状态为审批中
					if(transDraftOutInfo!=null&&transDraftOutInfo.getId()<0)
		    		{
						transDraftOutInfo.setId(ReturnId);
		    		}
					transDraftOutDao.update(transDraftOutInfo);
					logger.debug("--------票据出库提交审批成功-------");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new RemoteException();
					//throw new BillException("提交审批失败@@@!",e,ctx);
				}
				
			}
    	} catch (ITreasuryDAOException e) {
    		e.printStackTrace();
    		throw new BillException("Bill_E012",e,ctx);
    	}
    	return ReturnId;
    }

    /**
     * 保存汇票查询信息
     * 步骤 1：调用票据风险管理模块方法判断当前票据是否在黑名单中，如果是，给出提示信息“***票据在黑名单中，是  否继续？”；
     * 2： 如果是新增保存调用公用方法获取流水编号作为入库交易编号， ； 
     *       如果是修改保存，调用公用方法判断交易状态已经是否修改过，如果修改过则提示“××××信息被修改过”；
     *       根据Loan_DiscountContractBill 和Bill_TransDraftQuery 的dtModifyDate字段分别判断票据和交易信息是否被修改过，如果修改过则抛出相应异常信息“××××信息被修改过”；
     *      判断票据是否已经存在，否则抛出相应的异常信息”×××票据不存在“
     *    
     * 3  调用私有方法partsave方法   保存票据查询信息（操作table：Bill_TransDraftQuery），并对票据的的查询状态进行赋值；
     * （注：partSave同时支持新增保存和修改保存）
     */
    public long saveDraftQuery(DraftQueryAssembleInfo draftQueryAssembleInfo) throws RemoteException,BillException{
    	DiscountContractBillInfo discountContractBillInfo;
    	TransDraftQueryInfo transDraftQueryInfo;
    	long returnID=-1;
    	Timestamp tsNow=Env.getSystemDateTime();
    	if(draftQueryAssembleInfo.getDiscountContractBillInfo()!=null&&draftQueryAssembleInfo.getTransDraftQueryInfo()!=null)
    	{
	    	discountContractBillInfo=draftQueryAssembleInfo.getDiscountContractBillInfo();
	        transDraftQueryInfo=draftQueryAssembleInfo.getTransDraftQueryInfo();
    	}
    	else{
    		System.out.println("集合类DraftQueryAssembleInfo，内容不全！");
    		throw new BillException("Bill_E036","DraftQueryAssembleInfo",null,this.ctx);
    	}
    	
    	try {
    		/* 查询暂不做黑名单校验
//			调用票据风险管理模块方法判断当前票据是否在黑名单中
			BlackBillInfo blackBillInfo=new BlackBillInfo();
			BlackBillDao blackBillDao=new BlackBillDao();
			
			blackBillInfo.setBillTypeID(discountContractBillInfo.getNDraftTypeID());
			blackBillInfo.setBillCode(discountContractBillInfo.getSCode());
			blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
			blackBillInfo.setOfficeID(discountContractBillInfo.getNOfficeID());
			blackBillInfo.setCurrencyID(discountContractBillInfo.getNCurrencyID());
			if(blackBillDao.isBillInBlackList(blackBillInfo))
			{
				//Bill_E028=该票据在黑名单中，不能?！
				throw new BillException("Bill_E028","查询",null,this.ctx);
			}
    		*/
    		DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
    		TransDraftQueryDao transDraftQueryDao=new TransDraftQueryDao();
	    	//保存        	
	    	if(transDraftQueryInfo.getId()<0)
	    	{
	    		//检查票据是否存在
	    		if(discountContractBillInfo.getId()==-1)
	        	{
	        		throw new BillException("Bill_E033",null,this.ctx);
	        	}
	        	DiscountContractBillInfo BillInfo=findDiscountContractBillInfoByID(discountContractBillInfo.getId());
	        	//判断该票据是否被修改过
	        	if(BillInfo==null||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()!=null&&!BillInfo.getDtModifyDate().equals(discountContractBillInfo.getDtModifyDate()))
	        			||(BillInfo.getDtModifyDate()==null&&discountContractBillInfo.getDtModifyDate()!=null)||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()==null))
	        	{
	        		throw new BillException("Bill_E031",null,this.ctx);
	        	}
	    		//设置修改时间,修改人
	        	discountContractBillInfo.setDtModifyDate(tsNow);
	    		discountContractBillDao.update(discountContractBillInfo);
				returnID=transDraftQueryDao.add(transDraftQueryInfo);
	    	}
	    	//修改
	    	else
	    	{
	    		//discountContractBillDao.update(discountContractBillInfo);
	    		TransDraftQueryInfo DraftQueryInfo=(TransDraftQueryInfo)transDraftQueryDao.findByID(transDraftQueryInfo.getId(),new TransDraftQueryInfo().getClass());
	    		if(DraftQueryInfo==null||(DraftQueryInfo.getModifyDate()!=null&&transDraftQueryInfo.getModifyDate()!=null&&!DraftQueryInfo.getModifyDate().equals(transDraftQueryInfo.getModifyDate()))
	        			||(DraftQueryInfo.getModifyDate()==null&&transDraftQueryInfo.getModifyDate()!=null)||(DraftQueryInfo.getModifyDate()!=null&&transDraftQueryInfo.getModifyDate()==null))
	        	{
	        		throw new BillException("Bill_E039","查询",null,this.ctx);
	        	}
	    		transDraftQueryInfo.setModifyDate(tsNow);
	    		transDraftQueryDao.update(transDraftQueryInfo);
	    	}
    	} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw new  BillException("Bill_E012",e,ctx);
    	}
    	return returnID;
    }

    /**
     * 保存汇票查复信息
     * 步骤 1：调用票据风险管理模块方法判断当前票据是否在黑名单中，如果是，给出提示信息“***票据在黑名单中，是  否继续？”；
     * 2： 如果是新增保存调用公用方法获取流水编号作为查复交易编号 ； 
     * 如果是修改保存，调用公用方法判断交易状态已经是否修改过，如果修改过则提示“××××信息被修改过”；
     * 根据Loan_DiscountContractBill 和Bill_TransDraftQuery 的dtModifyDate字段分别判断票据和交易信息是否被修改过，如果修改过则抛出相应异常信息“××××信息被修改过”；
     * 判断票据是否已经存在，否则抛出相应的异常信息”×××票据不存在“
     * 3  调用私有方法partsave方法   保存票据查询信息（操作table：Bill_TransDraftQueryReply），并对票据的的查询状态进行赋值；
     * （注：partSave同时支持新增保存和修改保存）
     */
    public long saveDraftQueryReply(DraftQueryReplyAssembleInfo draftQueryReplyAssembleInfo) throws RemoteException,BillException{
    	DiscountContractBillInfo discountContractBillInfo;
    	TransDraftQueryReplyInfo transDraftQueryReplyInfo;
    	long returnID=-1;
    	Timestamp tsNow=Env.getSystemDateTime();
    	if(draftQueryReplyAssembleInfo.getDiscountContractBillInfo()!=null&&draftQueryReplyAssembleInfo.getTransDraftQueryReplyInfo()!=null)
    	{
	    	discountContractBillInfo=draftQueryReplyAssembleInfo.getDiscountContractBillInfo();
	    	transDraftQueryReplyInfo=draftQueryReplyAssembleInfo.getTransDraftQueryReplyInfo();
    	}
    	else{
    		System.out.println("集合类DraftQueryAssembleInfo，内容不全！");
    		throw new BillException("Bill_E036","DraftQueryAssembleInfo",null,this.ctx);
    	}
    	
    	try {
    		/* 查复暂不做黑名单校验
//			调用票据风险管理模块方法判断当前票据是否在黑名单中
			BlackBillInfo blackBillInfo=new BlackBillInfo();
			BlackBillDao blackBillDao=new BlackBillDao();
			
			blackBillInfo.setBillTypeID(discountContractBillInfo.getNDraftTypeID());
			blackBillInfo.setBillCode(discountContractBillInfo.getSCode());
			blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
			blackBillInfo.setOfficeID(discountContractBillInfo.getNOfficeID());
			blackBillInfo.setCurrencyID(discountContractBillInfo.getNCurrencyID());
			if(blackBillDao.isBillInBlackList(blackBillInfo))
			{
				//Bill_E028=该票据在黑名单中，不能?！
				throw new BillException("Bill_E028","查复",null,this.ctx);
			}
			*/
    		DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
    		TransDraftQueryReplyDao transDraftQueryReplyDao=new TransDraftQueryReplyDao();
	    	//保存
	    	if(transDraftQueryReplyInfo.getId()==-1)
	    	{
	    		//判断票据是否存在
	    		if(discountContractBillInfo.getId()==-1)
	        	{
	        		throw new BillException("Bill_E033",null,this.ctx);
	        	}
	        	DiscountContractBillInfo BillInfo=findDiscountContractBillInfoByID(discountContractBillInfo.getId());
	        	//判断该票据是否被修改过
	        	if(BillInfo==null||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()!=null&&!BillInfo.getDtModifyDate().equals(discountContractBillInfo.getDtModifyDate()))
	        			||(BillInfo.getDtModifyDate()==null&&discountContractBillInfo.getDtModifyDate()!=null)||(BillInfo.getDtModifyDate()!=null&&discountContractBillInfo.getDtModifyDate()==null))
	        	{
	        		throw new BillException("Bill_E031",null,this.ctx);
	        	}
	    		//设置修改时间,修改人
	        	discountContractBillInfo.setDtModifyDate(tsNow);
	    		discountContractBillDao.update(discountContractBillInfo);
				returnID=transDraftQueryReplyDao.add(transDraftQueryReplyInfo);
	    	}
	    	//修改
	    	else
	    	{
	    		//discountContractBillDao.update(discountContractBillInfo);
	    		TransDraftQueryReplyInfo DraftQueryReplyInfo=(TransDraftQueryReplyInfo)transDraftQueryReplyDao.findByID(transDraftQueryReplyInfo.getId(),new TransDraftQueryReplyInfo().getClass());
	    		if(DraftQueryReplyInfo==null||(DraftQueryReplyInfo.getModifyDate()!=null&&transDraftQueryReplyInfo.getModifyDate()!=null&&!DraftQueryReplyInfo.getModifyDate().equals(transDraftQueryReplyInfo.getModifyDate()))
	        			||(DraftQueryReplyInfo.getModifyDate()==null&&transDraftQueryReplyInfo.getModifyDate()!=null)||(DraftQueryReplyInfo.getModifyDate()!=null&&transDraftQueryReplyInfo.getModifyDate()==null))
	        	{
	        		throw new BillException("Bill_E039","查复",null,this.ctx);
	        	}
	    		transDraftQueryReplyInfo.setModifyDate(tsNow);
	    		transDraftQueryReplyDao.update(transDraftQueryReplyInfo);
	    	}
    	} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw new  BillException("Bill_E012",e,ctx);
    	}
    	return returnID;
    }
    
    /**
     * 修改票据信息
     * @param info
     * @return ID
     * @throws RemoteException
     * @throws BillException
     */
    public long saveDiscountContractBillInfo(DiscountContractBillInfo info) throws RemoteException,BillException{
    	long lReturn = info.getId();
		DiscountContractBillDao dao = new DiscountContractBillDao();
    	try
		{
    		//判断票据是否列入黑名单
    		BlackBillDao blackDao = new BlackBillDao();
    		BlackBillInfo blackInfo = new BlackBillInfo();
    		blackInfo.setBillTypeID(info.getNDraftTypeID());
    		blackInfo.setBillCode(info.getSCode());
    		blackInfo.setOfficeID(info.getNOfficeID());
    		blackInfo.setCurrencyID(info.getNCurrencyID());
    		blackInfo.setStatusID(BILLConstant.BlackBillStatus.GUARD);
    		if (blackDao.isBillInBlackList(blackInfo))
    		{
    			throw new BillException("Bill_E020",info.getSCode(),null,this.ctx);
    		}
    		
    		//判断是否被修改过
    		if (dao.isTouch(info))
    		{
    			throw new BillException("Bill_E031",null,this.ctx);
    		}
    		info.setDtModifyDate(Env.getSystemDateTime());
			dao.update(info);
		}
    	catch (BillException be)
		{
			be.printStackTrace();
			throw new BillException(be,this.ctx);
		}
    	catch (Exception e)
		{
			e.printStackTrace();
			throw new  BillException("Bill_E012",e,this.ctx);
		}
    	return lReturn;
    }
    
    /**
	 * 删除当前票据。（页面提示“删除当前票据信息将删除该票的入出库、查询、查复、托收、托复信息，是否删除？”）
	 * 操作数据库表：LOAN_DISCOUNTCONTRACTBILL、Bill_TransDraftIn、Bill_TransDraftOut、Bill_TransDraftQuery、Bill_TransDraftQueryReply、Bill_TransDraftConsign、Bill_TransDraftConsignReply
	 * 步骤：
	 * 1 判断票据是否已经被删除，否则抛出异常信息"票据***已经被删除！";
	 * 
	 * 2 分别调用TransDraftConsignReplyDao、TransDraftConsignDao、TransDraftQueryReplyDao、TransDraftQueryDao、
	 *   TransDraftOutDao、TransDraftInDAO方法deleteByBillID（逻辑删除）,最后调用DiscountContractBillDao方法delete（逻辑删除） 
	 */
    public void deleteDiscountContractBillByID(long lBillID)  throws RemoteException,BillException
	{
    	DiscountContractBillDao discountDao = new DiscountContractBillDao();
    	logger.print("==========判断此汇票是否还存在============");
    	DiscountContractBillInfo tmpInfo = null;
    	try
		{
	    	try
			{
				 tmpInfo = (DiscountContractBillInfo)discountDao.findByID(lBillID,(new DiscountContractBillInfo()).getClass());
			} catch (ITreasuryDAOException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
			if ( tmpInfo == null || (tmpInfo != null && tmpInfo.getNStatusID()==Constant.RecordStatus.INVALID)) 
	      	{
	      		throw new BillException("Bill_E033",null);
	      	}
			logger.print("==========判断此汇票是否还存在结束============");
			
			logger.print("==========开始删除托复信息============");
			TransDraftConsignReplyDao consignReplyDao = new TransDraftConsignReplyDao();
			consignReplyDao.deleteByBillID(lBillID);
			logger.print("==========删除托复信息完毕============");
			
			logger.print("==========开始删除托收信息============");
			TransDraftConsignDao consignDao = new TransDraftConsignDao();
			consignDao.deleteByBillID(lBillID);
			logger.print("==========删除托收信息完毕============");
			
			logger.print("==========开始删除查复信息============");
			TransDraftQueryReplyDao queryReplyDao = new TransDraftQueryReplyDao();
			queryReplyDao.deleteByBillID(lBillID);
			logger.print("==========删除查复信息完毕============");
			
			logger.print("==========开始删除查询信息============");
			TransDraftQueryDao queryDao = new TransDraftQueryDao();
			queryDao.deleteByBillID(lBillID);
			logger.print("==========删除查询信息完毕============");
			
			logger.print("==========开始删除出库信息============");
			TransDraftOutDao outDao = new TransDraftOutDao();
			outDao.deleteByBillID(lBillID);
			logger.print("==========删除出库信息完毕============");
			
			logger.print("==========开始删除入库信息============");
			TransDraftInDAO inDao = new TransDraftInDAO();
			inDao.deleteByBillID(lBillID);
			logger.print("==========删除入库信息完毕============");
			
			logger.print("==========开始删除票据信息============");
			DiscountContractBillInfo billInfo = new DiscountContractBillInfo();
			billInfo.setId(lBillID);
			billInfo.setNStatusID(Constant.RecordStatus.INVALID);
			try
			{
				discountDao.update(billInfo);
			} catch (ITreasuryDAOException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
				throw new BillException("Bill_E012",e1,this.ctx);
			}
		}catch (BillException be)
		{
			be.printStackTrace();
			throw new BillException(be,this.ctx);
		}
    	
		logger.print("==========删除票据信息完毕============");
    }
    
    /**
	 * 根据票据id查找该票据下所有入库记录
	 * 操作数据库表:Bill_TransDraftIn
	 * 步骤：
	 * 调用：TransDraftInDAO方法findByBillID 
	 */
    public Collection findDraftInByBillID(long lBillID) throws RemoteException,BillException
	{
    	TransDraftInDAO dao = new TransDraftInDAO();
    	
    	return dao.findByBillID(lBillID);
    	
    }
    /**
	 * 根据票据id查找该票据下所有出库记录
	 * 操作数据库表:Bill_TransDraftOut
	 * 步骤：
	 * 调用：TransDraftOutDAO方法findByBillID 
	 */
	public Collection findDraftOutByBillID(long lBillID) throws RemoteException,BillException
	{
		TransDraftOutDao dao = new TransDraftOutDao();
    	
    	return dao.findByBillID(lBillID);
	}
	
	/**
	 * 根据票据id查找该票据下所有发出查询记录
	 * 操作数据库表：Bill_TransDraftQuery
	 * 步骤：
	 * 调用：TransDraftQueryDao方法findByBillID 
	 */
	public Collection findDraftQueryByBillID(long lBillID) throws RemoteException,BillException
	{
		TransDraftQueryDao dao = new TransDraftQueryDao();
    	
    	return dao.findByBillID(lBillID);
	}
	
	/**
	 * 根据票据id查找该票据下所有发出查复记录
	 * 操作数据库表：Bill_TransDraftQueryReply
	 * 步骤：
	 * 调用：TransDraftQueryReplyDao方法findByBillID 
	 */
	public Collection findDraftQueryReplyByBillID(long lBillID) throws RemoteException,BillException
	{
		TransDraftQueryReplyDao dao = new TransDraftQueryReplyDao();
    	
    	return dao.findByBillID(lBillID);
	}
	
	/**
	 * 根据票据id查找该票据下所有发出托收记录
	 * 操作数据库表:Bill_TransDraftConsign
	 * 步骤：
	 * 调用：TransDraftConsignDAO方法findByBillID 
	 */
	public Collection findDraftConsignByBillID(long lBillID) throws BillException, RemoteException
	{
		TransDraftConsignDao dao = new TransDraftConsignDao();
    	
    	return dao.findByBillID(lBillID);
	}
	/**
	 * 根据票据id查找该票据下所有托收回复记录
	 * 操作数据库表:Bill_TransDraftConsignReply
	 * 步骤：
	 * 调用：TransDraftConsignReplyDAO方法findByBillID 
	 */
	public Collection findDraftConsignReplyByBillID(long lBillID) throws BillException, RemoteException
	{
		TransDraftConsignReplyDao dao = new TransDraftConsignReplyDao();
    	
    	return dao.findByBillID(lBillID);
	}
	/**
	 * 删除入库信息
	 * @param lID
	 * @throws BillException
	 * @throws RemoteException
	 */
	public void deleteDraftInByID(long lID) throws BillException, RemoteException
	{
		TransDraftInDAO dao = new TransDraftInDAO();
		TransDraftOutDao outDao = new TransDraftOutDao();
		DiscountContractBillDao billDao = new DiscountContractBillDao();
		TransDraftInInfo inInfo = null;
		DiscountContractBillInfo billInfo = null;
		try
		{
			logger.print("==================判断当前入库记录是否已经被删除==========");
			inInfo = (TransDraftInInfo)dao.findByID(lID,TransDraftInInfo.class);
			if (inInfo != null && inInfo.getStatusID() != Constant.RecordStatus.VALID)
			{
				throw new BillException("Bill_E080",BillNameRef.getDraftCodeByID(inInfo.getBillID()),inInfo.getTransCode(),null,this.ctx);
			}
			
			logger.print("==================判断当前票据记录的库存状态是否为入库状态==========");
			billInfo = (DiscountContractBillInfo)billDao.findByID(inInfo.getBillID(),DiscountContractBillInfo.class);
			if (billInfo != null && billInfo.getNStorageStatusID() == BILLConstant.DraftInOrOut.OUT)
			{
				throw new BillException("Bill_E081",billInfo.getSCode(),inInfo.getTransCode(),null,this.ctx);
			}
			else if (billInfo != null && billInfo.getNStorageStatusID() == BILLConstant.DraftInOrOut.IN)
			{
				//判断对应的入库交易id是否是当前入库记录对应的入库
				if (billInfo.getNStorageTransID() != lID)
				{
					throw new BillException("Bill_E082",billInfo.getSCode(),inInfo.getTransCode(),null,this.ctx);
				}
			}
			
			logger.print("==================逻辑删除数据库记录==========");
			dao.delete(lID);
			
			logger.print("==================更新票据表中的出库信息==========");
			Collection c = outDao.findByBillID(inInfo.getBillID());
			long statusID = -1;
			long transID  = -1;
			if (c!=null && c.size() > 0 )
			{
				statusID = BILLConstant.DraftInOrOut.OUT;
				transID = ((DraftStorageAssembleInfo)c.iterator().next()).getTransDraftOutInfo().getId();
			}
			DiscountContractBillInfo condition = new DiscountContractBillInfo();
			condition.setId(inInfo.getBillID());
			condition.setNStorageStatusID(statusID);
			condition.setNStorageTransID(transID);
			billDao.update(condition);
			logger.print("==================删除入库信息结束==========");
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e,this.ctx);
		}
	}
	/**
	 * 删除出库信息
	 * @param lID
	 * @throws BillException
	 * @throws RemoteException
	 */
	public void deleteDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws BillException, RemoteException
	{
		TransDraftOutDao outDao = new TransDraftOutDao();
		DiscountContractBillDao billDao = new DiscountContractBillDao();
		TransDraftOutInfo outInfo = draftStorageAssembleInfo.getTransDraftOutInfo();
		DiscountContractBillInfo billInfo = draftStorageAssembleInfo.getDiscountContractBillInfo();
		try
		{
			if(outInfo == null || billInfo == null){
				throw new BillException();
			}
			
			logger.print("==================判断当前出库记录是否已经被删除==========");
			if(outInfo.getStatusID() == Constant.RecordStatus.INVALID)
			{
				throw new BillException("Bill_E083",BillNameRef.getDraftCodeByID(outInfo.getBillID()),outInfo.getTransCode(),null,this.ctx);
			}
			
			logger.print("==================逻辑删除数据库记录==========");
			outDao.delete(outInfo.getId());
			//outDao.updateDraftOutStatusByID(outInfo.getId(), Constant.RecordStatus.INVALID);
			
			logger.print("==================更新票据表中的信息==========");
			//long transID  = outInfo.getTransDraftInID();

			//DiscountContractBillInfo condition = new DiscountContractBillInfo();
			//condition.setId(outInfo.getBillID());
			//condition.setNStorageStatusID(BILLConstant.DraftInOrOut.IN);
			//condition.setNStorageTransID(transID);
			billInfo.setNStorageStatusID(BILLConstant.DraftInOrOut.IN);
			billInfo.setNStorageTransID(outInfo.getTransDraftInID());
			billDao.updateDiscountContractBill(billInfo);
			
			logger.print("==================删除入库信息结束==========");
		}
		catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e,this.ctx);
		} catch (IException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E013",e,this.ctx);
		}
	}
	/**
     * 删除一条汇票发出查询信息
     * 操作数据库表：LOAN_DISCOUNTCONTRACTBILL，Bill_TransDraftQuery，Bill_TransDraftQueryReply
     * 步骤：
     * 1 判断当前查询记录是否已经被删除，否则抛出异常信息“票据***查询编号****查询记录已经被删除！”;
     * 2 调用TransDraftQueryDAO方法delete; 
     * 3 查询Bill_TransDraftQuery,Bill_TransDraftQueryReply这两个表中id为最大的有效的且不等于当前被删除的记录ID的记录MaxID，
     *   如果最大交易在Bill_TransDraftQuery中，调用DiscountContractBillDao方法update更新票据的查复状态为发出查询状态，
     *   如果最大交易在Bill_TransDraftQueryReply中，调用DiscountContractBillDao方法update更新票据的查复状态为查复结果状态态，
     *   如果这个表中都没有记录，调用DiscountContractBillDao方法update更新票据的查复状态为：-1
     *   注：Bill_TransDraftQuery，Bill_TransDraftQueryReply这两个表在新增记录的时候交易的id取两个表的最大id 
     */
	public void deleteDraftQueryByID(long lID) throws BillException, RemoteException
	{
		TransDraftQueryDao dao = new TransDraftQueryDao();
		TransDraftQueryReplyDao replyDao = new TransDraftQueryReplyDao();
		TransDraftQueryInfo queryInfo = null;
		long queryID = -1;
		long queryReplyID = -1;
		long nQueryStatusID = -1; //查复状态
		
		try
		{
			logger.print("===============判断票据查询信息是否存在================");
			queryInfo = (TransDraftQueryInfo)dao.findByID(lID,TransDraftQueryInfo.class);
			if (queryInfo != null && queryInfo.getStatusID() != Constant.RecordStatus.VALID)
			{
				throw new BillException("Bill_E086",BillNameRef.getDraftCodeByID(queryInfo.getBillID()),queryInfo.getTransCode(),null,this.ctx);
			}
			logger.print("==================逻辑删除=================");
			dao.delete(lID);
			
			logger.print("==================取查询表中该票据最大ID==================");
			TransDraftQueryInfo queryCondition =  new TransDraftQueryInfo();
			queryCondition.setBillID(queryInfo.getBillID());
			queryCondition.setStatusID(Constant.RecordStatus.VALID);
			Collection c = dao.findByCondition(queryCondition," order by id desc");
			if (c!=null && c.size() > 0)
			{
				queryID = ((TransDraftQueryInfo)c.iterator().next()).getId();
			}
			
			logger.print("==================取查复表中该票据最大ID=====================");
			TransDraftQueryReplyInfo replyCondition =  new TransDraftQueryReplyInfo();
			replyCondition.setBillID(queryInfo.getBillID());
			replyCondition.setStatusID(Constant.RecordStatus.VALID);
			c = replyDao.findByCondition(replyCondition," order by id desc");
			if (c!=null && c.size() > 0)
			{
				queryReplyID = ((TransDraftQueryInfo)c.iterator().next()).getId();
			}
			
			if (queryID > queryReplyID )
			{
				nQueryStatusID = BILLConstant.DraftOperationType.DraftQuery;
			}
			else if (queryReplyID > queryID)
			{
				nQueryStatusID = BILLConstant.DraftOperationType.DraftQueryReply;
			}
			logger.print("====================更新票据表中的查复状态======================");
			DiscountContractBillDao billDao = new DiscountContractBillDao();
			DiscountContractBillInfo billInfo = new DiscountContractBillInfo();
			billInfo.setId(queryInfo.getBillID());
			billInfo.setNQueryStatusID(nQueryStatusID);
			billDao.update(billInfo);
			
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e,this.ctx);
		}
	}
	/**
	 * 删除查复信息
	 * @param lID
	 * @throws BillException
	 * @throws RemoteException
	 */
	public void deleteDraftQueryReplyByID(long lID) throws BillException, RemoteException
	{
		TransDraftQueryDao dao = new TransDraftQueryDao();
		TransDraftQueryReplyDao replyDao = new TransDraftQueryReplyDao();
		TransDraftQueryReplyInfo replyInfo = null;
		long queryID = -1;
		long queryReplyID = -1;
		long nQueryStatusID = -1; //查复状态
		
		try
		{
			logger.print("===============判断票据查询信息是否存在================");
			replyInfo = (TransDraftQueryReplyInfo)replyDao.findByID(lID,TransDraftQueryReplyInfo.class);
			if (replyInfo != null && replyInfo.getStatusID() != Constant.RecordStatus.VALID)
			{
				throw new BillException("Bill_E087",BillNameRef.getDraftCodeByID(replyInfo.getBillID()),replyInfo.getTransCode(),null,this.ctx);
			}
			logger.print("==================逻辑删除=================");
			replyDao.delete(lID);
			
			logger.print("==================取查询表中该票据最大ID==================");
			TransDraftQueryInfo queryCondition =  new TransDraftQueryInfo();
			queryCondition.setBillID(replyInfo.getBillID());
			queryCondition.setStatusID(Constant.RecordStatus.VALID);
			Collection c = dao.findByCondition(queryCondition," order by id desc");
			if (c!=null && c.size() > 0)
			{
				queryID = ((TransDraftQueryInfo)c.iterator().next()).getId();
			}
			logger.print("==================取查复表中该票据最大ID=====================");
			TransDraftQueryReplyInfo replyCondition =  new TransDraftQueryReplyInfo();
			replyCondition.setBillID(replyInfo.getBillID());
			replyCondition.setStatusID(Constant.RecordStatus.VALID);
			c = replyDao.findByCondition(replyCondition," order by id desc");
			if (c!=null && c.size() > 0)
			{
				queryReplyID = ((TransDraftQueryInfo)c.iterator().next()).getId();
			}
			
			if (queryID > queryReplyID )
			{
				nQueryStatusID = BILLConstant.DraftOperationType.DraftQuery;
			}
			else if (queryReplyID > queryID)
			{
				nQueryStatusID = BILLConstant.DraftOperationType.DraftQueryReply;
			}
			logger.print("====================更新票据表中的查复状态======================");
			DiscountContractBillDao billDao = new DiscountContractBillDao();
			DiscountContractBillInfo billInfo = new DiscountContractBillInfo();
			billInfo.setId(replyInfo.getBillID());
			billInfo.setNQueryStatusID(nQueryStatusID);
			billDao.update(billInfo);
			
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e,this.ctx);
		}
	}
	 /**
     * 删除一条汇票托收信息
     * 操作数据库表:LOAN_DISCOUNTCONTRACTBILL,Bill_TransDraftConsign,Bill_TransDraftInConsignReply
     * 步骤：
     * 1 判断当前托收记录是否已经被删除，否则抛出异常信息“票据***托收编号****托收记录已经被删除！”;
     * 2 调用TransDraftConsignDAO方法delete; 
     * 3 查询Bill_TransDraftConsign,Bill_TransDraftConsignReply这两个表中id为最大的有效的且不等于当前被删除的记录ID的记录MaxID，
     *   如果最大交易在Bill_TransDraftConsign中，调用DiscountContractBillDao方法update更新票据的托收状态为发出托收状态，
     *   如果最大交易在DiscountContractBillDao中，调用DiscountContractBillDao方法update更新票据的托收状态为托收结果状态，
     *   如果这个表中都没有记录，调用DiscountContractBillDao方法update更新票据的托收状态为：-1
     *   注：Bill_TransDraftConsign，Bill_TransDraftInConsignReply这两个表在新增记录的时候交易的id取两个表的最大id 
     */
	public void deleteDraftConsignByID(long lID) throws BillException, RemoteException
	{
		TransDraftConsignDao dao = new TransDraftConsignDao();
		TransDraftConsignReplyDao replyDao = new TransDraftConsignReplyDao();
		TransDraftConsignInfo consignInfo = null;
		long consignID = -1;
		long replyID = -1;
		long nConsignStatusID = -1; //托收状态
		
		try
		{
			logger.print("===============判断票据托收信息是否存在================");
			consignInfo = (TransDraftConsignInfo)dao.findByID(lID,TransDraftConsignInfo.class);
			if (consignInfo != null && consignInfo.getStatusID() != Constant.RecordStatus.VALID)
			{
				throw new BillException("Bill_E088",BillNameRef.getDraftCodeByID(consignInfo.getBillID()),consignInfo.getTransCode(),null,this.ctx);
			}
			logger.print("==================逻辑删除=================");
			dao.delete(lID);
			
			logger.print("==================取托收表中该票据最大ID==================");
			TransDraftConsignInfo consignCondition =  new TransDraftConsignInfo();
			consignCondition.setBillID(consignInfo.getBillID());
			consignCondition.setStatusID(Constant.RecordStatus.VALID);
			Collection c = dao.findByCondition(consignCondition," order by id desc");
			if (c!=null && c.size() > 0)
			{
				consignID = ((TransDraftConsignInfo)c.iterator().next()).getId();
			}
			logger.print("==================取托复表中该票据最大ID=====================");
			TransDraftConsignReplyInfo replyCondition =  new TransDraftConsignReplyInfo();
			replyCondition.setBillID(consignInfo.getBillID());
			replyCondition.setStatusID(Constant.RecordStatus.VALID);
			c = replyDao.findByCondition(replyCondition," order by id desc");
			if (c!=null && c.size() > 0)
			{
				replyID = ((TransDraftConsignReplyInfo)c.iterator().next()).getId();
			}
			
			if (consignID > replyID )
			{
				nConsignStatusID = BILLConstant.DraftOperationType.DraftQuery;
			}
			else if (replyID > consignID)
			{
				nConsignStatusID = BILLConstant.DraftOperationType.DraftQueryReply;
			}
			logger.print("====================更新票据表中的托收状态======================");
			DiscountContractBillDao billDao = new DiscountContractBillDao();
			DiscountContractBillInfo billInfo = new DiscountContractBillInfo();
			billInfo.setId(consignInfo.getBillID());
			billInfo.setNQueryStatusID(nConsignStatusID);
			billDao.update(billInfo);
			
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e,this.ctx);
		}
	}
	/**
	 * 删除托复信息
	 * @param lID
	 * @throws BillException
	 * @throws RemoteException
	 */
	public void deleteDraftConsignReplyByID(long lID) throws BillException, RemoteException
	{
		TransDraftConsignDao dao = new TransDraftConsignDao();
		TransDraftConsignReplyDao replyDao = new TransDraftConsignReplyDao();
		TransDraftConsignReplyInfo replyInfo = null;
		long consignID = -1;
		long replyID = -1;
		long nConsignStatusID = -1; //托收状态
		
		try
		{
			logger.print("===============判断票据托复信息是否存在================");
			replyInfo = (TransDraftConsignReplyInfo)replyDao.findByID(lID,TransDraftConsignReplyInfo.class);
			if (replyInfo != null && replyInfo.getStatusID() != Constant.RecordStatus.VALID)
			{
				throw new BillException("Bill_E089",BillNameRef.getDraftCodeByID(replyInfo.getBillID()),replyInfo.getTransCode(),null,this.ctx);
			}
			logger.print("==================逻辑删除=================");
			dao.delete(lID);
			
			logger.print("==================取托收表中该票据最大ID==================");
			TransDraftConsignInfo consignCondition =  new TransDraftConsignInfo();
			consignCondition.setBillID(replyInfo.getBillID());
			consignCondition.setStatusID(Constant.RecordStatus.VALID);
			Collection c = dao.findByCondition(consignCondition," order by id desc");
			if (c!=null && c.size() > 0)
			{
				consignID = ((TransDraftConsignInfo)c.iterator().next()).getId();
			}
			logger.print("==================取托复表中该票据最大ID=====================");
			TransDraftConsignReplyInfo replyCondition =  new TransDraftConsignReplyInfo();
			replyCondition.setBillID(replyInfo.getBillID());
			replyCondition.setStatusID(Constant.RecordStatus.VALID);
			c = replyDao.findByCondition(replyCondition," order by id desc");
			if (c!=null && c.size() > 0)
			{
				replyID = ((TransDraftConsignReplyInfo)c.iterator().next()).getId();
			}
			
			if (consignID > replyID )
			{
				nConsignStatusID = BILLConstant.DraftOperationType.DraftQuery;
			}
			else if (replyID > consignID)
			{
				nConsignStatusID = BILLConstant.DraftOperationType.DraftQueryReply;
			}
			logger.print("====================更新票据表中的托收状态======================");
			DiscountContractBillDao billDao = new DiscountContractBillDao();
			DiscountContractBillInfo billInfo = new DiscountContractBillInfo();
			billInfo.setId(replyInfo.getBillID());
			billInfo.setNQueryStatusID(nConsignStatusID);
			billDao.update(billInfo);
			
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e,this.ctx);
		}
	}
	//汇票出库审批方法
	public long doApprovalDraftOut(TransDraftOutInfo nInfo) throws RemoteException,
	IRollbackException{
		long lResult = -1;
		
		DiscountContractBillInfo dcbInfo;
    	DiscountContractBillDao dcbDao=new DiscountContractBillDao();
    	Timestamp tsNow=Env.getSystemDateTime();
    	
		try {
			TransDraftOutInfo transDraftOutInfo=new TransDraftOutInfo();
			TransDraftOutDao transDraftOutDao=new TransDraftOutDao();
			//nInfo1 = findPayNoticeByID(nInfo.getId());
			transDraftOutInfo = (TransDraftOutInfo)transDraftOutDao.findByID(nInfo.getId(),TransDraftOutInfo.class);
			dcbInfo = (DiscountContractBillInfo)dcbDao.findByID(transDraftOutInfo.getBillID(), DiscountContractBillInfo.class);
	    	//检查出库票据状态信息
	    	if(dcbInfo==null||dcbInfo.getId()==-1)
	    	{
	    		throw new BillException("Bill_E033",new Exception(),this.ctx);
	    	}
	    	if(dcbInfo!= null && dcbInfo.getNStorageStatusID() == BILLConstant.DraftInOrOut.OUT){
				//判断对应的出库交易id是否是当前出库记录对应的出库信息
				throw new BillException("Bill_E037",new Exception(),this.ctx);
	    	}
			InutParameterInfo inutParameterInfo = nInfo.getInutParameterInfo();
			InutParameterInfo returnInfo = new InutParameterInfo();
		
			// 将业务记录置入nInfo1,转换成标准map传递到审批流引擎
			inutParameterInfo.setDataEntity(transDraftOutInfo);
		
			// 提交审批
			returnInfo = FSWorkflowManager.doApproval(inutParameterInfo);
			// 如果是最后一级,且为审批通过,更新状态为已审批
			if (returnInfo.isLastLevel()) {
				long lll=nInfo.getId();
				
				lResult = transDraftOutDao.updateDraftOutStatusByID(lll,BILLConstant.TransctionStatus.APPROVALED);		
				//审批完成后需要做的操作
				
				//更新票据状态为出库状态
//				dcbInfo = (DiscountContractBillInfo)dcbDao.findByID(transDraftOutInfo.getBillID(), DiscountContractBillInfo.class);
//		    	//检查出库票据状态信息
//		    	if(dcbInfo==null||dcbInfo.getId()==-1)
//		    	{
//		    		throw new BillException("Bill_E033",new Exception(),this.ctx);
//		    	}
		    	//	设置修改时间,修改人
		    	dcbInfo.setDtModifyDate(tsNow);
		    	dcbInfo.setNModifyUserID(transDraftOutInfo.getInputUserID());
		    	dcbInfo.setSellStatusId(Constant.YesOrNo.NO);
		    	dcbInfo.setNStorageStatusID(BILLConstant.DraftInOrOut.OUT);
		    	dcbInfo.setNStorageTransID(lResult);
		    	dcbDao.update(dcbInfo);
		    	
			}
			// 如果是最后一级,且为审批拒绝,更新状态为已保存
			else if (returnInfo.isRefuse()) {
				
				lResult = transDraftOutDao.updateDraftOutStatusByID(nInfo.getId(),BILLConstant.TransctionStatus.SUBMIT);
				
				// 被拒绝时应该清除的关联

			}
		
		} catch (Exception e) {
   			logger.error(e.toString());
   			throw new IRollbackException(sessionContext, e.getMessage(), e);
   		}
   		return lResult;
	}
	//汇票出库取消审批方法
	public long doCancelApproval(TransDraftOutInfo nInfo) throws RemoteException,
	IRollbackException{
      	long lResult = -1;
      	Timestamp tsNow=Env.getSystemDateTime();
      	
   		try {
   			DiscountContractBillDao dcbDao=new DiscountContractBillDao();
   			
   			TransDraftOutDao transDraftOutDao=new TransDraftOutDao();
   			DraftStorageAssembleInfo draftStorageAssembleInfo = transDraftOutDao.findDraftOutByID(nInfo.getId());
   			
   			TransDraftOutInfo transDraftOutInfo=draftStorageAssembleInfo.getTransDraftOutInfo();
   			DiscountContractBillInfo billInfo = draftStorageAssembleInfo.getDiscountContractBillInfo();
			TransDraftInInfo inInfo = draftStorageAssembleInfo.getTransDraftInInfo();
			
 			InutParameterInfo inutParameterInfo = nInfo.getInutParameterInfo();
 			
 			if(billInfo.getNStorageStatusID() == BILLConstant.DraftInOrOut.OUT){
	 			// 	将业务记录置入nInfo1,转换成标准map传递到审批流引擎
	 			inutParameterInfo.setDataEntity(transDraftOutInfo);
	 			
	 			// 	提交审批
	 			FSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
				
				//  更新状态到以保存
	 			
	 			lResult = transDraftOutDao.updateDraftOutStatusByID(nInfo.getId(),BILLConstant.TransctionStatus.SUBMIT);
	 			
	 			// 取消审批完成后需要做的操作
	 			
	 			//更新票据为入库状态
	 			billInfo.setDtModifyDate(tsNow);
	 			billInfo.setNModifyUserID(transDraftOutInfo.getInputUserID());
		    	
	 			billInfo.setNStorageStatusID(BILLConstant.DraftInOrOut.IN);
	 			billInfo.setNStorageTransID(lResult);
		    	dcbDao.update(billInfo);
 			}
 			else{
 				throw new BillException("票据号为: " + billInfo.getSCode()+ " 的票据为入库状态，不能出库!",new Exception(),this.ctx);
 				//throw new BillException("Bill_E085",billInfo.getSCode(),transDraftOutInfo.getTransCode(),null,this.ctx);
 			}
 			
   		} catch (Exception e) {
   			logger.error(e.toString());
   			throw new IRollbackException(sessionContext, e.getMessage(), e);
   		}
   		return lResult;
   	}
   /**
     * 系统保存并审批出库信息
     * 步骤 1：保存汇票出库信息saveDraftOut
     * 步骤 2：更新状态为已审批
     * 步骤 3：更新票据出入库状态
     */
    public long autoDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,IRollbackException{
		long lResult = -1;
		DiscountContractBillInfo dcbInfo;
    	DiscountContractBillDao dcbDao=new DiscountContractBillDao();
    	Timestamp tsNow=Env.getSystemDateTime();
    	
		try {
			//步骤 1：保存汇票出库信息
			lResult = saveDraftOut(draftStorageAssembleInfo);
			
			TransDraftOutInfo nInfo = draftStorageAssembleInfo.getTransDraftOutInfo();
			nInfo.setId(lResult);
			
			TransDraftOutInfo transDraftOutInfo=new TransDraftOutInfo();
			TransDraftOutDao transDraftOutDao=new TransDraftOutDao();
			
			transDraftOutInfo = (TransDraftOutInfo)transDraftOutDao.findByID(nInfo.getId(),TransDraftOutInfo.class);
			dcbInfo = (DiscountContractBillInfo)dcbDao.findByID(transDraftOutInfo.getBillID(), DiscountContractBillInfo.class);
	    	
			//更新状态为已复核
			lResult = transDraftOutDao.updateDraftOutStatusByID(draftStorageAssembleInfo.getTransDraftOutInfo().getId(),BILLConstant.TransctionStatus.CHECK);		
			//审批完成后需要做的操作

	    	//	设置修改时间,修改人
	    	dcbInfo.setDtModifyDate(tsNow);
	    	dcbInfo.setNModifyUserID(transDraftOutInfo.getInputUserID());
	    	
	    	dcbInfo.setNStorageStatusID(BILLConstant.DraftInOrOut.OUT);
	    	dcbInfo.setNStorageTransID(lResult);
	    	dcbDao.update(dcbInfo);
		} catch (Exception e) {
   			logger.error(e.toString());
   			throw new IRollbackException(sessionContext, e.getMessage(), e);
   		}
   		return lResult;
    }
    /**
     * 自动取消票据出库信息
     * 步骤 1：更新状态为已保存
     * 步骤 2：删除出库交易
     * 
     */
    public long autoCancelDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,IRollbackException{
		long lResult = -1;
		DiscountContractBillInfo dcbInfo;
    	DiscountContractBillDao dcbDao=new DiscountContractBillDao();
    	Timestamp tsNow=Env.getSystemDateTime();
    	
		try {
			TransDraftOutDao transDraftOutDao=new TransDraftOutDao();
			//步骤 1：保存汇票出库信息
			lResult = transDraftOutDao.updateDraftOutStatusByID(draftStorageAssembleInfo.getTransDraftOutInfo().getId(),BILLConstant.TransctionStatus.APPROVALED);
			//步骤 2：删除出库交易
			deleteDraftOut(draftStorageAssembleInfo);
			
		} catch (Exception e) {
   			logger.error(e.toString());
   			throw new IRollbackException(sessionContext, e.getMessage(), e);
   		}
   		return lResult;
    }
    
    /**
	 * 根据票据id查找该票据下所有入库记录
	 * 操作数据库表:Bill_TransDraftIn
	 * 步骤：
	 * 调用：TransDraftInDAO方法findByBillID 
	 */
    public DraftStorageAssembleInfo findLastDraftInByBillID(long lBillID) throws RemoteException,BillException
	{
    	TransDraftInDAO dao = new TransDraftInDAO();
    	
    	return dao.findLastDraftInByBillID(lBillID);
    	
    }
    /**
	 * 根据票据id查找最后出库信息
	 * 操作数据库表:Bill_TransDraftOut
	 * 步骤：
	 * 调用：TransDraftOutDAO方法findByBillID 
	 */
	public DraftStorageAssembleInfo findLastDraftOutByBillID(long lBillID) throws RemoteException,BillException
	{
		TransDraftOutDao dao = new TransDraftOutDao();
    	
    	return dao.findLastCheckedByBillID(lBillID);
	}
}
