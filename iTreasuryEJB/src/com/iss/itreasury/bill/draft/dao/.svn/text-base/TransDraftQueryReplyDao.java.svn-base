/* Generated by Together */

package com.iss.itreasury.bill.draft.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import com.iss.itreasury.bill.draft.dataentity.DiscountContractBillInfo;
import com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition;
import com.iss.itreasury.bill.draft.dataentity.TransDraftQueryReplyInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftQueryReplyAssembleInfo;
import com.iss.itreasury.bill.util.BILLConstant;
import com.iss.itreasury.bill.util.BillDAO;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.ITreasuryBaseDataEntity;
public final class TransDraftQueryReplyDao extends BillDAO {
     public TransDraftQueryReplyDao() {
        super("Bill_TransDraftQueryReply");
        super.setUseMaxID();
    }
     
     /**
      * 根据查询条件查询相应的有效汇票查询交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftQuery
      * @param multiBillQueryCondition
      * @return
    * @throws SQLException
    * @throws ClassNotFoundException
      */
     public Vector queryDraftQueryReplyByCondition(MultiBillQueryCondition multiBillQueryCondition)throws BillException {
     	
     	Vector Results=new Vector();
     	
     	//构造SQL	
     	try {
     		initDAO();			
 	    	String sql="select queryReply.* from BILL_TRANSDRAFTQUERYREPLY queryReply,LOAN_DISCOUNTCONTRACTBILL bill \n" +
 					" where queryReply.BILLID=bill.ID and queryReply.INPUTUSERID="+multiBillQueryCondition.getNInputUserID()+" \n"+
 	    			" and bill.NQUERYSTATUSID in("+BILLConstant.BillQuery.REPLYVALID+", \n" +BILLConstant.BillQuery.REPLYINVALID+
 	    			") and bill.NSTATUSID="+Constant.RecordStatus.VALID+" and queryReply.STATUSID="+Constant.RecordStatus.VALID+" \n";
 	    	if(multiBillQueryCondition.getNDraftTypeID()!=-1)
 	    		sql+=" and bill.NDRAFTTYPEID = "+multiBillQueryCondition.getNDraftTypeID()+" \n";
 	    	if(multiBillQueryCondition.getSCodeStart()!=null&&multiBillQueryCondition.getSCodeStart().length()>0)
 	    		sql+=" and bill.SCODE >= '"+multiBillQueryCondition.getSCodeStart()+"' \n";
 	    	if(multiBillQueryCondition.getSCodeEnd()!=null&&multiBillQueryCondition.getSCodeEnd().length()>0)
 	    		sql+=" and bill.SCODE <= '"+multiBillQueryCondition.getSCodeEnd()+"' \n";
 	    	if(multiBillQueryCondition.getCreateStart()!=null)
 	    		sql+=" and bill.DTCREATE >= ? \n";
 	    	if(multiBillQueryCondition.getCreateEnd()!=null)
 	    		sql+=" and bill.DTCREATE <= ? \n";
 	    	if(multiBillQueryCondition.getDtEndStart()!=null)
 	    		sql+=" and bill.DTEND >= ? \n";
 	    	if(multiBillQueryCondition.getDtEndEnd()!=null)
 	    		sql+=" and bill.DTEND <= ? \n";
 	    	if(multiBillQueryCondition.getQueryStart()!=null)
 	    		sql+=" and queryReply.REPLYDATE >= ? \n";
 	    	if(multiBillQueryCondition.getQueryEnd()!=null)
 	    		sql+=" and queryReply.REPLYDATE <= ? \n";
 	    	if(multiBillQueryCondition.getStrAcceptorName()!=null&&multiBillQueryCondition.getStrAcceptorName().length()>0)
 	    		sql+=" and bill.STRACCEPTORNAME = '"+multiBillQueryCondition.getStrAcceptorName()+"' \n";
 	    		
 	    	//获得排序参数
 	    	String OrderStr="";
 			switch((int) multiBillQueryCondition.getOrderParam())
 			{	
 				case 0: OrderStr=" queryReply.TRANSCODE ";break;
 				case 1: OrderStr=" bill.SCODE ";break;
 				case 2: OrderStr=" bill.NDRAFTTYPEID ";break;
 				case 3: OrderStr=" bill.NMODULESOURCEID ";break;
 				case 4: OrderStr=" bill.MAMOUNT ";break;
 				case 6: OrderStr=" bill.DTCREATE ";break;
 				case 7: OrderStr=" bill.DTEND ";break;
 			}
 			//排序方向
 			if(multiBillQueryCondition.getDesc()==Constant.PageControl.CODE_ASCORDESC_ASC)
 				OrderStr+=" ASC";
 			else
 				OrderStr+=" DESC";
 			
 	    	sql+=" order by "+OrderStr;
 	    		
 	    	//构造PreparedStatement
 	    	System.out.println("sql:"+sql);
 	    	this.prepareStatement(sql);
 	    	int index=1;
 	    	if(multiBillQueryCondition.getCreateStart()!=null)
 	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateStart());
 	    	if(multiBillQueryCondition.getCreateEnd()!=null)
 	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateEnd());
 	    	if(multiBillQueryCondition.getDtEndStart()!=null)
 	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndStart());
 	    	if(multiBillQueryCondition.getDtEndEnd()!=null)
 	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndEnd());
 	    	if(multiBillQueryCondition.getQueryStart()!=null)
 	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getQueryStart());
 	    	if(multiBillQueryCondition.getQueryEnd()!=null)
 	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getQueryEnd());
 	    	
 	    	this.executeQuery();
 	    	//获得实体
 	    	Iterator ResultIt=getDataEntitiesFromResultSet(new TransDraftQueryReplyInfo().getClass()).iterator();
 	    	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
 	    	while(ResultIt.hasNext())
 	    	{
 	    		TransDraftQueryReplyInfo transDraftQueryReplyInfo=(TransDraftQueryReplyInfo)ResultIt.next();
 	    		DiscountContractBillInfo discountContractBillInfo=(DiscountContractBillInfo)discountContractBillDao.findByID(transDraftQueryReplyInfo.getBillID(),new DiscountContractBillInfo().getClass());
 	    		DraftQueryReplyAssembleInfo draftQueryReplyAssembleInfo=new DraftQueryReplyAssembleInfo();
 	    		draftQueryReplyAssembleInfo.setDiscountContractBillInfo(discountContractBillInfo);
 	    		draftQueryReplyAssembleInfo.setTransDraftQueryReplyInfo(transDraftQueryReplyInfo);
 	    		Results.add(draftQueryReplyAssembleInfo);
 	    	}
 	    	
     	} catch (Exception e) {
     		e.printStackTrace();
     		throw new BillException("Sec_E100", e);
 		}
     	finally
 		{
 			try 
 			{				
 				finalizeDAO();
 			} 
 			catch (ITreasuryDAOException e1) 
 			{
 				throw new BillException("Sec_E100", e1);
 			}
 		}
   	return Results;
   }  
     
     /**
 	 * 数据库新增操作，新增的ID必须在子类set入正确的数值　
 	 * @param dataEntity 需要被插入数据库表对应的Data Entity的实例
 	 * @param 　
 	 * @return 新产生的ID
 	 * @throws ITreasuryDAOException
 	 */		
 	public long add(ITreasuryBaseDataEntity dataEntity) throws ITreasuryDAOException{
 		initDAO();
 		
 		//设置空值到DataEntity的已使用表,使得setPrepareStatementByDataEntity会ID进行付值
 		dataEntity.setId(-1);
 				
 		StringBuffer buffer = new StringBuffer();
 		buffer.append("INSERT INTO "+ strTableName+" (\n");
 		String[] buffers = getAllFieldNameBuffer(dataEntity,DAO_OPERATION_ADD);
 		buffer.append(buffers[0]);
 		buffer.append("\n) "+ "VALUES (\n");				
 		buffer.append(buffers[1] +") \n");
 		
 		String strSQL = buffer.toString();
 		log.debug(strSQL);		
 		prepareStatement(strSQL);

 		long id = setPrepareStatementByDataEntity(dataEntity,DAO_OPERATION_ADD,buffers[0].toString());
 		
 		executeUpdate();
 		
 		finalizeDAO();
 		return id;
 	}
 	
 	/**
 	 * 根据DataEntity中的信息向PrepareStatement中设置数据
 	 * @param ITreasuryBaseDataEntity　　　需要传递给PrepareStatement数据的Data Entity
 	 * @param operationType          操作类型
 	 * @param fieldNames　　　　　　　用逗号隔开的所有字段名称
 	 * @return 如果是针对add操作，返回ID值，否则返回-1
 	 * @throws ITreasuryDAOException
 	 */
 		public long setPrepareStatementByDataEntity(ITreasuryBaseDataEntity dataEntity, int operationType, String fieldNames) throws ITreasuryDAOException{

 			String[] fieldNameArray = null;
 			long id = -1;
 			//maybe has blank in every string, you must trim it before using it
 			
 			//fieldNameArray = fieldNames.split(",");
 			if(operationType == DAO_OPERATION_FIND){
 				fieldNameArray = DataFormat.splitString(fieldNames, "AND");
// 				String lastOne = fieldNameArray[fieldNameArray.length-1];
 				//cut last one " = ?"
// 				lastOne = lastOne.substring(0,lastOne.length()-4);
// 				fieldNameArray[fieldNameArray.length-1] = lastOne;
 			}
 			else	
 				fieldNameArray = DataFormat.splitString(fieldNames, ",");
 			int j = 1;
 			for (int i = 0; i < fieldNameArray.length; i++) {
 				String fieldName = null;

 				fieldName = (fieldNameArray[i]).trim();
 								
 				if(operationType == DAO_OPERATION_UPDATE || operationType == DAO_OPERATION_FIND){//cut " = ?"
 					fieldName = fieldName.substring(0,fieldName.length()-4);
 				}

 				//log.debug(
 				//	"Field Name: "+ fieldName);

 				//更新操作不对ID进行处理	
 				if(operationType == DAO_OPERATION_UPDATE && fieldName.compareToIgnoreCase("id") == 0)//更新操作不对id进行处理
 						continue;				
 				try {
 					HashMap allFieldsAndValues = dataEntity.gainAllUsedFieldsAndValue();
 					Object resValue = allFieldsAndValues.get(fieldName);
 					
 					if(resValue instanceof Long){
 						long value = ((Long)(resValue)).longValue();
 						if(operationType == DAO_OPERATION_ADD && fieldName.compareToIgnoreCase("id") == 0){
 								value = getMaxID();							
 							transPS.setLong(j, value);
 							id = value;
 						}
 						else
 							transPS.setLong(j, value);
 					}else if(resValue instanceof Double){
 						double value = ((Double)(resValue)).doubleValue();				
 						transPS.setDouble(j,value);
 					}else if(resValue instanceof String){
 						transPS.setString(j, (String)resValue);
 					}else if(resValue instanceof Timestamp){
 						Timestamp time = (Timestamp)resValue;
 						if(time.equals(ITreasuryBaseDataEntity.getNullTimeStamp()))
 							time = null;
 						transPS.setTimestamp(j, time);				
 					}
 					else{
 						throw new ITreasuryDAOException("Debug:setPrepareStatementByDataEntity类型不匹配",null);
 					}
 					//log.debug("value is: "+resValue);

 				} catch (SQLException e) {
 					throw new ITreasuryDAOException("数据库异常发生",e);
 				}
 				j++;

 			}		
 			//log.debug("-----end of setPrepareStatementByDataEntity--------");
 			return id;
 		}
 		/**
 	      * 重载基类中的方法，实现两个表中最大id的查找
 	      */
 	     protected long getMaxID()  throws ITreasuryDAOException
 	     {
 	     	long id = -1;
 	 		PreparedStatement localPS = null;
 	 		ResultSet localRS = null;		
 	 		StringBuffer sb = new StringBuffer();
 	 		sb.append(" select nvl(max(ID)+1,1) ID from ( " +
 	 				  " select max(ID) as id from BILL_TRANSDRAFTQUERY union " +
 	 				  " select max(ID) as id from BILL_TRANSDRAFTQUERYREPLY )");
 	 		try {	//内部维护RS和PS，否则将会产生冲突,但Connection使用同一个	
 	 			localPS = transConn.prepareStatement(sb.toString());
 	 			ResultSet rs = localPS.executeQuery();
 	 			if (rs.next())
 	 			{
 	 				id = rs.getLong("ID");
 	 			}
 	 			if(localRS != null)
 	 				localRS.close();
 	 			if(localPS != null)
 	 				localPS.close();
 	 		} catch (SQLException e) {
 	 			new ITreasuryDAOException("数据库获取ID产异常",e);
 	 		}				
 	 		return id;		
 	     }
 	    /**
 		  * 根据汇票号删除其查复信息
 		  * @param billID
 		  * @throws BillException
 		  */
 	 	public void deleteByBillID(long billID) throws BillException
 		{
 	 		try
 			{
 				initDAO();
 				String SQLstr = "update "+ strTableName + " set statusID = ? where billID = ?" ;
 				log.print(SQLstr);
 				transPS = transConn.prepareStatement(SQLstr);
 				transPS.setLong(1,Constant.RecordStatus.INVALID);
 				transPS.setLong(2,billID);
 				transPS.executeUpdate();
 			} catch (Exception e)
 			{
 				// TODO Auto-generated catch block
 				e.printStackTrace();
 				throw new BillException("Bill_E012",e);
 			}
 			finally
 			{
 				try
 				{
 					this.finalizeDAO();
 				} catch (ITreasuryDAOException e1)
 				{
 					// TODO Auto-generated catch block
 					e1.printStackTrace();
 				}
 			}
 		}
 	 	/**
	  	 * 根据票据号查复信息
	  	 * @param lBillID
	  	 * @return
	  	 * @throws BillException
	  	 */

	  	public Collection findByBillID(long lBillID) throws BillException
		{
	  		ArrayList list = new ArrayList();
	  		Collection c = null;
	  		DraftQueryReplyAssembleInfo info = null;
	  		TransDraftQueryReplyInfo queryReplyInfo = new TransDraftQueryReplyInfo();
	  		DiscountContractBillInfo billInfo = null;
	  		DiscountContractBillDao billDao = new DiscountContractBillDao();
	  		
			try
			{
				billInfo = (DiscountContractBillInfo)billDao.findByID(lBillID,DiscountContractBillInfo.class);
			} catch (ITreasuryDAOException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
				throw new BillException("Bill_E012",e1);
			}
			
			queryReplyInfo.setBillID(lBillID);
			queryReplyInfo.setStatusID(Constant.RecordStatus.VALID);
	  		try
			{
				c =	findByCondition(queryReplyInfo);
			} catch (ITreasuryDAOException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
			if (c!=null && c.size() > 0)
			{
				Iterator it = c.iterator();
				while (it.hasNext())
				{
					queryReplyInfo = (TransDraftQueryReplyInfo)it.next();
					info = new DraftQueryReplyAssembleInfo();
					info.setTransDraftQueryReplyInfo(queryReplyInfo);
					info.setDiscountContractBillInfo(billInfo);	
					list.add(info);
				}
			}
			return list;
		}
	  
	  	/**
	  	 * 根据汇票ID 查复书编号和备注
	  	 * @param lID
	  	 * @return
	  	 * @throws BillException
	  	 */
	  public TransDraftQueryReplyInfo findDraftQueryReplyByCode(long lID) throws BillException{
		  TransDraftQueryReplyInfo info=null;
		  ResultSet rs=null;
		  try{
			  String strSQL="select replybookcode,abstract,replystatusid,replydate from Bill_TransDraftQueryReply where billid="+lID+" order by id desc";
			  System.out.println("查复书编号和备注SQL"+strSQL);
			  initDAO();
			  prepareStatement(strSQL);
			  rs=executeQuery();
			  if(rs.next()){
				  info=new TransDraftQueryReplyInfo();
				  info.setReplyBookCode(rs.getString("replybookcode"));
				  info.setAbstract(rs.getString("abstract"));
				  info.setReplyStatusID(rs.getLong("replystatusid"));
				  info.setReplyDate(rs.getTimestamp("replydate"));
			  }
			  finalizeDAO();
		  }catch(SQLException e){
			  e.printStackTrace();
		  }catch(ITreasuryDAOException e){
			  e.printStackTrace();
		  }
		  return info;
	  }
	  	
	  	/**
		* 根据汇票入库交易id查找有效的查复信息：操作table：Bill_TransDraftQuery 
		* @param id
		* @return
		* @throws BillException
		* @throws 
       */
      public DraftQueryReplyAssembleInfo findDraftQueryReplyByID(long lID) throws BillException
      {
      	//集合类
      	DraftQueryReplyAssembleInfo info = new DraftQueryReplyAssembleInfo();
      	//查找构造票据信息类实体
      	DiscountContractBillInfo discountContractBillInfo=new DiscountContractBillInfo();
      	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
      	
      	//查找构造入库信息实体
		TransDraftQueryReplyInfo queryReplyInfo = new TransDraftQueryReplyInfo();
		TransDraftQueryReplyDao queryReplyDao = new TransDraftQueryReplyDao();
		try {
			queryReplyInfo=(TransDraftQueryReplyInfo)queryReplyDao.findByID(lID,TransDraftQueryReplyInfo.class);
		} catch (ITreasuryDAOException e1) {
			e1.printStackTrace();
			throw new BillException("Bill_E012", e1);
		}
		
      	
      	try {
			discountContractBillInfo=(DiscountContractBillInfo) discountContractBillDao.findByID(queryReplyInfo.getBillID(),DiscountContractBillInfo.class);
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw new BillException("Bill_E012", e);
		}
      	

		//组装返回集合类
		info.setDiscountContractBillInfo(discountContractBillInfo);
		info.setTransDraftQueryReplyInfo(queryReplyInfo);
      	return info;
      }
}
