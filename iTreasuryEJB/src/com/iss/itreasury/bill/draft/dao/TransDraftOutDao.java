/* Generated by Together */

package com.iss.itreasury.bill.draft.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;

import com.iss.itreasury.bill.draft.dataentity.DiscountContractBillInfo;
import com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition;
import com.iss.itreasury.bill.draft.dataentity.TransDraftInInfo;
import com.iss.itreasury.bill.draft.dataentity.TransDraftOutInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftStorageAssembleInfo;
import com.iss.itreasury.bill.util.BILLConstant;
import com.iss.itreasury.bill.util.BillDAO;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.system.approval.bizlogic.InutApprovalRelationBiz;
import com.iss.itreasury.system.approval.dataentity.InutApprovalRelationInfo;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.Log;
import com.iss.system.action.ActionException;
import com.iss.system.dao.ConnectionFactory;
public class TransDraftOutDao extends BillDAO {
    public TransDraftOutDao() {
      super("Bill_TransDraftOut");
      super.setUseMaxID();
    }
   /**
	* 查询所有曾经出库过的纪录
	* @param multiBillQueryCondition
	* @return
	* @throws SQLException
	* @throws ClassNotFoundException
	*/
   public Vector queryDraftOutByCondition(MultiBillQueryCondition multiBillQueryCondition)throws BillException 
   {
   	Vector Results=new Vector();
   	//构造SQL	
   	try {
   		initDAO();			
    	String sql="select draftout.* from BILL_TRANSDRAFTOUT draftout,LOAN_DISCOUNTCONTRACTBILL bill,BILL_TRANSDRAFTIN draftin \n" +
    			" where bill.ID=draftout.BILLID and draftin.ID=draftout.TRANSDRAFTINID \n" +
    			" and draftout.INPUTUSERID="+multiBillQueryCondition.getNInputUserID()+" \n" +
    			//" and bill.NSTORAGESTATUSID="+BILLConstant.DraftInOrOut.OUT+" \n" +
    			" and bill.NSTATUSID="+Constant.RecordStatus.VALID+" and draftout.STATUSID="+Constant.RecordStatus.VALID+" and draftin.STATUSID="+Constant.RecordStatus.VALID+" \n";
    	if(multiBillQueryCondition.getNDraftTypeID()!=-1)
    		sql+=" and bill.NDRAFTTYPEID = "+multiBillQueryCondition.getNDraftTypeID()+" \n";
    	if(multiBillQueryCondition.getLBillDestinationID()!=-1)
    		sql+=" and draftout.BILLDESTINATIONID = "+multiBillQueryCondition.getLBillDestinationID()+" \n";
    	if(multiBillQueryCondition.getSCodeStart()!=null&&multiBillQueryCondition.getSCodeStart().length()>0)
    		sql+=" and bill.SCODE >= '"+multiBillQueryCondition.getSCodeStart()+"' \n";
    	if(multiBillQueryCondition.getSCodeEnd()!=null&&multiBillQueryCondition.getSCodeEnd().length()>0)
    		sql+=" and bill.SCODE <= '"+multiBillQueryCondition.getSCodeEnd()+"' \n";
    	if(multiBillQueryCondition.getCreateStart()!=null)
    		sql+=" and bill.DTCREATE >= ? \n";
    	if(multiBillQueryCondition.getCreateEnd()!=null)
    		sql+=" and bill.DTCREATE <= ? \n";
    	if(multiBillQueryCondition.getDtEndStart()!=null)
    		sql+=" and bill.DTEND >= ? \n";
    	if(multiBillQueryCondition.getDtEndEnd()!=null)
    		sql+=" and bill.DTEND <= ? \n";
    	if(multiBillQueryCondition.getInDateStart()!=null)
    		sql+=" and draftout.OUTDATE >= ? \n";
    	if(multiBillQueryCondition.getInDateEnd()!=null)
    		sql+=" and draftout.OUTDATE <= ? \n";
    	if(multiBillQueryCondition.getInputDateStart()!=null)
    		sql+=" and bill.DTINPUTDATE >= ? \n";
    	if(multiBillQueryCondition.getInputDateEnd()!=null)
    		sql+=" and bill.DTINPUTDATE <= ? \n";
    	
    	//获得排序参数
    	String OrderStr="";
		switch((int) multiBillQueryCondition.getOrderParam())
		{
			case 0: OrderStr=" draftout.TRANSCODE ";break;
			case 1: OrderStr=" bill.SCODE ";break;
			case 2: OrderStr=" bill.NDRAFTTYPEID ";break;
			case 3: OrderStr=" draftout.BILLDESTINATIONID ";break;
			case 4: OrderStr=" bill.MAMOUNT ";break;
			case 5: OrderStr=" draftin.CURRENTHOLDER ";break;
			case 6: OrderStr=" bill.DTCREATE ";break;
			case 7: OrderStr=" bill.DTEND ";break;
			default : OrderStr=" draftout.TRANSCODE ";break;
		}
		//排序方向
		if(multiBillQueryCondition.getDesc()==Constant.PageControl.CODE_ASCORDESC_ASC)
			OrderStr+=" ASC";
		else
			OrderStr+=" DESC";
		
    	sql+=" order by "+OrderStr;
    		
    	//构造PreparedStatement
    	System.out.println("sql:"+sql);
    	this.prepareStatement(sql);
    	int index=1;
    	if(multiBillQueryCondition.getCreateStart()!=null)
    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateStart());
    	if(multiBillQueryCondition.getCreateEnd()!=null)
    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateEnd());
    	if(multiBillQueryCondition.getDtEndStart()!=null)
    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndStart());
    	if(multiBillQueryCondition.getDtEndEnd()!=null)
    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndEnd());
    	if(multiBillQueryCondition.getInDateStart()!=null)
    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInDateStart());
    	if(multiBillQueryCondition.getInDateEnd()!=null)
    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInDateEnd());
    	if(multiBillQueryCondition.getInputDateStart()!=null)
    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInputDateStart());
    	if(multiBillQueryCondition.getInputDateEnd()!=null)
    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInputDateEnd());
    	this.executeQuery();
    	//获得实体
    	Iterator ResultIt=getDataEntitiesFromResultSet(new TransDraftOutInfo().getClass()).iterator();
    	DraftStorageAssembleInfo draftStorageAssembleInfo=null;
    	TransDraftOutInfo transDraftOutInfo=null;
    	TransDraftInInfo transDraftInInfo=null;
    	TransDraftInDAO transDraftInDAO=new TransDraftInDAO();
    	DiscountContractBillInfo discountContractBillInfo=null;
    	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
    	//遍历查找结果，由入库信息关联汇票信息组装draftStorageAssembleInfo
    	while(ResultIt.hasNext())
    	{
    		draftStorageAssembleInfo=new DraftStorageAssembleInfo();
    		transDraftOutInfo=(TransDraftOutInfo) ResultIt.next();
    		//查找聚合类中的另外两个对象DiscountContractBillInfo，TransDraftInInfo
    		discountContractBillInfo=(DiscountContractBillInfo) discountContractBillDao.findByID(transDraftOutInfo.getBillID(),new DiscountContractBillInfo().getClass());
    		System.out.println("组装完成discountContractBillInfo.....");
    		transDraftInInfo=(TransDraftInInfo) transDraftInDAO.findByID(transDraftOutInfo.getTransDraftInID(),new TransDraftInInfo().getClass());
    		System.out.println("组装完成transDraftInInfo......");
    		//组装聚合对象
    		draftStorageAssembleInfo.setTransDraftInInfo(transDraftInInfo);
    		draftStorageAssembleInfo.setTransDraftOutInfo(transDraftOutInfo);
    		draftStorageAssembleInfo.setDiscountContractBillInfo(discountContractBillInfo);
    		Results.add(draftStorageAssembleInfo);
    	}
   	} catch (Exception e) {
   		throw new BillException("Sec_E100", e);
	}
   	finally
	{
		try 
		{				
			finalizeDAO();
		} 
		catch (ITreasuryDAOException e1) 
		{
			throw new BillException("Sec_E100", e1);
		}
	}
 	return Results;
   }
   /**
	* 查询所有曾经出库过的纪录(分是否挂接审批流)
	* @param multiBillQueryCondition
	* @param isNeedApproval
	* @return
	* @throws SQLException
	* @throws ClassNotFoundException
	*/
  public Vector queryDraftOutByCondition(MultiBillQueryCondition multiBillQueryCondition,boolean isNeedApproval)throws BillException 
  {
  	Vector Results=new Vector();
  	//构造SQL	
  	try {
  		initDAO();			
   	String sql="select draftout.* from BILL_TRANSDRAFTOUT draftout,LOAN_DISCOUNTCONTRACTBILL bill,BILL_TRANSDRAFTIN draftin \n" +
   			" where bill.ID=draftout.BILLID and draftin.ID=draftout.TRANSDRAFTINID \n" +
   			" and bill.NSTATUSID="+Constant.RecordStatus.VALID+" and draftin.STATUSID="+Constant.RecordStatus.VALID+" \n";
   	if(isNeedApproval){
   		sql += " and draftout.STATUSID="+BILLConstant.TransctionStatus.APPROVALED;//挂了审批流
   	}else{
   		sql += " and draftout.STATUSID="+BILLConstant.TransctionStatus.SUBMIT;//未挂审批流
   	}
   	if(multiBillQueryCondition.getNDraftTypeID()!=-1)
   		sql+=" and bill.NDRAFTTYPEID = "+multiBillQueryCondition.getNDraftTypeID()+" \n";
   	if(multiBillQueryCondition.getLBillDestinationID()!=-1)
   		sql+=" and draftout.BILLDESTINATIONID = "+multiBillQueryCondition.getLBillDestinationID()+" \n";
   	if(multiBillQueryCondition.getSCodeStart()!=null&&multiBillQueryCondition.getSCodeStart().length()>0)
   		sql+=" and bill.SCODE >= '"+multiBillQueryCondition.getSCodeStart()+"' \n";
   	if(multiBillQueryCondition.getSCodeEnd()!=null&&multiBillQueryCondition.getSCodeEnd().length()>0)
   		sql+=" and bill.SCODE <= '"+multiBillQueryCondition.getSCodeEnd()+"' \n";
   	if(multiBillQueryCondition.getCreateStart()!=null)
   		sql+=" and bill.DTCREATE >= ? \n";
   	if(multiBillQueryCondition.getCreateEnd()!=null)
   		sql+=" and bill.DTCREATE <= ? \n";
   	if(multiBillQueryCondition.getDtEndStart()!=null)
   		sql+=" and bill.DTEND >= ? \n";
   	if(multiBillQueryCondition.getDtEndEnd()!=null)
   		sql+=" and bill.DTEND <= ? \n";
   	if(multiBillQueryCondition.getInDateStart()!=null)
   		sql+=" and draftout.OUTDATE >= ? \n";
   	if(multiBillQueryCondition.getInDateEnd()!=null)
   		sql+=" and draftout.OUTDATE <= ? \n";
   	if(multiBillQueryCondition.getInputDateStart()!=null)
   		sql+=" and bill.DTINPUTDATE >= ? \n";
   	if(multiBillQueryCondition.getInputDateEnd()!=null)
   		sql+=" and bill.DTINPUTDATE <= ? \n";
   	
   	//获得排序参数
   	String OrderStr="";
		switch((int) multiBillQueryCondition.getOrderParam())
		{
			case 0: OrderStr=" draftout.TRANSCODE ";break;
			case 1: OrderStr=" bill.SCODE ";break;
			case 2: OrderStr=" bill.NDRAFTTYPEID ";break;
			case 3: OrderStr=" draftout.BILLDESTINATIONID ";break;
			case 4: OrderStr=" bill.MAMOUNT ";break;
			case 5: OrderStr=" draftin.CURRENTHOLDER ";break;
			case 6: OrderStr=" bill.DTCREATE ";break;
			case 7: OrderStr=" bill.DTEND ";break;
			default : OrderStr=" draftout.TRANSCODE ";break;
		}
		//排序方向
		if(multiBillQueryCondition.getDesc()==Constant.PageControl.CODE_ASCORDESC_ASC)
			OrderStr+=" ASC";
		else
			OrderStr+=" DESC";
		
   	sql+=" order by "+OrderStr;
   		
   	//构造PreparedStatement
   	System.out.println("sql:"+sql);
   	this.prepareStatement(sql);
   	int index=1;
   	if(multiBillQueryCondition.getCreateStart()!=null)
   		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateStart());
   	if(multiBillQueryCondition.getCreateEnd()!=null)
   		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateEnd());
   	if(multiBillQueryCondition.getDtEndStart()!=null)
   		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndStart());
   	if(multiBillQueryCondition.getDtEndEnd()!=null)
   		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndEnd());
   	if(multiBillQueryCondition.getInDateStart()!=null)
   		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInDateStart());
   	if(multiBillQueryCondition.getInDateEnd()!=null)
   		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInDateEnd());
   	if(multiBillQueryCondition.getInputDateStart()!=null)
   		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInputDateStart());
   	if(multiBillQueryCondition.getInputDateEnd()!=null)
   		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInputDateEnd());
   	this.executeQuery();
   	//获得实体
   	Iterator ResultIt=getDataEntitiesFromResultSet(new TransDraftOutInfo().getClass()).iterator();
   	DraftStorageAssembleInfo draftStorageAssembleInfo=null;
   	TransDraftOutInfo transDraftOutInfo=null;
   	TransDraftInInfo transDraftInInfo=null;
   	TransDraftInDAO transDraftInDAO=new TransDraftInDAO();
   	DiscountContractBillInfo discountContractBillInfo=null;
   	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
   	//遍历查找结果，由入库信息关联汇票信息组装draftStorageAssembleInfo
   	while(ResultIt.hasNext())
   	{
   		draftStorageAssembleInfo=new DraftStorageAssembleInfo();
   		transDraftOutInfo=(TransDraftOutInfo) ResultIt.next();
   		//查找聚合类中的另外两个对象DiscountContractBillInfo，TransDraftInInfo
   		discountContractBillInfo=(DiscountContractBillInfo) discountContractBillDao.findByID(transDraftOutInfo.getBillID(),new DiscountContractBillInfo().getClass());
   		System.out.println("组装完成discountContractBillInfo.....");
   		transDraftInInfo=(TransDraftInInfo) transDraftInDAO.findByID(transDraftOutInfo.getTransDraftInID(),new TransDraftInInfo().getClass());
   		System.out.println("组装完成transDraftInInfo......");
   		//组装聚合对象
   		draftStorageAssembleInfo.setTransDraftInInfo(transDraftInInfo);
   		draftStorageAssembleInfo.setTransDraftOutInfo(transDraftOutInfo);
   		draftStorageAssembleInfo.setDiscountContractBillInfo(discountContractBillInfo);
   		Results.add(draftStorageAssembleInfo);
   	}
  	} catch (Exception e) {
  		throw new BillException("Sec_E100", e);
	}
  	finally
	{
		try 
		{				
			finalizeDAO();
		} 
		catch (ITreasuryDAOException e1) 
		{
			throw new BillException("Sec_E100", e1);
		}
	}
	return Results;
  }  
   /**
    * 查询入库纪录(可以做出库交易的入库票据)，操作table：Loan_DiscountContractBill，BILL_TRANSDRAFTIN
    * @param multiBillQueryCondition
    * @return
  * @throws SQLException
  * @throws ClassNotFoundException
    */
   public Vector queryDraftByConditionForOut(MultiBillQueryCondition multiBillQueryCondition)throws BillException {
   	
   	Vector Results=new Vector();
   	
//   构造SQL	
   	try {
   		initDAO();			
	    	String sql="select draft.* from BILL_TRANSDRAFTIN draft,LOAN_DISCOUNTCONTRACTBILL bill \n" +
	    			" where draft.BILLID=bill.ID \n" +
					" and bill.NSTORAGETRANSID=draft.ID \n" +
	    			" and bill.NSTORAGESTATUSID="+BILLConstant.DraftInOrOut.IN+" and bill.NSTORAGETRANSID is not null \n" +
	    			" and bill.NSTATUSID="+Constant.RecordStatus.VALID+" and draft.STATUSID="+Constant.RecordStatus.VALID+" \n";
	    	if(multiBillQueryCondition.getNDraftTypeID()!=-1)
	    		sql+=" and bill.NDRAFTTYPEID = "+multiBillQueryCondition.getNDraftTypeID()+" \n";
	    	if(multiBillQueryCondition.getlBillSoureID()!=-1)
	    		sql+=" and draft.BILLSOUREID = "+multiBillQueryCondition.getlBillSoureID()+" \n";
	    	if(multiBillQueryCondition.getSCodeStart()!=null&&multiBillQueryCondition.getSCodeStart().length()>0)
	    		sql+=" and bill.SCODE >= '"+multiBillQueryCondition.getSCodeStart()+"' \n";
	    	if(multiBillQueryCondition.getSCodeEnd()!=null&&multiBillQueryCondition.getSCodeEnd().length()>0)
	    		sql+=" and bill.SCODE <= '"+multiBillQueryCondition.getSCodeEnd()+"' \n";
	    	if(multiBillQueryCondition.getNQueryStatusID()!=-1&&multiBillQueryCondition.getNQueryStatusID()!=1)
	    		sql+=" and bill.NQUERYSTATUSID="+multiBillQueryCondition.getNQueryStatusID()+" \n";
	    	if(multiBillQueryCondition.getCreateStart()!=null)
	    		sql+=" and bill.DTCREATE >= ? \n";
	    	if(multiBillQueryCondition.getCreateEnd()!=null)
	    		sql+=" and bill.DTCREATE <= ? \n";
	    	if(multiBillQueryCondition.getDtEndStart()!=null)
	    		sql+=" and bill.DTEND >= ? \n";
	    	if(multiBillQueryCondition.getDtEndEnd()!=null)
	    		sql+=" and bill.DTEND <= ? \n";
	    	if(multiBillQueryCondition.getInDateStart()!=null)
	    		sql+=" and draft.INDATE >= ? \n";
	    	if(multiBillQueryCondition.getInDateEnd()!=null)
	    		sql+=" and draft.INDATE <= ? \n";
	    	if(multiBillQueryCondition.getInputDateStart()!=null)
	    		sql+=" and bill.DTINPUTDATE >= ? \n";
	    	if(multiBillQueryCondition.getInputDateEnd()!=null)
	    		sql+=" and bill.DTINPUTDATE <= ? \n";
	    	if(multiBillQueryCondition.getStrAcceptorName()!=null&&multiBillQueryCondition.getStrAcceptorName().length()>0)
	    		sql+=" and bill.STRACCEPTORNAME = '"+multiBillQueryCondition.getStrAcceptorName()+"' \n";
	    	if(multiBillQueryCondition.getStrCurrentHolder()!=null&&multiBillQueryCondition.getStrCurrentHolder().length()>0)
	    		sql+=" and draft.CURRENTHOLDER = '"+multiBillQueryCondition.getStrCurrentHolder()+"' \n";
	    	if(multiBillQueryCondition.getMAmounStart()!=0.0)
	    		sql+=" and bill.MAMOUNT >= "+multiBillQueryCondition.getMAmounStart()+" \n";
	    	if(multiBillQueryCondition.getMAmounEnd()!=0.0)
	    		sql+=" and bill.MAMOUNT <= "+multiBillQueryCondition.getMAmounEnd()+" \n";
	    	//获得排序参数
	    	/*String OrderStr="";
			switch((int) multiBillQueryCondition.getOrderParam())
			{
				case 0: OrderStr=" draft.TRANSCODE ";break;
				case 1: OrderStr=" bill.SCODE ";break;
				case 2: OrderStr=" bill.NDRAFTTYPEID ";break;
				case 3: OrderStr=" draft.BILLSOUREID ";break;
				case 4: OrderStr=" bill.MAMOUNT ";break;
				case 5: OrderStr=" draft.CURRENTHOLDER ";break;
				case 6: OrderStr=" bill.DTCREATE ";break;
				case 7: OrderStr=" bill.DTEND ";break;
				default : OrderStr=" draft.TRANSCODE ";break;
			}
			//排序方向
			if(multiBillQueryCondition.getDesc()==Constant.PageControl.CODE_ASCORDESC_ASC)
				OrderStr+=" ASC";
			else
				OrderStr+=" DESC";
			
	    	sql+=" order by "+OrderStr;*/
	    	
	    	sql += " order by bill.id desc";
	    		
	    	//构造PreparedStatement
	    	System.out.println("sql:"+sql);
	    	this.prepareStatement(sql);
	    	int index=1;
	    	if(multiBillQueryCondition.getCreateStart()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateStart());
	    	if(multiBillQueryCondition.getCreateEnd()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateEnd());
	    	if(multiBillQueryCondition.getDtEndStart()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndStart());
	    	if(multiBillQueryCondition.getDtEndEnd()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndEnd());
	    	if(multiBillQueryCondition.getInDateStart()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInDateStart());
	    	if(multiBillQueryCondition.getInDateEnd()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInDateEnd());
	    	if(multiBillQueryCondition.getInputDateStart()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInputDateStart());
	    	if(multiBillQueryCondition.getInputDateEnd()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInputDateEnd());
	    	this.executeQuery();
	    	//获得实体
	    	Iterator ResultIt=getDataEntitiesFromResultSet(new TransDraftInInfo().getClass()).iterator();
	    	DraftStorageAssembleInfo draftStorageAssembleInfo=null;
	    	TransDraftInInfo transDraftInInfo=null;
	    	DiscountContractBillInfo discountContractBillInfo=null;
	    	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
	    	//遍历查找结果，由入库信息关联汇票信息组装draftStorageAssembleInfo
	    	while(ResultIt.hasNext())
	    	{
	    		draftStorageAssembleInfo=new DraftStorageAssembleInfo();
	    		transDraftInInfo=(TransDraftInInfo) ResultIt.next();
	    		discountContractBillInfo=(DiscountContractBillInfo) discountContractBillDao.findByID(transDraftInInfo.getBillID(),new DiscountContractBillInfo().getClass());
	    		draftStorageAssembleInfo.setTransDraftInInfo(transDraftInInfo);
	    		draftStorageAssembleInfo.setDiscountContractBillInfo(discountContractBillInfo);
	    		Results.add(draftStorageAssembleInfo);
	    	}
   	} catch (Exception e) {
   		e.printStackTrace();
   		throw new BillException("Sec_E100", e);
		}
   	finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				throw new BillException("Sec_E100", e1);
			}
		}
 	return Results;
   }  
   /**
    * 保存或者修改出库信息
    * @param transDraftOutInfo
    * @return
    * @throws ITreasuryDAOException
    */
  public long partSave(TransDraftOutInfo transDraftOutInfo) throws ITreasuryDAOException
  {
  	long returnId=-1;
  	TransDraftOutDao transDraftOutDao=new TransDraftOutDao();
  	//新增保存
  	if(transDraftOutInfo!=null&&transDraftOutInfo.getId()==-1)
  	{
  		returnId=transDraftOutDao.add(transDraftOutInfo);
  	}
  	//修改保存
  	else if(transDraftOutInfo!=null&&transDraftOutInfo.getId()!=-1)
  	{
  		transDraftOutDao.update(transDraftOutInfo);
  		returnId=transDraftOutInfo.getId();
  	}
  	return returnId;
  }
  /**
	  * 根据汇票号删除其出库信息
	  * @param billID
	  * @throws BillException
	  */
	public void deleteByBillID(long billID) throws BillException
	{
		try
		{
			initDAO();
			String SQLstr = "update "+ strTableName + " set statusID = ? where billID = ?" ;
			log.print(SQLstr);
			transPS = transConn.prepareStatement(SQLstr);
			transPS.setLong(1,Constant.RecordStatus.INVALID);
			transPS.setLong(2,billID);
			transPS.executeUpdate();
		} catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				this.finalizeDAO();
			} catch (ITreasuryDAOException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
	}
	/**
  	 * 根据票据号查询出库信息
  	 * @param lBillID
  	 * @return
  	 * @throws BillException
  	 */

  	public Collection findByBillID(long lBillID) throws BillException
	{
  		ArrayList list = new ArrayList();
  		Collection c = null;
  		DraftStorageAssembleInfo info = null;
  		TransDraftInInfo inInfo = null;
  		TransDraftOutInfo outInfo = new TransDraftOutInfo();
  		DiscountContractBillInfo billInfo = null;
  		TransDraftInDAO inDao = new TransDraftInDAO();
  		DiscountContractBillDao billDao = new DiscountContractBillDao();
  		
		try
		{
			billInfo = (DiscountContractBillInfo)billDao.findByID(lBillID,DiscountContractBillInfo.class);
		} catch (ITreasuryDAOException e1)
		{
			// TODO Auto-generated catch block
			e1.printStackTrace();
			throw new BillException("Bill_E012",e1);
		}
		
		outInfo.setBillID(lBillID);
		
		//-------------------判断汇票出库是否关联审批流---------------------------------
		boolean isNeedApproval = false;
		//初始化查询类和参数类
		InutApprovalRelationBiz iaBiz = new InutApprovalRelationBiz();	
		InutApprovalRelationInfo qInfo = new InutApprovalRelationInfo();
		//构造参数类
		qInfo.setModuleID(Constant.ModuleType.BILL);
		qInfo.setOfficeID(billInfo.getNOfficeID());
		qInfo.setCurrencyID(billInfo.getNCurrencyID());
		qInfo.setTransTypeID(BILLConstant.TraceModule.DRAFT);
		qInfo.setActionID(BILLConstant.DraftOperationType.DraftOut);
		//根据条件查询给业务是否有审批流
		long lApprovalID = -1;
		try {
			lApprovalID= iaBiz.findApprovalID(qInfo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("查找审批关联失败");
			throw new BillException("查找审批关联失败",e);
		}
		
		if(lApprovalID>0)
		{
			isNeedApproval = true;		//有审批流返回true
		}
		else
		{
			isNeedApproval = false;	//没有审批流返回false
		}
		//-------------------------------------------------------------------------
		//如果关联审批流
		if(isNeedApproval){
			outInfo.setStatusID(BILLConstant.TransctionStatus.APPROVALED);
		}else{
			outInfo.setStatusID(Constant.RecordStatus.VALID);
		}
  		try
		{
			c =	findByCondition(outInfo," order by id desc");
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		if (c!=null && c.size() > 0)
		{
			Iterator it = c.iterator();
			while (it.hasNext())
			{
				inInfo = new TransDraftInInfo();
				outInfo = (TransDraftOutInfo)it.next();
				try
				{
					inInfo = (TransDraftInInfo)inDao.findByID(outInfo.getTransDraftInID(),TransDraftInInfo.class);
				} catch (ITreasuryDAOException e2)
				{
					// TODO Auto-generated catch block
					e2.printStackTrace();
					throw new BillException("Bill_E012",e2);
				}
				info = new DraftStorageAssembleInfo();
				info.setTransDraftOutInfo(outInfo);
				info.setDiscountContractBillInfo(billInfo);
				info.setTransDraftInInfo(inInfo);
				list.add(info);
			}
		}
		return list;
	}
	/**
  	 * 根据票据号查询最后出库信息
  	 * @param lBillID
  	 * @return
  	 * @throws BillException
  	 */

  	public DraftStorageAssembleInfo findLastCheckedByBillID(long lBillID) throws BillException
	{
  		Collection c = null;
  		DraftStorageAssembleInfo info = null;
  		TransDraftInInfo inInfo = null;
  		TransDraftOutInfo outInfo = new TransDraftOutInfo();
  		DiscountContractBillInfo billInfo = null;
  		TransDraftInDAO inDao = new TransDraftInDAO();
  		DiscountContractBillDao billDao = new DiscountContractBillDao();
  		
		try
		{
			billInfo = (DiscountContractBillInfo)billDao.findByID(lBillID,DiscountContractBillInfo.class);
		} catch (ITreasuryDAOException e1)
		{
			// TODO Auto-generated catch block
			e1.printStackTrace();
			throw new BillException("Bill_E012",e1);
		}
		
		outInfo.setBillID(lBillID);
		outInfo.setStatusID(BILLConstant.TransctionStatus.CHECK);
  		try
		{
			c =	findByCondition(outInfo," order by id desc");
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		if (c!=null && c.size() > 0)
		{
			Iterator it = c.iterator();
			if (it.hasNext())
			{
				inInfo = new TransDraftInInfo();
				outInfo = (TransDraftOutInfo)it.next();
				try
				{
					inInfo = (TransDraftInInfo)inDao.findByID(outInfo.getTransDraftInID(),TransDraftInInfo.class);
				} catch (ITreasuryDAOException e2)
				{
					// TODO Auto-generated catch block
					e2.printStackTrace();
					throw new BillException("Bill_E012",e2);
				}
				info = new DraftStorageAssembleInfo();
				info.setTransDraftOutInfo(outInfo);
				info.setDiscountContractBillInfo(billInfo);
				info.setTransDraftInInfo(inInfo);
			}
		}
		return info;
	}
  	/**
     * 根据汇票出交易id查找有效的出库交易信息
     * @param id
     * @return
   * @throws BillException
   * @throws 
     */
    public DraftStorageAssembleInfo findDraftOutByID(long lID) throws BillException
    {
    	//集合类
    	DraftStorageAssembleInfo draftStorageAssembleInfo=new DraftStorageAssembleInfo();
    	
    	//查找构造出库信息实体
		TransDraftOutInfo transDraftOutInfo=new TransDraftOutInfo();
		TransDraftOutDao transDraftOutDao=new TransDraftOutDao();
		
		try {
			transDraftOutInfo = (TransDraftOutInfo)transDraftOutDao.findByID(lID,TransDraftOutInfo.class);
		} catch (ITreasuryDAOException e1) {
			e1.printStackTrace();
			throw new BillException("Bill_E012", e1);
		}
    	
//		查找构造入库信息实体
		TransDraftInInfo transDraftInInfo=new TransDraftInInfo();
		TransDraftInDAO transDraftInDAO=new TransDraftInDAO();
		try {
			transDraftInInfo=(TransDraftInInfo)transDraftInDAO.findByID(transDraftOutInfo.getTransDraftInID(),new TransDraftInInfo().getClass());
		} catch (ITreasuryDAOException e1) {
			e1.printStackTrace();
			throw new BillException(e1.getMessage(), e1);
		}
    	
    	//查找构造票据信息类实体
    	DiscountContractBillInfo discountContractBillInfo=new DiscountContractBillInfo();
    	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
    	try {
			discountContractBillInfo=(DiscountContractBillInfo) discountContractBillDao.findByID(transDraftOutInfo.getBillID(),new DiscountContractBillInfo().getClass());
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw new BillException(e.getMessage(), e);
		}

		//组装返回集合类
		draftStorageAssembleInfo.setDiscountContractBillInfo(discountContractBillInfo);
		draftStorageAssembleInfo.setTransDraftInInfo(transDraftInInfo);
		draftStorageAssembleInfo.setTransDraftOutInfo(transDraftOutInfo);
    	return draftStorageAssembleInfo;
    }
    public static void main(String[] args) throws BillException
	{
    	TransDraftOutDao dao = new TransDraftOutDao();
    	Collection c = dao.findByBillID(6);
    	
	}
    public long updateDraftOutStatusByID(long lId,long statusId)throws IException{
		PreparedStatement ps = null;
		Connection conn = null;
		String strSQL = null;
		long lResult = -1;

		try {
			conn = Database.getConnection();
			strSQL = " update Bill_TransDraftOut  set STATUSID = ? where ID = ? ";

			ps = conn.prepareStatement(strSQL);
			ps.setLong(1, statusId);
			ps.setLong(2, lId);

			lResult = ps.executeUpdate();

			ps.close();
			ps = null;
			conn.close();
			conn = null;

			if (lResult < 0) {
				Log.print(" update loan updateBill_TransDraftOutStatus error : "
						+ lResult);
				return -1;
			} else {
				return lId;
			}
		} catch (Exception e) {
			log.error(e.toString());
			throw new IException("Gen_E001");
		} finally {
			try {
				if (ps != null) {
					ps.close();
					ps = null;
				}
				if (conn != null) {
					conn.close();
					conn = null;
				}
			} catch (Exception ex) {
				log.error(ex.toString());
				throw new IException("Gen_E001");
			}
		}
	}
    
    public double findLoanBillCountAmount(String field, String table, String where) throws Exception{
		double nResult = 0L;
		Connection conn = null;
        PreparedStatement psCount = null;
        String strSQL = "";
        ResultSet rsCount = null;
        try
        {
            conn = Database.getConnection();
            strSQL = "select sum("+field+") from " + table + "where " + where;
            Statement st = conn.createStatement();
            rsCount = st.executeQuery(strSQL);
            if(rsCount.next())
            	nResult = rsCount.getDouble(1);
            if(rsCount != null)
                rsCount.close();
            if(psCount != null)
                psCount.close();
        }
        catch(Exception e)
        {
            throw new Exception("errors.com.iss.itreasury.bill.draft.dao.TransDraftOutDao.findLoanBillCountAmount.failed");
        }
        finally
        {
        	if(rsCount != null)
                rsCount.close();
            if(psCount != null)
                psCount.close();
            ConnectionFactory.releaseConnection(conn);
        }
        return nResult;
	}
    
}

