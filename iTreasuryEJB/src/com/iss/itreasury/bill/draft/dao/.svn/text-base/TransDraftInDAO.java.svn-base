/* Generated by Together */

package com.iss.itreasury.bill.draft.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;

import com.iss.itreasury.bill.draft.dataentity.DiscountContractBillInfo;
import com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition;
import com.iss.itreasury.bill.draft.dataentity.TransDraftInInfo;
import com.iss.itreasury.bill.draft.dataentity.TransDraftOutInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftStorageAssembleInfo;
import com.iss.itreasury.bill.util.BILLConstant;
import com.iss.itreasury.bill.util.BillDAO;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;
public class TransDraftInDAO extends BillDAO {
      public TransDraftInDAO() {
        super("Bill_TransDraftIn");
        super.setUseMaxID();
      }
      
      /**
       * 根据汇票入库交易id查找有效的入库交易信息：操作table：Bill_TransDraftIn 
       * @param id
       * @return
     * @throws BillException
     * @throws 
       */
      public DraftStorageAssembleInfo findDraftInByID(long DraftInID) throws BillException
      {
      	//集合类
      	DraftStorageAssembleInfo draftStorageAssembleInfo=new DraftStorageAssembleInfo();
      	//查找构造入库信息实体
		TransDraftInInfo transDraftInInfo=new TransDraftInInfo();
		TransDraftInDAO transDraftInDAO=new TransDraftInDAO();
		try {
			transDraftInInfo=(TransDraftInInfo)transDraftInDAO.findByID(DraftInID,new TransDraftInInfo().getClass());
		} catch (ITreasuryDAOException e1) {
			e1.printStackTrace();
			throw new BillException(e1.getMessage(), e1);
		}
      	//查找构造票据信息类实体
      	DiscountContractBillInfo discountContractBillInfo=new DiscountContractBillInfo();
      	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
      	try {
			discountContractBillInfo=(DiscountContractBillInfo) discountContractBillDao.findByID(transDraftInInfo.getBillID(),new DiscountContractBillInfo().getClass());
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw new BillException(e.getMessage(), e);
		}
		//判断票据是否已被出库
//		if(discountContractBillInfo.getNStorageStatusID()==BILLConstant.DraftInOrOut.OUT)
//		{
//			throw new BillException("Bill_E037",null);
//		}
		//组装返回集合类
		draftStorageAssembleInfo.setDiscountContractBillInfo(discountContractBillInfo);
		draftStorageAssembleInfo.setTransDraftInInfo(transDraftInInfo);
      	return draftStorageAssembleInfo;
      }
      /**
       * 根据汇票入库交易合查找有效的入库交易信息：操作table：Bill_TransDraftIn 
       * @param id
       * @return
     * @throws BillException
     * @throws 
       */
      public DraftStorageAssembleInfo findDraftInByContractCode(String contractCode) throws BillException
      {
      	//集合类
      	DraftStorageAssembleInfo draftStorageAssembleInfo=new DraftStorageAssembleInfo();
      	//查找构造入库信息实体
		TransDraftInInfo transDraftInInfo=new TransDraftInInfo();
		TransDraftInDAO transDraftInDAO=new TransDraftInDAO();
	
		
		//transDraftInInfo=(TransDraftInInfo)transDraftInDAO.findByID(DraftInID,new TransDraftInInfo().getClass());
		StringBuffer sbSQL = new StringBuffer();
		sbSQL.append(" select * ");
		sbSQL.append(" from BILL_TRANSDRAFTIN");
		sbSQL.append(" where InContractCode='"+contractCode+"'");
		try {
			initDAO();
			prepareStatement(sbSQL.toString());
			executeQuery();
			while (transRS.next()) {
				transDraftInInfo.setId(transRS.getLong("ID"));
				transDraftInInfo.setOfficeID(transRS.getLong("OFFICEID"));
				transDraftInInfo.setCurrencyID(transRS.getLong("CURRENCYID"));
				transDraftInInfo.setTransCode(transRS.getString("TRANSCODE"));
				transDraftInInfo.setTransTypeID(transRS.getLong("TRANSTYPEID"));
				transDraftInInfo.setBillSoureID(transRS.getLong("BILLSOUREID"));
				transDraftInInfo.setBillID(transRS.getLong("BILLID"));
				transDraftInInfo.setInDate(transRS.getTimestamp("INDATE"));
				transDraftInInfo.setCurrentHolder(transRS.getString("CURRENTHOLDER"));
				transDraftInInfo.setFFormerOwner(transRS.getString("FFORMEROWNER"));
				transDraftInInfo.setFormerOwner(transRS.getString("FORMEROWNER"));
				
				transDraftInInfo.setInContractCode(transRS.getString("INCONTRACTCODE"));
				transDraftInInfo.setInPayFormCode(transRS.getString("INPAYFORMCODE"));
				transDraftInInfo.setInOnWayDays(transRS.getLong("INONWAYDAYS"));
				transDraftInInfo.setInRate(transRS.getDouble("INRATE"));
				transDraftInInfo.setInInterest(transRS.getDouble("ININTEREST"));
				transDraftInInfo.setAbstract(transRS.getString("ABSTRACT"));
				transDraftInInfo.setInputUserID(transRS.getLong("INPUTUSERID"));
				transDraftInInfo.setInputDate(transRS.getTimestamp("INPUTDATE"));
				transDraftInInfo.setModifyUserID(transRS.getLong("MODIFYUSERID"));
				transDraftInInfo.setModifyDate(transRS.getTimestamp("MODIFYDATE"));
				transDraftInInfo.setStatusID(transRS.getLong("STATUSID"));
				
			}
			
//			查找构造票据信息类实体
	      	DiscountContractBillInfo discountContractBillInfo=new DiscountContractBillInfo();
	      	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
	      	discountContractBillInfo=(DiscountContractBillInfo) discountContractBillDao.findByID(transDraftInInfo.getBillID(),new DiscountContractBillInfo().getClass());
//	      组装返回集合类
	      	draftStorageAssembleInfo.setDiscountContractBillInfo(discountContractBillInfo);
			draftStorageAssembleInfo.setTransDraftInInfo(transDraftInInfo);
		} catch (ITreasuryDAOException e1) {
			e1.printStackTrace();
			throw new BillException(e1.getMessage(), e1);
		}catch(Exception e){
			e.printStackTrace();
			throw new BillException(e.getMessage(), e);
		}finally{
			
			try {
				finalizeDAO();
			} catch (ITreasuryDAOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		//判断票据是否已被出库
//		if(discountContractBillInfo.getNStorageStatusID()==BILLConstant.DraftInOrOut.OUT)
//		{
//			throw new BillException("Bill_E037",null);
//		}
      	return draftStorageAssembleInfo;
      }
      
      /**
       * 查询所有曾经入库过的纪录
       * @param multiBillQueryCondition
       * @return
     * @throws SQLException
     * @throws ClassNotFoundException
       */
      public Vector queryDraftInByCondition(MultiBillQueryCondition multiBillQueryCondition)throws BillException 
	  {
      	Vector Results=new Vector();
//      构造SQL	
      	try {
      		initDAO();			
	    	String sql="select draft.* from BILL_TRANSDRAFTIN draft,LOAN_DISCOUNTCONTRACTBILL bill \n" +
	    			" where draft.BILLID=bill.ID"+"\n"+
	    			//"and draft.INPUTUSERID="+multiBillQueryCondition.getNInputUserID()+" \n" +
	    			//" and bill.NSTORAGESTATUSID="+BILLConstant.DraftInOrOut.IN+" \n" +
	    			" and bill.NSTATUSID="+Constant.RecordStatus.VALID+" and draft.STATUSID="+Constant.RecordStatus.VALID+" \n";
	    	if(multiBillQueryCondition.getNDraftTypeID()!=-1)
	    		sql+=" and bill.NDRAFTTYPEID = "+multiBillQueryCondition.getNDraftTypeID()+" \n";
	    	if(multiBillQueryCondition.getlBillSoureID()!=-1)
	    		sql+=" and draft.BILLSOUREID = "+multiBillQueryCondition.getlBillSoureID()+" \n";
	    	if(multiBillQueryCondition.getSCodeStart()!=null&&multiBillQueryCondition.getSCodeStart().length()>0)
	    		sql+=" and bill.SCODE >= '"+multiBillQueryCondition.getSCodeStart()+"' \n";
	    	if(multiBillQueryCondition.getSCodeEnd()!=null&&multiBillQueryCondition.getSCodeEnd().length()>0)
	    		sql+=" and bill.SCODE <= '"+multiBillQueryCondition.getSCodeEnd()+"' \n";
	    	if(multiBillQueryCondition.getCreateStart()!=null)
	    		sql+=" and bill.DTCREATE >= ? \n";
	    	if(multiBillQueryCondition.getCreateEnd()!=null)
	    		sql+=" and bill.DTCREATE <= ? \n";
	    	if(multiBillQueryCondition.getDtEndStart()!=null)
	    		sql+=" and bill.DTEND >= ? \n";
	    	if(multiBillQueryCondition.getDtEndEnd()!=null)
	    		sql+=" and bill.DTEND <= ? \n";
	    	if(multiBillQueryCondition.getInDateStart()!=null)
	    		sql+=" and draft.INDATE >= ? \n";
	    	if(multiBillQueryCondition.getInDateEnd()!=null)
	    		sql+=" and draft.INDATE <= ? \n";
	    	if(multiBillQueryCondition.getInputDateStart()!=null)
	    		sql+=" and bill.DTINPUTDATE >= ? \n";
	    	if(multiBillQueryCondition.getInputDateEnd()!=null)
	    		sql+=" and bill.DTINPUTDATE <= ? \n";
	    	if(multiBillQueryCondition.getStrAcceptorName()!=null&&multiBillQueryCondition.getStrAcceptorName().length()>0)
	    		sql+=" and bill.STRACCEPTORNAME = '"+multiBillQueryCondition.getStrAcceptorName()+"' \n";
	    	if(multiBillQueryCondition.getStrCurrentHolder()!=null&&multiBillQueryCondition.getStrCurrentHolder().length()>0)
	    		sql+=" and draft.CURRENTHOLDER = '"+multiBillQueryCondition.getStrCurrentHolder()+"' \n";
	    	
	    	//获得排序参数
	    	String OrderStr="";
			switch((int) multiBillQueryCondition.getOrderParam())
			{
				case 0: OrderStr=" draft.TRANSCODE ";break;
				case 1: OrderStr=" bill.SCODE ";break;
				case 2: OrderStr=" bill.NDRAFTTYPEID ";break;
				case 3: OrderStr=" draft.BILLSOUREID ";break;
				case 4: OrderStr=" bill.MAMOUNT ";break;
				case 5: OrderStr=" draft.CURRENTHOLDER ";break;
				case 6: OrderStr=" bill.DTCREATE ";break;
				case 7: OrderStr=" bill.DTEND ";break;
				default : OrderStr=" draft.TRANSCODE ";break;
			}
			//排序方向
			if(multiBillQueryCondition.getDesc()==Constant.PageControl.CODE_ASCORDESC_ASC)
				OrderStr+=" ASC";
			else
				OrderStr+=" DESC";
			
	    	sql+=" order by "+OrderStr;
	    		
	    	//构造PreparedStatement
	    	System.out.println("sql:"+sql);
	    	this.prepareStatement(sql);
	    	int index=1;
	    	if(multiBillQueryCondition.getCreateStart()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateStart());
	    	if(multiBillQueryCondition.getCreateEnd()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getCreateEnd());
	    	if(multiBillQueryCondition.getDtEndStart()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndStart());
	    	if(multiBillQueryCondition.getDtEndEnd()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getDtEndEnd());
	    	if(multiBillQueryCondition.getInDateStart()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInDateStart());
	    	if(multiBillQueryCondition.getInDateEnd()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInDateEnd());
	    	if(multiBillQueryCondition.getInputDateStart()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInputDateStart());
	    	if(multiBillQueryCondition.getInputDateEnd()!=null)
	    		this.transPS.setTimestamp(index++,multiBillQueryCondition.getInputDateEnd());
	    	this.executeQuery();
	    	//获得实体
	    	Iterator ResultIt=getDataEntitiesFromResultSet(new TransDraftInInfo().getClass()).iterator();
	    	DraftStorageAssembleInfo draftStorageAssembleInfo=null;
	    	TransDraftInInfo transDraftInInfo=null;
	    	DiscountContractBillInfo discountContractBillInfo=null;
	    	DiscountContractBillDao discountContractBillDao=new DiscountContractBillDao();
	    	//遍历查找结果，由入库信息关联汇票信息组装draftStorageAssembleInfo
	    	while(ResultIt.hasNext())
	    	{
	    		draftStorageAssembleInfo=new DraftStorageAssembleInfo();
	    		transDraftInInfo=(TransDraftInInfo) ResultIt.next();
	    		discountContractBillInfo=(DiscountContractBillInfo) discountContractBillDao.findByID(transDraftInInfo.getBillID(),new DiscountContractBillInfo().getClass());
	    		draftStorageAssembleInfo.setTransDraftInInfo(transDraftInInfo);
	    		draftStorageAssembleInfo.setDiscountContractBillInfo(discountContractBillInfo);
	    		Results.add(draftStorageAssembleInfo);
	    	}
      	} catch (Exception e) {
      		e.printStackTrace();
      		throw new BillException("Sec_E100", e);
		}
      	finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				throw new BillException("Sec_E100", e1);
			}
		}
    	return Results;
      }  
      /**
 	  * 根据汇票号删除其入库信息
 	  * @param billID
 	  * @throws BillException
 	  */
  	public void deleteByBillID(long billID) throws BillException
 	{
  		try
 		{
 			initDAO();
 			String SQLstr = "update "+ strTableName + " set statusID = ? where billID = ?" ;
 			log.print(SQLstr);
 			transPS = transConn.prepareStatement(SQLstr);
 			transPS.setLong(1,Constant.RecordStatus.INVALID);
 			transPS.setLong(2,billID);
 			transPS.executeUpdate();
 		} catch (Exception e)
 		{
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 			throw new BillException("Bill_E012",e);
 		}
 		finally
 		{
 			try
 			{
 				this.finalizeDAO();
 			} catch (ITreasuryDAOException e1)
 			{
 				// TODO Auto-generated catch block
 				e1.printStackTrace();
 			}
 		}
 	}
  	
  	/**
  	 * 根据票据号查询入库信息
  	 * @param lBillID
  	 * @return
  	 * @throws BillException
  	 */
  	public Collection findByBillID(long lBillID) throws BillException
	{
  		ArrayList list = new ArrayList();
  		Collection c = null;
  		DraftStorageAssembleInfo info = null;
  		TransDraftInInfo inInfo = new TransDraftInInfo();
  		DiscountContractBillInfo billInfo = null;
  		DiscountContractBillDao billDao = new DiscountContractBillDao();
  		
		try
		{
			billInfo = (DiscountContractBillInfo)billDao.findByID(lBillID,DiscountContractBillInfo.class);
		} catch (ITreasuryDAOException e1)
		{
			// TODO Auto-generated catch block
			e1.printStackTrace();
			throw new BillException("Bill_E012",e1);
		}
		
		inInfo.setBillID(lBillID);
  		inInfo.setStatusID(Constant.RecordStatus.VALID);
  		try
		{
			c =	findByCondition(inInfo);
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		if (c!=null && c.size() > 0)
		{
			Iterator it = c.iterator();
			while (it.hasNext())
			{
				inInfo = (TransDraftInInfo)it.next();
				info = new DraftStorageAssembleInfo();
				info.setTransDraftInInfo(inInfo);
				info.setDiscountContractBillInfo(billInfo);
				list.add(info);
			}
		}
		return list;
	}
  	/**
  	 * 根据票据号查询最后入库信息
  	 * @param lBillID
  	 * @return
  	 * @throws BillException
  	 */
  	public DraftStorageAssembleInfo findLastDraftInByBillID(long lBillID)  throws BillException
	{
  		Collection c = null;
  		DraftStorageAssembleInfo info = null;
  		TransDraftInInfo inInfo = new TransDraftInInfo();
  		DiscountContractBillInfo billInfo = null;
  		DiscountContractBillDao billDao = new DiscountContractBillDao();
  		
		try
		{
			billInfo = (DiscountContractBillInfo)billDao.findByID(lBillID,DiscountContractBillInfo.class);
		} catch (ITreasuryDAOException e1)
		{
			// TODO Auto-generated catch block
			e1.printStackTrace();
			throw new BillException("Bill_E012",e1);
		}
		
		inInfo.setBillID(lBillID);
  		inInfo.setStatusID(Constant.RecordStatus.VALID);
  		try
		{
			c =	findByCondition(inInfo," Order By ID desc ");
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		if (c!=null && c.size() > 0)
		{
			Iterator it = c.iterator();
			if (it.hasNext())
			{
				inInfo = (TransDraftInInfo)it.next();
				info = new DraftStorageAssembleInfo();
				info.setTransDraftInInfo(inInfo);
				info.setDiscountContractBillInfo(billInfo);
				
			}
		}
		return info;
	}
}






