/* Generated by Together */

package com.iss.itreasury.bill.draft.dao;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Iterator;

import com.iss.itreasury.bill.draft.dataentity.DiscountContractBillInfo;
import com.iss.itreasury.bill.util.BillDAO;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.settlement.util.UtilOperation;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Log4j;


public class DiscountContractBillDao extends BillDAO {
  public DiscountContractBillDao() {
        super("Loan_DiscountContractBill");
        super.setUseMaxID();
    }
  private Log4j logger = new Log4j(Constant.ModuleType.BILL, this);
  /**
   * 根据票据号码查找票据信息
   * @param sCode
   * @return
   * @throws ITreasuryDAOException
   * @throws ClassNotFoundException
   */
  public DiscountContractBillInfo findBySCode(String sCode) throws ITreasuryDAOException, ClassNotFoundException
  {
  	DiscountContractBillInfo ResultInfo=null;
  	DiscountContractBillInfo discountContractBillInfo=new DiscountContractBillInfo();
  	discountContractBillInfo.setSCode(sCode);
  	Collection collect=this.findByCondition(discountContractBillInfo);
  	Iterator it=collect.iterator();
  	while(it.hasNext())
  	{
  		ResultInfo=(DiscountContractBillInfo) it.next();
  	}
  	return ResultInfo;
  }
  
  public void updateDiscountContractBill(DiscountContractBillInfo info) throws BillException{
		try
 		{
 			initDAO();
 			String sqlStr = "update Loan_DiscountContractBill set nstoragestatusid=?, nstoragetransid =? where id=?";
 			log.print(sqlStr);
 			transPS = transConn.prepareStatement(sqlStr);
 			transPS.setLong(1,info.getNStorageStatusID());
 			transPS.setLong(2,info.getNStorageTransID());
 			transPS.setLong(3,info.getId());
 			transPS.executeUpdate();
 		} 
		catch (Exception e){
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 			throw new BillException("Bill_E012",e);
 		}
 		finally
 		{
 			try
 			{
 				this.finalizeDAO();
 			} catch (ITreasuryDAOException e1)
 			{
 				// TODO Auto-generated catch block
 				e1.printStackTrace();
 			}
 		}
  }
  
  /**
	 * 判断是否被修改过
	 * @param info 
	 * @return 已经修改过 true；未被修改过 false
	 * @exception
	 */
	public boolean isTouch(DiscountContractBillInfo info) throws BillException
	  {
		
		logger.debug(UtilOperation.dataentityToString(info));
		log.print("==============================检查此条信息是否被修改过！");
	      boolean bReturn = false;
	      Timestamp ts  = Timestamp.valueOf("1700-1-1 00:00:00.0");
	      try
	      {
	      	DiscountContractBillInfo tmpInfo = (DiscountContractBillInfo)findByID(info.getId(),(new DiscountContractBillInfo()).getClass());
	      	if ( tmpInfo == null || (tmpInfo != null && tmpInfo.getNStatusID()==Constant.RecordStatus.INVALID)) 
	      	{
	      		throw new BillException("Bill_E033",null);
	      	}
	      	if (tmpInfo.getDtModifyDate() == null)//给予初始值，以免出现空指针
	      		tmpInfo.setDtModifyDate(ts);
	      	if (info.getDtModifyDate() == null)//给予初始值，以免出现空指针
	      		info.setDtModifyDate(ts);
	      	
	        if ( tmpInfo.getDtModifyDate().compareTo(info.getDtModifyDate()) != 0)
	        {
	        	log.print("数据库时间："+tmpInfo.getDtModifyDate());
	        	log.print("页面传入时间："+info.getDtModifyDate());
	        	 bReturn = true;
	        }
	      }
	      catch (BillException be)
	      {
	          be.printStackTrace();
	          throw be;
	      }
	      catch (Exception e)
	      {
	          e.printStackTrace();
	          throw new BillException("Bill_E012",null);
	      }
	      log.print("==============================检查完毕！");
	      return bReturn;
	  }
	public static void main(String[] args)throws BillException
	{
		DiscountContractBillInfo info = new DiscountContractBillInfo();
		info.setId(2);
		info.setDtModifyDate(Timestamp.valueOf("2005-03-17 18:59:49"));
		DiscountContractBillDao dao = new DiscountContractBillDao();
		System.out.println(dao.isTouch(info));
		
	}
}
