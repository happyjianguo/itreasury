/* Generated by Together */
package com.iss.itreasury.bill.util;
import java.util.Collection;
import java.util.Iterator;

import javax.servlet.jsp.JspWriter;

import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Log;
public class BILLConstant extends com.iss.itreasury.util.Constant
{
	public static class BillAbstractType
	{
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) CHEQUE :
					strReturn = "空白支票";
					break;
				case (int) CONSIGNPAYVOUCHER :
					strReturn = "委托付款凭证";
					break;
				case (int) REMITVOUCHER :
					strReturn = "汇款凭证";
					break;
				case (int) SEALCARD :
					strReturn = "印签卡";
					break;
				case (int) OPENCONFIRM :
					strReturn = "开户证实书";
					break;
				case (int) DRAFT :
					strReturn = "汇票";
					break;
				case (int) CREDITCARD :
					strReturn = "信用证";
					break;
				case (int) TRNASFERVOUCHER :
					strReturn = "转帐凭证";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { CHEQUE, CONSIGNPAYVOUCHER, REMITVOUCHER, SEALCARD, OPENCONFIRM, DRAFT, CREDITCARD, TRNASFERVOUCHER };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BillAbstractType",officeID,currencyID);
        }    
		public static final void showList(JspWriter out, String strControlName, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode();
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
		public static final long CHEQUE = 1; //空白支票
		public static final long CONSIGNPAYVOUCHER = 2; //委托付款凭证
		public static final long REMITVOUCHER = 3; //汇款凭证
		public static final long SEALCARD = 4; //印签卡
		public static final long OPENCONFIRM = 5; //开户证实书
		public static final long DRAFT = 6; //汇票
		public static final long CREDITCARD = 7; //信用证
		public static final long TRNASFERVOUCHER = 8; //转帐凭证
	}	
	public static class BillType
	{
		public static final String getName(long lCode)
		{
			return BillNameRef.getTypeNameByID(lCode);
		}
		public static final long[] getAllCode(long BillAbstractType)
		{
			String strSQL = "select id from Bill_BillType where statusId=1 ";
			if(BillAbstractType > 0)
			{
				if(BillAbstractType == BILLConstant.BillAbstractType.DRAFT)
				{
					strSQL += " and abstractTypeID = " + BillAbstractType;
				}
				else
				{
					strSQL += " and abstractTypeID != " + BILLConstant.BillAbstractType.DRAFT;
				}
			}
			
			Log.print("NameRef SQL:"+strSQL);
			try 
			{				
				Collection c = BILLHTML.getCommonSelectList(strSQL, "id");
				
				long[] lTemp  = new long[c.size()];
				int i =0;
				if (c != null)
				{
					Iterator ite = c.iterator();
				        
					while (ite.hasNext())
					{
						lTemp[i++] = Long.valueOf(ite.next().toString()).longValue();
					}
				}
				return lTemp;
			} 
			catch (Exception e) 
			{
			}
			return null;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BillType",officeID,currencyID);
        }    
		public static final void showList(JspWriter out, String strControlName, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode(-1);
				//修正lArrayID == null时页面报javascrip错.
				if(lArrayID == null)
					lArrayID = new long[0];
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
		public static final void showList(JspWriter out, String strControlName,long lType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode(lType);
				if(lArrayID == null)			
					lArrayID = new long[0];
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
	}
	/**
	 * 出入库汇票类型
	 * @author ygniu
	 *
	 * TODO To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Style - Code Templates
	 */
	public static class DraftBillType
	{
		public static final String getName(long lCode)
		{
			return BillNameRef.getTypeNameByID(lCode);
		}
		public static final long[] getAllCode()
		{
			String strSQL = "select id from Bill_BillType where statusId=1 and ABSTRACTTYPEID = "+BillAbstractType.DRAFT;
			Log.print("NameRef SQL:"+strSQL);
			try 
			{				
				Collection c = BILLHTML.getCommonSelectList(strSQL, "id");
				
				long[] lTemp  = new long[c.size()];
				int i =0;
				if (c != null)
				{
					Iterator ite = c.iterator();
				        
					while (ite.hasNext())
					{
						lTemp[i++] = Long.valueOf(ite.next().toString()).longValue();
					}
				}
				return lTemp;
			} 
			catch (Exception e) 
			{
			}
			return null;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$DraftBillType",officeID,currencyID);
        }    
		public static final void showList(JspWriter out, String strControlName, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode();
				if(lArrayID == null)
					lArrayID = new long[0];
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
	}

	/**
	 * 空白凭证交易类型
	 * @author zntan
	 *
	 * To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Generation - Code and Comments
	 */
	public static class BlankTransctionType
	{
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) REGISTER :
					strReturn = "注册";
					break;
				case (int) USE :
					strReturn = "领用";
					break;
				case (int) WRITEOFF :
					strReturn = "注销";
					break;
				case (int) EXCHANGE :
					strReturn = "换发";
					break;
				case (int) RETURN :
					strReturn = "支票退票";
					break;
				case (int) OUTBILL :
					strReturn = "票据出库";
					break;
				case (int) INBILL :
					strReturn = "票据入库";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { REGISTER, USE, WRITEOFF, EXCHANGE, RETURN, OUTBILL, INBILL };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BlankTransctionType",officeID,currencyID);
        }   
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				if(nType == 1)
				{
					lArrayID = new long[1];
					lArrayID[0] = OUTBILL;
				}
				else{
					lArrayID = getAllCode();
				}
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
		public static final long REGISTER = 201; //注册
		public static final long USE = 202; //领用
		public static final long WRITEOFF = 203; //注销
		public static final long EXCHANGE = 204; //换发
		public static final long RETURN = 205; //支票退票
		public static final long OUTBILL = 206; //票据出库
		public static final long INBILL = 207; //票据入库
	}
	/**
	 * 空白凭证交易类型
	 * @author zntan
	 *
	 * To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Generation - Code and Comments
	 */
	public static class TransctionType
	{
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) REGISTER :
					strReturn = "注册";
					break;
				case (int) USE :
					strReturn = "领用";
					break;
				case (int) WRITEOFF :
					strReturn = "注销";
					break;
				case (int) EXCHANGE :
					strReturn = "换发";
					break;
				case (int) RETURN :
					strReturn = "支票退票";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { REGISTER, USE, WRITEOFF, EXCHANGE, RETURN };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BlankTransctionType",officeID,currencyID);
        }   
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				if(nType == 1)
				{
					lArrayID = new long[1];
					lArrayID[0] = WRITEOFF;
				}
				else{
					lArrayID = getAllCode();
				}
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
		public static final long REGISTER = 201; //注册
		public static final long USE = 202; //领用
		public static final long WRITEOFF = 203; //注销
		public static final long EXCHANGE = 204; //换发
		public static final long RETURN = 205; //支票退票
	}
	
	/**
	 * 空白凭证状态
	 * @author zntan
	 *
	 * To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Generation - Code and Comments
	 */
	public static class BlankTransctionStatus
	{
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) SUBMIT :
					strReturn = "未复核";
					break;
				case (int) CHECK :
					strReturn = "已复核";
					break;
				case (int) REFUSE :
					strReturn = "已拒绝";
					break;
				case (int) DELETE :
					strReturn = "已删除";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { SUBMIT, CHECK, REFUSE, DELETE };
			return lTemp;
		}
		 public static final long[] getAllCode(long officeID,long currencyID)
	        {
	        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BlankTransctionStatus",officeID,currencyID);
	        }    
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode();
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
		public static final long SUBMIT = 1; //未复核 
		public static final long CHECK = 2; //已复核
		public static final long REFUSE = 3; //已拒绝
		public static final long DELETE = 4; //已删除
	}
	/**
	 * 空白凭证交易类型
	 * @author zntan
	 *
	 * To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Generation - Code and Comments
	 */
	public static class CheckAction
	{
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) CHECK :
					strReturn = "复核";
					break;
				case (int) CANCELCHECK :
					strReturn = "取消复核";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { CHECK, CANCELCHECK };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$CheckAction",officeID,currencyID);
        }   
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
		}
		public static final long CHECK = 1; //复核
		public static final long CANCELCHECK = 2; //取消复核
	}
	public static class BlankBillStatus
	{
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) REGISTER :
					strReturn = "注册";
					break;
				case (int) RECEIVE :
					strReturn = "领用";
					break;
				case (int) USE :
					strReturn = "使用";
					break;
				case (int) LOSS :
					strReturn = "挂失";
					break;
				case (int) STOPPAY :
					strReturn = "止付";
					break;
				case (int) RETURN :
					strReturn = "退票";
					break;
				case (int) REGISTEROFF :
					strReturn = "注销";
					break;
				case (int) DELETE :
					strReturn = "删除";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { REGISTER, RECEIVE, USE, LOSS, STOPPAY, RETURN, REGISTEROFF, DELETE };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BlankBillStatus",officeID,currencyID);
        }   
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode();
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}		
		}
		public static final long REGISTER = 1; //注册
		public static final long RECEIVE = 2; //领用
		public static final long USE = 3; //使用
		public static final long LOSS = 4; //挂失
		public static final long STOPPAY = 5; //止付
		public static final long RETURN = 6; //退票
		public static final long REGISTEROFF = 10; //注销
		public static final long DELETE = 0; //删除
	}
	public static class TraceModule
	{
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) BLANKVOUCHER :
					strReturn = "空白凭证";
					break;
				case (int) DRAFT :
					strReturn = "汇票管理";
					break;
				case (int) VENTURE :
					strReturn = "风险管理";
					break;
		}
		return strReturn;
		}
		public static final long[] getAllCode()
		{
			return null;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$TraceModule",officeID,currencyID);
        }  
		public static final long BLANKVOUCHER = 1; //空白凭证
		public static final long DRAFT = 2; //汇票管理
		public static final long VENTURE = 3; //风险管理
	}
	public static class TraceAction
	{
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) REGISTER :
					strReturn = "注册";
					break;
				case (int) RECEIVE :
					strReturn = "领用";
					break;
				case (int) USE :
					strReturn = "使用";
					break;
				case (int) LOSS :
					strReturn = "挂失";
					break;
				case (int) UNLOSS :
					strReturn = "解挂";
					break;
				case (int) STOPPAY :
					strReturn = "止付";
					break;
				case (int) UNSTOPPAY :
					strReturn = "解冻";
					break;
				case (int) RETURN :
					strReturn = "退票";
					break;
				case (int) REGISTEROFF :
					strReturn = "注销";
					break;
				case (int) DELETE :
					strReturn = "删除";
					break;
				case (int) MODIFY :
					strReturn = "修改";
					break;
				case (int) EXCHANGE :
					strReturn = "换发";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { REGISTER, RECEIVE, USE, LOSS, UNLOSS, STOPPAY, UNSTOPPAY, RETURN, REGISTEROFF, DELETE, MODIFY, EXCHANGE };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$TraceAction",officeID,currencyID);
        } 
		public static final void showList(JspWriter out, String strControlName, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode();
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
		public static final long REGISTER = 1; //注册
		public static final long RECEIVE = 2; //领用
		public static final long USE = 3; //使用
		public static final long LOSS = 4; //挂失
		public static final long UNLOSS = 5; //解挂
		public static final long STOPPAY = 6; //止付
		public static final long UNSTOPPAY = 7; //解冻
		public static final long RETURN = 8; //退票
		public static final long REGISTEROFF = 9; //注销
		public static final long DELETE = 10; //删除
		public static final long MODIFY = 11; //修改
		public static final long EXCHANGE = 12;//换发
	}
	public static class DraftOperationType
	{
		public static final long DraftIn = 1; //汇票入库
		public static final long DraftOut = 2; //汇票出库
		public static final long DraftQuery = 3; //汇票查询
		public static final long DraftQueryReply = 4; //汇票查复
		public static final long DraftConsign = 5; //汇票托收
		public static final long DraftConsignReply = 6; //汇票托复
		public static final long DiscountDraftPro=7;//票据处理
		public static final String getOperateString(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) DraftIn ://汇票入库
					strReturn = "RK";
					break;
				case (int) DraftOut ://汇票出库
					strReturn = "CK";
					break;
				case (int) DraftQuery ://汇票查询
					strReturn = "CX";
					break;
				case (int) DraftQueryReply ://汇票查复
					strReturn = "CF";
					break;
				case (int) DraftConsign ://汇票托收
					strReturn = "TS";
					break;
				case (int) DraftConsignReply ://汇票托复
					strReturn = "TF";
					break;
				case (int) DiscountDraftPro ://转贴现票据处理
					strReturn = "CL";
					break;
			}
			return strReturn;
		}
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) DraftIn :
					strReturn = "汇票入库";
					break;
				case (int) DraftOut :
					strReturn = "汇票出库";
					break;
				case (int) DraftQuery :
					strReturn = "汇票查询";
					break;
				case (int) DraftQueryReply :
					strReturn = "汇票查复";
					break;
				case (int) DraftConsign :
					strReturn = "汇票托收";
					break;
				case (int) DraftConsignReply :
					strReturn = "汇票托复";
					break;
				case (int) DiscountDraftPro :
					strReturn = "票据处理";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { DraftIn,DraftOut,DraftQuery,DraftQueryReply,DraftConsign,DraftConsignReply,DiscountDraftPro};
			return lTemp;
		}
		public static final void showList(JspWriter out, String strControlName, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode();
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
		
	}
	/**
	 * 汇票入库出库状态常量 
	 */
	public static class DraftInOrOut
	{
		public static final long IN = 1; //入库
		public static final long OUT = 2; //出库
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) IN :
					strReturn = "入库";
					break;
				case (int) OUT :
					strReturn = "出库";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { IN, OUT };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$DraftInOrOut",officeID,currencyID);
        } 
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayId = null;
			String[] strArrayName = null;
			try
			{
				switch (nType)
				{
					case 0 :
						lArrayId = getAllCode();
						break;
					case 1 :
						lArrayId = new long[2];
						lArrayId[0] = IN;
						lArrayId[1] = OUT;
						break;
				}
				strArrayName = new String[lArrayId.length];
				for (int i = 0; i < lArrayId.length; i++)
				{
					strArrayName[i] = getName(lArrayId[i]);
				}
				showCommonList(out, strControlName, lArrayId, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				Log.print(ex.toString());
			}
		}
	}
	/**
	 * 票据来源 
	 */
	public static class BillSourceType
	{
		public static final long DISCOUNT = 1; //贴现入库
		public static final long REDISCOUNTBUYIN = 2; //转贴现买入
		public static final long REPURCHASEBUYBACK = 3; //正回购购回	
		public static final long OBREPURCHASEBUYIN = 5; //逆回购买入
		public static final long KEEPING = 6; //代保管
		public static final long IMPAWN = 7; //质押入库
		public static final long OTHER = 8; //其它
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) DISCOUNT :
					strReturn = "贴现入库";
					break;
				case (int) REDISCOUNTBUYIN :
					strReturn = "转贴现买入";
					break;
				case (int) REPURCHASEBUYBACK :
					strReturn = "正回购购回";
					break;				
				case (int) OBREPURCHASEBUYIN :
					strReturn = "逆回购买入";
					break;
				case (int) KEEPING :
					strReturn = "代保管";
					break;
				case (int) IMPAWN :
					strReturn = "质押入库";
					break;
				case (int) OTHER :
					strReturn = "其它";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { DISCOUNT, REDISCOUNTBUYIN, REPURCHASEBUYBACK, OBREPURCHASEBUYIN, KEEPING, IMPAWN, OTHER };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BillSourceType",officeID,currencyID);
        } 
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayId = null;
			String[] strArrayName = null;
			try
			{
				switch (nType)
				{
					case 0 :
						lArrayId = getAllCode();
						break;
					case 1 :
						lArrayId = new long[8];
						lArrayId[0] = DISCOUNT;
						lArrayId[1] = REDISCOUNTBUYIN;
						lArrayId[2] = REPURCHASEBUYBACK;					
						lArrayId[3] = OBREPURCHASEBUYIN;
						lArrayId[4] = KEEPING;
						lArrayId[5] = IMPAWN;
						lArrayId[6] = OTHER;
						break;
				}
				strArrayName = new String[lArrayId.length];
				for (int i = 0; i < lArrayId.length; i++)
				{
					strArrayName[i] = getName(lArrayId[i]);
				}
				showCommonList(out, strControlName, lArrayId, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				Log.print(ex.toString());
			}
		}
	}
	/**
	* 票据去向
	*/
	public static class BillWhither
	{
		public static final long STOCK = 1; //库存
		public static final long REDISCOUNTSELLOUT = 2; //转贴现卖出
		public static final long REPURCHASESELLOUT = 3; //正回购卖出
		public static final long OBREPURCHASESELLOUT = 4; //逆回购返售
		public static final long AGAINDISCOUNTSELLOUT = 5; //再贴现卖出
		public static final long MATURERETURN = 6; //到期收回
		public static final long RETURNTOCONSIGN = 7; //退回委托人
		public static final long REALEASEIMPAWN = 8; //解除质押
		public static final long OTHER = 9; //其它
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) STOCK :
					strReturn = "库存";
					break;
				case (int) REDISCOUNTSELLOUT :
					strReturn = "转贴现卖出";
					break;
				case (int) REPURCHASESELLOUT :
					strReturn = "正回购卖出";
					break;
				case (int) OBREPURCHASESELLOUT :
					strReturn = "逆回购返售";
					break;
				case (int) AGAINDISCOUNTSELLOUT :
					strReturn = "再贴现卖出";
					break;
				case (int) MATURERETURN :
					strReturn = "到期收回";
					break;
				case (int) RETURNTOCONSIGN :
					strReturn = "退回委托人";
					break;
				case (int) REALEASEIMPAWN :
					strReturn = "解除质押";
					break;
				case (int) OTHER :
					strReturn = "其它";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { STOCK, REDISCOUNTSELLOUT, REPURCHASESELLOUT, OBREPURCHASESELLOUT, AGAINDISCOUNTSELLOUT, MATURERETURN, RETURNTOCONSIGN, REALEASEIMPAWN, OTHER };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BillWhither",officeID,currencyID);
        } 
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayId = null;
			String[] strArrayName = null;
			try
			{
				switch (nType)
				{
					case 0 :
						lArrayId = getAllCode();
						break;
					case 1 :
						lArrayId = new long[9];
						lArrayId[0] = STOCK;
						lArrayId[1] = REDISCOUNTSELLOUT;
						lArrayId[2] = REPURCHASESELLOUT;
						lArrayId[3] = OBREPURCHASESELLOUT;
						lArrayId[4] = AGAINDISCOUNTSELLOUT;
						lArrayId[5] = MATURERETURN;
						lArrayId[6] = RETURNTOCONSIGN;
						lArrayId[7] = REALEASEIMPAWN;
						lArrayId[8] = OTHER;
						break;
				}
				strArrayName = new String[lArrayId.length];
				for (int i = 0; i < lArrayId.length; i++)
				{
					strArrayName[i] = getName(lArrayId[i]);
				}
				showCommonList(out, strControlName, lArrayId, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				Log.print(ex.toString());
			}
		}
	}
	/**
	 * 票据查询、查复状态
	 */
	public static class BillQuery
	{
		public static final long NOTQUERY = 1; //未查询
		public static final long SENDQUERY = 2; //发出查询
		public static final long REPLYVALID = 3; //查复有效
		public static final long REPLYINVALID = 4; //查复无效
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) NOTQUERY :
					strReturn = "未查询";
					break;
				case (int) SENDQUERY :
					strReturn = "发出查询";
					break;
				case (int) REPLYVALID :
					strReturn = "查复有效";
					break;
				case (int) REPLYINVALID :
					strReturn = "查复无效";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { NOTQUERY, SENDQUERY, REPLYVALID, REPLYINVALID };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BillQuery",officeID,currencyID);
        } 
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayId = null;
			String[] strArrayName = null;
			try
			{
				switch (nType)
				{
					case 0 :
						lArrayId = getAllCode();
						break;
					case 1 :
						lArrayId = new long[2];
						lArrayId[0] = NOTQUERY;
						lArrayId[1] = SENDQUERY;
						break;
					case 2 :
						lArrayId = new long[2];
						lArrayId[0] = REPLYVALID;
						lArrayId[1] = REPLYINVALID;
						break;
				}
				strArrayName = new String[lArrayId.length];
				for (int i = 0; i < lArrayId.length; i++)
				{
					strArrayName[i] = getName(lArrayId[i]);
				}
				showCommonList(out, strControlName, lArrayId, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				Log.print(ex.toString());
			}
		}
	}
	/**
		 * 票据托收
		 */
	public static class BillConsign
	{
		public static final long NOTCONSIGN = 1; //未托收
		public static final long SENDCONSIGN = 2; //发出托收
		public static final long FULLRECEIVE = 3; //收妥
		public static final long REFUSEPAY = 4; //拒付
		public static final long PARTPAY = 5; //部付
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) NOTCONSIGN :
					strReturn = "未托收";
					break;
				case (int) SENDCONSIGN :
					strReturn = "发出托收";
					break;
				case (int) FULLRECEIVE :
					strReturn = "收妥";
					break;
				case (int) REFUSEPAY :
					strReturn = "拒付";
					break;
				case (int) PARTPAY :
					strReturn = "部付";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { NOTCONSIGN, SENDCONSIGN, FULLRECEIVE, PARTPAY };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BillConsign",officeID,currencyID);
        } 
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayId = null;
			String[] strArrayName = null;
			try
			{
				switch (nType)
				{
					case 0 :
						lArrayId = getAllCode();
						break;
					case 1 :
						lArrayId = new long[5];
						lArrayId[0] = NOTCONSIGN;
						lArrayId[1] = SENDCONSIGN;
						lArrayId[2] = FULLRECEIVE;
						lArrayId[3] = REFUSEPAY;
						lArrayId[4] = PARTPAY;
						break;
				}
				strArrayName = new String[lArrayId.length];
				for (int i = 0; i < lArrayId.length; i++)
				{
					strArrayName[i] = getName(lArrayId[i]);
				}
				showCommonList(out, strControlName, lArrayId, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				Log.print(ex.toString());
			}
		}
	}
	/**
			 * 黑名单票据状态
			 */
	public static class BlackBillStatus
	{
		public static final long GUARD = 1; //协防
		public static final long REALEASEGUARD = 2; //解除协防	
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) GUARD :
					strReturn = "协防";
					break;
				case (int) REALEASEGUARD :
					strReturn = "解除协防";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { GUARD, REALEASEGUARD };
			return lTemp;
		}
		public static final long[] getAllCode(long officeID,long currencyID)
        {
        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BlackBillStatus",officeID,currencyID);
        } 
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayId = null;
			String[] strArrayName = null;
			try
			{
				switch (nType)
				{
					case 0 :
						lArrayId = getAllCode();
						break;
					case 1 :
						lArrayId = new long[2];
						lArrayId[0] = GUARD;
						lArrayId[1] = REALEASEGUARD;
						break;
				}
				strArrayName = new String[lArrayId.length];
				for (int i = 0; i < lArrayId.length; i++)
				{
					strArrayName[i] = getName(lArrayId[i]);
				}
				showCommonList(out, strControlName, lArrayId, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				Log.print(ex.toString());
			}
		}
	}
	
	/**
	 * 
	 */
	public static class TransctionStatus
	{
		public static final long SUBMIT = 1; //已保存 
		public static final long CHECK = 2; //已复核
		public static final long REFUSE = 3; //已拒绝
		public static final long DELETE = 4; //已删除
		public static final long APPROVALING = 5; //审批中
		public static final long APPROVALED = 6; //已审批
		public static final long OTHER = 20;//其他
		public static final String getName(long lCode)
		{
			String strReturn = ""; //初始化返回值
			switch ((int) lCode)
			{
				case (int) SUBMIT :
					strReturn = "已保存";
					break;
				case (int) CHECK :
					strReturn = "已复核";
					break;
				case (int) REFUSE :
					strReturn = "已拒绝";
					break;
				case (int) DELETE :
					strReturn = "已删除";
					break;
				case (int) APPROVALING :
					strReturn = "审批中";
					break;
				case (int) APPROVALED :
					strReturn = "已审批";
					break;
				case (int) OTHER :
					strReturn = "未有票据";
					break;
			}
			return strReturn;
		}
		public static final long[] getAllCode()
		{
			long[] lTemp = { SUBMIT, CHECK, REFUSE, DELETE, APPROVALING, APPROVALED, OTHER };
			return lTemp;
		}
		 public static final long[] getAllCode(long officeID,long currencyID)
	        {
	        	return Constant.getAllCode("com.iss.itreasury.bill.util.BILLConstant$BlankTransctionStatus",officeID,currencyID);
	        }    
		public static final void showList(JspWriter out, String strControlName, int nType, long lSelectValue, boolean isNeedAll, boolean isNeedBlank, String strProperty)
		{
			long[] lArrayID = null;
			String[] strArrayName = null;
			try
			{
				lArrayID = getAllCode();
				strArrayName = new String[lArrayID.length];
				for (int i = 0; i < lArrayID.length; i++)
				{
					strArrayName[i] = getName(lArrayID[i]);
				}
				showCommonList(out, strControlName, lArrayID, strArrayName, lSelectValue, isNeedAll, strProperty, isNeedBlank);
			}
			catch (Exception ex)
			{
				System.out.println(ex.toString());
			}
		}
	}
	// 工作类型 add by qhzhou 2007/09/05
	public static class WorkType {
		
		public static final long WAITDEALWITHWORK = 1;//待处理业务
		
		public static final long CURRENTWORK = 2; //待办任务

		public static final long HISTORYWORK = 3;//已办任务

		public static final long FINISHEDWORK = 4;//办结任务
		
		public static final long REFUSEWORK = 5;//拒绝业务
		
		public static final long CANCELAPPROVAL = 6;//取消审批		
		
		//Added by qhzhou, 2007/09/06 得到我的工作的链接地址
		public final static String getWorkUrl(long workType){
			String workUrl = "";
			switch((int)workType){
				case (int)WAITDEALWITHWORK:
					workUrl = "/NASApp/iTreasury-bill/mywork/waitDealWithWorkList-main.jsp";
					break;
				case (int)CURRENTWORK:
					workUrl = "/NASApp/iTreasury-bill/mywork/currentWorkList-main.jsp";
					break;
				case (int)HISTORYWORK:
					workUrl = "/NASApp/iTreasury-bill/mywork/historyWorkList-main.jsp";
					break;
				case (int)FINISHEDWORK:
					workUrl = "/NASApp/iTreasury-bill/mywork/historyWorkList-main.jsp";
					break;
				case (int)REFUSEWORK:
					workUrl = "/NASApp/iTreasury-bill/mywork/refuseWorkList-main.jsp";
					break;
				case (int)CANCELAPPROVAL:
					workUrl = "/NASApp/iTreasury-bill/mywork/cancelApprovalList-main.jsp";
					break;					
			}
			return workUrl;
		}
	}
	/**
	 * 
	 * 页面操作定义
	 * 
	 * @author rongyang
	 */
	public static class Actions
	{
		public static final int CREATETEMPSAVE = 1; //新增临时保存
		public static final int MODIFYTEMPSAVE = 2; //修改临时保存
		public static final int CREATESAVE = 3; //创建保存
		public static final int MODIFYSAVE = 4; //修改保存
		public static final int DELETE = 5; //删除
		public static final int LINKSEARCH = 6; //链接查找
		public static final int MATCHSEARCH = 7; //匹配查找
		public static final int CHECK = 8; //复核/审核
		public static final int CANCELCHECK = 9; //取消复核
		public static final int NEXTSTEP = 10; //下一步
		public static final int TODETAIL = 11; //点交易号到详细页面
		public static final int MODIFYNEXTSTEP = 12; //更改下一步
		public static final int REJECT = 13; //拒绝
		public static final int RETURN = 14; //返回修改
		public static final int CHECKOVER = 15; //审核完成
		public static final int MASSCHECK = 16; //批量复核
		public static final int MASSCANCELCHECK = 17; //批量取消复核
		public static final int UPDATESEARCH = 18; //修改查找
		public static final int CHECKSEARCH = 19; //审核查找
		public static final int COMMIT = 20; //提交
		public static final int INITAPPROVAL = 25;// 提交审批
		public static final int SAVEANDINITAPPROVAL = 26; // 保存并提交审批
		public static final int DOAPPRVOAL = 27; // 审批
		public static final int APPMATCHSEARCH = 28; // 审批查找
		public static final int CANCELAPPROVAL = 29; //取消审批	
		public static final int MODIFYANDINITAPPROVAL = 30; // 修改并提交审批

		public static final String getName(long lCode)
		{
			String strReturn = "";
			switch ((int) lCode)
			{
				case CREATETEMPSAVE :
					strReturn = "临时保存";
					break;
				case MODIFYTEMPSAVE :
					strReturn = "临时保存";
					break;
				case CREATESAVE :
					strReturn = "创建保存";
					break;
				case MODIFYSAVE :
					strReturn = "修改保存";
					break;
				case DELETE :
					strReturn = "删除";
					break;
				case LINKSEARCH :
					strReturn = "链接查找";
					break;
				case MATCHSEARCH :
					strReturn = "匹配查找";
					break;
				case CHECK :
					strReturn = "复核";
					break;
				case CANCELCHECK :
					strReturn = "取消复核";
					break;
				case NEXTSTEP :
					strReturn = "下一步";
					break;
				case TODETAIL :
					strReturn = "察看明细";
					break;
				case REJECT :
					strReturn = "拒绝";
					break;
				case RETURN :
					strReturn = "返回修改";
					break;
				case CHECKOVER :
					strReturn = "审核完成";
					break;
				case MASSCHECK :
					strReturn = "批量复核";
					break;
				case MASSCANCELCHECK :
					strReturn = "批量取消复核";
					break;
				case UPDATESEARCH :
					strReturn = "修改查找";
					break;
				case CHECKSEARCH :
					strReturn = "审核查找";
					break;
				case COMMIT :
					strReturn = "提交";
				case INITAPPROVAL:
					strReturn = "提交审批";
					break;
				case SAVEANDINITAPPROVAL:
					strReturn = "保存并提交审批";
					break;				
				case DOAPPRVOAL:
					strReturn = "审批";
					break;
				case APPMATCHSEARCH:
					strReturn = "审批查找";
					break;
				case CANCELAPPROVAL:
					strReturn = "取消审批";
					break;

			}
			return strReturn;
		}
	}
	//上传附件所依附的主体类型
	public static class AttachParentType
	{
		//文档父类型
		public static final long TRANSDISCOUNTBILL = 1; //转贴现票据
		public static final long DISCOUNTCONTRACTBILL = 2; //贴现合同票据
	}
}
