/* Generated by Together */

package com.iss.itreasury.bill.util;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

import com.iss.itreasury.util.Log;

public class BillNameRef {
	
	  /**
	    * 用一个ID获得所有的Name,中间用","分割
	    * @param strNameField
	    * @param strTableName
	    * @param strIdField
	    * @param strValue
	    * @return
	    */
	   public static String getNamesByID(String strNameField,String strTableName,String strIdField,String strValue)
	   {
	       String strReturn = "";
	       try
	       {
	           String strSQL = "select " + strNameField + " from " + strTableName + " where " + strIdField + "='" + strValue+"'";
	           Log.print("NameRef SQL:"+strSQL);
	           Collection c = BILLHTML.getCommonSelectList(strSQL, strNameField);
	           if (c != null)
	           {
	               Iterator ite = c.iterator();
	                
	               while (ite.hasNext()){
	                   if (strReturn.equals("")){
	                       strReturn +=ite.next().toString();
	                   }
	                   else{
	                       strReturn += ","+ite.next().toString();
	                   }
	               }
	           }
	       }
	       catch (Exception e)
	       {
	           System.out.println(e.toString());
	       }
	        
	       return strReturn;
	   }
	   
	   /**
	    * 用ID或code获得名称方法的公用方法1
	    * @param strNameField           //名称字段名
	    * @param strTableName           //表名
	    * @param strIdField         //id或者code字段名
	    * @param strValue               //id或者code的值
	    * @return
	    */
	   public static String getNameByID(String strNameField,String strTableName,String strIdField,String strValue,HashMap map){
	       String strReturn = null;
	       try
	       {
	           String strSQL = "select " + strNameField + " from " + strTableName + " where " + strIdField + "='" + strValue+"'";
	           Log.print("NameRef SQL:"+strSQL);
	           if (map != null){                                //首先从HashMap中获取数据
	               strReturn = (String)map.get(strValue);
	           }
	           if (strReturn == null){                      //如果HashMap中没有,则从数据库中获得
	               Collection c = BILLHTML.getCommonSelectList(strSQL, strNameField);
	               if (c != null)
	               {
	                   Object o = c.iterator().next();
	                   if(o!=null){
		                   Log.print("NameRef return value:"+o.toString());
		                   strReturn = String.valueOf(o);
	                   }
	               }
	               if (strReturn == null) strReturn = "";
	               if (map != null)map.put(strValue,strReturn);             //置入HashMap
	           }
	           else{
	               Log.print("from HashMap:" + strReturn + "  Cache size:" + map.size());
	           }
	       }
	       catch (Exception e)
	       {
	           e.printStackTrace();
	       }
	       if (strReturn == null) strReturn = "";
	       return strReturn;
	   }
	
	/**
	 * 通过票据类型 id 取得 id 类型名称
	 * @param lID
	 * @return
	 */
	public static String getTypeNameByID(long lID)
	{
		return getNameByID("name","Bill_BillType","id",String.valueOf(lID),null);
	}
	
	/**
	 * 通过科目号 id 取得 id 科目号码
	 * @param lID
	 * @return
	 */
	public static String getSubjectCodeByID(long lID)
	{
		return getNameByID("sSubjectCode","sett_vglsubjectdefinition","id",String.valueOf(lID),null);
	}	
	/**
	* 通过科目号号码 取得 科目id
	* @param lID
	* @return
	*/
   public static String getSubjectIDByCode(String sName)
   {
	   return getNameByID("id","sett_vglsubjectdefinition","sSubjectCode",sName,null);
   }

   /**
	 * 通过开户行 id 取得 开户行名称
	 * @param lID
	 * @return
	 */
	public static String getBranchNameByID(long lID)
	{
		return getNameByID("sName","sett_Branch","id",String.valueOf(lID),null);
	}
	/**
	 * 通过总帐类 id 取得 总帐类名称
	 * @param lID
	 * @return
	 */
	public static String getLedgerNameByID(long lID)
	{
		return getNameByID("sName","SETT_GENERALLEDGER","id",String.valueOf(lID),null);
	}
	/*
	 * 
	 */
	public static String getUserNameByID(long lID)
	{
		return getNameByID("SNAME","USERINFO","id",String.valueOf(lID),null);
	}
	
	/**
	 * 通过空白凭证编号取得空白凭证 id 
	 * @param lID
	 * @return
	 */
	public static String getBlankIDByCode(String code)
	{
		return getNameByID("id","Bill_BlankVoucher","code",code,null);
	}
	/**
	 * 通过空白凭证id 取得空白凭证编号 
	 * @param lID
	 * @return
	 */
	public static String getBlankCodeByID(long id)
	{
		return getNameByID("code","Bill_BlankVoucher","id",String.valueOf(id),null);
	}
	
	/**
	 * 通过汇票id 取得汇票编号 
	 * @param lID
	 * @return
	 */
	public static String getDraftCodeByID(long id)
	{
		return getNameByID("SCODE","LOAN_DISCOUNTCONTRACTBILL","id",String.valueOf(id),null);
	}
	
	/**
	 * 通过客户id 取得客户名称 
	 * @param lID
	 * @return
	 */
	public static String getClientNameByID(long id)
	{
		return getNameByID("sName","Client","id",String.valueOf(id),null);
	}
	/**
	 * 通过帐户id 取得帐户编号 
	 * @param lID
	 * @return
	 */
	public static String getAccountNoByID(long id)
	{
		return getNameByID("sAccountNo","sett_Account","id",String.valueOf(id),null);
	}
	/**
	 * 通过凭证id 取得领用客户ID 
	 * @param lID
	 * @return
	 */
	public static String getClientIDByBillID(long lID)
	{
		return getNameByID("useClientID","BILL_BLANKVOUCHER","id",String.valueOf(lID),null);
	}
	/**
	 * 通过凭证id 取得领用帐户ID 
	 * @param lID
	 * @return
	 */
	public static String getAccountIDByBillID(long lID)
	{
		return getNameByID("useAccountID","BILL_BLANKVOUCHER","id",String.valueOf(lID),null);
	}
	
	/**
	 * 通过帐户id 取得帐户名称
	 * @param lID
	 * @return
	 */
	public static String getAccountNameByID(long id)
	{
		return getNameByID("sName","sett_Account","id",String.valueOf(id),null);
	}
	/**
	 * 通过ID获得审批流名称（子类）
	 * @param lID
	 * @return
	 */
	public static String getApprovalSettingNameByID(long lID){
		return getNameByID("sName","loan_approvalSetting","id",String.valueOf(lID),null);
	}
}
