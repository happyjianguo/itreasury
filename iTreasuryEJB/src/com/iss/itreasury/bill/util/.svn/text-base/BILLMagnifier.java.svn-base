/* Generated by Together */

package com.iss.itreasury.bill.util;

import java.net.URLEncoder;

import javax.servlet.jsp.JspWriter;

import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.settlement.util.SETTMagnifier;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.Log;

public class BILLMagnifier {

	private static String ZOOMERRORMSG = "放大镜参数设置错误!";

	/**
	 * 显示特殊的放大镜（带多个文本输入框的，如帐户放大镜）
	 * @param out
	 * @param strMagnifierName 放大镜的名称
	 * @param strFormName 主页面表单名称
	 * @param strPrefix 控件名称前缀
	 * @param nCaseNumber 显示文本框的数目（目前只支持3，4）
	 * @param strMainNames 放大镜回显栏位值列表
	 * @param strMainFields 放大镜回显栏位对应的表格字段
	 * @param strReturnNames 放大镜返回值列表(隐含值)
	 * @param strReturnFields 放大镜返回值(隐含值)对应的表格字段列表
	 * @param strReturnValues 放大镜返回值(隐含值)对应的初始值
	 * @param strDisplayNames 放大镜小窗口显示的栏位名称
	 * @param strDisplayFields 放大镜小窗口显示栏位对应的表格字段
	 * @param nIndex 确定选择项,从0开始,如果小于0,则默认所有栏位都可选择,如果大于或等于strDisplayNames.length,则没有选择项
	 * @param strMainProperty 放大镜栏位属性
	 * @param strSQL 放大镜查询SQL语句
	 * @param strNextControls 设置下一个焦点
	 * @param strAccountNo 帐户编号
	 * @param strTitle 放大镜的描述
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param String strClientIDCtrl 关联控件（客户ID对应的控件名称）
	 * @throws Exception
	 */
	public static void showSpecialZoomCtrl(
		JspWriter out,
		String strMagnifierName,
		String strFormName,
		String strPrefix,
		int nCaseNumber,
		String[] strMainNames,
		String[] strMainFields,
		String[] strReturnNames,
		String[] strReturnFields,
		String[] strReturnValues,
		String[] strDisplayNames,
		String[] strDisplayFields,
		int nIndex,
		String strMainProperty,
		String strSQL,
		String[] strNextControls,
		String strAccountNo,
		String strTitle,
		String strFirstTD,
		String strSecondTD,
		String strClientIDCtrl)
		throws Exception
	{
		String strButtonName = "button";
		try
		{
			//检查放大镜参数
			checkValue(strMainNames, strMainFields, true);
			checkValue(strReturnNames, strReturnFields, strReturnValues, false);
			checkValue(strDisplayNames, strDisplayFields, true);
			if (strMagnifierName == null || strFormName == null || strFormName.equals("") || strSQL == null || strSQL.equals(""))
			{
				throw new IException(ZOOMERRORMSG);
			}
			if (strNextControls == null)
			{
				throw new IException(ZOOMERRORMSG);
			}
			if (strAccountNo == null)
			{
				strAccountNo = "";
			}
			if (strFirstTD == null)
			{
				strFirstTD = "";
			}
			if (strSecondTD == null)
			{
				strSecondTD = "";
			}
			//检查完毕
			String strTempCtl1 = strMainNames[0] + "Ctrl1";
			String strTempCtl2 = strMainNames[0] + "Ctrl2";
			String strTempCtl3 = strMainNames[0] + "Ctrl3";
			String strTempCtl4 = strMainNames[0] + "Ctrl4";
			//设置前缀
			if (strPrefix != null && !strPrefix.trim().equals(""))
			{
				for (int i = 0; i < strMainNames.length; i++)
				{
					strMainNames[i] = strPrefix + strMainNames[i];
				}
				for (int i = 0; i < strReturnNames.length; i++)
				{
					strReturnNames[i] = strPrefix + strReturnNames[i];
				}
			}
			//弹出窗口的属性
			String sFeatures = null;
			if (strDisplayNames.length < 3)
			{
				sFeatures = "toolbar=no,menubar=no,resizable=no,location=no,width=520,height=450,scrollbars=yes";
			}
			else
			{
				sFeatures = "toolbar=no,menubar=no,resizable=no,location=no,width=624,height=540,scrollbars=yes";
			}
			//生成传递给弹出窗口的参数字符串
			String strParam = "";
			strParam = "strFormName=" + strFormName;
			strParam += "&strMagnifierName=" + strMagnifierName;
			strParam += "&nIndex=" + nIndex;
			if (!isSQL(strSQL))
			{
				strParam += "&strSQL='+" + strSQL + "+'";
			}
			else
			{
				strParam += "&strSQL=" + getSQL(strSQL);
			}
			for (int i = 0; i < strNextControls.length; i++)
			{
				strParam += "&strNextControls=" + strNextControls[i];
			}
			for (int i = 0; i < strMainNames.length; i++)
			{
				strParam += "&strMainNames=" + strMainNames[i];
				strParam += "&strMainFields=" + strMainFields[i];
			}
			if (strReturnNames != null)
			{
				boolean bValue = false;
				if (strReturnValues != null && strReturnValues.length == strReturnNames.length)
				{
					bValue = true;
				}
				for (int i = 0; i < strReturnNames.length; i++)
				{
					//生成数组参数
					strParam += "&strReturnNames=" + strReturnNames[i];
					strParam += "&strReturnFields=" + strReturnFields[i];
					if (bValue)
					{
						out.println("<input type=\"hidden\" name=\"" + strReturnNames[i] + "\" value=\"" + strReturnValues[i] + "\">");
					}
					else
					{
						out.println("<input type=\"hidden\" name=\"" + strReturnNames[i] + "\">");
					}
				}
			}
			for (int i = 0; i < strDisplayNames.length; i++)
			{
				//生成数组参数
				strParam += "&strDisplayNames=" + strDisplayNames[i];
				strParam += "&strDisplayFields=" + strDisplayFields[i];
			}
			//Log.print("strParam = " + strParam);
			//生成查询按钮的事件字符串
			String sOnKeydown =
				"if("
					+ strFormName
					+ "."
					+ strTempCtl1
					+ ".disabled == false) {gnIsSelectCtrl=1;window.open('"
					+ Env.URL_PREFIX
					+ "/iTreasury-bill/magnifier/ShowMagnifierZoom.jsp?"
					+ strParam
					+ "', 'SelectAnything', '"
					+ sFeatures
					+ "', false);}";
			//
			String sOnKeyUp = "";
			if (strReturnNames != null)
			{
				for (int i = 0; i < strReturnNames.length; i++)
				{
					sOnKeyUp += strReturnNames[i] + ".value = -1; ";
				}
				if (strClientIDCtrl != null && !strClientIDCtrl.equals(""))
				{
					sOnKeyUp += "if(" + strClientIDCtrl + "FromClient.value == 0) {" + strClientIDCtrl + ".value = -1;}";
				}
			}
			//int iPos = strMainProperty.toLowerCase().indexOf("disabled");
			int iPos = -1;
			//显示控件
			if (iPos == -1)
			{
				out.println(
					"<td "
						+ strFirstTD
						+ ">"
						+ strTitle
						+ "：&nbsp;"
						+ "<a href=#><img name=\""
						+ strButtonName
						+ "\" src='/webbill/image/icon.gif' border=0 onclick=\""
						+ sOnKeydown
						+ "\"></a></td>");
				//image
			}
			else
			{
				out.println("<td " + strFirstTD + ">" + strTitle + "：&nbsp;" + "<a href=#><img name=\"" + strButtonName + "\" src='/webbill/image/icon.gif' border=0 ></a></td>");
				//image
			}
			//将帐户编号拆分
			String strAccountNo1 = "";
			String strAccountNo2 = "";
			String strAccountNo3 = "";
			String strAccountNo4 = "";
			if (strAccountNo != null && strAccountNo.length() > 0)
			{
				String strTemp = strAccountNo;
				if (strTemp.indexOf("-") >= 0)
				{
					strAccountNo1 = strTemp.substring(0, strTemp.indexOf("-"));
				}
				else
				{
					strAccountNo1 = strTemp;
					strTemp = "";
				}
				Log.print(strAccountNo1);
				strTemp = strTemp.substring(strTemp.indexOf("-") + 1);
				if (strTemp.indexOf("-") >= 0)
				{
					strAccountNo2 = strTemp.substring(0, strTemp.indexOf("-"));
				}
				else
				{
					strAccountNo2 = strTemp;
					strTemp = "";
				}
				Log.print(strAccountNo2);
				strTemp = strTemp.substring(strTemp.indexOf("-") + 1);
				if (strTemp.indexOf("-") >= 0)
				{
					strAccountNo3 = strTemp.substring(0, strTemp.indexOf("-"));
				}
				else
				{
					strAccountNo3 = strTemp;
					strTemp = "";
				}
				Log.print(strAccountNo3);
				strTemp = strTemp.substring(strTemp.indexOf("-") + 1);
				strAccountNo4 = strTemp;
				Log.print(strAccountNo4);
			}
			String strTempFunction = "";
			String strTempFunctionForFixed = "";
			if (nCaseNumber == 3)
			{
				strTempFunctionForFixed =
					strPrefix
						+ strMainNames[0]
						+ "setWholeAcccountNo("
						+ strFormName
						+ "."
						+ strTempCtl1
						+ ".value,"
						+ strFormName
						+ "."
						+ strTempCtl2
						+ ".value,"
						+ strFormName
						+ "."
						+ strTempCtl3
						+ ".value,'');";
				strTempFunction = strTempFunctionForFixed + sOnKeyUp;
			}
			else
				if (nCaseNumber >= 4)
				{
					strTempFunction =
						strPrefix
							+ strMainNames[0]
							+ "setWholeAcccountNo("
							+ strFormName
							+ "."
							+ strTempCtl1
							+ ".value,"
							+ strFormName
							+ "."
							+ strTempCtl2
							+ ".value,"
							+ strFormName
							+ "."
							+ strTempCtl3
							+ ".value,"
							+ strFormName
							+ "."
							+ strTempCtl4
							+ ".value);"
							+ sOnKeyUp;
				}
			out.println("<td " + strSecondTD + ">");
			out.println("<input type=\"hidden\" name=\"" + strMainNames[0] + "\" value=\"" + strAccountNo + "\">");
			out.println(
				"<input type=\"text\" size=\"2\" maxlength=\"2\" name=\""
					+ strTempCtl1
					+ "\" value=\""
					+ strAccountNo1
					+ "\" class=\"box\"  onKeyDown=\"gnIsSelectCtrl=1;"
					+ strPrefix
					+ strMainNames[0]
					+ "fieldFirstFocus("
					+ strFormName
					+ "."
					+ strTempCtl1
					+ ".value)\" onKeyUp=\""
					+ strTempFunction
					+ "\">");
			out.println("-");
			out.println(
				"<input type=\"text\" size=\"2\" maxlength=\"2\" name=\""
					+ strTempCtl2
					+ "\" value=\""
					+ strAccountNo2
					+ "\" class=\"box\"  onKeyDown=\"gnIsSelectCtrl=1;"
					+ strPrefix
					+ strMainNames[0]
					+ "fieldSecondFocus("
					+ strFormName
					+ "."
					+ strTempCtl2
					+ ".value)\" onKeyUp=\""
					+ strTempFunction
					+ "\">");
			if (nCaseNumber == 3)
			{
				out.println("-");
				out.println(
					"<input type=\"text\" size=\"4\" maxlength=\"4\" name=\""
						+ strTempCtl3
						+ "\" value=\""
						+ strAccountNo3
						+ "\" class=\"box\"  onKeyDown=\"gnIsSelectCtrl=1;"
						+ strPrefix
						+ strMainNames[0]
						+ "fieldThirdFocus("
						+ strFormName
						+ "."
						+ strTempCtl3
						+ ".value)\" onKeyUp=\""
						+ strTempFunction
						+ "\">");
			}
			else
				if (nCaseNumber >= 4)
				{
					out.println("-");
					out.println(
						"<input type=\"text\" size=\"4\" maxlength=\"4\" name=\""
							+ strTempCtl3
							+ "\" value=\""
							+ strAccountNo3
							+ "\" class=\"box\"  onKeyDown=\"gnIsSelectCtrl=1;"
							+ strPrefix
							+ strMainNames[0]
							+ "fieldThirdFocus("
							+ strFormName
							+ "."
							+ strTempCtl3
							+ ".value)\" onKeyUp=\""
							+ strTempFunction
							+ "\">");
					out.println("-");
					out.println(
						"<input type=\"text\" size=\"1\" maxlength=\"1\" name=\""
							+ strTempCtl4
							+ "\" value=\""
							+ strAccountNo4
							+ "\" class=\"box\"  onKeyDown=\"gnIsSelectCtrl=1;"
							+ strPrefix
							+ strMainNames[0]
							+ "fieldFouthFocus("
							+ strFormName
							+ "."
							+ strTempCtl4
							+ ".value)\" onKeyUp=\""
							+ strTempFunction
							+ "\">");
				}
			out.println("</td>");
			//打印脚本程序
			out.println("<script language=\"JavaScript\">");
			out.println("function " + strPrefix + strMainNames[0] + "fieldFirstFocus(sValue)");
			out.println("{");
			out.println("	var k = window.event.keyCode;");
			out.println("	if (k != 46 && k != 8 && k != 37 && k != 39)");
			out.println("	{");
			out.println("		if (k == 13 || sValue.length == 2)");
			out.println("		{");
			out.println("			if (sValue.length ==1)");
			out.println("			{");
			out.println("				" + strFormName + "." + strTempCtl1 + ".value = '0'+sValue;");
			out.println("			}");
			out.println("			" + strFormName + "." + strTempCtl2 + ".focus();");
			out.println("			" + strFormName + "." + strTempCtl2 + ".select();");
			out.println("		}");
			out.println("	}");
			out.println("}");
			out.println("function " + strPrefix + strMainNames[0] + "fieldSecondFocus(sValue)");
			out.println("{");
			out.println("	var k = window.event.keyCode;");
			out.println("	if (k != 46 && k != 8 && k != 37 && k != 39)");
			out.println("	{");
			out.println("		if (k == 13 || sValue.length == 2)");
			out.println("		{");
			out.println("			if (sValue.length ==1)");
			out.println("			{");
			out.println("				" + strFormName + "." + strTempCtl2 + ".value = '0'+sValue;");
			out.println("			}");
			out.println("			" + strFormName + "." + strTempCtl3 + ".focus();");
			out.println("			" + strFormName + "." + strTempCtl3 + ".select();");
			out.println("		}");
			out.println("	}");
			out.println("	else if (k == 8 && sValue.length == 0)");
			out.println("	{");
			out.println("		" + strFormName + "." + strTempCtl1 + ".value = \"\";");
			out.println("		" + strFormName + "." + strTempCtl1 + ".focus();");
			out.println("	}");
			out.println("}");
			if (nCaseNumber == 3)
			{
				out.println("function " + strPrefix + strMainNames[0] + "fieldThirdFocus(sValue)");
				out.println("{");
				out.println("	var k = window.event.keyCode;");
				out.println("	if (k != 46 && k != 8 && k != 37 && k != 39)");
				out.println("	{");
				out.println("		if (k == 13 )");
				out.println("		{");
				out.println("			if (sValue.length ==1)");
				out.println("			{");
				out.println("				" + strFormName + "." + strTempCtl3 + ".value = '000'+sValue;");
				out.println("			}");
				out.println("			else if (sValue.length ==2)");
				out.println("			{");
				out.println("				" + strFormName + "." + strTempCtl3 + ".value = '00'+sValue;");
				out.println("			}");
				out.println("			else if (sValue.length ==3)");
				out.println("			{");
				out.println("				" + strFormName + "." + strTempCtl3 + ".value = '0'+sValue;");
				out.println("			}");
				out.println("			" + strTempFunctionForFixed);
				out.println("			" + sOnKeydown);
				out.println("		}");
				out.println("	}");
				out.println("	else if (k == 8 && sValue.length == 0)");
				out.println("	{");
				out.println("		" + strFormName + "." + strTempCtl2 + ".value = \"\";");
				out.println("		" + strFormName + "." + strTempCtl2 + ".focus();");
				out.println("	}");
				out.println("}");
			}
			else
				if (nCaseNumber >= 4)
				{
					out.println("function " + strPrefix + strMainNames[0] + "fieldThirdFocus(sValue)");
					out.println("{");
					out.println("	var k = window.event.keyCode;");
					out.println("	if (k != 46 && k != 8 && k != 37 && k != 39)");
					out.println("	{");
					out.println("		if (k == 13 || sValue.length == 4)");
					out.println("		{");
					out.println("			if (sValue.length ==1)");
					out.println("			{");
					out.println("				" + strFormName + "." + strTempCtl3 + ".value = '000'+sValue;");
					out.println("			}");
					out.println("			else if (sValue.length ==2)");
					out.println("			{");
					out.println("				" + strFormName + "." + strTempCtl3 + ".value = '00'+sValue;");
					out.println("			}");
					out.println("			else if (sValue.length ==3)");
					out.println("			{");
					out.println("				" + strFormName + "." + strTempCtl3 + ".value = '0'+sValue;");
					out.println("			}");
					out.println("			" + strFormName + "." + strTempCtl4 + ".focus();");
					out.println("			" + strFormName + "." + strTempCtl4 + ".select();");
					out.println("		}");
					out.println("	}");
					out.println("	else if (k == 8 && sValue.length == 0)");
					out.println("	{");
					out.println("		" + strFormName + "." + strTempCtl2 + ".value = \"\";");
					out.println("		" + strFormName + "." + strTempCtl2 + ".focus();");
					out.println("	}");
					out.println("}");
					out.println("function " + strPrefix + strMainNames[0] + "fieldFouthFocus(sValue)");
					out.println("{");
					out.println("	var k = window.event.keyCode;");
					out.println("	if (k != 46 && k != 8 && k != 37 && k != 39)");
					out.println("	{");
					out.println("		if (k == 13 )");
					out.println("		{");
					out.println("			" + sOnKeydown);
					out.println("		}");
					out.println("	}");
					out.println("	else if (k == 8 && sValue.length == 0)");
					out.println("	{");
					out.println("		" + strFormName + "." + strTempCtl3 + ".value = \"\";");
					out.println("		" + strFormName + "." + strTempCtl3 + ".focus();");
					out.println("	}");
					out.println("}");
				}
			out.println("function " + strPrefix + strMainNames[0] + "setWholeAcccountNo(sValue1,sValue2,sValue3,sValue4)");
			out.println("{");
			out.println("	if (sValue1 != \"\" && sValue2 != \"\" && sValue3 != \"\" && sValue4  != \"\")");
			out.println("	{");
			out.println("		" + strFormName + "." + strMainNames[0] + ".value = sValue1 + \"-\" + sValue2+ \"-\" + sValue3 + \"-\" + sValue4;");
			out.println("	}");
			out.println("	else if (sValue1 != \"\" && sValue2 != \"\" && sValue3 != \"\")");
			out.println("	{");
			out.println("		" + strFormName + "." + strMainNames[0] + ".value = sValue1 + \"-\" + sValue2 + \"-\" + sValue3;");
			out.println("	}");
			out.println("	else if (sValue1 != \"\" && sValue2 != \"\")");
			out.println("	{");
			out.println("		" + strFormName + "." + strMainNames[0] + ".value = sValue1 + \"-\" + sValue2;");
			out.println("	}");
			out.println("	else if (sValue1 != \"\")");
			out.println("	{");
			out.println("		" + strFormName + "." + strMainNames[0] + ".value = sValue1;");
			out.println("	}");
			out.println("	else if (sValue1 == \"\")");
			out.println("	{");
			out.println("		" + strFormName + "." + strMainNames[0] + ".value = \"\";");
			out.println("	}");
			out.println("}");
			out.println("</script>");
		}
		catch (Exception exp)
		{
			throw exp;
		}
	}

	/**
	 * 显示普通放大镜
	 * @param out
	 * @param strMagnifierName 放大镜的名称
	 * @param strFormName 主页面表单名称
	 * @param strPrefix 控件名称前缀
	 * @param strMainNames 放大镜回显栏位值列表
	 * @param strMainFields 放大镜回显栏位对应的表格字段
	 * @param strReturnNames 放大镜返回值列表(隐含值)
	 * @param strReturnFields 放大镜返回值(隐含值)对应的表格字段列表
	 * @param strReturnValues 放大镜返回值(隐含值)对应的初始值
	 * @param strDisplayNames 放大镜小窗口显示的栏位名称
	 * @param strDisplayFields 放大镜小窗口显示栏位对应的表格字段
	 * @param nIndex 确定选择项,从0开始,如果小于0,则默认所有栏位都可选择,如果大于或等于strDisplayNames.length,则没有选择项
	 * @param strMainProperty 放大镜栏位属性
	 * @param strSQL 放大镜查询SQL语句
	 * @param strNextControls 设置下一个焦点
	 * @param strTitle 栏位标题
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param blnIsOptional 是否是可选项（目前仅对摘要、现金流向放大镜有用）
	 * @param strCtrlType 控件类型（特殊处理）
	 *  rate 利率控件(可以格式化利率)
	 *  branch 开户行控件(控件为textarea)
	 * @throws Exception
	 */
	public static void showZoomCtrl(
		JspWriter out,
		String strMagnifierName,
		String strFormName,
		String strPrefix,
		String[] strMainNames,
		String[] strMainFields,
		String[] strReturnNames,
		String[] strReturnFields,
		String[] strReturnValues,
		String[] strDisplayNames,
		String[] strDisplayFields,
		int nIndex,
		String strMainProperty,
		String strSQL,
		String[] strNextControls,
		String strTitle,
		String strFirstTD,
		String strSecondTD)
		throws Exception
	{
		String strMagnifierNameURLEncoder = URLEncoder.encode(strMagnifierName);
		strMainProperty += " maxlength='50' ";
		String[] strDisplayNamesURLEncoder = strDisplayNames;
		for(int i=0;i<strDisplayNames.length;i++)
		{
			strDisplayNamesURLEncoder[i] = URLEncoder.encode(strDisplayNames[i]);
		}
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierNameURLEncoder,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNamesURLEncoder,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD,
				false,
				"");
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strMagnifierName + "]异常：" + e.toString());
		}
	}
	/**
	 * 显示普通放大镜
	 * @param out
	 * @param strMagnifierName 放大镜的名称
	 * @param strFormName 主页面表单名称
	 * @param strPrefix 控件名称前缀
	 * @param strMainNames 放大镜回显栏位值列表
	 * @param strMainFields 放大镜回显栏位对应的表格字段
	 * @param strReturnNames 放大镜返回值列表(隐含值)
	 * @param strReturnFields 放大镜返回值(隐含值)对应的表格字段列表
	 * @param strReturnValues 放大镜返回值(隐含值)对应的初始值
	 * @param strDisplayNames 放大镜小窗口显示的栏位名称
	 * @param strDisplayFields 放大镜小窗口显示栏位对应的表格字段
	 * @param nIndex 确定选择项,从0开始,如果小于0,则默认所有栏位都可选择,如果大于或等于strDisplayNames.length,则没有选择项
	 * @param strMainProperty 放大镜栏位属性
	 * @param strSQL 放大镜查询SQL语句
	 * @param strNextControls 设置下一个焦点
	 * @param strTitle 栏位标题
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param blnIsOptional 是否是可选项（目前仅对摘要、现金流向放大镜有用）
	 * @param strCtrlType 控件类型（特殊处理）
	 *  rate 利率控件(可以格式化利率)
	 *  branch 开户行控件(控件为textarea)
	 * @throws Exception
	 */
	public static void showZoomCtrl(
		JspWriter out,
		String strMagnifierName,
		String strFormName,
		String strPrefix,
		String[] strMainNames,
		String[] strMainFields,
		String[] strReturnNames,
		String[] strReturnFields,
		String[] strReturnValues,
		String[] strDisplayNames,
		String[] strDisplayFields,
		int nIndex,
		String strMainProperty,
		String strSQL,
		String[] strNextControls,
		String strTitle,
		String strFirstTD,
		String strSecondTD,
		boolean blnIsOptional,
		String strCtrlType)
		throws Exception
	{
		String strButtonName = "button";
		try
		{
			//检查放大镜参数
			checkValue(strMainNames, strMainFields, true);
			checkValue(strReturnNames, strReturnFields, strReturnValues, false);
			checkValue(strDisplayNames, strDisplayFields, true);
			if (strMagnifierName == null || strFormName == null || strFormName.equals("") || strSQL == null || strSQL.equals(""))
			{
				throw new IException(ZOOMERRORMSG);
			}
			if (strNextControls == null)
			{
				throw new IException(ZOOMERRORMSG);
			}
			if (strFirstTD == null)
			{
				strFirstTD = "";
			}
			if (strSecondTD == null)
			{
				strSecondTD = "";
			}
			//检查完毕
			//设置前缀
			if (strPrefix != null && !strPrefix.trim().equals(""))
			{
				for (int i = 0; i < strMainNames.length; i++)
				{
					strMainNames[i] = strPrefix + strMainNames[i];
				}
				for (int i = 0; i < strReturnNames.length; i++)
				{
					strReturnNames[i] = strPrefix + strReturnNames[i];
				}
			}
			//弹出窗口的属性
			String sFeatures = null;
			if (strDisplayNames.length < 3)
			{
				sFeatures = "toolbar=no,menubar=no,resizable=no,location=no,width=520,height=450,scrollbars=yes";
			}
			else
			{
				sFeatures = "toolbar=no,menubar=no,resizable=no,location=no,width=624,height=540,scrollbars=yes";
			}
			//生成传递给弹出窗口的参数字符串
			String strParam = "";
			strParam = "strFormName=" + strFormName;
			strParam += "&strMagnifierName=" + strMagnifierName;
			strParam += "&nIndex=" + nIndex;
			if (!isSQL(strSQL))
			{
				strParam += "&strSQL='+" + strSQL + "+'";
			}
			else
			{
				strParam += "&strSQL=" + getSQL(strSQL);
			}
			for (int i = 0; i < strNextControls.length; i++)
			{
				strParam += "&strNextControls=" + strNextControls[i];
			}
			for (int i = 0; i < strMainNames.length; i++)
			{
				strParam += "&strMainNames=" + strMainNames[i];
				strParam += "&strMainFields=" + strMainFields[i];
			}
			if (strReturnNames != null)
			{
				boolean bValue = false;
				if (strReturnValues != null && strReturnValues.length == strReturnNames.length)
				{
					bValue = true;
				}
				for (int i = 0; i < strReturnNames.length; i++)
				{
					//生成数组参数
					strParam += "&strReturnNames=" + strReturnNames[i];
					strParam += "&strReturnFields=" + strReturnFields[i];
					if (bValue)
					{
						out.println("<input type=\"hidden\" name=\"" + strReturnNames[i] + "\" value=\"" + strReturnValues[i] + "\">");
					}
					else
					{
						out.println("<input type=\"hidden\" name=\"" + strReturnNames[i] + "\">");
					}
				}
			}
			for (int i = 0; i < strDisplayNames.length; i++)
			{
				//生成数组参数
				strParam += "&strDisplayNames=" + strDisplayNames[i];
				strParam += "&strDisplayFields=" + strDisplayFields[i];
			}
			//Log.print("strParam = " + strParam);
			//生成查询按钮的事件字符串
			String sOnKeydown =
				"if("
					+ strFormName
					+ "."
					+ strMainNames[0]
					+ ".disabled == false) {gnIsSelectCtrl=1;window.open('"
					+ Env.URL_PREFIX
					+ "/iTreasury-bill/magnifier/ShowMagnifierZoom.jsp?"
					+ strParam
					+ "', 'SelectAnything', '"
					+ sFeatures
					+ "', false);}";
			//
			String sOnKeyUp = "";
			if (strReturnNames != null)
			{
				for (int i = 0; i < strReturnNames.length; i++)
				{
					sOnKeyUp += strReturnNames[i] + ".value = -1; ";
				}
			}
			//int iPos = strMainProperty.toLowerCase().indexOf("disabled");
			int iPos = -1;
			//显示控件
			if (iPos == -1)
			{
				out.println(
					"<td "
						+ strFirstTD
						+ ">"
						+ strTitle
						+ "：&nbsp;"
						+ "<a href=#><img name=\""
						+ strButtonName
						+ "\" src='/webbill/image/icon.gif' border=0 onclick=\""
						+ sOnKeydown
						+ "\"></a></td>");
				//image
			}
			else
			{
				out.println("<td " + strFirstTD + ">" + strTitle + "：&nbsp;" + "<a href=#><img name=\"" + strButtonName + "\" src='/webbill/image/icon.gif' border=0 ></a></td>");
				//image
			}
			//blnIsOptional,是否可选项（仅对摘要、现金流向放大镜有效）
			if (blnIsOptional == true)
			{
				/*
				if (strNextControls != null && strNextControls.length > 0)
				{
					strMainProperty = " onfocus=\"nextfield='" + strNextControls[0] + "'\" "+strMainProperty;
				}
				*/
				if (strCtrlType.equals("rate"))
				{
					out.println("<td" + strSecondTD + "><input type=\"text\" name=\"" + strMainNames[0] + "\" class=\"tar\" " + strMainProperty + "> %</td>");
				}
				else
					if (strCtrlType.equals("branch"))
					{
						out.println(
							"<td"
								+ strSecondTD
								+ "><textarea name=\""
								+ strMainNames[0]
								+ "\"  class=\"box\" bgcolor=\"#FF00\"  rows=2 cols=30>"
								+ strMainProperty
								+ "</textarea></td>");
					}
					else
					{
						out.println("<td" + strSecondTD + "><input type=\"text\" name=\"" + strMainNames[0] + "\" class=\"box\" " + strMainProperty + "></td>");
					}
			}
			else
			{
				if (strCtrlType.equals("rate"))
				{
					out.println(
						"<td"
							+ strSecondTD
							+ "><input type=\"text\" name=\""
							+ strMainNames[0]
							+ "\" class=\"tar\" "
							+ strMainProperty
							+ " onKeyDown=\"if(event.keyCode==13) "
							+ sOnKeydown
							+ "\" onKeyUp=\""
							+ sOnKeyUp
							+ "\"> %</td>");
				}
				else
					if (strCtrlType.equals("branch"))
					{
						out.println(
							"<td"
								+ strSecondTD
								+ "><textarea name=\""
								+ strMainNames[0]
								+ "\"  class=\"box\" bgcolor=\"#FF00\"  rows=2 cols=30 onKeyDown=\"if(event.keyCode==13) "
								+ sOnKeydown
								+ "\" onKeyUp=\""
								+ sOnKeyUp
								+ "\">"
								+ strMainProperty
								+ "</textarea></td>");
					}
					else
					{
						out.println(
							"<td"
								+ strSecondTD
								+ "><input type=\"text\" name=\""
								+ strMainNames[0]
								+ "\" class=\"box\" "
								+ strMainProperty
								+ " onKeyDown=\"if(event.keyCode==13) "
								+ sOnKeydown
								+ "\" onKeyUp=\""
								+ sOnKeyUp
								+ "\"></td>");
					}
			}
		}
		catch (Exception exp)
		{
			throw exp;
		}
	}
	/**
	 * 对SQL语句进行处理,如果是完整的查询SQL语句,对所有的"'"字符前加"\".
	 * @param strSQL
	 * @return
	 */
	private static String getSQL(String strSQL)
	{
		StringBuffer sb = new StringBuffer();
		int nIndex = strSQL.indexOf("'");
		while (nIndex != -1)
		{
			String sTemp = strSQL.substring(0, nIndex);
			sb.append(sTemp).append("\\'");
			strSQL = strSQL.substring(nIndex + 1, strSQL.length());
			nIndex = strSQL.indexOf("'");
		}
		return sb.toString();
	}

	/**
	 * 检查是否为查询SQL语句
	 * @param strSQL
	 * @return ture-是,false-否
	 */
	private static boolean isSQL(String strSQL)
	{
		String strTemp = strSQL.toLowerCase();
		int nIndex = strTemp.indexOf("select ");
		if (nIndex == -1)
		{
			return false;
		}
		nIndex = strTemp.indexOf(" from ");
		if (nIndex == -1)
		{
			return false;
		}
		return true;
	}
	/**
	 * 检测数组中的控件名称 和 对应的数据库字段 的数目 是否匹配
	 * @param strNames
	 * @param strValues
	 * @param bIsAllowNull
	 * @throws SecException
	 */
	private static void checkValue(String[] strNames, String[] strValues, boolean bIsAllowNull) throws IException
	{
		if (!bIsAllowNull)
		{
			if (strNames != null && strValues != null)
			{
				if (strNames.length != strValues.length)
				{
					throw new IException(ZOOMERRORMSG);
				}
			}
			return;
		}
		if (strNames == null || strValues == null)
		{
			throw new IException(ZOOMERRORMSG);
		}
		if (strNames.length == 0 || strValues.length == 0)
		{
			throw new IException(ZOOMERRORMSG);
		}
		if (strNames.length != strValues.length)
		{
			throw new IException(ZOOMERRORMSG);
		}
	}

	/**
	 * 检测数组中的控件名称 和 对应的数据库字段 的数目 是否匹配
	 * @param strNames 控件名称
	 * @param strFields 对应数据库字段
	 * @param strValues 对应初始值
	 * @param bIsAllowNull 是否允许为空
	 * @throws SecException
	 */
	private static void checkValue(String[] strNames, String[] strFields, String[] strValues, boolean bIsAllowNull) throws IException
	{
		if (!bIsAllowNull)
		{
			if (strNames != null && strFields != null && strValues != null)
			{
				if (strNames.length != strFields.length || strNames.length != strValues.length || strFields.length != strValues.length)
				{
					throw new IException(ZOOMERRORMSG);
				}
			}
		}
		else
		{
			if (strNames == null || strFields == null || strValues == null)
			{
				throw new IException(ZOOMERRORMSG);
			}
			if (strNames.length == 0 || strFields.length == 0 || strValues.length == 0)
			{
				throw new IException(ZOOMERRORMSG);
			}
			if (strNames.length != strFields.length || strNames.length != strValues.length || strFields.length != strValues.length)
			{
				throw new IException(ZOOMERRORMSG);
			}
		}
	}
	/**
	 * 创建客户放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lClientID 客户ID(初识值)
	 * @param strClientNo 客户编号(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 * @param strRtnClientNameCtrl 返回值（客户名称）对应的控件名
	 */
	public static void createClientCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lClientID,
		String strClientNo,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls,
		String strRtnClientNameCtrl)
	{
		String strMagnifierName = "客户";
		String strMainProperty = " maxlength='30' value='" + strClientNo + "'";
		String strPrefix = "";
		if (strRtnClientNameCtrl == null || strRtnClientNameCtrl.equals(""))
		{
			strRtnClientNameCtrl = "ItIsNotControl";
		}
		String[] strMainNames = { strCtrlName + "Ctrl", strRtnClientNameCtrl };
		String[] strMainFields = { "clientNo", "clientName" };
		//特殊处理
		long lFromClient = 0;
		if (lClientID > 0)
		{
			lFromClient = 1;
		}
		String[] strReturnNames = { strCtrlName, strCtrlName + "FromClient" };
		String[] strReturnFields = { "ClientID", "FromClient" };
		String[] strReturnValues = { String.valueOf(lClientID), String.valueOf(lFromClient)};
		String[] strDisplayNames = { "客户编号", "客户名称"};
		String[] strDisplayFields = { "clientNo", "clientName" };
		int nIndex = 0;
		String strSQL = "getClientSQL(" + lOfficeID + "," + strCtrlName + "Ctrl.value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD,
				false,
				"");
		}
		catch (Exception e)
		{
			Log.print("客户放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}
	/**
	 * 创建用户放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lUserID 用户ID(初识值)
	 * @param strUserName 用户名称(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 */
	public static void createUserCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lUserID,
		String strUserName,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "用户";
		String strMainProperty = " maxlength='30' value='" + strUserName + "'";
		String strPrefix = "";
		String[] strMainNames = { strCtrlName + "Ctrl" };
		String[] strMainFields = { "UserName" };
		String[] strReturnNames = { strCtrlName };
		String[] strReturnFields = { "UserID" };
		String[] strReturnValues = { String.valueOf(lUserID)};
		String[] strDisplayNames = { "用户名称"};
		String[] strDisplayFields = { "UserName" };
		int nIndex = 0;
		String strSQL = "getUserSQL(" + lOfficeID + "," + lCurrencyID + "," + strCtrlName + "Ctrl.value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}



	/**
	 * 创建合同放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lClientID 客户ID(初识值)
	 * @param lContractID 合同ID(初识值)
	 * @param strContractNo 合同号(初识值)
	 * @param lTransactionType 交易类型
	 * (查询条件:由SETTConstant.TransactionType定义，-1 查询所有)
	 * @param lMagnifierType 合同放大境类型
	 * (查询条件: 1 发放;2 收回;)
	 * @param strClientCtrl 客户ID对应的控件名称（查询时关联）
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param strNextControls 下一个（或多个）获得焦点的控件
	 * @param strRtnContractTypeCtrl 返回值（合同类型）对应的控件名
	 * @param strRtnCommissionDealWayCtrl 返回值（手续费处理类型）对应的控件名
	 */
	public static void createContractCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lClientID,
		long lContractID,
		String strContractNo,
		long lTransactionType,
		long lMagnifierType,
		String strClientCtrl,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls,
		String strRtnContractTypeCtrl,
		String strRtnCommissionDealWayCtrl)
	{
		createContractCtrl(
			out,
			lOfficeID,
			lCurrencyID,
			strFormName,
			strCtrlName,
			strTitle,
			lClientID,
			lContractID,
			strContractNo,
			lTransactionType,
			lMagnifierType,
			strClientCtrl,
			strFirstTD,
			strSecondTD,
			strNextControls,
			strRtnContractTypeCtrl,
			"");
	}
	/**
	 * 创建总帐科目放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lGLSubjectID 总帐科目ID(初识值)
	 * @param strGLSubjectNo 总帐科目编号(初识值)
	 * @param lIsleaf 是否末级
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 * @param strRtnGLSubjectTypeCtrl 返回值（总帐科目类型）对应的控件名
	 */
	public static void createGLSubjectCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lGLSubjectID,
		String strGLSubjectNo,
		long lIsleaf,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls,
		String strRtnGLSubjectTypeCtrl)
	{
		String strMagnifierName = "总帐科目";
		String strMainProperty = " size='50' maxlength='30' value='" + strGLSubjectNo + "'";
		String strPrefix = "";


		if (strRtnGLSubjectTypeCtrl == null || strRtnGLSubjectTypeCtrl.equals("")) {
			strRtnGLSubjectTypeCtrl="ItIsNotControl";
		}

		String[] strMainNames = { strCtrlName + "Ctrl", strRtnGLSubjectTypeCtrl };
		String[] strMainFields = { "GLSubjectCode", "GLSubjectType" };

		String[] strReturnNames = { strCtrlName };
		String[] strReturnFields = { "GLSubjectID" };
		String[] strReturnValues = { String.valueOf(lGLSubjectID)};

		String[] strDisplayNames = { "科目代号", "科目名称"};
		String[] strDisplayFields = { "GLSubjectCode", "GLSubjectName" };
		int nIndex = 0;
		long nSubjectType = -1;
		String strSQL = "getGLSubjectSQL(" + lOfficeID + "," + lCurrencyID + "," + strCtrlName + "Ctrl.value," + lIsleaf + ","+nSubjectType+")";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		} catch(Exception e) {
			Log.print("总帐科目放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}

	/**
	 * 创建开户行放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lBranchID 开户行ID(初识值)
	 * @param strBranchName 开户行名称(初识值)
	 * @param lIsSingleBank 是否单边帐银行（1，是；其它，不是）
	 * @param strAccountCtrl 帐户ID对应控件的名称（查询时关联）
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param strNextControls 下一个（或多个）获得焦点的控件
	 * @param strRtnBankAccountNoCtrl 返回值（银行帐户编号）对应的控件名
	 * @param strRtnBankNoCtrl 返回值（开户行编号）对应的控件名
	 */
	public static void createBranchCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lBranchID,
		String strBranchName,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls,
		String strRtnBankAccountNoCtrl,
		String strRtnBankNoCtrl)
	{
		String strMagnifierName = "开户行";
		String strMainProperty = strBranchName;
		String strPrefix = "";
		if (strRtnBankAccountNoCtrl == null || strRtnBankAccountNoCtrl.equals(""))
		{
			strRtnBankAccountNoCtrl = "ItIsNotControl";
		}
		if (strRtnBankNoCtrl == null || strRtnBankNoCtrl.equals(""))
		{
			strRtnBankNoCtrl = "ItIsNotControl";
		}
		String[] strMainNames = { strCtrlName + "Ctrl", strRtnBankAccountNoCtrl, strRtnBankNoCtrl };
		String[] strMainFields = { "BranchName", "BranchAccountNo", "BranchNo" };
		String[] strReturnNames = { strCtrlName };
		String[] strReturnFields = { "BranchID" };
		String[] strReturnValues = { String.valueOf(lBranchID)};
		String[] strDisplayNames = { "开户行编号", "开户行名称"};
		String[] strDisplayFields = { "BranchNo", "BranchName" };
		int nIndex = 0;
		String strSQL = "getBranchSQL(" + lOfficeID + "," + lCurrencyID + ",-1,-1," + strCtrlName + "Ctrl.value)";

		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print("开户行放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}



	/**
	 * 创建开户行放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lBranchID 开户行ID(初识值)
	 * @param strBranchName 开户行名称(初识值)
	 * @param lIsSingleBank 是否单边帐银行（1，是；其它，不是）
	 * @param strAccountCtrl 帐户ID对应控件的名称（查询时关联）
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param strNextControls 下一个（或多个）获得焦点的控件
	 * @param strRtnBankAccountNoCtrl 返回值（银行帐户编号）对应的控件名
	 * @param strRtnBankNoCtrl 返回值（开户行编号）对应的控件名
	 */
	public static void createBranchCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lBranchID,
		String strBranchName,
		long lIsSingleBank,
		String strAccountCtrl,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls,
		String strRtnBankAccountNoCtrl,
		String strRtnBankNoCtrl)
	{
		String strMagnifierName = URLEncoder.encode("开户行");
		String strMainProperty = strBranchName;
		String strPrefix = "";
		if (strRtnBankAccountNoCtrl == null || strRtnBankAccountNoCtrl.equals(""))
		{
			strRtnBankAccountNoCtrl = "ItIsNotControl";
		}
		if (strRtnBankNoCtrl == null || strRtnBankNoCtrl.equals(""))
		{
			strRtnBankNoCtrl = "ItIsNotControl";
		}
		String[] strMainNames = { strCtrlName + "Ctrl", strRtnBankAccountNoCtrl, strRtnBankNoCtrl };
		String[] strMainFields = { "BranchName", "BranchAccountNo", "BranchNo" };
		String[] strReturnNames = { strCtrlName };
		String[] strReturnFields = { "BranchID" };
		String[] strReturnValues = { String.valueOf(lBranchID)};
		String[] strDisplayNames = { URLEncoder.encode("开户行编号"), URLEncoder.encode("开户行名称")};
		String[] strDisplayFields = { "BranchNo", "BranchName" };
		int nIndex = 0;
		String strSQL = "";
		if (strAccountCtrl != null && !strAccountCtrl.trim().equals(""))
		{
			strSQL = "getBranchSQL(" + lOfficeID + "," + lCurrencyID + "," + lIsSingleBank + "," + strAccountCtrl + ".value," + strCtrlName + "Ctrl.value)";
		}
		else
		{
			strSQL = "getBranchSQL(" + lOfficeID + "," + lCurrencyID + "," + lIsSingleBank + ",-1," + strCtrlName + "Ctrl.value)";
		}
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD,
				false,
				"branch");
		}
		catch (Exception e)
		{
			Log.print("开户行放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}

	/**
	 * 创建摘要放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lAbstractID 摘要ID(初识值)
	 * @param strAbstractDesc 摘要描述(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param strNextControls 下一个（或多个）获得焦点的控件
	 */
	public static void createAbstractCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lAbstractID,
		String strAbstractDesc,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "摘要";
		String strMainProperty = " size='40' value='" + strAbstractDesc + "'";
		if (strNextControls != null && strNextControls.length > 0)
		{
			strMainProperty = strMainProperty + " onfocus=\"nextfield='" + strNextControls[0] + "'\"";
		}
		String strPrefix = "";
		String[] strMainNames = { strCtrlName + "Ctrl" };
		String[] strMainFields = { "AbstractDesc" };
		String[] strReturnNames = { strCtrlName };
		String[] strReturnFields = { "AbstractID" };
		String[] strReturnValues = { String.valueOf(lAbstractID)};
		String[] strDisplayNames = { "摘要代号", "摘要描述"};
		String[] strDisplayFields = { "AbstractCode", "AbstractDesc" };
		int nIndex = 1;
		String strSQL = "getAbstractSQL(" + lOfficeID + "," + strCtrlName + "Ctrl.value)";
		boolean blnIsOptional = true;
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print("摘要放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}
	/**
	 * 创建放款通知单放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lContractID 合同ID(初识值)
	 * @param lPayFormID 放款通知单ID(初识值)
	 * @param strPayFormNo 放款通知单号(初识值)
	 * @param lPayFormTypeID 放款通知单类型
	 * (查询条件:1,信托；2，委托；3，银团；4,全部(包括贴现);0,全部)
	 * @param lTypeID 放款通知单使用条件(内部状态：
	 * 		0，显示全部；
	 * 		1，信托/委托/银团发放――业务处理使用；
	 * 		2，信托/委托/银团发放――业务复核使用；
	 * 		3，信托/委托收回――业务处理使用；
	 * 		4，信托/委托收回――业务复核使用；
	 * 		5，交易费用/特殊业务――业务处理使用；
	 * 		6，交易费用/特殊业务――业务复核使用；
	 * 		7，银团贷款收回――业务处理使用；
	 * 		8，银团贷款收回――业务复核使用；）
	 * @param strContractCtrl 合同ID对应的控件名称（查询时关联）
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param strNextControls 下一个（或多个）获得焦点的控件
	 * @param strRtnStartDateCtrl 返回值（起始日期）对应的控件名
	 * @param strRtnEndDateCtrl 返回值（到期日期）对应的控件名
	 * @param strRtnSubAccountIDCtrl 返回值（子帐户ID）对应的控件名
	 * @param strRtnBalanceCtrl 返回值（放款单余额）对应的控件名
	 * @param strRtnIsHasFreeCtrl 返回值（是否有免还通知单：1，是；2，否）对应的控件名
	 */

	/**
	 * 创建总帐类类型放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lGLTypeID 总帐类类型ID(初识值)
	 * @param strGLTypeDesc 总帐类类型描述(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 * @param strRtnGLTypeNoCtrl 返回值（总帐类类型编号）对应的控件名
	 * @param strRtnSubjectNoCtrl 返回值（总帐类对应科目）对应的控件名
	 */
	public static void createGeneralLedgerTypeCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lGLTypeID,
		String strGLTypeDesc,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls,
		String strRtnGLTypeNoCtrl,
		String strRtnSubjectNoCtrl)
	{
		String strMagnifierName = "总帐类型";
		String strMainProperty = " maxlength='30' value='" + strGLTypeDesc + "'";
		String strPrefix = "";
		if (strRtnGLTypeNoCtrl == null || strRtnGLTypeNoCtrl.equals(""))
		{
			strRtnGLTypeNoCtrl = "ItIsNotControl";
		}
		if (strRtnSubjectNoCtrl == null || strRtnSubjectNoCtrl.equals(""))
		{
			strRtnSubjectNoCtrl = "ItIsNotControl";
		}
		String[] strMainNames = { strCtrlName + "Ctrl", strRtnGLTypeNoCtrl, strRtnSubjectNoCtrl };
		String[] strMainFields = { "GLName", "GLCode", "SubjectCode" };
		String[] strReturnNames = { strCtrlName };
		String[] strReturnFields = { "GLID" };
		String[] strReturnValues = { String.valueOf(lGLTypeID)};
		String[] strDisplayNames = { "总帐编号", "总帐名称"};
		String[] strDisplayFields = { "GLCode", "GLName" };
		int nIndex = 0;
		String strSQL = "getGLTypeSQL(" + lOfficeID + "," + lCurrencyID + "," + strCtrlName + "Ctrl.value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print("放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}
	/**
	 * 创建贴现汇票放大镜(银行承兑汇票号)
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lDiscountCredenceID 贴现凭证ID(初识值)
	 * @param lDiscountBillID 贴现汇票ID(初识值)
	 * @param strDiscountBillNo 贴现汇票编号(初识值)
	 * @param strDiscountCredenceCtrl 贴现凭证ID对应的控件名称（查询时关联）
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param strNextControls 下一个（或多个）获得焦点的控件
	 * @param strRtnDiscountDateCtrl 返回值（贴现票据贴现日）对应的控件名
	 * @param strRtnEndDateCtrl 返回值（贴现票据到期日期）对应的控件名
	 * @param strRtnBillAmountCtrl1 返回值（票面金额）对应的控件名
	 * @param strRtnBillAmountCtrl2 返回值（票面金额）对应的控件名
	 * @param strRtnDiscountAmountCtrl 返回值（实际贴现金额）对应的控件名
	 * @param strRtnDelayInterestCtrl 返回值（罚息）对应的控件名
	 */
	public static void createDiscountBillCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lDiscountCredenceID,
		long lDiscountBillID,
		String strDiscountBillNo,
		String strDiscountCredenceCtrl,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls,
		String strRtnDiscountDateCtrl,
		String strRtnEndDateCtrl,
		String strRtnBillAmountCtrl1,
		String strRtnBillAmountCtrl2,
		String strRtnDiscountAmountCtrl,
		String strRtnDelayInterestCtrl)
	{
		createDiscountBillCtrl(
				out,
				lOfficeID,
				lCurrencyID,
				strFormName,
				strCtrlName,
				strTitle,
				lDiscountCredenceID,
				lDiscountBillID,
				strDiscountBillNo,
				"",
				strDiscountCredenceCtrl,
				strFirstTD,
				strSecondTD,
				strNextControls,
				strRtnDiscountDateCtrl,
				strRtnEndDateCtrl,
				strRtnBillAmountCtrl1,
				strRtnBillAmountCtrl2,
				strRtnDiscountAmountCtrl,
				strRtnDelayInterestCtrl,
				"",
				"",
				"",
				"");
	}
	/**
	 * 表外业务
	 * 创建贴现汇票放大镜(银行承兑汇票号)
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lDiscountCredenceID 贴现凭证ID(初识值)
	 * @param lDiscountBillID 贴现汇票ID(初识值)
	 * @param strDiscountBillNo 贴现汇票编号(初识值)
	 * @param strDiscountContractCtrl 贴现合同ID对应的控件名称（查询时关联）
	 * @param strDiscountCredenceCtrl 贴现凭证ID对应的控件名称（查询时关联）
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param strNextControls 下一个（或多个）获得焦点的控件
	 * @param strRtnDiscountDateCtrl 返回值（贴现票据贴现日）对应的控件名
	 * @param strRtnEndDateCtrl 返回值（贴现票据到期日期）对应的控件名
	 * @param strRtnBillAmountCtrl1 返回值（票面金额）对应的控件名
	 * @param strRtnBillAmountCtrl2 返回值（票面金额）对应的控件名
	 * @param strRtnDiscountAmountCtrl 返回值（实际贴现金额）对应的控件名
	 * @param strRtnDelayInterestCtrl 返回值（罚息）对应的控件名
	 * @param strRtnIsLocalIDCtrl 返回值（是否本地号）对应的控件名
	 * @param strRtnIsLocalIDDescCtrl 返回值（是否本地）对应的控件名
	 * @param strRtnAcceptPOTypeIDCtrl 返回值（汇票类型号）对应的控件名
	 * @param strRtnAcceptPOTypeIDDescCtrl 返回值（汇票类型）对应的控件名
	 */
	public static void createDiscountBillCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lDiscountCredenceID,
		long lDiscountBillID,
		String strDiscountBillNo,
		String strDiscountContractCtrl,
		String strDiscountCredenceCtrl,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls,
		String strRtnDiscountDateCtrl,
		String strRtnEndDateCtrl,
		String strRtnBillAmountCtrl1,
		String strRtnBillAmountCtrl2,
		String strRtnDiscountAmountCtrl,
		String strRtnDelayInterestCtrl,
		String strRtnIsLocalIDCtrl,
		String strRtnIsLocalIDDescCtrl,
		String strRtnAcceptPOTypeIDCtrl,
		String strRtnAcceptPOTypeIDDescCtrl)
	{
		String strMagnifierName = "贴现票据";
		String strMainProperty = " maxlength='30' value='" + strDiscountBillNo + "'";
		String strPrefix = "";
		if (strRtnDiscountDateCtrl == null || strRtnDiscountDateCtrl.equals(""))
		{
			strRtnDiscountDateCtrl = "ItIsNotControl";
		}
		if (strRtnEndDateCtrl == null || strRtnEndDateCtrl.equals(""))
		{
			strRtnEndDateCtrl = "ItIsNotControl";
		}
		if (strRtnBillAmountCtrl1 == null || strRtnBillAmountCtrl1.equals(""))
		{
			strRtnBillAmountCtrl1 = "ItIsNotControl";
		}
		if (strRtnBillAmountCtrl2 == null || strRtnBillAmountCtrl2.equals(""))
		{
			strRtnBillAmountCtrl2 = "ItIsNotControl";
		}
		if (strRtnDiscountAmountCtrl == null || strRtnDiscountAmountCtrl.equals(""))
		{
			strRtnDiscountAmountCtrl = "ItIsNotControl";
		}
		if (strRtnDelayInterestCtrl == null || strRtnDelayInterestCtrl.equals(""))
		{
			strRtnDelayInterestCtrl = "ItIsNotControl";
		}

		if (strRtnIsLocalIDCtrl == null || strRtnIsLocalIDCtrl.equals(""))
		{
			strRtnIsLocalIDCtrl = "ItIsNotControl";
		}
		if (strRtnIsLocalIDDescCtrl == null || strRtnIsLocalIDDescCtrl.equals(""))
		{
			strRtnIsLocalIDDescCtrl = "ItIsNotControl";
		}
		if (strRtnAcceptPOTypeIDCtrl == null || strRtnAcceptPOTypeIDCtrl.equals(""))
		{
			strRtnAcceptPOTypeIDCtrl = "ItIsNotControl";
		}
		if (strRtnAcceptPOTypeIDDescCtrl == null || strRtnAcceptPOTypeIDDescCtrl.equals(""))
		{
			strRtnAcceptPOTypeIDDescCtrl = "ItIsNotControl";
		}
		String strContractIDCtrlTemp = strDiscountContractCtrl;
		String strContractNOCtrl =strContractIDCtrlTemp+"Ctrl";
		String strCredenceIDCtrlTemp = strDiscountCredenceCtrl;
		String strCredenceNOCtrl = strCredenceIDCtrlTemp + "Ctrl";
		if (strContractIDCtrlTemp == null || strContractIDCtrlTemp.equals(""))
		{
			strContractIDCtrlTemp = "ItIsNotControl";
			strContractNOCtrl = "ItIsNotControl";
		}
		if (strCredenceIDCtrlTemp == null || strCredenceIDCtrlTemp.equals(""))
		{
			strCredenceIDCtrlTemp = "ItIsNotControl";
			strCredenceNOCtrl = "ItIsNotControl";
		}
		String[] strMainNames =
			{ strCtrlName + "Ctrl",strContractIDCtrlTemp,strContractNOCtrl,strCredenceIDCtrlTemp,strCredenceNOCtrl, strRtnDiscountDateCtrl, strRtnEndDateCtrl, strRtnBillAmountCtrl1, strRtnBillAmountCtrl2, strRtnDiscountAmountCtrl, strRtnDelayInterestCtrl,strRtnIsLocalIDCtrl,strRtnIsLocalIDDescCtrl,strRtnAcceptPOTypeIDCtrl,strRtnAcceptPOTypeIDDescCtrl };
		String[] strMainFields = { "BillNo","ContractID","ContractNO","CredenceID","CredenceNO", "dDate", "EndDate", "Amount", "Amount", "CheckAmount", "DelayInterest","IsLocalID","Desc1","AcceptPOTypeID","Desc2" };
		String[] strReturnNames = { strCtrlName };
		String[] strReturnFields = { "BillID"};
		String[] strReturnValues = { String.valueOf(lDiscountBillID) };
		String[] strDisplayNames = { "银行承兑汇票号", "票面金额", "贴现日", "票据到期日期"};
		String[] strDisplayFields = { "BillNo", "Amount", "dDate", "EndDate" };
		int nIndex = 0;
		//获得状态数组
		StringBuffer sbSQL = new StringBuffer(64);
		sbSQL.append("getDiscountBillSQL(");
		sbSQL.append(lOfficeID);
		sbSQL.append(",");
		sbSQL.append(lCurrencyID);
		sbSQL.append(",");
		if (strDiscountContractCtrl != null && !strDiscountContractCtrl.trim().equals(""))
		{
			sbSQL.append(strDiscountContractCtrl + ".value");
		}
		else
		{
			sbSQL.append("-1");
		}
		sbSQL.append(",");
		if (strDiscountCredenceCtrl != null && !strDiscountCredenceCtrl.trim().equals(""))
		{
			sbSQL.append(strDiscountCredenceCtrl + ".value");
		}
		else
		{
			sbSQL.append("-1");
		}
		sbSQL.append(",");
		sbSQL.append(strCtrlName);
		sbSQL.append("Ctrl.value)");
		//Log.print(sbSQL.toString());
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				sbSQL.toString(),
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			//e.printStackTrace();
			Log.print("放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}

	/**
	 * 创建票据放大镜
	 * @param out
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种ID
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lBillID 票据ID(初识值)
	 * @param strBillCode 票据编号(初识值)
	 * @param lStatusID 票据StatusID
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 */
	public static void createBillCtrl(
		JspWriter out,
		long lOfficeID,
		long lCurrencyID,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lBillID,
		String strBillCode,
		long lStatusID,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "票据";
		String strMainProperty = " maxlength='30' value='" + strBillCode + "'";
		String strPrefix = "";
		String[] strMainNames = { strCtrlName };
		String[] strMainFields = { "sCode" };
		String[] strReturnNames = { "BillID" };
		String[] strReturnFields = { "ID" };
		String[] strReturnValues = { String.valueOf(lBillID)};
		String[] strDisplayNames = { "票据编号"};
		String[] strDisplayFields = { "sCode" };
		int nIndex = 0;
		String strSQL = "getBillSQL(" + lOfficeID + "," + lCurrencyID + "," + lStatusID + "," + strCtrlName + ".value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}
	/**
	 * 创建黑名单放大镜
	 * @param out
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lBlackListID 黑名单ID(初识值)
	 * @param strBillCode 编码(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 */
	public static void createBlackListCtrl(
		JspWriter out,
		String strFormName,
		String strCtrlName,
		String strTitle,
		long lBlackListID,
		String strBillCode,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "黑名单";
		String strMainProperty = " maxlength='30' value='" + strBillCode + "'";
		String strPrefix = "";
		String[] strMainNames = { strCtrlName + "Ctrl" };
		String[] strMainFields = { "BillCode" };
		String[] strReturnNames = { strCtrlName };
		String[] strReturnFields = { "ID" };
		String[] strReturnValues = { String.valueOf(lBlackListID)};
		String[] strDisplayNames = { "票据号码","票据类型"};
		String[] strDisplayFields = { "BillCode","name" };
		int nIndex = 0;
		String strSQL = "getBlackListSQL( -1," + strCtrlName + "Ctrl.value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}
	/**
	 * 创建黑名单放大镜
	 * @param out
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lBlackListID 黑名单ID(初识值)
	 * @param strBillCode 编码(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 */
	public static void createBlackListCtrl(
		JspWriter out,
		String strFormName,
		String strCtrlName,
		String strReturnName,
		String strTitle,
		long lBillTypeID,
		long lBlackListID,
		String strBillCode,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "黑名单";
		String strMainProperty = " maxlength='30' value='" + strBillCode + "'";
		String strPrefix = "";
		String[] strMainNames = { strCtrlName };
		String[] strMainFields = { "BillCode" };
		String[] strReturnNames = { strReturnName };
		String[] strReturnFields = { "ID" };
		String[] strReturnValues = { String.valueOf(lBlackListID)};
		String[] strDisplayNames = { "票据号码","票据类型"};
		String[] strDisplayFields = { "BillCode","name" };
		int nIndex = 0;
		String strSQL = "getBlackListSQL("+ lBillTypeID + "," + strCtrlName + ".value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}

	/**
	 * 创建票据类型放大镜
	 * @param out
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lBlackListID 黑名单ID(初识值)
	 * @param strBillCode 编码(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 */
	public static void createBillTypeCtrl(
		JspWriter out,
		String strFormName,
		String strCtrlName,
		String strReturnName,
		String strTitle,
		long lOfficeID,
		long lCurrencyID,
		long lBillTypeID,
		String strBillTypeCode,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "票据类型";
		String strMainProperty = " maxlength='30' value='" + strBillTypeCode + "'";
		String strPrefix = "";
		String[] strMainNames = { strCtrlName };
		String[] strMainFields = { "code" };
		String[] strReturnNames = { strReturnName };
		String[] strReturnFields = { "ID" };
		String[] strReturnValues = { String.valueOf(lBillTypeID)};
		String[] strDisplayNames = { "票据类型号码","票据类型名称"};
		String[] strDisplayFields = { "code","name" };
		int nIndex = 0;
		String strSQL = "getBillTypeSQL("+ lOfficeID + "," + lCurrencyID + "," + strCtrlName + ".value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}
	/**
	 * 创建空白凭证交易编号放大镜
	 * @param out
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strTitle 放大镜描述
	 * @param lBlackListID 黑名单ID(初识值)
	 * @param strBillCode 编码(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 */
	public static void createBlankTransCtrl(
		JspWriter out,
		String strFormName,
		String strCtrlName,
		String strReturnName,
		String strTitle,
		long lOfficeID,
		long lCurrencyID,
		long lTransTypeID,
		long lBlankTransID,
		String strBlankTransCode,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "空白凭证交易";
		String strMainProperty = " maxlength='30' value='" + strBlankTransCode + "'";
		String strPrefix = "";
		String[] strMainNames = { strCtrlName };
		String[] strMainFields = { "transCode" };
		String[] strReturnNames = { strReturnName };
		String[] strReturnFields = { "id" };
		String[] strReturnValues = { String.valueOf(lBlankTransID)};
		String[] strDisplayNames = { "交易号"};
		String[] strDisplayFields = { "transCode" };
		int nIndex = 0;
		String strSQL = "getBlankTransSQL("+ lOfficeID + "," + lCurrencyID + ","+ lTransTypeID + "," + strCtrlName + ".value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}

	/**
	 * 创建空白凭证票据编号放大镜
	 * @param out
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strReturnName 放大镜返回的隐藏域名称
	 * @param strTitle 放大镜描述
	 * @param lBlackListID 黑名单ID(初识值)
	 * @param strBillCode 编码(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 */
	public static void createBlankVoucherCtrl(
		JspWriter out,
		String strFormName,
		String strCtrlName,
		String strReturnName,
		String strTitle,
		long lOfficeID,
		long lCurrencyID,
		String sBillType,
		String sStatusID,
		long lBlankVoucherID,
		String strBlankVoucherCode,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "空白凭证票据";
		String strMainProperty = " maxlength='30' value='" + strBlankVoucherCode + "'";
		String strPrefix = "";
		String[] strMainNames = { strCtrlName };
		String[] strMainFields = { "Code" };
		String[] strReturnNames = { strReturnName };
		String[] strReturnFields = { "id" };
		String[] strReturnValues = { String.valueOf(lBlankVoucherID)};
		String[] strDisplayNames = { "票据号"};
		String[] strDisplayFields = { "Code" };
		int nIndex = 0;
		String strSQL = "getBlankSQL("+ lOfficeID + "," + lCurrencyID + ",'" + sStatusID + "'," + strFormName +"."+ sBillType + ".value," + strFormName + "." + strCtrlName + ".value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}

	/**
	 * 创建空白凭证票据编号放大镜
	 * @param out
	 * @param strFormName 表单域名称
	 * @param strCtrlName 放大镜主控件名称
	 * @param strReturnNames 放大镜返回的隐藏域名称
	 * @param strReturnFields 放大镜返回的对应数据库字段
	 * @param strReturnValues 放大镜默认初始值
	 * @param strTitle 放大镜描述
	 * @param lBlackListID 黑名单ID(初识值)
	 * @param strBillCode 编码(初识值)
	 * @param strFirstTD 第一个TD的属性
	 * @param strSecondTD 第二个TD的属性
	 * @param sNextControlsClient 下一个（或多个）获得焦点的控件
	 */
	public static void createBlankVoucherCtrl(
		JspWriter out,
		String strFormName,
		String strCtrlName,
		String[] strMainNames,
		String[] strMainFields,
		String strReturnName,
		String strTitle,
		long lOfficeID,
		long lCurrencyID,
		String sBillType,
		String sStatusID,
		long lBlankVoucherID,
		String strBlankVoucherCode,
		String strFirstTD,
		String strSecondTD,
		String[] strNextControls)
	{
		String strMagnifierName = "空白凭证票据";
		String strMainProperty = " maxlength='30' value='" + strBlankVoucherCode + "'";
		String strPrefix = "";
		String[] strReturnNames = { strReturnName };
		String[] strReturnFields = { "id" };
		String[] strReturnValues = { String.valueOf(lBlankVoucherID)};
		String[] strDisplayNames = { "票据号"};
		String[] strDisplayFields = { "Code" };
		int nIndex = 0;
		String strSQL = "getBlankBillSQL("+ lOfficeID + "," + lCurrencyID + ",'" + sStatusID + "'," + strFormName +"."+ sBillType + ".value," + strFormName + "." + strCtrlName + ".value)";
		try
		{
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndex,
				strMainProperty,
				strSQL,
				strNextControls,
				strTitle,
				strFirstTD,
				strSecondTD);
		}
		catch (Exception e)
		{
			Log.print(strMagnifierName + "放大镜[" + strCtrlName + "]异常：" + e.toString());
		}
	}
	/**
	 * 显示审批流放大镜
	 * @param lOfficeID 办事处ID
	 * @param lCurrencyID 币种
	 * @param out
	 * @param lApprovalID 审批流ID
	 * @param strFormName 主页面表单名称
	 * @param strControlName 主页面控件名称 
	 * @param strPrefix 控件名称前缀
	 * @param strMainProperty 放大镜栏位属性
	 * @param strReturnName 放大镜隐含返回值
	 * @param strSQL 放大镜查询SQL语句
	 * @param strNextControls 设置下一个焦点
	 * @throws Exception
	 */
	public static void CreateApprovalSettingCtrl(long lOfficeID, long lCurrencyID, JspWriter out, long lApprovalID, String strFormName, String strControlName, String strPrefix, String strMainProperty, String strReturnName, String[] strNextControls) throws Exception
	{
		try
		{
			//输出SQL到页面
			out.println("<script language=\"javascript\">");
			out.println("/*====================" + URLEncoder.encode("显示审批流放大镜") + "=================*/");
			out.println("function " + strPrefix + "getApprovalSettingSQL(nOfficeID,lApprovalID,sname)");
			out.println("{");
			out.println("	var sql = \"select ID, sName \";");
			out.println("	sql += \" from loan_approvalSetting \";");
			out.println("	sql += \" where nStatusID = 2 \";");
			out.println(" ");
			out.println("   if (nOfficeID > 0)");
			out.println("	{");
			out.println("		sql += \" and nOfficeID = \" + nOfficeID; ");
			out.println("	}");
			out.println("   if (lApprovalID > 0)");
			out.println("	{");
			out.println("		sql += \" and ID = \" + lApprovalID; ");
			out.println("	}");
			out.println("   if (sname != null && sname != \"\")");
			out.println("   {");
			out.println("       sql += \" and sname like '%\" + sname + \"%'\"");
			out.println("   }");
			out.println("	return sql;");
			out.println("}");
			out.println("</SCRIPT> ");
			String strMagnifierName = "审批流";
			String[] strMainNames = { strControlName };
			String[] strMainFields = { "sName" };
			if(strReturnName.equals(""))
			{
				strReturnName = "hidApprovalID";
			}
			String[] strReturnNames = { strReturnName };
			String[] strReturnFields = { "ID" };
			String[] strReturnValues = { "-1" };
			String[] strDisplayNames = { "审批流编号", "审批流名称" };
			String[] strDisplayFields = { "ID", "sName" };
			int nIndexOffice = 0;
			String name = DataFormat.toChinese(strFormName+"."+strControlName+".value");
			String strSQL = strPrefix + "getApprovalSettingSQL(" + lOfficeID + ","  + lApprovalID + "," + name + ")";
						
			BILLMagnifier.showZoomCtrl(
				out,
				strMagnifierName,
				strFormName,
				strPrefix,
				strMainNames,
				strMainFields,
				strReturnNames,
				strReturnFields,
				strReturnValues,
				strDisplayNames,
				strDisplayFields,
				nIndexOffice,
				strMainProperty,
				strSQL,
				strNextControls,
				strMagnifierName,
				"",
				"");
		}
		catch (Exception exp)
		{
			throw exp;
		}
	}


}
