/* Generated by Together */

package com.iss.itreasury.bill.blankvoucher.bizlogic;

import java.rmi.RemoteException;
import java.sql.Timestamp;
import java.util.Collection;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.iss.itreasury.bill.actiontracer.bizlogic.BillTraceBean;
import com.iss.itreasury.bill.actiontracer.dataentity.TracingInfo;
import com.iss.itreasury.bill.actiontracer.dataentity.TransTracingInfo;
import com.iss.itreasury.bill.blankvoucher.dao.BlankExchangeDAO;
import com.iss.itreasury.bill.blankvoucher.dao.BlankRegisterDAO;
import com.iss.itreasury.bill.blankvoucher.dao.BlankReturnDAO;
import com.iss.itreasury.bill.blankvoucher.dao.BlankTransactionDAO;
import com.iss.itreasury.bill.blankvoucher.dao.BlankUseDAO;
import com.iss.itreasury.bill.blankvoucher.dao.BlankVoucherDAO;
import com.iss.itreasury.bill.blankvoucher.dao.BlankWriteOffDAO;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankCheckInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankExchangeInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankRegisterInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankReturnInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankTransQueryInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankTransactionInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankUseInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankVoucherInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankVoucherQueryInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankWriteOffInfo;
import com.iss.itreasury.bill.util.BILLConstant;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.settlement.util.UtilOperation;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.Log4j;

/**
 * @ejbHome com.iss.itreasury.bill.blankvoucher.bizlogic.BlankVoucherHome
 * @ejbRemote com.iss.itreasury.bill.blankvoucher.bizlogic.BlankVoucher
 * @ejbDontSynchronizeNames
 */
public class BlankVoucherEJB implements SessionBean {
	
	private Log4j logger = new Log4j(Constant.ModuleType.BILL, this);
	
    private SessionContext ctx;

    public void setSessionContext(SessionContext context) throws RemoteException, EJBException {
        ctx = context;
    }

    public void ejbActivate() throws EJBException {
    }

    public void ejbPassivate() throws EJBException {
    }

    public void ejbRemove() throws EJBException {
    }

    public void ejbCreate() throws CreateException, EJBException {
        // Write your code here
    }

    /**
     *增加一条交易信息 1.根据info.getTransTypeID()来判断具体的交易类型，把info.getBlankTransDetailInfo()强制转换成该交易类型信息 2.调用相应的交易类型DAO保存交易详细信息
     * 3.调用BlankTransactionDAO保存交易信息
     * 4.记录交易操作记录
     * @param BlankTransactionInfo	交易信息
     * @return long 新增的交易的ID
     * @throws BillException
     * @ejbTransactionAttribute <bean default>
     */
    public long addTrans(BlankTransactionInfo info) throws BillException, RemoteException {
    	long lReturn =-1;
    	try
		{
    		logger.debug(UtilOperation.dataentityToString(info));
    		long lDetailId = -1;
    		//保存交易详细记录
    		if (info.getTransTypeID()== BILLConstant.BlankTransctionType.REGISTER)
    		{
    			BlankRegisterInfo brInfo = (BlankRegisterInfo) info.getDetailInfo();
    			BlankRegisterDAO brDao = new BlankRegisterDAO();
    			lDetailId = brDao.registerBlank(brInfo);
    		}
    		else if(info.getTransTypeID()== BILLConstant.BlankTransctionType.USE)//领用
    		{
    			BlankUseInfo detailInfo =(BlankUseInfo) info.getDetailInfo();
    			BlankUseDAO buDao = new BlankUseDAO();
    			lDetailId = buDao.useBlank(detailInfo);
    		}
    		else if(info.getTransTypeID()== BILLConstant.BlankTransctionType.EXCHANGE)//换发
    		{
    			BlankExchangeInfo detailInfo = (BlankExchangeInfo) info.getDetailInfo();
    			BlankExchangeDAO beDao = new BlankExchangeDAO();
    			lDetailId = beDao.exchangeBlank(detailInfo);
    		}
    		else if(info.getTransTypeID()== BILLConstant.BlankTransctionType.WRITEOFF)//注销
    		{
    			BlankWriteOffInfo detailInfo =(BlankWriteOffInfo) info.getDetailInfo();
    			BlankWriteOffDAO bwDao = new BlankWriteOffDAO();
    			BlankVoucherDAO bvDao = new BlankVoucherDAO();
    			//计算凭证张数并检查凭证状态是否合法
    			long billCount = bvDao.getBillCount(detailInfo.getBillCodeStart(),detailInfo.getBillCodeEnd(),BILLConstant.TraceAction.REGISTEROFF,-1);
    			detailInfo.setBillNumber(billCount);
    			//添加注销信息
    			lDetailId = bwDao.add(detailInfo);
    			logger.info("===========添加注销信息完毕===========");
    			
    		} 
    		else if(info.getTransTypeID()== BILLConstant.BlankTransctionType.RETURN)//退票
    		{
    			BlankReturnInfo detailInfo =(BlankReturnInfo) info.getDetailInfo();
    			BlankReturnDAO brDao = new BlankReturnDAO();
    			BlankVoucherDAO bvDao = new BlankVoucherDAO();
    			bvDao.checkBillStatus(detailInfo.getBillID(),BILLConstant.TraceAction.RETURN);
    			//检查密码是否正确
				bvDao.checkBillPass(detailInfo.getBillID(),detailInfo.getBillPassword());
    			//添加注销信息
    			lDetailId = brDao.add(detailInfo);
    			logger.info("===========添加退票信息完毕===========");
    			
    		} 
    		//保存交易信息
        	if (lDetailId > 0)
        	{
				BlankTransactionDAO btDao = new BlankTransactionDAO();
				//String strNewCode = btDao.getNewCode(BILLConstant.BlankTransctionType.REGISTER);
				//changed by 神龙骑士。
				String strNewCode=btDao.getNewTransactionNo(info.getOfficeID(),info.getCurrencyID());
				info.setStatusID(BILLConstant.BlankTransctionStatus.SUBMIT);
				info.setTransCode(strNewCode);
				info.setTransDetailID(lDetailId);
				lReturn = btDao.add(info);
        	}
        	logger.info("===========保存交易信息完毕===========");
        	
			//登记日志
			TransTracingInfo ttInfo = new TransTracingInfo();
			BillTraceBean bTracingB = new BillTraceBean();
			long lAction = -1;
			if (info.getTransTypeID() == BILLConstant.BlankTransctionType.REGISTER)
			{
				lAction =BILLConstant.TraceAction.REGISTER;
			}
			else if (info.getTransTypeID() == BILLConstant.BlankTransctionType.USE)
			{
				lAction =BILLConstant.TraceAction.RECEIVE;
			}
			else if (info.getTransTypeID() == BILLConstant.BlankTransctionType.EXCHANGE)
			{
				lAction =BILLConstant.TraceAction.EXCHANGE;
			}
			else if (info.getTransTypeID() == BILLConstant.BlankTransctionType.RETURN)
			{
				lAction =BILLConstant.TraceAction.RETURN;
			}
			else if (info.getTransTypeID() == BILLConstant.BlankTransctionType.WRITEOFF)
			{
				lAction =BILLConstant.TraceAction.REGISTEROFF;
			}
			ttInfo.setActionID(lAction);
			ttInfo.setBillModuleID(BILLConstant.TraceModule.BLANKVOUCHER);
			ttInfo.setDetailID(lReturn);
			ttInfo.setOperateDate(info.getInputDate());
			ttInfo.setOperatorID(info.getInputUserID());
			ttInfo.setRemark("新增交易成功！");
			bTracingB.writeTransLog(ttInfo);
			logger.info("===========登记日志完毕===========");
		}
    	catch (ITreasuryDAOException e)
		{
    		e.printStackTrace();
    		throw new BillException("Bill_E012",e,ctx);
    	}
    	return lReturn;
    }

    
    /**
     * 保存一条交易信息 1.判断该交易是否可被当前操作人修改 2.根据info.getTransTypeID()来判断具体的交易类型，把info.getBlankTransDetailInfo()强制转换成该交易类型信息
     * 3.调用相应的交易类型DAO保存交易详细信息 4.调用BlankTransactionDAO保存交易信息
     * 记录交易操作记录
     * @param BlankTransactionInfo	交易信息
     * @return long 交易的ID
     * @throws BillException
     */
    public long updateTrans(BlankTransactionInfo info) throws BillException, RemoteException {
    	long lReturn = -1;
    	lReturn = info.getId();
    	BlankTransactionDAO transDao = new BlankTransactionDAO();
    	BlankTransactionInfo tmpInfo = new BlankTransactionInfo();
    	//先检查票据交易状态
    	tmpInfo = transDao.findById(info.getId());
    	if (tmpInfo.getStatusID() == BILLConstant.BlankTransctionStatus.CHECK)
    	{
    		throw new BillException("Bill_E062",null,this.ctx);
    	}
    	else if (tmpInfo.getStatusID() == BILLConstant.BlankTransctionStatus.DELETE)
    	{
    		throw new BillException("Bill_E063",null,this.ctx);
    	}
    	try
		{
    		if (info.getId() >0)
    		{
    			System.out.print("===== update transaction ===");
    			BlankTransactionDAO btDao = new BlankTransactionDAO();
				btDao.update(info);
    		}
    		if (info.getTransTypeID() == BILLConstant.BlankTransctionType.REGISTER)
    		{
    			System.out.println("===== update register ===");
    			BlankRegisterDAO brDao = new BlankRegisterDAO();
    			BlankRegisterInfo brInfo = new BlankRegisterInfo();
    			brInfo = (BlankRegisterInfo) info.getDetailInfo();
    			if (brInfo.getId()>0) brDao.updateRegister(brInfo);
    		}
    		if (info.getTransTypeID() == BILLConstant.BlankTransctionType.USE)
    		{
    			System.out.println("===== update use ===");
    			BlankUseDAO buDao = new BlankUseDAO();
    			BlankUseInfo buInfo = new BlankUseInfo();
    			buInfo = (BlankUseInfo) info.getDetailInfo();
    			if (buInfo.getId()>0) buDao.updateUse(buInfo);
    		}
    		if (info.getTransTypeID() == BILLConstant.BlankTransctionType.EXCHANGE)
    		{
    			BlankExchangeDAO dDao = new BlankExchangeDAO();
    			BlankExchangeInfo dInfo = new BlankExchangeInfo();
    			dInfo = (BlankExchangeInfo) info.getDetailInfo();
    			if (dInfo.getId()>0) dDao.updateExchange(dInfo);
    		}
    		if (info.getTransTypeID() == BILLConstant.BlankTransctionType.RETURN)
    		{
    			BlankReturnDAO dDao = new BlankReturnDAO();
    			BlankReturnInfo dInfo = new BlankReturnInfo();
    			dInfo = (BlankReturnInfo) info.getDetailInfo();
    			
    			BlankVoucherDAO bvDao = new BlankVoucherDAO();
    			bvDao.checkBillStatus(dInfo.getBillID(),BILLConstant.TraceAction.RETURN);
    			//检查密码是否正确
				bvDao.checkBillPass(dInfo.getBillID(),dInfo.getBillPassword());
    			
    			if (dInfo.getId()>0) dDao.update(dInfo);
    		}
    		if (info.getTransTypeID() == BILLConstant.BlankTransctionType.WRITEOFF)
    		{
    			BlankWriteOffDAO dDao = new BlankWriteOffDAO();
    			BlankVoucherDAO bvDao = new BlankVoucherDAO();
    			BlankWriteOffInfo dInfo = new BlankWriteOffInfo();
    			dInfo = (BlankWriteOffInfo) info.getDetailInfo();
    			
    			long billCount = bvDao.getBillCount(dInfo.getBillCodeStart(),dInfo.getBillCodeEnd(),BILLConstant.TraceAction.REGISTEROFF,-1);
    			dInfo.setBillNumber(billCount);
    			if (dInfo.getId()>0) dDao.update(dInfo);
    		}
		} catch (ITreasuryDAOException e)
		{
			lReturn = -1;
			e.printStackTrace();
			throw new BillException("Bill_E012",e,ctx);
		}
    	return lReturn;
    }
    /**
     * 删除一条交易信息 1.判断该交易是否可被当前操作人修改 2.根据info.getTransTypeID()来判断具体的交易类型，把info.getBlankTransDetailInfo()强制转换成该交易类型信息
     * 3.调用相应的交易类型DAO保存交易详细信息 4.调用BlankTransactionDAO保存交易信息
     * 记录交易操作记录
     * @param BlankTransactionInfo	交易信息
     * @return long 交易的ID
     * @throws BillException
     */
    public long delTrans(BlankTransactionInfo info) throws BillException, RemoteException {
    	//BlankCheckInfo cInfo = new BlankCheckInfo();
    	long lReturn = -1;
    	lReturn = info.getId();
    	BlankTransactionDAO transDao = new BlankTransactionDAO();
    	BlankTransactionInfo tmpInfo = new BlankTransactionInfo();
    	//先检查票据交易状态
    	tmpInfo = transDao.findById(info.getId());
    	if (tmpInfo.getStatusID() == BILLConstant.BlankTransctionStatus.CHECK)
    	{
    		throw new BillException("Bill_E062",null,this.ctx);
    	}
    	else if (tmpInfo.getStatusID() == BILLConstant.BlankTransctionStatus.DELETE)
    	{
    		throw new BillException("Bill_E063",null,this.ctx);
    	}

    	BlankTransactionDAO dao = new  BlankTransactionDAO();
    	try
		{
    		dao.delTransaction(info);
		}catch(BillException e)
		{
			throw new BillException (e,ctx);
		}
		return lReturn;
    }

    /**
     * 根据交易ID查找交易明细 1.读取交易信息 2.根据交易类型读取交易明细
     * @param long	交易信息ID
     * @return BlankTransactionInfo 交易明细信息
     * @throws BillException
     */
    public BlankTransactionInfo findTransByTransID(long lID) throws BillException, RemoteException {
    	
        BlankTransactionInfo info=null;
		try {
			BlankTransactionDAO btDao = new BlankTransactionDAO();
			info = btDao.findById(lID);
		} catch (BillException e) {
			e.printStackTrace();
			throw new BillException(e ,this.ctx );
		}
        return info;
    }

    /**
     * 交易信息多笔查找
     * @param BlankTransQueryInfo	交易查询信息
     * @return Collection 交易明细信息集合
     * @throws BillException
     */
    public Collection findTransByMultiOption(BlankTransQueryInfo qInfo) throws BillException, RemoteException {
    	Collection col=null;
    	try
		{
    		BlankTransactionDAO btDao = new BlankTransactionDAO();
            col = btDao.findByMultiOption(qInfo);
		}
    	catch (BillException e)
		{
    		e.printStackTrace();
			throw new BillException(e ,this.ctx );
    	}
        return col;
    }

    /**
     * 复核/取消复核交易
     * 记录交易操作记录
     * @param BlankCheckInfo	交易复核信息
     * @return
     * @throws BillException
     */
    public void checkTrans(BlankCheckInfo cInfo) throws BillException, RemoteException {
        //分清是复核还是取消复核，
        //如果是复核--
        //修改交易状态
        //按交易修改票据的信息
        //生成会计分录
        //记录票据操作日至
        //如果是取消复核--
        //判断是否可以取消复核，
        //修改交易信息
        //修改票据信息
        //修改会计分录
        //记录票据操作日至
    	//以上操作调用TransactionDao 的 check 方法
    	BlankTransactionDAO dao = new  BlankTransactionDAO();
    	try
		{
    		dao.checkTransaction(cInfo);
		}catch(BillException e)
		{
			throw new BillException (e,ctx);
		}
    }

    /**
     * 修改票据信息 1.修改票据信息 2.记录修改日志
     * @param BlankVoucherInfo	票据信息
     * @return
     * @throws BillException
     */
    public void updateBill(BlankVoucherInfo cInfo) throws BillException, RemoteException {
    	BlankVoucherDAO dao = new BlankVoucherDAO();
    	try
		{
    		if (cInfo.getId()>0)
    		{
    			dao.checkBillStatus(cInfo.getId(),BILLConstant.TraceAction.MODIFY);
    			//更新票据信息
    			dao.update(cInfo);
    			//登记日志
    			TracingInfo ttInfo = new TracingInfo();
    			BillTraceBean bTracingB = new BillTraceBean();
    			ttInfo.setActionID(BILLConstant.TraceAction.MODIFY);
    			ttInfo.setBillModuleID(BILLConstant.TraceModule.BLANKVOUCHER);
    			ttInfo.setDetailID(cInfo.getId());
    			ttInfo.setOperateDate(Env.getBillSystemDate(cInfo.getOfficeID(),cInfo.getCurrencyID()));
    			ttInfo.setOperatorID(cInfo.getUserID());
    			bTracingB.writeLog(ttInfo);
    		}
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e,ctx);
		}
    }
    
    /**
     * 多笔查找票据信息
     * @param BlankVoucherQueryInfo	票据查询信息
     * @return Collection 票据信息集合
     * @throws BillException
     */
    public Collection findBillByMultiOption(BlankVoucherQueryInfo cInfo) throws BillException, RemoteException {
        Collection col=null;
    	try
		{
    		BlankVoucherDAO dao = new BlankVoucherDAO();
    		col = dao.findBillByMultiOption(cInfo);
		}
    	catch (BillException e)
		{
    		e.printStackTrace();
			throw new BillException(e ,this.ctx );
    	}
    	return col;
    }

    /**
     * 单笔查找票据信息
     * @param long	票据信息ID
     * @return BlankVoucherInfo 票据信息明细
     * @throws BillException
     */
    public BlankVoucherInfo findBillByID(long lID) throws BillException, RemoteException {
        BlankVoucherDAO dao = new BlankVoucherDAO();
        BlankVoucherInfo info = null;
        try
		{
        	info = (BlankVoucherInfo) dao.findByID(lID,BlankVoucherInfo.class);
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e,ctx);
		}
    	return info;
    }

    /**
     * 生成凭证日报表
     * @param BlankVoucherQueryInfo	票据查询信息
     * @return Collection 日报表信息明细集合
     * @throws BillException
     */
    public Collection createDailyReport(BlankVoucherQueryInfo qInfo) throws BillException, RemoteException {
    	BlankVoucherDAO dao = new  BlankVoucherDAO();
    	return dao.createDailyReport(qInfo);
    }
    
    /**
     * 结算系统将票据状态修改为使用时调用此方法检查票据的状态
     * @param blankVoucherInfo
     * @throws BillException
     */
    public void useBlankBill(BlankVoucherInfo blankVoucherInfo)throws BillException,RemoteException
	{
    	
    }
    
    /**
     * 结算系统取消使用票据时调用此方法检查票据的状态
     * @param blankVoucherInfo
     * @throws BillException
     */
    public void cancelUseBlankBill(BlankVoucherInfo blankVoucherInfo)throws BillException,RemoteException
	{
    	
    }
    
    /**
     * 对票据作挂失、解冻等方面的处理时调用此方法更新票据的状态
     * 1.修改票据信息 2.记录修改日志
     * @param IDs 要更新的票据的 ID
     * @param lAction 操作类型 
     * @param lOperatorID 操作人（用于记操作日志）
     * @param OperateDate 操作日期（用于记操作日志）
     * @throws BillException
     * @throws RemoteException
     */
    public void updateVoucherStatus(long[] IDs,long lAction,long lOperatorID,Timestamp OperateDate) throws BillException,RemoteException
	{
    	BlankVoucherInfo info = new BlankVoucherInfo();
    	BlankVoucherDAO dao = new BlankVoucherDAO();
    	long lStatus = -1;
    	long lFormerStatus = -1;
    	logger.info("=========== updateVoucherStatus 开始===========");
    	
    	try
		{
    		for(int i =0;i<IDs.length;i++)
    		{
    			//检查票据状态
    			dao.checkBillStatus(IDs[i],lAction);
    		}
//    		根据操作类型，判断应该更新的状态
        	if (lAction == BILLConstant.TraceAction.LOSS)
        	{
        		lStatus = BILLConstant.BlankBillStatus.LOSS;
        	}
        	if (lAction == BILLConstant.TraceAction.STOPPAY)
        	{
        		lStatus = BILLConstant.BlankBillStatus.STOPPAY;
        	}
        	if (lAction == BILLConstant.TraceAction.REGISTEROFF)
        	{
        		lStatus = BILLConstant.BlankBillStatus.REGISTEROFF;
        	}
    		for(int i =0;i<IDs.length;i++)
    		{
    			info.setId(IDs[i]);
    			BlankVoucherInfo voucher =(BlankVoucherInfo) dao.findByID(IDs[i],BlankVoucherInfo.class);
    			if (lAction == BILLConstant.TraceAction.LOSS
    					|| lAction == BILLConstant.TraceAction.STOPPAY)
    			{
    				lFormerStatus = voucher.getStatusID();
    				info.setFormerStatusID(lFormerStatus);
    			}
    			//如果是解挂，或者止付，恢复成领用或者注册状态
    			if (lAction == BILLConstant.TraceAction.UNLOSS
    					|| lAction == BILLConstant.TraceAction.UNSTOPPAY)
    	    	{
    	    		lStatus = voucher.getFormerStatusID();
    	    	}
    			info.setStatusID(lStatus);
    			//更新票据状态
				dao.update(info);
//	    		登记日志
				TracingInfo ttInfo = new TracingInfo();
				BillTraceBean bTracingB = new BillTraceBean();
				ttInfo.setActionID(lAction);
				ttInfo.setBillModuleID(BILLConstant.TraceModule.BLANKVOUCHER);
				ttInfo.setDetailID(IDs[i]);
				ttInfo.setOperateDate(OperateDate);
				ttInfo.setOperatorID(lOperatorID);
				bTracingB.writeLog(ttInfo);
			}
    	}
    	 catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	logger.info("=========== updateVoucherStatus 完毕===========");
    }
}
