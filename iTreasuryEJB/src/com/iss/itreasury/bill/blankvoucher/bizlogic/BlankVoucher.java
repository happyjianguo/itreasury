/* Generated by Together */

package com.iss.itreasury.bill.blankvoucher.bizlogic;

import javax.ejb.EJBObject;
import java.rmi.RemoteException;
import java.sql.Timestamp;

import com.iss.itreasury.bill.blankvoucher.dataentity.BlankTransactionInfo;
import com.iss.itreasury.bill.util.BillException;
import java.util.Collection;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankTransQueryInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankCheckInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankVoucherInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankVoucherQueryInfo;

public interface BlankVoucher extends EJBObject {
    /**
     *增加一条交易信息
     * @param BlankTransactionInfo	交易信息
     * @return long 新增的交易的ID
     * @throws com.iss.itreasury.bill.util.BillException
     */
    long addTrans(BlankTransactionInfo info) throws BillException, RemoteException;

    /**
     * 保存一条交易信息
     * @param BlankTransactionInfo	交易信息
     * @return long 交易的ID
     * @throws com.iss.itreasury.bill.util.BillException
     */
    long updateTrans(BlankTransactionInfo info) throws BillException, RemoteException;
    /**
     * 删除一条交易
     * @param BlankTransactionInfo info  交易信息
     * @throws BillException
     * @throws RemoteException
     */
    public long delTrans(BlankTransactionInfo info) throws BillException, RemoteException;
    /**
     * 根据交易ID查找交易明细
     * @param long	交易信息ID
     * @return BlankTransactionInfo 交易明细信息
     * @throws com.iss.itreasury.bill.util.BillException
     */
    BlankTransactionInfo findTransByTransID(long lID) throws BillException, RemoteException;

    /**
     * 交易信息多笔查找
     * @param BlankTransQueryInfo	交易查询信息
     * @return Collection 交易明细信息集合
     * @throws com.iss.itreasury.bill.util.BillException
     */
    Collection findTransByMultiOption(BlankTransQueryInfo qInfo) throws BillException, RemoteException;

    /**
     * 复核/取消复核交易
     * @param BlankCheckInfo	交易复核信息
     * @return
     * @throws com.iss.itreasury.bill.util.BillException
     */
    void checkTrans(BlankCheckInfo cInfo) throws BillException, RemoteException;

    /**
     * 修改票据信息
     * @param BlankVoucherInfo	票据信息
     * @return
     * @throws com.iss.itreasury.bill.util.BillException
     */
    void updateBill(BlankVoucherInfo cInfo) throws BillException, RemoteException;
 
    /**
     * 单笔查找票据信息
     * @param long	票据信息ID
     * @return BlankVoucherInfo 票据信息明细
     * @throws com.iss.itreasury.bill.util.BillException
     */
    BlankVoucherInfo findBillByID(long lID) throws BillException, RemoteException;

    /**
     * 多笔查找票据信息
     * @param BlankVoucherQueryInfo	票据查询信息
     * @return Collection 票据信息集合
     * @throws com.iss.itreasury.bill.util.BillException
     */
    Collection findBillByMultiOption(BlankVoucherQueryInfo cInfo) throws BillException, RemoteException;

    /**
     * 生成凭证日报表
     * @param BlankVoucherQueryInfo	票据查询信息
     * @return Collection 日报表信息明细集合
     * @throws com.iss.itreasury.bill.util.BillException
     */
    Collection createDailyReport(BlankVoucherQueryInfo qInfo) throws BillException, RemoteException;
    
    /**
     * 结算系统将票据状态修改为使用时调用此方法检查票据的状态
     * @param blankVoucherInfo
     * @throws BillException
     */
    void useBlankBill(BlankVoucherInfo blankVoucherInfo)throws BillException,RemoteException;
    
    /**
     * 结算系统取消使用票据时调用此方法检查票据的状态
     * @param blankVoucherInfo
     * @throws BillException
     */
    void cancelUseBlankBill(BlankVoucherInfo blankVoucherInfo)throws BillException,RemoteException;
    
    /**
     * 对票据作挂失、解冻等方面的处理时调用此方法更新票据的状态
     * 1.修改票据信息 2.记录修改日志
     * @param IDs 要更新的票据的 ID
     * @param lAction 操作类型 
     * @param lOperatorID 操作人（用于记操作日志）
     * @param OperateDate 操作日期（用于记操作日志）
     * @throws BillException
     * @throws RemoteException
     */
    public void updateVoucherStatus(long[] IDs,long lAction,long lOperatorID,Timestamp OperateDate) throws BillException,RemoteException;
}
