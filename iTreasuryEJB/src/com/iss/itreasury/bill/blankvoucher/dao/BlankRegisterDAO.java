/* Generated by Together */

package com.iss.itreasury.bill.blankvoucher.dao;

import com.iss.itreasury.bill.util.*;
import com.iss.itreasury.bill.venture.dao.BlackBillDao;
import com.iss.itreasury.bill.venture.dataentity.BlackBillInfo;
import com.iss.itreasury.bill.actiontracer.bizlogic.BillTraceBean;
import com.iss.itreasury.bill.actiontracer.dataentity.TransTracingInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.*;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.Log4j;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class BlankRegisterDAO extends BillDAO {
	
	private Log4j log4j = new Log4j(Constant.ModuleType.BILL, this);
	
    public BlankRegisterDAO() {
        super("Bill_BlankRegister");
    }
    
    /**
     * 凭证注册，不允许重复注册相同类型相同编号的票据
     * @param brInfo
     * @return 注册成功返回交易号，失败返回 -1
     * @throws IException
     */
    public long registerBlank(BlankRegisterInfo brInfo) throws BillException
	{
    	long lReturn = -1;
    	ResultSet rs = null;
    	long lBillTypeId = brInfo.getBillTypeID();
    	String strBillCode = "";
    	String strException = "";
    	String strSQL = "";
    	long lTransID = -1;
    	try
		{
    		initDAO();
    		//票据风险黑名单预警 added by qhzhou 2008-02-26
    		if(brInfo != null){
    			long lTmp = brInfo.getCodeNumStart();
    			while(lTmp <= brInfo.getCodeNumEnd()){
    				strBillCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lTmp,brInfo.getCodeNumLen());
    				BlackBillInfo blackBillInfo=new BlackBillInfo();
    				BlackBillDao blackBillDao=new BlackBillDao();
    				
    				blackBillInfo.setBillTypeID(lBillTypeId);
    				blackBillInfo.setBillCode(strBillCode);
    				blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
    				blackBillInfo.setOfficeID(brInfo.getOfficeID());
    				blackBillInfo.setCurrencyID(brInfo.getCurrencyID());
    				if(blackBillDao.isBillInBlackList(blackBillInfo))
    				{
    					//Bill_E028=当前票据类型下号码为[?]的票据已经在黑名单中存在!
    					throw new BillException("Bill_E020",strBillCode,null);
    				}
    				lTmp++;
    			}
    			
    		}
    		
    		//检查是否和现有的注册信息中注册的票据编号有交集
			//现有的注册记录的交易状态必须是未复核或者已复核
    		strSQL = "Select r.*,t.statusID from Bill_BlankTransaction t,Bill_BlankRegister r"
    			+" where t.transDetailId = r.id "
				+" and r.codeChar='" + brInfo.getCodeChar()+"' "
				+" and r.codeNumLen=" + brInfo.getCodeNumLen()
				+" and r.billTypeID="+ brInfo.getBillTypeID()
				+" and t.transTypeId = "+ BILLConstant.BlankTransctionType.REGISTER
				+" and t.statusID in  ("+ BILLConstant.BlankTransctionStatus.SUBMIT+","+BILLConstant.BlankTransctionStatus.CHECK+")";
    		prepareStatement(strSQL);
    		rs = executeQuery();
    		if (rs != null )
    		{
    			while(rs.next())
    			{
    				long lNumStart = rs.getLong("CodeNumStart");
    				long lNumEnd = rs.getLong("CodeNumEnd");
    				String strStartCode = "";
    				String strEndCode = "";
    				if (lNumStart > brInfo.getCodeNumStart())
    				{
    					if (brInfo.getCodeNumEnd()> lNumStart)
    					{
    						strStartCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lNumStart,brInfo.getCodeNumLen());
    						if (lNumEnd > brInfo.getCodeNumEnd())
    							strEndCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumEnd(),brInfo.getCodeNumLen());
    						else
    						    strEndCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lNumEnd,brInfo.getCodeNumLen());
    						strException = strStartCode + " - " + strEndCode;
    						//'Bill_E002'：票据类型[?]编号[?]的票据已经注册，不能重复注册!
        					throw new BillException("Bill_E002",BillNameRef.getTypeNameByID(lBillTypeId),strException,null);
    					}
    				}
    				else
    				{
    					if (lNumEnd > brInfo.getCodeNumStart())
    					{
    						strStartCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumStart(),brInfo.getCodeNumLen());
    						if (lNumEnd < brInfo.getCodeNumEnd())
    							strEndCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lNumEnd,brInfo.getCodeNumLen());
    						else
    							strEndCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumEnd(),brInfo.getCodeNumLen());
							strException = strStartCode + " - " + strEndCode;
    						//'Bill_E002'：票据类型[?]编号[?]的票据已经注册，不能重复注册!
        					throw new BillException("Bill_E002",BillNameRef.getTypeNameByID(lBillTypeId),strException,null);
    					}
    					else if (lNumEnd == brInfo.getCodeNumStart())
    					{
    						strException = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumStart(),brInfo.getCodeNumLen());
//    						'Bill_E002'：票据类型[?]编号[?]的票据已经注册，不能重复注册!
        					throw new BillException("Bill_E002",BillNameRef.getTypeNameByID(lBillTypeId),strException,null);
    					}
    				}
    			}
    		}
    		
    		//逐张检查注册的票据是否已经存在（为避免和通过非正常注册途径导入的票据编号重复）
    		this.isBlankRegistered(brInfo,transConn);
			//如果所有票据都未曾注册过
			//往票据注册表里插入一条数据
			this.setUseMaxID();
			lReturn = this.add(brInfo);
					
			if (rs!=null)
			{
				rs.close();
				rs = null;
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			log4j.error(e.toString());
			throw new BillException("Bill_E012",e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				if (rs!=null)
				{
					rs.close();
					rs = null;
				}
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				throw new BillException("Bill_E012",e);
			} catch (SQLException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    	return lReturn;
	}
    
    /**
     * 更新注册信息
     * 这里更新前必须检查和现有的注册信息中注册的票据编号有交集
     * 并逐张检查注册的票据是否已经存在
     * @param brInfo
     * @throws BillException
     */
    public void updateRegister(BlankRegisterInfo brInfo) throws BillException{
    	ResultSet rs = null;
    	long lBillTypeId = brInfo.getBillTypeID();
    	String strBillCode = "";
    	String strException = "";
    	String strSQL = "";
    	long lTransID =-1;
    	try
		{
    		initDAO();
    		//票据风险黑名单预警 added by qhzhou 2008-02-26
    		if(brInfo != null){
    			long lTmp = brInfo.getCodeNumStart();
    			while(lTmp <= brInfo.getCodeNumEnd()){
    				strBillCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lTmp,brInfo.getCodeNumLen());
    				BlackBillInfo blackBillInfo=new BlackBillInfo();
    				BlackBillDao blackBillDao=new BlackBillDao();
    				
    				blackBillInfo.setBillTypeID(lBillTypeId);
    				blackBillInfo.setBillCode(strBillCode);
    				blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
    				blackBillInfo.setOfficeID(brInfo.getOfficeID());
    				blackBillInfo.setCurrencyID(brInfo.getCurrencyID());
    				if(blackBillDao.isBillInBlackList(blackBillInfo))
    				{
    					//Bill_E028=当前票据类型下号码为[?]的票据已经在黑名单中存在!
    					throw new BillException("Bill_E020",strBillCode,null);
    				}
    				lTmp++;
    			}
    			
    		}
    		//检查交易状态，如果不处于未复核状态，抛出异常
    		strSQL = "select * from Bill_BlankTransaction where transDetailID="+brInfo.getId()
				+" and TransTypeID="+BILLConstant.BlankTransctionType.REGISTER;
    		prepareStatement(strSQL);
    		rs = executeQuery();
    		if (rs!= null && rs.next())
    		{
    			lTransID = rs.getLong("id");
    			long lStatus = rs.getLong("statusID");
    			if(lStatus != BILLConstant.BlankTransctionStatus.SUBMIT)
    			{
    				//Bill_E008=该交易[?]，不能修改！
    				throw new BillException("Bill_E008",BILLConstant.BlankTransctionStatus.getName(lStatus),null);
    			}
    		}
    		//检查是否和现有的注册信息中注册的票据编号有交集
			//现有的注册记录的交易状态必须是未复核或者已复核
    		strSQL = "Select r.*,t.statusID from Bill_BlankTransaction t,Bill_BlankRegister r"
    			+" where t.transDetailId = r.id "
				+" and r.id<>"+brInfo.getId()//除要修改的这一条以外
				+" and r.codeChar='" + brInfo.getCodeChar()+"' "
				+" and r.codeNumLen=" + brInfo.getCodeNumLen()
				+" and r.billTypeID="+ brInfo.getBillTypeID()
				+" and t.transTypeId = "+ BILLConstant.BlankTransctionType.REGISTER
				+" and t.statusID in  ("+ BILLConstant.BlankTransctionStatus.SUBMIT+","+BILLConstant.BlankTransctionStatus.CHECK+")";
    		prepareStatement(strSQL);
    		rs = executeQuery();
    		if (rs != null )
    		{
    			while(rs.next())
    			{
    				long lNumStart = rs.getLong("CodeNumStart");
    				long lNumEnd = rs.getLong("CodeNumEnd");
    				String strStartCode = "";
    				String strEndCode = "";
    				if (lNumStart > brInfo.getCodeNumStart())
    				{
    					if (brInfo.getCodeNumEnd()> lNumStart)
    					{
    						strStartCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lNumStart,brInfo.getCodeNumLen());
    						if (lNumEnd > brInfo.getCodeNumEnd())
    							strEndCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumEnd(),brInfo.getCodeNumLen());
    						else
    						    strEndCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lNumEnd,brInfo.getCodeNumLen());
    						strException = strStartCode + " - " + strEndCode;
    						//'Bill_E002'：票据类型[?]编号[?]的票据已经注册，不能重复注册!
        					throw new BillException("Bill_E002",BillNameRef.getTypeNameByID(lBillTypeId),strException,null);
    					}
    				}
    				else
    				{
    					if (lNumEnd > brInfo.getCodeNumStart())
    					{
    						strStartCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumStart(),brInfo.getCodeNumLen());
    						if (lNumEnd < brInfo.getCodeNumEnd())
    							strEndCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lNumEnd,brInfo.getCodeNumLen());
    						else
    							strEndCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumEnd(),brInfo.getCodeNumLen());
							strException = strStartCode + " - " + strEndCode;
    						//'Bill_E002'：票据类型[?]编号[?]的票据已经注册，不能重复注册!
        					throw new BillException("Bill_E002",BillNameRef.getTypeNameByID(lBillTypeId),strException,null);
    					}
    				}
    			}
    		}
    		
    		//逐张检查注册的票据是否已经存在（为避免和通过非正常注册途径导入的票据编号重复）
    		isBlankRegistered(brInfo,transConn);
    			
    		//更新
    		if (brInfo.getId()>0)
    		{
    			update(brInfo);
    		}
    		//登记日志
    		TransTracingInfo ttInfo = new TransTracingInfo();
			BillTraceBean bTracingB = new BillTraceBean();
			ttInfo.setActionID(BILLConstant.TraceAction.MODIFY);
			ttInfo.setBillModuleID(BILLConstant.TraceModule.BLANKVOUCHER);
			ttInfo.setDetailID(lTransID);
			ttInfo.setOperateDate(brInfo.getInputDate());
			ttInfo.setOperatorID(brInfo.getUserID());
			ttInfo.setRemark("修改注册信息成功");
			bTracingB.writeTransLog(ttInfo);
			if (rs!=null)
			{
				rs.close();
				rs = null;
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			log4j.error(e.toString());
			throw new BillException("Bill_E012",e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				if (rs!=null)
				{
					rs.close();
					rs = null;
				}
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				throw new BillException("Bill_E012",e);
			} catch (SQLException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    }
    	
    /**
     * 根据凭证注册 id 查找凭证信息
     * @param lID
     * @return
     * @throws BillException
     */
    public BlankRegisterInfo findById(long lID) throws BillException
	{
    	BlankRegisterInfo brInfo = new BlankRegisterInfo();
    	ResultSet rs = null;
        String strSQL = "";
        try
		{
			initDAO();
			strSQL = "select * from Bill_BlankRegister where id=" +lID;
			prepareStatement(strSQL);
			rs = executeQuery();
			if (rs != null && rs.next())
			{
				brInfo.setCodeChar(rs.getString("CodeChar"));
				brInfo.setAmount(rs.getDouble("amount"));
				brInfo.setBatch(rs.getLong("batch"));
				brInfo.setBillNumber(rs.getLong("billNumber"));
				brInfo.setBillTypeID(rs.getLong("BillTypeId"));
				brInfo.setCodeNumEnd(rs.getLong("CodeNumEnd"));
				brInfo.setCodeNumStart(rs.getLong("CodeNumStart"));
				brInfo.setCodeNumLen(rs.getLong("CodeNumLen"));
				brInfo.setId(lID);
				brInfo.setInPrice(rs.getDouble("InPrice"));
				brInfo.setOutPrice(rs.getDouble("OutPrice"));
				brInfo.setPayBankID(rs.getLong("PayBankID"));
				brInfo.setPayLedgerID(rs.getLong("PayLedgerID"));
			}
			if (rs != null)
            {
                rs.close();
                rs = null;
            }
            finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				if (rs != null)
	            {
	                rs.close();
	                rs = null;
	            }
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			} catch (SQLException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    	return brInfo;
    }
    
    /**
     * 检查注册的票据是否已经存在
     * @param brInfo
     * @param con
     * @throws BillException
     * @throws SQLException
     * @throws ITreasuryDAOException
     */
    public void isBlankRegistered(BlankRegisterInfo brInfo,Connection con) throws BillException
	{
    	ResultSet rs = null;
		PreparedStatement ps= null;
    	try
		{
    		String strBillCodeStart="";
    		String strBillCodeEnd="";
    		String strSQL = "";
    		//检查注册的票据是否已经存在（为避免和通过非正常注册途径导入的票据编号重复）
    		strBillCodeStart = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumStart(),brInfo.getCodeNumLen());
    		strBillCodeEnd = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),brInfo.getCodeNumEnd(),brInfo.getCodeNumLen());
		
    		strSQL = "select b.* from Bill_BlankVoucher b where b.billTypeId="
				+ brInfo.getBillTypeID()
				+" and b.code >='"+ strBillCodeStart +"'"
				+" and b.code <='"+ strBillCodeEnd +"'"
				+ " and b.statusId >0 ";
    		ps = con.prepareStatement(strSQL);
    		rs = ps.executeQuery();
    		if (rs.next()) 
    		{
    			String strBillCode = rs.getString("code");
    			//'Bill_E001':票据类型[?]号码[?]的票据已经存在，不能重复注册!
    			throw new BillException("Bill_E001",BillNameRef.getTypeNameByID(brInfo.getBillTypeID()),strBillCode,null);
    		}
    		if ( rs!= null )
    		{
    			rs.close();
    			rs = null;
    		}
    		if (ps != null)
    		{
    			ps.close();
    			ps = null;
    		}
		}
    	catch (BillException e)
		{
    		e.printStackTrace();
    		throw e;
    	} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
    	finally
		{
    		try
			{
    			if ( rs!= null )
    			{
    				rs.close();
    				rs = null;
    			}
    			if (ps != null)
    			{
    				ps.close();
    				ps = null;
    			}
			}
    		catch (SQLException e)
    		{
    			e.printStackTrace();
    			throw new BillException("Bill_E012",e);
    		}
    	}
    }
    
    /**
     * 检查注册的票据是否已经被使用（取消复核时检查）
     * @param brInfo
     * @param con
     * @throws BillException
     * @throws SQLException
     * @throws ITreasuryDAOException
     */
    public void isBlankUsed(BlankRegisterInfo brInfo,Connection con) throws BillException, SQLException, ITreasuryDAOException
	{
    	String strBillCode="";
    	String strSQL = "";
    	ResultSet rs = null;
    	PreparedStatement ps= null;
    	try
		{
    	//逐张检查注册的票据是否仍处于注册状态
    		long i;
    		for (i = brInfo.getCodeNumStart();i<= brInfo.getCodeNumEnd();i++)
    		{
    			strBillCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),i,brInfo.getCodeNumLen());
    			strSQL = "select b.* from Bill_BlankVoucher b where b.billTypeId="
				+ brInfo.getBillTypeID()
				+" and b.code='"+ strBillCode +"'";
    			ps = con.prepareStatement(strSQL);
    			rs = ps.executeQuery();
    			if (rs.next()) 
    			{
    				long lStatusId = rs.getLong("statusId");
    				if (lStatusId != BILLConstant.BlankBillStatus.REGISTER)
    				{
    					//'Bill_E003':编号为[?]的票据已经被[?]，不能取消复核!
    					throw new BillException("Bill_E003",strBillCode,BILLConstant.BlankBillStatus.getName(lStatusId),null);
    				}
    			}
    			else
    			{
    				throw new BillException("Bill_E003",strBillCode,"删除",null);
    			}	
    		}
    		if (rs != null)
    		{
    			rs.close();
    			rs = null;
    		}
    		if (ps != null)
    		{
    			ps.close();
    			ps = null;
    		}
		}
    	catch (BillException e)
		{
    		e.printStackTrace();
    		throw e;
    	} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
    	finally
		{
    		try
			{
    			if ( rs!= null )
    			{
    				rs.close();
    				rs = null;
    			}
    			if (ps != null)
    			{
    				ps.close();
    				ps = null;
    			}
			}
    		catch (SQLException e)
    		{
    			e.printStackTrace();
    			throw new BillException("Bill_E012",e);
    		}
    	}
    }
    
    /**
     * 注册信息复核完成后要做的操作：
     * 把凭证注册信息中从起号到止号的票据插入凭证表（Bill_BlankVoucher）
     * 记会计分录及操作日志
     * @param lTransId 交易 id 
     * @throws 
     */
    public void doAfterCheckRegister(long lTransId) throws BillException
	{
    	String strBillCode = "";
    	String strSQL = "";
    	ResultSet rs = null;
    	String strException = "";
    	try
		{
    		
			//取得相应的交易
    		BlankTransactionDAO btDao = new BlankTransactionDAO();
			BlankTransactionInfo btInfo = btDao.findById(lTransId);
			BlankRegisterInfo brInfo =(BlankRegisterInfo) btInfo.getDetailInfo();
			//插入数据
			long i=0;
			for(i = brInfo.getCodeNumStart();i<= brInfo.getCodeNumEnd();i++)
			{
				initDAO();
				strBillCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),i,brInfo.getCodeNumLen());
	    		strSQL = "select b.* from Bill_BlankVoucher b where b.billTypeId="
					+ brInfo.getBillTypeID()
					+" and b.code='"+ strBillCode +"'"
					+" and b.statusId>0";
				prepareStatement(strSQL);
				rs = executeQuery();
				if (rs!=null && rs.next())
				{//'Bill_E001':票据类型[?]号码[?]的票据已经存在，不能重复注册!
					throw new BillException("Bill_E001",BillNameRef.getTypeNameByID(brInfo.getBillTypeID()),strBillCode,null);
				}
				else
				{
					BlankVoucherDAO bvDao = new BlankVoucherDAO();
					BlankVoucherInfo bvInfo = new BlankVoucherInfo();
					bvDao.setUseMaxID();
					bvInfo.setBillTypeID(brInfo.getBillTypeID());
					bvInfo.setCode(strBillCode);
					bvInfo.setCurrencyID(btInfo.getCurrencyID());
					bvInfo.setInPrice(brInfo.getInPrice());
					bvInfo.setInputDate(btInfo.getInputDate());
					bvInfo.setInputUserID(btInfo.getInputUserID());
					bvInfo.setOfficeID(btInfo.getOfficeID());
					bvInfo.setOutPrice(brInfo.getOutPrice());
					bvInfo.setInDate(Env.getBillSystemDate(btInfo.getOfficeID(),btInfo.getCurrencyID()));
					bvInfo.setStatusID(BILLConstant.BlankBillStatus.REGISTER);
					long l = bvDao.add(bvInfo);
				}
				//modify by bingliu 2012-01-11防止超游标
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (transPS != null) 
				{
					transPS.close();
					transPS = null;
				}
			}
			if (rs != null)
			{
				rs.close();
				rs = null;
			}
			finalizeDAO();
			
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			} catch (SQLException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    }
    
    /**
     * 取消复核注册信息以后做的操作
     * @param lTransId
     * @throws BillException
     */
    public void doAfterCancelCheckRegister(long lTransId) throws BillException 
	{
    	String strBillCode = "";
    	String strSQL = "";
    	String strException = "";
    	try
		{
			//取得相应的交易
    		BlankTransactionDAO btDao = new BlankTransactionDAO();
			BlankTransactionInfo btInfo = btDao.findById(lTransId);
			BlankRegisterInfo brInfo =(BlankRegisterInfo) btInfo.getDetailInfo();
			//物理删除凭证记录
			long i=0;
			initDAO();
			for(i = brInfo.getCodeNumStart();i<= brInfo.getCodeNumEnd();i++)
			{
				strBillCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),i,brInfo.getCodeNumLen());
				strSQL = "delete from Bill_BlankVoucher b where "
					+" b.code='"+ strBillCode +"'";
				prepareStatement(strSQL);
				long l = executeUpdate();
				//Log.print("删除凭证记录："+ l + "条");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} 
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    }
	/**
	 * @param args
	 */
	public static void main(String[] args)
	{
		BlankRegisterDAO dao = new BlankRegisterDAO();
		BlankRegisterInfo brInfo = new BlankRegisterInfo();
		brInfo.setId(9);
		brInfo.setCodeChar("sda");
		brInfo.setCodeNumStart(1);
		brInfo.setCodeNumEnd(9);
		brInfo.setCodeNumLen(6);
		brInfo.setBillTypeID(3);
		try
		{
			dao.updateRegister(brInfo);
			//long b = dao.registerBlank(brInfo);
		} catch (BillException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
