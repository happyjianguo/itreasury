/* Generated by Together */

package com.iss.itreasury.bill.blankvoucher.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;

import com.iss.itreasury.bill.blankvoucher.dataentity.BlankVoucherInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankVoucherQueryInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.DailyReportInfo;
import com.iss.itreasury.bill.util.BILLConstant;
import com.iss.itreasury.bill.util.BillDAO;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.bill.util.BillNameRef;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;

public class BlankVoucherDAO extends BillDAO {
    public BlankVoucherDAO() {
        super("Bill_BlankVoucher");
        this.setUseMaxID();
    }
    /**
     * 凭证日报表
     * @param qInfo
     * @return
     */
    public Collection createDailyReport(BlankVoucherQueryInfo qInfo) throws BillException
	{
        ArrayList list = new ArrayList();
        String strSQL = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try
		{
			this.initDAO();
			strSQL = "select * from Bill_BillType where statusid=1";
			if (qInfo.getBillTypeID() > 0)
			{
				strSQL += " and id=" + qInfo.getBillTypeID();
			}
			transPS = transConn.prepareStatement(strSQL);
			transRS = transPS.executeQuery();
			while (transRS.next())
			{
				DailyReportInfo reportInfo = new DailyReportInfo();
				long billTypeID = transRS.getLong("id");
				String searchDate = DataFormat.formatDate(qInfo.getSearchDate());
				
				reportInfo.setBillTypeID(billTypeID);
				reportInfo.setBillTypeName(transRS.getString("name"));
				//查询起初张数
				strSQL = "select count(id) from Bill_BlankVoucher where statusid != " + BILLConstant.BlankBillStatus.DELETE 
				+ " and billTypeID = " + billTypeID 
				+ " and to_char(inDate,'yyyy-mm-dd') < '" + searchDate + "'"
				+ " and (outDate is null or to_char(outDate,'yyyy-mm-dd') >= '" + searchDate +"')";
				
				log.print(strSQL);
				ps = transConn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				rs.next();
				reportInfo.setBeginCount(rs.getLong(1));
				rs.close();
				ps.close();
				
				//查询今日入库
				strSQL = "select count(id) from Bill_BlankVoucher where statusid != " + BILLConstant.BlankBillStatus.DELETE 
				+ " and billTypeID = " + billTypeID 
				+ " and to_char(inDate,'yyyy-mm-dd') = '" + searchDate + "'";
				
				log.print(strSQL);
				ps = transConn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				rs.next();
				reportInfo.setTodayInCount(rs.getLong(1));
				rs.close();
				ps.close();
				
				//查询今日出库
				strSQL = "select count(id) from Bill_BlankVoucher where statusid != " + BILLConstant.BlankBillStatus.DELETE 
				+ " and billTypeID = " + billTypeID 
				+ " and to_char(outDate,'yyyy-mm-dd') = '" + searchDate + "'";
				
				log.print(strSQL);
				ps = transConn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				rs.next();
				reportInfo.setTodayOutCount(rs.getLong(1));
				rs.close();
				ps.close();
				
				//查询今日余额
				strSQL = "select count(id) from Bill_BlankVoucher where statusid != " + BILLConstant.BlankBillStatus.DELETE 
				+ " and billTypeID = " + billTypeID 
				+ " and to_char(inDate,'yyyy-mm-dd') <= '" + searchDate + "'"
				+ " and (outDate is null or to_char(outDate,'yyyy-mm-dd') > '" + searchDate +"')";
				
				log.print(strSQL);
				ps = transConn.prepareStatement(strSQL);
				rs = ps.executeQuery();
				rs.next();
				reportInfo.setTodayBalance(rs.getLong(1));
				rs.close();
				ps.close();
				
				list.add(reportInfo);
			}
		} catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException();
		} 
		finally
		{
			try
			{
				this.finalizeDAO();
			} catch (ITreasuryDAOException e1)
			{
				// TODO Auto-generated catch block	
				e1.printStackTrace();
			}
		}

        return list;
    }
    
    /**
     * 检查票据密码
     * @param billID
     * @param sPassword
     * @throws BillException
     */
    public void checkBillPass(long billID,String sPassword) throws BillException
	{
    	BlankVoucherInfo info = null;
    	try
		{
			info = (BlankVoucherInfo)this.findByID(billID,BlankVoucherInfo.class);
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException();
		}
		finally
		{
			try
			{
				this.finalizeDAO();
			} catch (ITreasuryDAOException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		if (info == null) 
		{
			throw new BillException("Bill_E033",null);
		}
		if (!info.getPassword().equalsIgnoreCase(sPassword))
		{
			throw new BillException("Bill_E048",null);
		}
	}
    
    /**
     * 根据起始和终止凭证号查询凭证数量,并对这些凭证做业务需求检查
     * @param sBillCodeStart 起始凭证号
     * @param sBillCodeEnd 终止凭证号
     * @param lTraceAction 操作类型,查看BILLConstant.TraceAction类 
	 * @param lCheckAction 复核还是取消复核 BILLConstant.CheckAction 类
     * @return 凭证数量
     * @throws BillException
     */
    public long getBillCount(String sBillCodeStart ,String sBillCodeEnd,long lTraceAction,long lCheckAction) throws BillException
	{
    	Connection conn = null;
    	PreparedStatement ps = null;
        ResultSet rs = null;
    	long lReturn = 0;
    	String SQLstr = "";
    	try
		{
			conn = Database.getConnection();
			SQLstr = "select * from " + strTableName + " where code>=? and code <= ? and statusID!=?";
			log.print(SQLstr);
			ps = conn.prepareStatement(SQLstr);
			ps.setString(1,sBillCodeStart);
			ps.setString(2,sBillCodeEnd);
			ps.setLong(3,Constant.RecordStatus.INVALID);
			rs = ps.executeQuery();
			while (rs.next())
			{
				checkBillStatus(rs.getLong("id"),lTraceAction,lCheckAction);
				lReturn++;
			}
		}
    	catch (BillException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw e;
		} 
    	catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException();
		} 
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			} catch (SQLException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return lReturn;
	}
    /**
     * 检查票据状态
     * @param billID
     * @param lTraceAction
     * @throws BillException
     */
    public void checkBillStatus(long billID,long lTraceAction) throws BillException
	{
    	checkBillStatus(billID,lTraceAction,BILLConstant.CheckAction.CHECK);
    }
    /**
	* 检查票据状态
	* @author weilu
	* @param billID 票据号ID 
	* @param lTraceAction 操作类型,查看BILLConstant.TraceAction类 
	* @param lCheckAction 复核还是取消复核, 查看BILLConstant.CheckAction 类
	* @exception BillException
	*/
    public void checkBillStatus(long billID,long lTraceAction,long lCheckAction) throws BillException
	{
    	long lStatus = -1;
    	long lBillTypeId = -1;
    	String billCode = "";
    	BlankVoucherInfo info = null;
		try
		{
			info = (BlankVoucherInfo)this.findByID(billID,BlankVoucherInfo.class);
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException();
		}
		finally
		{
			try
			{
				this.finalizeDAO();
			} catch (ITreasuryDAOException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		if (info == null) throw new BillException("Bill_E033",null);
    	
    	lStatus = info.getStatusID();
    	lBillTypeId = info.getBillTypeID();
    	billCode = info.getCode();
    	
    	//注销
    	if (lTraceAction == BILLConstant.TraceAction.REGISTEROFF)
    	{
    		if (lCheckAction == BILLConstant.CheckAction.CANCELCHECK)
    		{
    			if (lStatus != BILLConstant.BlankBillStatus.REGISTEROFF)
		    	{
    				throw new BillException("Bill_E044",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
		    	}
    		}
    		else
    		{
    			if (lStatus == BILLConstant.BlankBillStatus.REGISTEROFF)
		    	{
		    		//票据类型XX号码XX的票据已经注销，不能再次注销
		        	throw new BillException("Bill_E040",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
		    	}
		    	else if (lStatus == BILLConstant.BlankBillStatus.USE)
		    	{
		    		//票据类型XX号码XX的票据已经使用，不能注销
		        	throw new BillException("Bill_E041",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
		    	}
		    	else if (lStatus == BILLConstant.BlankBillStatus.RETURN)
		    	{
		    		//票据类型XX号码XX的票据已经退票，不能注销
		        	throw new BillException("Bill_E042",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
		    	}
		    	else if (lStatus == BILLConstant.BlankBillStatus.DELETE)
		    	{
		    		//票据类型XX号码XX的票据已经删除，不能注销
		        	throw new BillException("Bill_E043",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
		    	}
    		}
    	}
    	else if (lTraceAction == BILLConstant.TraceAction.RETURN)//退票
    	{
    		if (lCheckAction == BILLConstant.CheckAction.CANCELCHECK)
    		{
    			if (lStatus != BILLConstant.BlankBillStatus.RETURN)
		    	{
		    		//票据类型XX号码XX的票据状态不为退票，不能取消退票
		        	throw new BillException("Bill_E047",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
		    	}
    		}
    		else
    		{
    			if (lStatus == BILLConstant.BlankBillStatus.REGISTEROFF)
		    	{
		    		//票据类型XX号码XX的票据已经注销，不能退票
		        	throw new BillException("Bill_E046",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
		    	}
    			else if (lStatus == BILLConstant.BlankBillStatus.RETURN)
		    	{
		    		//票据类型XX号码XX的票据已经退票，不能再次退票
		        	throw new BillException("Bill_E049",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
		    	}
    				
    		}
    	}
    	//挂失
    	else if (lTraceAction == BILLConstant.TraceAction.LOSS)
    	{
    		if (lStatus == BILLConstant.BlankBillStatus.LOSS)
	    	{
	    		//Bill_E054=票据类型[?]号码[?]的票据已经挂失，不能再次挂失！
	        	throw new BillException("Bill_E054",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.STOPPAY)
	    	{
	    		//Bill_E055=票据类型[?]号码[?]的票据已经止付，不能挂失！
	        	throw new BillException("Bill_E055",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.USE)
	    	{
	    		//Bill_E056=票据类型[?]号码[?]的票据已经使用，不能挂失！
	        	throw new BillException("Bill_E056",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.REGISTEROFF)
	    	{
	    		//Bill_E057=票据类型[?]号码[?]的票据已经注销，不能挂失！
	        	throw new BillException("Bill_E057",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.RETURN)
	    	{
	    		//Bill_E076=票据类型[?]号码[?]的票据已经退票，不能挂失！
	        	throw new BillException("Bill_E076",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.DELETE)
	    	{
	    		//Bill_E077=票据类型[?]号码[?]的票据已经删除，不能挂失！
	        	throw new BillException("Bill_E077",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    	}
    	//解挂
    	else if (lTraceAction == BILLConstant.TraceAction.UNLOSS)
    	{
    		if (lStatus == BILLConstant.BlankBillStatus.RECEIVE ||
    				lStatus == BILLConstant.BlankBillStatus.STOPPAY
					|| lStatus == BILLConstant.BlankBillStatus.USE
					|| lStatus == BILLConstant.BlankBillStatus.DELETE
					|| lStatus == BILLConstant.BlankBillStatus.RETURN)
	    	{
	    		//Bill_E058=票据类型[?]号码[?]的票据尚未挂失，不能解挂！
	        	throw new BillException("Bill_E058",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.REGISTEROFF)
	    	{
	    		//Bill_E059=票据类型[?]号码[?]的票据已经注销，不能解挂！
	        	throw new BillException("Bill_E059",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    	}
    	//止付
    	else if (lTraceAction == BILLConstant.TraceAction.STOPPAY)
    	{
    		if (lStatus == BILLConstant.BlankBillStatus.STOPPAY)
	    	{
	    		//Bill_E070=票据类型[?]号码[?]的票据已经止付，不能再次止付！
	        	throw new BillException("Bill_E070",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.LOSS)
	    	{
	    		//Bill_E071=票据类型[?]号码[?]的票据已经挂失，不能止付！
	        	throw new BillException("Bill_E071",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.USE)
	    	{
	    		//Bill_E072=票据类型[?]号码[?]的票据已经使用，不能止付！
	        	throw new BillException("Bill_E072",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.REGISTEROFF)
	    	{
	    		//Bill_E073=票据类型[?]号码[?]的票据已经注销，不能止付！
	        	throw new BillException("Bill_E073",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.RETURN)
	    	{
	    		//Bill_E078=票据类型[?]号码[?]的票据已经退票，不能止付！
	        	throw new BillException("Bill_E078",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.DELETE)
	    	{
	    		//Bill_E079=票据类型[?]号码[?]的票据已经删除，不能止付！
	        	throw new BillException("Bill_E079",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    	}
    	//解冻
    	else if (lTraceAction == BILLConstant.TraceAction.UNSTOPPAY)
    	{
    		if (lStatus == BILLConstant.BlankBillStatus.RECEIVE ||
    				lStatus == BILLConstant.BlankBillStatus.LOSS
					|| lStatus == BILLConstant.BlankBillStatus.USE
					|| lStatus == BILLConstant.BlankBillStatus.DELETE
					|| lStatus == BILLConstant.BlankBillStatus.RETURN)
	    	{
	    		//Bill_E074=票据类型[?]号码[?]的票据尚未止付，不能解冻！
	        	throw new BillException("Bill_E074",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    		if (lStatus == BILLConstant.BlankBillStatus.REGISTEROFF)
	    	{
	    		//Bill_E075=票据类型[?]号码[?]的票据已经注销，不能解冻！
	        	throw new BillException("Bill_E075",BillNameRef.getTypeNameByID(lBillTypeId),billCode,null);
	    	}
    	}
    	//修改
    	else if (lTraceAction == BILLConstant.TraceAction.MODIFY)
    	{
    		
    	}
	}
    /**
     * 更新指定段的票据,需要制定操作类型,根据操作类型取相应状态值
     * @param sBillCodeStart 起始票据
     * @param sBillCodeEnd	终止票据
     * @param updateDate	更新时间,不需要为null
     * @param lTraceAction 操作类型,查看BILLConstant.TraceAction类 
     * @param lCheckAction 复核还是取消复核 BILLConstant.CheckAction 类
     * @throws BillException
     */
    public void updateSomeBill(String sBillCodeStart,String sBillCodeEnd ,long lTraceAction,long lCheckAction ,Timestamp updateDate) throws BillException
	{
    	Connection conn = null;
    	PreparedStatement ps = null;
        ResultSet rs = null;
    	try
		{
    		conn = Database.getConnection();
			String SQLstr = "select * from  Bill_BlankVoucher where code>=? and code <= ? and statusID!=?";
			log.print(SQLstr);
			ps = conn.prepareStatement(SQLstr);
			ps.setString(1,sBillCodeStart);
			ps.setString(2,sBillCodeEnd);
			ps.setLong(3,Constant.RecordStatus.INVALID);
			rs = ps.executeQuery();
			while (rs.next())
			{
				BlankVoucherInfo bvInfo = (BlankVoucherInfo)findByID(rs.getLong("id"),BlankVoucherInfo.class);
				if (lCheckAction == BILLConstant.CheckAction.CHECK)
				{
					bvInfo.setFormerStatusID(rs.getLong("statusID"));//写入原先状态
					if (lTraceAction == BILLConstant.TraceAction.REGISTEROFF)
					{
						bvInfo.setStatusID(BILLConstant.BlankBillStatus.REGISTEROFF);//更新状态
						if (rs.getString("outDate")==null || rs.getString("outDate").length()==0)
							bvInfo.setOutDate(updateDate);//注销写入出库时间
					}
				}
				else
				{
					bvInfo.setStatusID(rs.getLong("formerStatusID"));//写入状态
					bvInfo.setFormerStatusID(-1);
					if (lTraceAction == BILLConstant.TraceAction.REGISTEROFF)
					{
						bvInfo.setOutDate(null);//注销清空出库时间
					}
				}
				this.updateAll(bvInfo);
			}
		}
    	catch (BillException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw e;
		} 
    	catch(Exception e)
		{
    		e.printStackTrace();
    		throw new BillException();
		}
    	finally
		{
    		try
			{
    			if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (conn != null)
				{
					conn.close();
					conn = null;
				}
			} catch (SQLException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
    
    /**
     * 更新数据
     * @param info
     * @throws BillException
     */
    public void updateAll(BlankVoucherInfo info) throws BillException
	{
    	int tmpInt = 1;
    	try
		{
			initDAO();
			String SQLstr = "update " + strTableName + "" +
					" set STATUSID=?" +
					",BILLTYPEID=?" +
					",USECLIENTID=?" +
					",USEACCOUNTID=?" +
					",PASSWORD=?" +
					",USEUSER=?" +
					",OFFICEID=?" +
					",CURRENCYID=?" +
					",INDATE=?" +
					",OUTDATE=?" +
					",FORMERSTATUSID=? " +
					"where id=?";
			transPS = transConn.prepareStatement(SQLstr);
			transPS.setLong(tmpInt++,info.getStatusID());
			transPS.setLong(tmpInt++,info.getBillTypeID());
			transPS.setLong(tmpInt++,info.getUseClientID());
			transPS.setLong(tmpInt++,info.getUseAccountID());
			transPS.setString(tmpInt++,info.getPassword());
			transPS.setString(tmpInt++,info.getUseUser());
			transPS.setLong(tmpInt++,info.getOfficeID());
			transPS.setLong(tmpInt++,info.getCurrencyID());
			transPS.setTimestamp(tmpInt++,info.getInDate());
			transPS.setTimestamp(tmpInt++,info.getOutDate());
			transPS.setLong(tmpInt++,info.getFormerStatusID());
			transPS.setLong(tmpInt++,info.getId());
			
			log.print(SQLstr);
			transPS.executeUpdate();
		} catch (ITreasuryDAOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException();
		} catch (SQLException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException();
		}
		finally
		{
			try
			{
				this.finalizeDAO();
			} catch (ITreasuryDAOException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
    	
	}
    
    /**
     * 票据的多笔查询操作
     * @param qInfo
     * @return
     */
    public Collection findBillByMultiOption(BlankVoucherQueryInfo qInfo) throws BillException
	{
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		StringBuffer sbCondition = new StringBuffer();
		
		long lStartNum = -1;
		long lEndNum = -1;
		long lRecordCount = 0;
		long lPageCount = 0;
		Vector v = new Vector();
        
		if((qInfo.getOrderParamString() != null)&&(qInfo.getOrderParamString().length() > 0))
		{
			sb.append(" order by "+qInfo.getOrderParamString());
			if(qInfo.getDesc() == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				sb.append(" desc ");
			}
		}
		else
		{
			sb.append(" order by id asc ");
		}
		sbCondition.append("\n and OfficeId= "+ qInfo.getQueryOfficeID()
				+ " and CurrencyId= "+ qInfo.getQueryCurrencyID());
		if (qInfo.getQueryBillTypeID()>0)
		{
			sbCondition.append("\n and billTypeId="+qInfo.getQueryBillTypeID());
		}
		if (qInfo.getQueryBillCodeStart() != null && qInfo.getQueryBillCodeStart().trim().length()>0)
		{
			sbCondition.append("\n and code>='"+qInfo.getQueryBillCodeStart()+"'");
		}
		if (qInfo.getQueryBillCodeEnd()!=null && qInfo.getQueryBillCodeEnd().trim().length()>0)
		{
			sbCondition.append("\n and code <='"+qInfo.getQueryBillCodeEnd()+"'");
		}
		if (qInfo.getQueryBillStatusID() >= 0)
		{
			sbCondition.append("\n and statusId in ("+qInfo.getQueryBillStatusID()+")");
		}
		if (qInfo.getQueryUseClientID()>0)
		{
			sbCondition.append("\n and useClientID=" + qInfo.getQueryUseClientID());
		}
		if (qInfo.getQueryUseAccountID() >0)
		{
			sbCondition.append("\n and useAccountID=" +qInfo.getQueryUseAccountID());
		}
		if (qInfo.getQueryInputDate() != null)
		{
			sbCondition.append("\n and to_char(InputDate,'yyyy-mm-dd')='"+
					DataFormat.getDateString(qInfo.getQueryInputDate())+"'");
		}
		if (qInfo.getQueryInputUserID()>0)
		{
			sbCondition.append("\n and inputUserID ="+qInfo.getQueryInputUserID());
		}
		try 
		{
			initDAO();

			String strSQL1 = " select count(*) from "+this.strTableName
					+" where 1=1 ";
			
			strSQL1 += sbCondition.toString();		
			
			prepareStatement(strSQL1);
			rs = executeQuery();
			try 
			{
				if (rs.next() && rs != null) 
				{
					lRecordCount = rs.getLong(1);
				}
				if(rs != null)
				{
					rs.close();
					rs = null;
				}
			} 
			catch (SQLException e1) 
			{
				throw new BillException("Bill_E012", e1);
			}
			
			//计算总页数			
			lPageCount = lRecordCount/qInfo.getPageLineCount();
			if(lRecordCount % qInfo.getPageLineCount() != 0 )
			{
				lPageCount = lPageCount +1;
			}
			//计算开始行和结束行
			lStartNum = (qInfo.getPageNo() - 1) * qInfo.getPageLineCount() + 1;
			lEndNum = qInfo.getPageNo() * qInfo.getPageLineCount() ;
			if(lEndNum > lRecordCount )
			{
				lEndNum = lRecordCount;
			}
			
			qInfo.setPageCount(lPageCount);
			
			
			String strSQL = " select * from ( select t.*,rownum rnum " +
				" from "+this.strTableName+" t " +
				" where 1=1"
				+ sbCondition.toString()
				+ sb.toString()+
				" ) where rnum between "+ lStartNum +" and " + lEndNum;
			
            prepareStatement(strSQL);
			rs = executeQuery();
			while (rs != null && rs.next())
			{
				BlankVoucherInfo info = new BlankVoucherInfo();
				info.setId(rs.getLong("id"));
				info.setCurrencyID(rs.getLong("currencyID"));
				info.setCode(rs.getString("code"));
				info.setInputDate(rs.getTimestamp("inputDate"));
				info.setInputUserID(rs.getLong("inputUserID"));
				info.setBillTypeID(rs.getLong("billTypeId"));
				info.setOfficeID(rs.getLong("officeID"));
				info.setStatusID(rs.getLong("statusId"));
				info.setUseClientID(rs.getLong("useClientID"));
				info.setUseUser(rs.getString("useUser"));
				info.setUseAccountID(rs.getLong("useAccountID"));
				info.setPageCount(lPageCount);
				info.setPageNo(qInfo.getPageNo());
				info.setRecordCount(lRecordCount);
				v.add(info);
			}
			//c = getDataEntitiesFromResultSet(info.getClass());
			finalizeDAO();
		} 
		catch (ITreasuryDAOException e) 
		{
			e.printStackTrace();
			throw new BillException("Bill_E012", e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012", e);
		}
		finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				e1.printStackTrace();
				throw new BillException("Bill_E012", e1);
			}
		}

		return (v.size() > 0 ? v : null);
    }
    
    public static void main(String[] rags) throws BillException, ITreasuryDAOException
	{
    	BlankVoucherDAO dao = new BlankVoucherDAO();
    	//BlankVoucherQueryInfo info  = new BlankVoucherQueryInfo();
    	//info.setSearchDate(Timestamp.valueOf("2005-01-18 00:00:00.0"));
    	//Collection c = dao.createDailyReport(info);
    	//System.out.println(c.size());
    	//System.out.println(dao.getBillCount("aa00010","aa00012",9));
    	BlankVoucherInfo bvInfo = (BlankVoucherInfo)dao.findByID(13,BlankVoucherInfo.class);
    	
    	dao.updateAll(bvInfo);
    	System.out.print("aaaa");
	}
}
