/* Generated by Together */

package com.iss.itreasury.bill.blankvoucher.dao;

import com.iss.itreasury.bill.util.*;
import com.iss.itreasury.bill.actiontracer.bizlogic.BillTraceBean;
import com.iss.itreasury.bill.actiontracer.dataentity.TransTracingInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.*;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Env;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

public class BlankExchangeDAO extends BillDAO {
    public BlankExchangeDAO() {
        super("Bill_BlankExchange");
    }
    
    /**
     * 检查换发的新旧票据的状态
     * @param info
     * @param conn
     * @throws BillException
     */
    public void checkBlankStatus(BlankExchangeInfo info, Connection conn) throws BillException 
	{
    	BlankVoucherDAO vDao = new BlankVoucherDAO();
    	BlankVoucherInfo oldVoucher = new BlankVoucherInfo();
    	BlankVoucherInfo newVoucher = new BlankVoucherInfo();
    	try
		{
			oldVoucher = (BlankVoucherInfo) vDao.findByID(info.getOldBillID(),BlankVoucherInfo.class);
			newVoucher = (BlankVoucherInfo) vDao.findByID(info.getNewBillID(),BlankVoucherInfo.class);
			if (oldVoucher.getBillTypeID() != info.getBillTypeID())
			{
				//Bill_E009=票据类型为[?]编号为[?]的票据尚未注册，不能换发！
				throw new BillException("Bill_E009",BillNameRef.getTypeNameByID(info.getBillTypeID()),oldVoucher.getCode(),null);
			}
			if (newVoucher.getBillTypeID()!= info.getBillTypeID())
			{
				//Bill_E009=票据类型为[?]编号为[?]的票据尚未注册，不能换发！
				throw new BillException("Bill_E009",BillNameRef.getTypeNameByID(info.getBillTypeID()),newVoucher.getCode(),null);
			}
			if (oldVoucher.getUseClientID() != info.getUseClientID())
			{
				//Bill_E051=旧票据并非[?]领用，请检查！
				throw new BillException("Bill_E051",BillNameRef.getClientNameByID(info.getUseClientID()),null);
			}
			if (oldVoucher.getUseAccountID() != info.getUseAccountID())
			{
				//Bill_E051=旧票据并非[?]领用，请检查！
				throw new BillException("Bill_E051",BillNameRef.getAccountNoByID(info.getUseAccountID()),null);
			}
			if (oldVoucher.getStatusID() != BILLConstant.BlankBillStatus.RECEIVE)
			{
				//Bill_E050=旧票据状态为[?]，不能换发！
				throw new BillException("Bill_E050",BILLConstant.BlankBillStatus.getName(oldVoucher.getStatusID()),null);
			}
			if (newVoucher.getStatusID() != BILLConstant.BlankBillStatus.REGISTER)
			{
				//Bill_E052=新票据状态为[?]，不能换发！
				throw new BillException("Bill_E052",BILLConstant.BlankBillStatus.getName(newVoucher.getStatusID()),null);
			}
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
    }
    
    /**
     * 新增凭证换发
     * @param info
     * @return
     * @throws BillException
     */
    public long exchangeBlank(BlankExchangeInfo info) throws BillException 
	{
    	long lReturn = -1;
    	try
		{
			initDAO();
			//检查票据状态
			checkBlankStatus(info,transConn);
			//插入一条换发信息
			this.setUseMaxID();
			lReturn = add(info);
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (BillException e)
		{
			e.printStackTrace();
			throw e;
		}
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    	return lReturn;
    }
    
    /**
     * 凭证换发 单笔查询
     * @param lID
     * @return
     * @throws BillException
     */
    public BlankExchangeInfo findById(long lID) throws BillException
	{
    	try
		{
			return (BlankExchangeInfo) super.findByID(lID,BlankExchangeInfo.class);
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				e1.printStackTrace();
				throw new BillException("Bill_E012", e1);
			}
		}
    }
    
    /**
     * 复核凭证换发以后要做的操作
     * 注销旧票据
     * 领用新票据
     * @param lTransId
     */
    public void doAfterCheckExchange(long lDetailId) throws BillException
	{
		try
		{
			initDAO();
			BlankExchangeInfo info = new BlankExchangeInfo();
			info = findById(lDetailId);
			
			BlankVoucherDAO vDao = new BlankVoucherDAO();
			BlankVoucherInfo oldVoucher =(BlankVoucherInfo) vDao.findByID(info.getOldBillID(),BlankVoucherInfo.class);
			BlankVoucherInfo newVoucher =(BlankVoucherInfo) vDao.findByID(info.getNewBillID(),BlankVoucherInfo.class);
			BlankVoucherInfo Voucher = new BlankVoucherInfo();
//			注销旧票据
			Voucher.setId(info.getOldBillID());
			Voucher.setStatusID(BILLConstant.BlankBillStatus.REGISTEROFF);
			Voucher.setFormerStatusID(oldVoucher.getStatusID());
			vDao.update(Voucher);
			//领用新票据
			Voucher.setId(info.getNewBillID());
			Voucher.setStatusID(BILLConstant.BlankBillStatus.RECEIVE);
			Voucher.setFormerStatusID(newVoucher.getStatusID());
			Voucher.setUseClientID(oldVoucher.getUseClientID());
			Voucher.setUseAccountID(oldVoucher.getUseAccountID());
			Voucher.setUseUser(oldVoucher.getUseUser());
			Voucher.setPassword(oldVoucher.getPassword());
			Voucher.setOutDate(Env.getBillSystemDate(oldVoucher.getOfficeID(),oldVoucher.getCurrencyID()));
			vDao.update(Voucher);
			
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012", e);
		}
		finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				e1.printStackTrace();
				throw new BillException("Bill_E012", e1);
			}
		}
    }
    
    /**
     * 取消复核要做的操作
     * 恢复票据状态
     * @param lDetailId
     * @throws BillException
     */
    public void doAfterCancelCheckExchange(long lDetailId) throws BillException
	{
		try
		{
			initDAO();
			BlankExchangeInfo info = new BlankExchangeInfo();
			info = findById(lDetailId);
			
			BlankVoucherDAO vDao = new BlankVoucherDAO();
			BlankVoucherInfo oldVoucher =(BlankVoucherInfo) vDao.findByID(info.getOldBillID(),BlankVoucherInfo.class);
			BlankVoucherInfo newVoucher =(BlankVoucherInfo) vDao.findByID(info.getNewBillID(),BlankVoucherInfo.class);
			BlankVoucherInfo Voucher = new BlankVoucherInfo();
//			恢复旧票据
			Voucher.setId(info.getOldBillID());
			Voucher.setStatusID(oldVoucher.getFormerStatusID());
			Voucher.setFormerStatusID(oldVoucher.getStatusID());
			vDao.update(Voucher);
			//恢复新票据
			Voucher.setId(info.getNewBillID());
			Voucher.setStatusID(newVoucher.getFormerStatusID());
			Voucher.setFormerStatusID(newVoucher.getStatusID());
			Voucher.setUseClientID(-1);
			Voucher.setUseAccountID(-1);
			Voucher.setUseUser("");
			//Voucher.setOutDate(Env.getBillSystemDate(oldVoucher.getOfficeID(),oldVoucher.getCurrencyID()));
			vDao.update(Voucher);
			
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012", e);
		} 
		finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				e1.printStackTrace();
				throw new BillException("Bill_E012", e1);
			}
		}
    }
    
    /**
     * 
     * @param info
     */
    public void updateExchange(BlankExchangeInfo info) throws BillException
	{
    	ResultSet rs = null;
    	long lBillTypeId = info.getBillTypeID();
    	String strBillCode = "";
    	String strException = "";
    	String strSQL = "";
    	long lTransID =-1;
    	try
		{
    		initDAO();
    		//检查交易状态，如果不处于未复核状态，抛出异常
    		strSQL = "select * from Bill_BlankTransaction where transDetailID="+info.getId()
				+" and TransTypeID="+BILLConstant.BlankTransctionType.EXCHANGE;
    		prepareStatement(strSQL);
    		rs = executeQuery();
    		if (rs!= null && rs.next())
    		{
    			lTransID = rs.getLong("id");
    			long lStatus = rs.getLong("statusID");
    			if(lStatus != BILLConstant.BlankTransctionStatus.SUBMIT)
    			{
    				//Bill_E008=该交易[?]，不能修改！
    				throw new BillException("Bill_E008",BILLConstant.BlankTransctionStatus.getName(lStatus),null);
    			}
    		}
    		
    		//逐张检查领用的票据状态
    		checkBlankStatus(info,transConn);
    			
    		//更新
    		if (info.getId()>0)
    		{
    			update(info);
    		}
    		//登记日志
    		TransTracingInfo ttInfo = new TransTracingInfo();
			BillTraceBean bTracingB = new BillTraceBean();
			ttInfo.setActionID(BILLConstant.TraceAction.MODIFY);
			ttInfo.setBillModuleID(BILLConstant.TraceModule.BLANKVOUCHER);
			ttInfo.setDetailID(lTransID);
			ttInfo.setOperateDate(Env.getBillSystemDate(info.getOfficeID(),info.getCurrencyID()));
			ttInfo.setOperatorID(info.getUserID());
			ttInfo.setRemark("修改换发信息成功！");
			bTracingB.writeTransLog(ttInfo);
			if (rs!=null)
			{
				rs.close();
				rs = null;
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (BillException e)
		{
			e.printStackTrace();
			throw e;
		}
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    }
}
