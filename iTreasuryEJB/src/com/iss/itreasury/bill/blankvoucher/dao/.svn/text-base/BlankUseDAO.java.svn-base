/* Generated by Together */

package com.iss.itreasury.bill.blankvoucher.dao;

import com.iss.itreasury.bill.util.*;
import com.iss.itreasury.bill.venture.dao.BlackBillDao;
import com.iss.itreasury.bill.venture.dataentity.BlackBillInfo;
import com.iss.itreasury.bill.actiontracer.bizlogic.BillTraceBean;
import com.iss.itreasury.bill.actiontracer.dataentity.TransTracingInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.*;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.Log;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

public class BlankUseDAO extends BillDAO {
    public BlankUseDAO() {
        super("Bill_BlankUse");
    }
    
    /**
     * 领用凭证
     * @param buInfo
     * @return
     * @throws 根据情况抛出提示信息
     */
    public long useBlank(BlankUseInfo buInfo) throws BillException
	{
    	long lReturn = -1;
    	try
		{
    		initDAO();
			//从票据起号到止号逐张循环，
			//如果该张票据在凭证表中不存在，提示尚未注册不能领用
			//如果该张票据状态是已领用，提示已领用
			//如果该张票据是“挂失”、“止付”、“使用”，提示在使用不能领用
			//如果该张票据是“注销”，提示已注销不能领用
			checkBlankStatus(buInfo,transConn);
			
			//添加一条领用信息
			this.setUseMaxID();
			lReturn = this.add(buInfo);
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (BillException e)
		{
			e.printStackTrace();
			throw e;
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				e1.printStackTrace();
				throw new BillException("Bill_E012", e1);
			}
		}
    	return lReturn;
    }
    
    /**
     * 根据密码长度生成一个随机密码
     * @param lLength
     * @return
     */
    public String getPassword(long lLength)
	{
    	String strPass = "";
    	final String strStandard = "0123456789abcdefghijklmnopqrstuvwxyz";
    	if (lLength > 0)//如果密码位数为 0 ，则不生成密码
    	{
    		int len = strStandard.length();
    		Random generator = new Random();
    		for(long i = 0;i<lLength ; i++)
    		{
    			strPass += strStandard.charAt(generator.nextInt(len));
    		}
    	}
    	return strPass;
    }
    
    public BlankUseInfo findById(long lID) throws BillException
	{
    	try
		{
			return (BlankUseInfo) super.findByID(lID,BlankUseInfo.class);
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				e1.printStackTrace();
				throw new BillException("Bill_E012", e1);
			}
		}
    }
    
    
    /**
     * 更新领用信息
     * 这里更新前必须检查交易是否仍处于未复核状态
     * 并逐张检查注册的票据是否处于注册状态
     * @param buInfo
     * @throws BillException
     */
    public void updateUse(BlankUseInfo buInfo) throws BillException{
    	ResultSet rs = null;
    	long lBillTypeId = buInfo.getBillTypeID();
    	String strBillCode = "";
    	String strException = "";
    	String strSQL = "";
    	long lTransID =-1;
    	try
		{
    		initDAO();
    		//检查交易状态，如果不处于未复核状态，抛出异常
    		strSQL = "select * from Bill_BlankTransaction where transDetailID="+buInfo.getId()
				+" and TransTypeID="+BILLConstant.BlankTransctionType.USE;
    		prepareStatement(strSQL);
    		rs = executeQuery();
    		if (rs!= null && rs.next())
    		{
    			lTransID = rs.getLong("id");
    			long lStatus = rs.getLong("statusID");
    			if(lStatus != BILLConstant.BlankTransctionStatus.SUBMIT)
    			{
    				//Bill_E008=该交易[?]，不能修改！
    				throw new BillException("Bill_E008",BILLConstant.BlankTransctionStatus.getName(lStatus),null);
    			}
    		}
    		
    		//逐张检查领用的票据状态
    		checkBlankStatus(buInfo,transConn);
    			
    		//更新
    		if (buInfo.getId()>0)
    		{
    			update(buInfo);
    		}
    		//登记日志
    		TransTracingInfo ttInfo = new TransTracingInfo();
			BillTraceBean bTracingB = new BillTraceBean();
			ttInfo.setActionID(BILLConstant.TraceAction.MODIFY);
			ttInfo.setBillModuleID(BILLConstant.TraceModule.BLANKVOUCHER);
			ttInfo.setDetailID(lTransID);
			ttInfo.setOperateDate(Env.getBillSystemDate(buInfo.getOfficeID(),buInfo.getCurrencyID()));
			ttInfo.setOperatorID(buInfo.getUserID());
			ttInfo.setRemark("修改领用信息成功");
			bTracingB.writeTransLog(ttInfo);
			if (rs!=null)
			{
				rs.close();
				rs = null;
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    }
    /**
     * 检查领用的票据的状态（新增领用和复核领用时）
     * 从票据起号到止号逐张循环，
	 * 如果该张票据在凭证表中不存在，提示尚未注册不能领用
	 * 如果该张票据状态是已领用，提示已领用
	 * 如果该张票据是“挂失”、“止付”、“使用”，提示在使用不能领用
	 * 如果该张票据是“注销”，提示已注销不能领用
     * @param buInfo
     * @param con
     * @throws BillException
     * @throws SQLException
     * @throws ITreasuryDAOException
     */
    public void checkBlankStatus(BlankUseInfo buInfo,Connection con) throws BillException, SQLException, ITreasuryDAOException
	{
    	String strBillCode="";
    	String strSQL = "";
    	ResultSet rs = null;
    	PreparedStatement ps= null;
    	
		String strCodeChar = "";
		long lStart = -1;
		long lEnd = -1;
		long lNumLen = -1;
		//分解票据编号，得到起始编号和结束编号之间的票据号
		int index = 0;
		int i =0;
		for (i=0; i < buInfo.getBillCodeStart().length();i++)
		{
			if (buInfo.getBillCodeStart().charAt(i)==buInfo.getBillCodeEnd().charAt(i)) continue;
			else {
				index = i; break;
			}
		}
		if (i >= buInfo.getBillCodeStart().length()) index = i-1;
		strCodeChar = buInfo.getBillCodeStart().substring(0,index);
		lStart = Long.parseLong(buInfo.getBillCodeStart().substring(index));
		lEnd = Long.parseLong(buInfo.getBillCodeEnd().substring(index));
		lNumLen = buInfo.getBillCodeStart().substring(index).length();
//		逐张检查注册的票据是否仍处于注册状态
    	long j;
    	
		for (j = lStart;j<= lEnd;j++)
		{
			strBillCode = UtilOperation.getFormatBillCode(strCodeChar,j,lNumLen);
			//added by qhzhou 2008-02-26	逐张检查注册的票据是否在黑名单中
			BlackBillInfo blackBillInfo=new BlackBillInfo();
			BlackBillDao blackBillDao=new BlackBillDao();
			
			blackBillInfo.setBillTypeID(buInfo.getBillTypeID());
			blackBillInfo.setBillCode(strBillCode);
			blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
			blackBillInfo.setOfficeID(buInfo.getOfficeID());
			blackBillInfo.setCurrencyID(buInfo.getCurrencyID());
			if(blackBillDao.isBillInBlackList(blackBillInfo))
			{
				//Bill_E028=当前票据类型下号码为[?]的票据已经在黑名单中存在!
				throw new BillException("Bill_E020",strBillCode,null);
			}
			
			System.out.println("code is :" +strBillCode);
    		strSQL = "select b.* from Bill_BlankVoucher b where b.billTypeId="
				+ buInfo.getBillTypeID()
				+" and b.code='"+ strBillCode +"'";
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			if (rs.next()) 
			{
				long lStatusId = rs.getLong("statusId");
				if (lStatusId != BILLConstant.BlankBillStatus.REGISTER)
				{
					//'Bill_E006':编号为[?]的票据已经被[?]，不能领用!
					throw new BillException("Bill_E006",strBillCode,BILLConstant.BlankBillStatus.getName(lStatusId),null);
				}
			}
			else
			{
				//Bill_E007=票据类型[?]编号[?]的票据尚未注册，不能领用!
				throw new BillException("Bill_E007",BillNameRef.getTypeNameByID(buInfo.getBillTypeID()),strBillCode,null);
			}
		}
		if (rs != null)
		{
			rs.close();
			rs = null;
		}
		if (ps != null)
		{
			ps.close();
			ps = null;
		}
    }
    
    /**
     * 复核领用后要做的操作
     * 按设置的密码位数，随机产生一个密码
     * 将凭证表中该张票据记录的状态改为“领用”。
     * 并修改“所属客户”、“所属帐户”、“密码”的值
     * @param lTransId
     * @throws BillException
     */
    public void doAfterCheckUse(long lTransId) throws BillException
	{
    	String strBillCode = "";
    	String strSQL = "";
    	String strException = "";
    	try
		{
			//取得相应的交易
    		BlankTransactionDAO btDao = new BlankTransactionDAO();
			BlankTransactionInfo btInfo = btDao.findById(lTransId);
			BlankUseInfo buInfo =(BlankUseInfo) btInfo.getDetailInfo();
			String strCodeChar = "";
			long lStart = -1;
			long lEnd = -1;
			long lNumLen = -1;
//			分解票据编号，得到起始编号和结束编号之间的票据号
			int index = 0;
			int i =0;
			for (i=0; i < buInfo.getBillCodeStart().length();i++)
			{
				if (buInfo.getBillCodeStart().charAt(i)==buInfo.getBillCodeEnd().charAt(i)) continue;
				else {
					index = i; break;
				}
			}
			if (i >= buInfo.getBillCodeStart().length()) index = i-1;
			strCodeChar = buInfo.getBillCodeStart().substring(0,index);
			lStart = Long.parseLong(buInfo.getBillCodeStart().substring(index));
			lEnd = Long.parseLong(buInfo.getBillCodeEnd().substring(index));
			lNumLen = buInfo.getBillCodeStart().substring(index).length();
			
			BlankUseDAO buDao = new BlankUseDAO();
			
			//更新票据信息
			long j=0;
			for (j = lStart;j<= lEnd;j++)
			{
				strBillCode = UtilOperation.getFormatBillCode(strCodeChar,j,lNumLen);
				BlankVoucherDAO bvDao = new BlankVoucherDAO();
				BlankVoucherInfo bvInfo = new BlankVoucherInfo();
				bvInfo.setId(Long.parseLong(BillNameRef.getBlankIDByCode(strBillCode)));
//				按设置的密码位数，随机产生一个密码
				String strPassword = buDao.getPassword(buInfo.getPasswordLen());
				bvInfo.setPassword(strPassword);
				bvInfo.setUseAccountID(buInfo.getUseAccountID());
				bvInfo.setUseClientID(buInfo.getUseClientID());
				bvInfo.setUseUser(buInfo.getUseUser());
				bvInfo.setOutDate(Env.getBillSystemDate(btInfo.getOfficeID(),btInfo.getCurrencyID()));
				//bvInfo.setOutPrice(buInfo.getOutPrice());
				bvInfo.setStatusID(BILLConstant.BlankBillStatus.RECEIVE);
				bvDao.update(bvInfo);
			}
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}    	
    }
    
    /**
     * 	取消复核领用后要做的操作
     * @param lTransId
     * @throws BillException
     */
    public void doAfterCancelCheckUse(long lTransId) throws BillException
	{
    	String strBillCode = "";
    	String strSQL = "";
    	String strException = "";
    	try
		{
			//取得相应的交易
    		BlankTransactionDAO btDao = new BlankTransactionDAO();
			BlankTransactionInfo btInfo = btDao.findById(lTransId);
			BlankUseInfo buInfo =(BlankUseInfo) btInfo.getDetailInfo();
			//修改领用的票据的状态
//			分解票据编号，得到起始编号和结束编号之间的票据号
			String strCodeChar = "";
			long lStart = -1;
			long lEnd = -1;
			long lNumLen = -1;
			int index = 0;
			int i =0;
			for (i=0; i < buInfo.getBillCodeStart().length();i++)
			{
				if (buInfo.getBillCodeStart().charAt(i)==buInfo.getBillCodeEnd().charAt(i)) continue;
				else {
					index = i; break;
				}
			}
			if (i >= buInfo.getBillCodeStart().length()) index = i-1;
			strCodeChar = buInfo.getBillCodeStart().substring(0,index);
			lStart = Long.parseLong(buInfo.getBillCodeStart().substring(index));
			lEnd = Long.parseLong(buInfo.getBillCodeEnd().substring(index));
			lNumLen = buInfo.getBillCodeStart().substring(index).length();
			
			//更新票据信息,将状态置为注册
			long j=0;
			for (j = lStart;j<= lEnd;j++)
			{
				strBillCode = UtilOperation.getFormatBillCode(strCodeChar,j,lNumLen);
				BlankVoucherDAO bvDao = new BlankVoucherDAO();
				BlankVoucherInfo bvInfo = new BlankVoucherInfo();
				
				long bvId = Long.parseLong(BillNameRef.getBlankIDByCode(strBillCode));
				bvInfo = (BlankVoucherInfo)bvDao.findByID(bvId,BlankVoucherInfo.class);
				if(bvInfo != null && bvInfo.getStatusID() != BILLConstant.BlankBillStatus.RECEIVE){
					//Bill_E003=编号为[?]的票据已经被[?]，不能取消复核!
					throw new BillException("Bill_E003",strBillCode,BILLConstant.BlankBillStatus.getName(bvInfo.getStatusID()),null);
				}
				bvInfo.setId(bvId);
				bvInfo.setPassword("");
				bvInfo.setUseAccountID(-1);
				bvInfo.setUseClientID(-1);
				bvInfo.setUseUser("");
				bvInfo.setStatusID(BILLConstant.BlankBillStatus.REGISTER);
				bvDao.update(bvInfo);
			}
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} 
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}    	
    }
    
    public static void main(String[] arg) 
	{
    	BlankUseDAO dao = new BlankUseDAO();
    	String temp = "";
    	temp = dao.getPassword(10);
    	System.out.println(temp);
    	BlankUseInfo info = new BlankUseInfo();
    	info.setBillCodeEnd("aa00003");
    	info.setBillCodeStart("aa00003");
    	info.setBillTypeID(3);
    	/*
    	try
		{
			//info = dao.findById(3);
			//Log.print(info);
		} catch (BillException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
    }
}
