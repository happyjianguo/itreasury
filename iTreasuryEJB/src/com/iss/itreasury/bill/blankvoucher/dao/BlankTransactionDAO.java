/* Generated by Together */

package com.iss.itreasury.bill.blankvoucher.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Vector;

import com.iss.itreasury.bill.actiontracer.bizlogic.BillTraceBean;
import com.iss.itreasury.bill.actiontracer.dataentity.TransTracingInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankCheckInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankExchangeInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankRegisterInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankReturnInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankTransDetailInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankTransQueryInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankTransactionInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankUseInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankVoucherInfo;
import com.iss.itreasury.bill.blankvoucher.dataentity.BlankWriteOffInfo;
import com.iss.itreasury.bill.util.BILLConstant;
import com.iss.itreasury.bill.util.BillDAO;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.bill.util.UtilOperation;
import com.iss.itreasury.bill.venture.dao.BlackBillDao;
import com.iss.itreasury.bill.venture.dataentity.BlackBillInfo;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.Log4j;

public class BlankTransactionDAO extends BillDAO {
	
	private Log4j log4j = new Log4j(Constant.ModuleType.BILL, this);
	
    public BlankTransactionDAO() {
        super("Bill_BlankTransaction");
    }
	/**
	 * Method getNewTransactionNo.
	 * 调用结算的方法生成统一的交易编号。在票据管理系统中主要是空白凭证交易调用此方法生成交易编号
	 * @param lOfficeID 
	 * @param lCurrencyID     
	 * @return String
	 */
	public String getNewTransactionNo(long lOfficeID, long lCurrencyID) throws BillException
	{
		String transNo="";
		UtilOperation bean = new UtilOperation();
		transNo=bean.getNewTransactionNo( lOfficeID,lCurrencyID);
		return transNo;
	}	
    
    /**
     * 根据交易类型取得一个新的编号
     * 改变此方法，改用getNewTransactionNo
     * @param lTransType
     * @return
     */
    public String getNewCode(long lTransType) throws BillException
	{
    	String strCode="";
    	long lCode=-1;
    	String strSQL = "";
    	Timestamp tsToday = Env.getSystemDateTime();
        String strYear = DataFormat.getDateString(tsToday).substring(2, 4);
    	try
		{
			initDAO();
			strSQL = " select max(nvl(transCode,0)) Code "
                    + " from " + this.strTableName + " "
                    + " where transCode like '"
                    + strYear + String.valueOf(lTransType) + "%'";
			prepareStatement(strSQL);
            ResultSet rs = executeQuery();
            if (rs != null && rs.next())
            {
            	strCode = rs.getString(1);
                log4j.debug(strCode);
                if (strCode != null && strCode.length() == 10)
                {
                    lCode = Long.parseLong(strCode.substring(4)) + 1;
                }
                else
                	lCode = 1;
                strCode = strYear + DataFormat.formatInt(lTransType,2)
                        + DataFormat.formatInt(lCode, 6);
            }
            if (rs != null)
            {
                rs.close();
                rs = null;
            }
            finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001",e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001",e);
		}
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				throw new BillException("Gen_E001",e);
			}
		}
    	return strCode;
    }
    
    /**
     * 交易复核
     * @param info
     */
    public void checkTransaction(BlankCheckInfo bcInfo) throws BillException
	{
    	try
		{
			BlankTransactionInfo btInfo = findById(bcInfo.getTransactionID());
			
			initDAO();
			if (bcInfo.getCheckTypeID() == BILLConstant.CheckAction.CHECK)//复核
			{
//				首先判断是否与录入日在同一个结算日
				///*
//				if ( ! DataFormat.getDateString(bcInfo.getCheckDate()).equalsIgnoreCase(DataFormat.getDateString(btInfo.getInputDate())))
//				{
//					// Bill_E004:复核操作必须和录入操作在同一个结算日内进行！
//					throw new BillException("Bill_E004",null);
//				}
				//检查交易状态
				if (btInfo.getStatusID() != BILLConstant.BlankTransctionStatus.SUBMIT)
				{
					throw new BillException("Bill_E060",null);
				}
				//*/
				if (bcInfo.getTransactionID()>0)
				{
					//如果是复核凭证注册，检查注册的凭证编号是否已经存在
					//若已经存在抛出异常，复核失败
					if (bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.REGISTER)
					{
						BlankRegisterDAO brDao = new BlankRegisterDAO();
						BlankRegisterInfo brInfo = (BlankRegisterInfo) btInfo.getDetailInfo();
						brDao.isBlankRegistered(brInfo,transConn);
						//票据风险黑名单预警 added by qhzhou 2008-02-26
						if(brInfo != null){
			    			long lTmp = brInfo.getCodeNumStart();
			    			while(lTmp <= brInfo.getCodeNumEnd()){
			    				String strBillCode = UtilOperation.getFormatBillCode(brInfo.getCodeChar(),lTmp,brInfo.getCodeNumLen());
			    				BlackBillInfo blackBillInfo=new BlackBillInfo();
			    				BlackBillDao blackBillDao=new BlackBillDao();
			    				
			    				blackBillInfo.setBillTypeID(brInfo.getBillTypeID());
			    				blackBillInfo.setBillCode(strBillCode);
			    				blackBillInfo.setStatusID(Constant.RecordStatus.VALID);
			    				blackBillInfo.setOfficeID(bcInfo.getOfficeID());
			    				blackBillInfo.setCurrencyID(bcInfo.getCurrencyID());
			    				if(blackBillDao.isBillInBlackList(blackBillInfo))
			    				{
			    					//Bill_E028=当前票据类型下号码为[?]的票据已经在黑名单中存在!
			    					throw new BillException("Bill_E020",strBillCode,null);
			    				}
			    				lTmp++;
			    			}
			    			
			    		}
					}
					//如果复核的是凭证领用，检查该凭证是否存在（可能注册的取消复核时被删掉了）
					//如果不存在，抛出异常，复核失败
					else if(bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.USE)
					{
						BlankUseDAO dao = new BlankUseDAO();
						BlankUseInfo info = (BlankUseInfo) btInfo.getDetailInfo();
						info.setOfficeID(bcInfo.getOfficeID());
						info.setCurrencyID(bcInfo.getCurrencyID());
						dao.checkBlankStatus(info,transConn);
					}
					else if (bcInfo.getTransactionTypeID()==BILLConstant.BlankTransctionType.EXCHANGE)
					{
						BlankExchangeDAO dao = new BlankExchangeDAO();
						BlankExchangeInfo info = (BlankExchangeInfo) btInfo.getDetailInfo();
						dao.checkBlankStatus(info,transConn);
					}
				
					
					//修改交易状态记录为已复核
					BlankTransactionInfo TransInfo = new BlankTransactionInfo();
					TransInfo.setId(bcInfo.getTransactionID());
					TransInfo.setStatusID(BILLConstant.BlankTransctionStatus.CHECK);
					TransInfo.setCheckUserID(bcInfo.getCheckUserID());
					TransInfo.setCheckDate(bcInfo.getCheckDate());
					BlankTransactionDAO btDao = new BlankTransactionDAO();
					btDao.update(TransInfo);
					//分情况处理复核完成以后的操作
					if (bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.REGISTER)
					{
						BlankRegisterDAO dao = new BlankRegisterDAO();
						dao.doAfterCheckRegister(bcInfo.getTransactionID());
					}
					else if (bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.USE)
					{
						BlankUseDAO dao = new BlankUseDAO();
						dao.doAfterCheckUse(bcInfo.getTransactionID());
					}
					else if (bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.EXCHANGE)
					{
						BlankExchangeDAO dao = new BlankExchangeDAO();
						dao.doAfterCheckExchange(btInfo.getTransDetailID());
					}
					else if (bcInfo.getTransactionTypeID()==BILLConstant.BlankTransctionType.WRITEOFF)
					{
						BlankWriteOffDAO dao = new BlankWriteOffDAO();
						BlankVoucherDAO bvDao = new BlankVoucherDAO();
						
						BlankWriteOffInfo info = (BlankWriteOffInfo) btInfo.getDetailInfo();
						//逐条检查状态
						bvDao.getBillCount(info.getBillCodeStart(),info.getBillCodeEnd(),BILLConstant.TraceAction.REGISTEROFF,BILLConstant.CheckAction.CHECK);
						//更新状态
						bvDao.updateSomeBill(info.getBillCodeStart(),info.getBillCodeEnd(),BILLConstant.TraceAction.REGISTEROFF,BILLConstant.CheckAction.CHECK,btInfo.getCheckDate());
					}
					else if (bcInfo.getTransactionTypeID()==BILLConstant.BlankTransctionType.RETURN)
					{
						BlankReturnInfo info = (BlankReturnInfo) btInfo.getDetailInfo();				
						BlankVoucherDAO bvDao = new BlankVoucherDAO();
						
						BlankVoucherInfo bvInfo = (BlankVoucherInfo)bvDao.findByID(info.getBillID(),BlankVoucherInfo.class);
						//检查密码是否正确
						bvDao.checkBillPass(info.getBillID(),info.getBillPassword());

						//将状态写入原状态中
						bvInfo.setFormerStatusID(bvInfo.getStatusID());
						bvInfo.setStatusID(BILLConstant.BlankBillStatus.RETURN);
						
						//先检查凭证状态
		    			bvDao.checkBillStatus(info.getBillID(),BILLConstant.TraceAction.RETURN,BILLConstant.CheckAction.CHECK);
		    			//更新状态为退票
						bvDao.updateAll(bvInfo);
					}
				}
//				会计分录
				//UtilOperation utilOp = new UtilOperation();
				//utilOp.generateGLEntry(btInfo);
			}
			else if (bcInfo.getCheckTypeID() == BILLConstant.CheckAction.CANCELCHECK )//取消复核
			{
//				首先判断是否与复核日在同一个结算日
				if ( ! DataFormat.getDateString(bcInfo.getCheckDate()).equalsIgnoreCase(DataFormat.getDateString(btInfo.getCheckDate())))
				{
					// Bill_E005=取消复核操作必须和录入及复核操作在同一个结算日内进行！
					throw new BillException("Bill_E005",null);
				}
				//检查交易状态
				if (btInfo.getStatusID() != BILLConstant.BlankTransctionStatus.CHECK)
				{
					throw new BillException("Bill_E061",null);
				}
				if (bcInfo.getTransactionID()>0)
				{
					//如果取消复核的是凭证注册，要先检验注册的凭证是否有被领用的
					if (bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.REGISTER)
					{
						BlankRegisterDAO brDao = new BlankRegisterDAO();
						BlankRegisterInfo brInfo = (BlankRegisterInfo) btInfo.getDetailInfo();
						initDAO();
						brDao.isBlankUsed(brInfo,transConn);
					}
					//修改交易状态记录为未复核
					BlankTransactionInfo TransInfo = new BlankTransactionInfo();
					TransInfo.setId(bcInfo.getTransactionID());
					TransInfo.setStatusID(BILLConstant.BlankTransctionStatus.SUBMIT);
					TransInfo.setCheckUserID(-1);
					BlankTransactionDAO btDao = new BlankTransactionDAO();
					btDao.update(TransInfo);
					//如果取消复核的是注册信息
					if (bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.REGISTER)
					{
						BlankRegisterDAO dao = new BlankRegisterDAO();
						dao.doAfterCancelCheckRegister(bcInfo.getTransactionID());
					}
					else if (bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.USE)
					{
						BlankUseDAO dao = new BlankUseDAO();
						dao.doAfterCancelCheckUse(bcInfo.getTransactionID());
					}
					else if (bcInfo.getTransactionTypeID()== BILLConstant.BlankTransctionType.EXCHANGE)
					{
						BlankExchangeDAO dao = new BlankExchangeDAO();
						dao.doAfterCancelCheckExchange(btInfo.getTransDetailID());
					}
					else if (bcInfo.getTransactionTypeID()==BILLConstant.BlankTransctionType.WRITEOFF)
					{
						BlankWriteOffDAO dao = new BlankWriteOffDAO();
						BlankVoucherDAO bvDao = new BlankVoucherDAO();
						
						BlankWriteOffInfo info = (BlankWriteOffInfo) btInfo.getDetailInfo();
						//逐条检查状态
						bvDao.getBillCount(info.getBillCodeStart(),info.getBillCodeEnd(),BILLConstant.TraceAction.REGISTEROFF,BILLConstant.CheckAction.CANCELCHECK);
						//更新状态
						bvDao.updateSomeBill(info.getBillCodeStart(),info.getBillCodeEnd(),BILLConstant.TraceAction.REGISTEROFF,BILLConstant.CheckAction.CANCELCHECK,btInfo.getCheckDate());
					}
					else if (bcInfo.getTransactionTypeID()==BILLConstant.BlankTransctionType.RETURN)
					{
						BlankReturnInfo info = (BlankReturnInfo) btInfo.getDetailInfo();				
						BlankVoucherDAO bvDao = new BlankVoucherDAO();
						
						BlankVoucherInfo bvInfo = (BlankVoucherInfo)bvDao.findByID(info.getBillID(),BlankVoucherInfo.class);
						
						//先检查凭证状态
		    			bvDao.checkBillStatus(info.getBillID(),BILLConstant.TraceAction.RETURN,BILLConstant.CheckAction.CANCELCHECK);
						
						//将原来状态写回
						bvInfo.setStatusID(bvInfo.getFormerStatusID());
						bvInfo.setFormerStatusID(-1);
						
		    			//更新状态为退票
						bvDao.updateAll(bvInfo);
					}
				}
				//会计分录
				//UtilOperation utilOp = new UtilOperation();
				//utilOp.deleteTransAccountDetail(btInfo.getTransCode());
			}

			//记操作日志
			TransTracingInfo ttInfo = new TransTracingInfo();
			BillTraceBean bTracingB = new BillTraceBean();
			ttInfo.setActionID(bcInfo.getTransactionTypeID());
			ttInfo.setBillModuleID(BILLConstant.TraceModule.BLANKVOUCHER);
			ttInfo.setDetailID(btInfo.getId());
			ttInfo.setOperateDate(bcInfo.getCheckDate());
			ttInfo.setOperatorID(bcInfo.getCheckUserID());
			if (bcInfo.getCheckTypeID()==BILLConstant.CheckAction.CHECK)
				ttInfo.setRemark("复核交易成功！");
			else if (bcInfo.getCheckTypeID()==BILLConstant.CheckAction.CANCELCHECK)
				ttInfo.setRemark("取消复核交易成功！");
			bTracingB.writeTransLog(ttInfo);
			
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (BillException e)
		{
			e.printStackTrace();
			throw e;
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    }

    /**
     * 通过交易 id 查询交易信息
     * @param lTransID
     * @return
     */
    public BlankTransactionInfo findById(long lID) throws BillException
	{
    	BlankTransactionInfo btInfo = new BlankTransactionInfo();
    	ResultSet rs = null;
        String strSQL = "";
        try
		{
			initDAO();
			strSQL = "select * from Bill_BlankTransaction where id=" +lID;
			prepareStatement(strSQL);
			rs = executeQuery();
			if (rs != null && rs.next())
			{
				btInfo.setCheckDate(rs.getTimestamp("checkDate"));
				btInfo.setCheckUserID(rs.getLong("checkUserId"));
				btInfo.setCurrencyID(rs.getLong("CurrencyID"));
				btInfo.setExecuteDate(rs.getTimestamp("ExecuteDate"));
				btInfo.setId(lID);
				btInfo.setInputDate(rs.getTimestamp("InputDate"));
				btInfo.setInputUserID(rs.getLong("inputUserID"));
				btInfo.setInterestStartDate(rs.getTimestamp("InterestStartDate"));
				btInfo.setOfficeID(rs.getLong("OfficeID"));
				btInfo.setStatusID(rs.getLong("statusId"));
				btInfo.setSummary(rs.getString("Summary"));
				btInfo.setTransCode(rs.getString("TransCode"));
				btInfo.setTransDetailID(rs.getLong("TransDetailId"));
				btInfo.setTransTypeID(rs.getLong("TransTypeId"));
				
				//取得交易详细记录
				BlankTransDetailInfo detailInfo = new BlankTransDetailInfo();
				if (btInfo.getTransTypeID()== BILLConstant.BlankTransctionType.REGISTER)//注册
				{
					BlankRegisterDAO brDao = new BlankRegisterDAO();
					detailInfo = brDao.findById(btInfo.getTransDetailID());
				}
				else if (btInfo.getTransTypeID()==BILLConstant.BlankTransctionType.USE)//领用
				{
					BlankUseDAO buDao = new BlankUseDAO();
					detailInfo =(BlankUseInfo) buDao.findById(btInfo.getTransDetailID());
				}
				else if (btInfo.getTransTypeID()==BILLConstant.BlankTransctionType.EXCHANGE)//换发
				{
					BlankExchangeDAO beDao = new BlankExchangeDAO();
					detailInfo = beDao.findById(btInfo.getTransDetailID());
				}
				else if (btInfo.getTransTypeID()==BILLConstant.BlankTransctionType.WRITEOFF)//注销
				{
					BlankWriteOffDAO bwDao = new BlankWriteOffDAO();
					detailInfo = bwDao.findById(btInfo.getTransDetailID());
				}
				else if (btInfo.getTransTypeID()==BILLConstant.BlankTransctionType.RETURN)//支票退票
				{
					BlankReturnDAO brDao = new BlankReturnDAO();
					detailInfo = brDao.findById(btInfo.getTransDetailID());
				}
				btInfo.setDetailInfo(detailInfo);
			}
			if (rs != null)
            {
                rs.close();
                rs = null;
            }
            finalizeDAO();
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		}
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    	return btInfo;
    }
    
    /**
     *根据查询条件查询空白凭证交易信息
     * @param qInfo 查询条件信息
     * @return Collection中的对象为BlankTransactionInfo
     * @throws BillException
     */
    public Collection findByMultiOption(BlankTransQueryInfo qInfo) throws BillException{
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		StringBuffer sbCondition = new StringBuffer();
		
		long lStartNum = -1;
		long lEndNum = -1;
		long lRecordCount = 0;
		long lPageCount = 0;
		Vector v = new Vector();
        
		if((qInfo.getOrderParamString() != null)&&(qInfo.getOrderParamString().length() > 0))
		{
			sb.append(" order by "+qInfo.getOrderParamString());
			if(qInfo.getDesc() == Constant.PageControl.CODE_ASCORDESC_DESC)
			{
				sb.append(" desc ");
			}
		}
		else
		{
			sb.append(" order by id desc ");
		}
		sbCondition.append(" and OfficeId= "+ qInfo.getOfficeID()
				+ " and CurrencyId= "+ qInfo.getCurrencyID());
		if (qInfo.getTransTypeId()>0)
		{
			sbCondition.append(" and TransTypeId="+qInfo.getTransTypeId());
		}
		if(qInfo.getTransTypeId() == BILLConstant.BlankTransctionType.RETURN)
		{
			sbCondition.append(" and to_char(inputdate,'yyyy-mm-dd')='" + DataFormat.getDateString(Env.getBillSystemDate(qInfo.getOfficeID(),qInfo.getCurrencyID())) + "'");
		}
		if (qInfo.getQueryPurpose() == 2)//for check
		{
			if (qInfo.getQueryStatusID()== BILLConstant.BlankTransctionStatus.SUBMIT)
			{
				sbCondition.append(" and statusId="+qInfo.getQueryStatusID()+ " and inputUserId <>" + qInfo.getUserID());
			}
			else if (qInfo.getQueryStatusID()== BILLConstant.BlankTransctionStatus.CHECK)
			{
				sbCondition.append( " and statusId="+qInfo.getQueryStatusID());
				sbCondition.append(" and checkUserID="+ qInfo.getUserID());
			}
			else
			{
				sbCondition.append(" and ((statusId="+BILLConstant.BlankTransctionStatus.SUBMIT+" and inputUserId<>"+qInfo.getUserID()+")");
				sbCondition.append(" or (StatusId="+BILLConstant.BlankTransctionStatus.CHECK+ " and checkUserID="+qInfo.getUserID()+"))");
			}	
		}
		else if(qInfo.getQueryPurpose() == 1)//for modify
		{
			sbCondition.append(" and statusId="+ BILLConstant.BlankTransctionStatus.SUBMIT+ " and inputUserId =" + qInfo.getUserID());
		}
		try 
		{
			initDAO();

			String strSQL1 = " select count(*) from "+this.strTableName
					+" where 1=1 ";
			
			strSQL1 += sbCondition.toString();		
			
			prepareStatement(strSQL1);
			rs = executeQuery();
			try 
			{
				
				if (rs.next() && rs != null) 
				{
					lRecordCount = rs.getLong(1);
				}
				if(rs != null)
				{
					rs.close();
					rs = null;
				}
			} 
			catch (SQLException e1) 
			{
				throw new BillException("Bill_E012", e1);
			}
			
			//计算总页数			
			lPageCount = lRecordCount/qInfo.getPageLineCount();
			if(lRecordCount % qInfo.getPageLineCount() != 0 )
			{
				lPageCount = lPageCount +1;
			}
			//计算开始行和结束行
			lStartNum = (qInfo.getPageNo() - 1) * qInfo.getPageLineCount() + 1;
			lEndNum = qInfo.getPageNo() * qInfo.getPageLineCount() ;
			if(lEndNum > lRecordCount )
			{
				lEndNum = lRecordCount;
			}
			
			qInfo.setPageCount(lPageCount);
			
			
			String strSQL = " select * from ( select t.*,rownum rnum " +
				" from "+this.strTableName+" t " +
				" where 1=1"
				+ sbCondition.toString()
				+ sb.toString()+
				" ) where rnum between "+ lStartNum +" and " + lEndNum;
			System.out.println("查询结果strSQL："+strSQL);
            prepareStatement(strSQL);
			rs = executeQuery();
			while (rs != null && rs.next())
			{
				long lId = rs.getLong("id");
				if (lId >0)
				{
					BlankTransactionDAO dao = new BlankTransactionDAO();
					BlankTransactionInfo info = dao.findById(lId);
					info.setPageCount(lPageCount);
					info.setPageNo(qInfo.getPageNo());
					info.setRecordCount(lRecordCount);
					v.add(info);
				}
			}
			//c = getDataEntitiesFromResultSet(info.getClass());
    		if (rs != null)
    		{
    			rs.close();
    			rs = null;
    		}
			finalizeDAO();
			
		} 
		catch (ITreasuryDAOException e) 
		{
			e.printStackTrace();
			throw new BillException("Bill_E012", e);
		} catch (SQLException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012", e);
		}
		finally
		{
			try 
			{				
				finalizeDAO();
			} 
			catch (ITreasuryDAOException e1) 
			{
				e1.printStackTrace();
				throw new BillException("Bill_E012", e1);
			}
		}

		return (v.size() > 0 ? v : null);
    }
    /**
     * 交易删除
     * @param info
     */
    public void delTransaction(BlankTransactionInfo btInfo) throws BillException
	{
    	try
		{
			initDAO();
			//检查交易状态
			if (!(btInfo.getStatusID() == BILLConstant.BlankTransctionStatus.SUBMIT || btInfo.getStatusID() == BILLConstant.BlankTransctionStatus.REFUSE))
			{
				throw new BillException("Bill_E061",null);//
			}
			if (btInfo.getId()>0)
			{
				//修改交易状态记录为删除
				BlankTransactionInfo TransInfo = new BlankTransactionInfo();
				TransInfo.setId(btInfo.getId());
				TransInfo.setStatusID(BILLConstant.BlankTransctionStatus.DELETE);
				TransInfo.setCheckUserID(-1);
				BlankTransactionDAO btDao = new BlankTransactionDAO();
				btDao.update(TransInfo);
				//记操作日志
				TransTracingInfo ttInfo = new TransTracingInfo();
				BillTraceBean bTracingB = new BillTraceBean();
				ttInfo.setActionID(btInfo.getTransTypeID());
				ttInfo.setBillModuleID(BILLConstant.TraceModule.BLANKVOUCHER);
				ttInfo.setDetailID(btInfo.getId());
				ttInfo.setOperateDate(btInfo.getCheckDate());
				ttInfo.setOperatorID(btInfo.getCheckUserID());
				ttInfo.setRemark("删除交易成功！");
				bTracingB.writeTransLog(ttInfo);
			} 
		}catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new BillException("Bill_E012",e);
		} catch (BillException e)
		{
			e.printStackTrace();
			throw e;
		}
		finally
		{
			try
			{
				finalizeDAO();
			}
			catch (ITreasuryDAOException e)
			{
				e.printStackTrace();
				throw new BillException("Bill_E012",e);
			}
		}
    }
    public static void main(String[] arg) 
	{
    	BlankTransactionDAO dao = new BlankTransactionDAO();
    	BlankTransQueryInfo qInfo = new BlankTransQueryInfo();
    	BlankCheckInfo bcInfo = new BlankCheckInfo();
    	bcInfo.setCheckTypeID(1);
    	bcInfo.setCheckUserID(1);
    	bcInfo.setCurrencyID(1);
    	bcInfo.setTransactionID(158);
    	bcInfo.setTransactionTypeID(BILLConstant.BlankTransctionType.WRITEOFF);
    	bcInfo.setOfficeID(1);
    	bcInfo.setCheckDate(Timestamp.valueOf("2005-01-18 00:00:00"));
    	try
		{
    		dao.checkTransaction(bcInfo);
    		//Collection c = dao.findByMultiOption(qInfo);
    		//Log.print("size:"+c.size());
			//String temp = dao.getNewCode(1);
			//Log.print(temp);
    		dao.checkTransaction(bcInfo);
		} catch (BillException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
    }
}
