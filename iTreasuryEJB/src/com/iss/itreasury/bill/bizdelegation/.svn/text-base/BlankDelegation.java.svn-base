/* Generated by Together */

package com.iss.itreasury.bill.bizdelegation;

import java.rmi.RemoteException;
import java.sql.Timestamp;
import java.util.*;

import javax.ejb.CreateException;

import com.iss.itreasury.bill.util.*;
import com.iss.itreasury.bill.blankvoucher.bizlogic.BlankVoucher;
import com.iss.itreasury.bill.blankvoucher.bizlogic.BlankVoucherHome;
import com.iss.itreasury.bill.blankvoucher.dataentity.*;
//import com.iss.itreasury.bill.blankvoucher.dao.*;
import com.iss.itreasury.util.EJBHomeFactory;
import com.iss.itreasury.util.IException;

public class BlankDelegation {
	
	private BlankVoucher BlankVoucherFacade = null;
	
	public BlankDelegation() throws RemoteException
	{
		try
		{
		    BlankVoucherHome home;
			try {
				home =
					(BlankVoucherHome) EJBHomeFactory.getFactory().lookUpHome(
							BlankVoucherHome.class);
			} catch (IException e) {
				throw new RemoteException("EJBHomeFactory连接错误",e);
			}
			BlankVoucherFacade = (BlankVoucher) home.create();			
		}
		catch (CreateException ce)
		{
			throw new RemoteException("发生CreateException",ce);
		}

	}
    /**
     *增加一条交易信息 调用blankBean的相应方法
     * @param BlankTransactionInfo	交易信息
     * @return long 新增的交易的ID
     * @throws BillException
     */
    public long addTrans(BlankTransactionInfo info) throws BillException {
        try
		{
			return BlankVoucherFacade.addTrans(info);
		} catch (BillException re)
		{
			throw re;
		} catch (RemoteException e)
		{
			throw new BillException(e.getMessage(),e);
		}
    }

    /**
     * 保存一条交易信息 调用BlankVoucherEJB的相应方法
     * @param BlankTransactionInfo	交易信息
     * @return long 交易的ID
     * @throws BillException
     */
    public long updateTrans(BlankTransactionInfo info) throws BillException {
    	try
		{
			return BlankVoucherFacade.updateTrans(info);
		} catch (BillException re)
		{
			throw re;
		} catch (RemoteException e)
		{
			throw new BillException(e.getMessage(),e);
		}
    }
    /**
     * 删除一条交易信息 调用BlankVoucherEJB的相应方法
     * @param info
     * @throws BillException
     */
    public long delTrans(BlankTransactionInfo info)throws BillException {
    	long lReturn = -1;
    	try{
    		lReturn = BlankVoucherFacade.delTrans(info);
    	}catch(BillException be){
    		throw be;
    	}catch(RemoteException re){
    		throw new BillException(re.getMessage(),re);
    	}
    	return lReturn;
    }
    /**
     * 根据交易ID查找交易明细 调用BlankVoucherEJB的相应方法
     * @param long	交易信息ID
     * @return BlankTransactionInfo 交易明细信息
     * @throws BillException
     */
    public BlankTransactionInfo findTransByTransID(long lID) throws BillException {
    	try
		{
			return BlankVoucherFacade.findTransByTransID(lID);
		} catch (BillException re)
		{
			throw re;
		} catch (RemoteException e)
		{
			throw new BillException(e.getMessage(),e);
		}
    }

    /**
     * 交易信息多笔查找 调用BlankVoucherEJB的相应方法
     * @param BlankTransQueryInfo	交易查询信息
     * @return Collection 交易明细信息集合
     * @throws BillException
     */
    public Collection findTransByMultiOption(BlankTransQueryInfo qInfo) throws BillException {
    	try
		{
			return BlankVoucherFacade.findTransByMultiOption(qInfo);
		} catch (BillException re)
		{
			throw re;
		} catch (RemoteException e)
		{
			throw new BillException(e.getMessage(),e);
		}
    }

    /**
     * 复核/取消复核交易 调用BlankVoucherEJB的相应方法
     * @param BlankCheckInfo	交易复核信息
     * @return
     * @throws BillException
     */
    public void checkTrans(BlankCheckInfo cInfo) throws BillException{
    	try
		{
			BlankVoucherFacade.checkTrans(cInfo);
		} catch (BillException re)
		{
			throw re;
		} catch (RemoteException e)
		{
			throw new BillException(e.getMessage(),e);
		}
    }

    /**
     * 修改票据信息 调用BlankVoucherEJB的相应方法
     * @param BlankVoucherInfo	票据信息
     * @return
     * @throws BillException
     */
    public void updateBill(BlankVoucherInfo cInfo) throws BillException {
    	try
		{
			BlankVoucherFacade.updateBill(cInfo);
		} catch (BillException re)
		{
			throw re;
		} catch (RemoteException e)
		{
			throw new BillException(e.getMessage(),e);
		}
    }

    /**
     * 多笔查找票据信息 调用BlankVoucherEJB的相应方法
     * @param BlankVoucherQueryInfo	票据查询信息
     * @return Collection 票据信息集合
     * @throws BillException
     */
    public Collection findBillByMultiOption(BlankVoucherQueryInfo cInfo) throws BillException{
        try
		{
			return BlankVoucherFacade.findBillByMultiOption(cInfo);
		} catch (BillException e)
		{
			e.printStackTrace();
			throw e;
		} catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException(e.getMessage(),e);
		}
    }

    /**
     * 单笔查找票据信息 调用BlankVoucherEJB的相应方法
     * @param long	票据信息ID
     * @return BlankVoucherInfo 票据信息明细
     * @throws BillException
     */
    public BlankVoucherInfo findBillByID(long lID) throws BillException {
    	try
		{
			return BlankVoucherFacade.findBillByID(lID);
		} catch (BillException e)
		{
			e.printStackTrace();
			throw e;
		} catch (RemoteException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException();
		}
    }

    /**
     * 生成凭证日报表 调用BlankVoucherEJB的相应方法
     * @param BlankVoucherQueryInfo	票据查询信息
     * @return Collection 日报表信息明细集合
     * @throws BillException
     */
    public Collection createDailyReport(BlankVoucherQueryInfo qInfo) throws BillException {
    	try
		{
			return BlankVoucherFacade.createDailyReport(qInfo);
		} catch (BillException e)
		{
			e.printStackTrace();
			throw e;
		} catch (RemoteException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new BillException();
		}
    }
    
    /**
     * 结算系统将票据状态修改为使用时调用此方法检查票据的状态
     * @param blankVoucherInfo
     * @throws BillException
     */
    public void useBlankBill(BlankVoucherInfo blankVoucherInfo)throws BillException
	{
    	
    }
    
    /**
     * 结算系统取消使用票据时调用此方法检查票据的状态
     * @param blankVoucherInfo
     * @throws BillException
     */
    public void cancelUseBlankBill(BlankVoucherInfo blankVoucherInfo)throws BillException
	{
    	
    }
    
    /**
     * 对票据作挂失、解冻等方面的处理时调用此方法更新票据的状态
     * 1.修改票据信息 2.记录修改日志
     * @param IDs 要更新的票据的 ID
     * @param lAction 操作类型 
     * @param lOperatorID 操作人（用于记操作日志）
     * @param OperateDate 操作日期（用于记操作日志）
     * @throws BillException
     * @throws RemoteException
     */
    public void updateVoucherStatus(long[] IDs,long lAction,long lOperatorID,Timestamp OperateDate) throws BillException,RemoteException
	{
    	try
		{
			BlankVoucherFacade.updateVoucherStatus(IDs,lAction,lOperatorID,OperateDate);
		} catch (BillException re)
		{
			throw re;
		} catch (RemoteException e)
		{
			throw new BillException(e.getMessage(),e);
		}
    }
}
