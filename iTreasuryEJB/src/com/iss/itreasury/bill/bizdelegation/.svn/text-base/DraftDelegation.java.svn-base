/* Generated by Together */
package com.iss.itreasury.bill.bizdelegation;
import java.rmi.RemoteException;
import java.util.Collection;
import java.util.Vector;

import javax.ejb.CreateException;
import javax.ejb.EJBException;

import com.iss.itreasury.bill.draft.bizlogic.Draft;
import com.iss.itreasury.bill.draft.bizlogic.DraftHome;
import com.iss.itreasury.bill.draft.dataentity.DiscountContractBillInfo;
import com.iss.itreasury.bill.draft.dataentity.MultiBillQueryCondition;
import com.iss.itreasury.bill.draft.dataentity.TransDraftOutInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftConsignAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftConsignReplyAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftQueryAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftQueryReplyAssembleInfo;
import com.iss.itreasury.bill.draft.dataentity.assemble.DraftStorageAssembleInfo;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.util.EJBHomeFactory;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
public class DraftDelegation
{
	Draft draft = null;
	public DraftDelegation() throws BillException
	{
		try
		{
			DraftHome home;
			try
			{
				home = (DraftHome) EJBHomeFactory.getFactory().lookUpHome(DraftHome.class);
			}
			catch (IException e)
			{
				System.out.println("EJBHomeFactory连接错误");
				throw new BillException("Gen_E001", e);
			}
			try
			{
				draft = (Draft) home.create();
			}
			catch (EJBException e1)
			{
				e1.printStackTrace();
				throw new BillException(e1.getMessage(), e1);
			}
			catch (RemoteException e1)
			{
				e1.printStackTrace();
				throw new BillException(e1.getMessage(), e1);
			}
		}
		catch (CreateException ce)
		{
			System.out.println("发生CreateException");
			throw new BillException("Gen_E001", ce);
		}
	}
	/**
	 * 保存汇票入库信息 
	 * @throws BillException
	 * @throws RemoteException
	 */
	public long saveDraftIn(DraftStorageAssembleInfo draftStorageAssembleInfo) throws BillException
	{
		try
		{
			return draft.saveDraftIn(draftStorageAssembleInfo);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据查询条件查询相应有效的汇票信息，操作table：Loan_DiscountContractBill，这个方法在汇票查询，查复，托收，托付中都使用到，在不同的交易中查询条件不相同，因而这是一个综合查询类 
	 * @throws BillException
	 * @throws RemoteException
	 */
	public Vector queryDraftByCondition(MultiBillQueryCondition multiBillQueryCondition) throws BillException
	{
		try
		{
			return draft.queryDraftByCondition(multiBillQueryCondition);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 查询入库纪录(可以做出库交易的入库票据)，操作table：Loan_DiscountContractBill，BILL_TRANSDRAFTIN 
	 * @throws BillException
	 * @throws RemoteException
	 */
	public Vector queryDraftByConditionForOut(MultiBillQueryCondition multiBillQueryCondition) throws BillException
	{
		try
		{
			return draft.queryDraftByConditionForOut(multiBillQueryCondition);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据汇票出库交易id查找有效的出库交易信息：操作table：Bill_TransDraftOut 
	 */
	public DraftStorageAssembleInfo findDraftOutByID(long lID) throws BillException, RemoteException
	{
		return draft.findDraftOutByID(lID);
	}
	/**
	 * 保存汇票出库信息 
	 */
	public long saveDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws BillException, RemoteException
	{
		System.out.println("保存汇票出库信息 delegation---->1");
		return draft.saveDraftOut(draftStorageAssembleInfo);
	}
	/**
	 * 根据汇票查询交易id查找有效的查询交易信息：操作table：Bill_TransDraftQuery 
	 */
	public DraftQueryAssembleInfo findDraftQueryByID(long lID) throws BillException, RemoteException
	{
		return draft.findDraftQueryByID(lID);
	}
	/**
	 * 根据票据id查找有效状态的票据信息：操作table：Loan_DiscountContractBill 
	 */
	public DiscountContractBillInfo findDiscountContractBillInfoByID(long lBillID) throws BillException
	{
		try
		{
			return draft.findDiscountContractBillInfoByID(lBillID);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 保存汇票查询信息 
	 */
	public long saveDraftQuery(DraftQueryAssembleInfo draftQueryAssembleInfo) throws BillException
	{
		try
		{
			return draft.saveDraftQuery(draftQueryAssembleInfo);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 保存汇票查复信息 
	 */
	public long saveDraftQueryReply(DraftQueryReplyAssembleInfo draftQueryReplyAssembleInfo) throws BillException
	{
		try
		{
			return draft.saveDraftQueryReply(draftQueryReplyAssembleInfo);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 保存汇票托收信息 
	 */
	public long saveDraftConsign(DraftConsignAssembleInfo draftConsignAssembleInfo) throws BillException
	{
		try
		{
			return draft.saveDraftConsign(draftConsignAssembleInfo);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 保存汇票托复信息 
	 */
	public long saveDraftConsignReply(DraftConsignReplyAssembleInfo draftConsignReplyAssembleInfo) throws BillException
	{
		try
		{
			return draft.saveDraftConsignReply(draftConsignReplyAssembleInfo);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据查询条件查询相应的有效汇票入库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftIn 
	 * @throws BillException
	 * @throws RemoteException
	 */
	public Vector queryDraftInByCondition(MultiBillQueryCondition multiBillQueryCondition) throws BillException
	{
		try
		{
			return draft.queryDraftInByCondition(multiBillQueryCondition);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据查询条件查询相应的有效汇票出库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftOut 
	 * @throws BillException
	 * @throws RemoteException
	 */
	public Vector queryDraftOutByCondition(MultiBillQueryCondition multiBillQueryCondition) throws BillException
	{
		try
		{
			return draft.queryDraftOutByCondition(multiBillQueryCondition);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据查询条件查询相应的有效汇票出库交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftOut 
	 * @throws BillException
	 * @throws RemoteException
	 */
	public Vector queryDraftOutByCondition(MultiBillQueryCondition multiBillQueryCondition,boolean isNeedApproval) throws BillException
	{
		try
		{ 
			return draft.queryDraftOutByCondition(multiBillQueryCondition,isNeedApproval);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据查询条件查询相应的有效汇票查询交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftQuery 
	 */
	public Vector queryDraftQueryByCondition(MultiBillQueryCondition multiBillQueryCondition) throws BillException
	{
		try
		{
			return draft.queryDraftQueryByCondition(multiBillQueryCondition);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据查询条件查询相应的有效汇票查复交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftQueryReply 
	 */
	public Vector queryDraftQueryReplyByCondition(MultiBillQueryCondition multiBillQueryCondition) throws BillException
	{
		try
		{
			return draft.queryDraftQueryReplyByCondition(multiBillQueryCondition);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据查询条件查询相应的有效汇票托收交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftConsign 
	 */
	public Vector queryDraftConsignByCondition(MultiBillQueryCondition multiBillQueryCondition) throws BillException
	{
		try
		{
			return draft.queryDraftConsignByCondition(multiBillQueryCondition);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据查询条件查询相应的汇票托复交易信息，操作table：Loan_DiscountContractBill和Bill_TransDraftConsignReply 
	 */
	public Vector queryDraftConsignReplyByCondition(MultiBillQueryCondition multiBillQueryCondition) throws BillException
	{
		try
		{
			return draft.queryDraftConsignReplyByCondition(multiBillQueryCondition);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据汇票入库交易id查找有效的入库交易信息：操作table：Bill_TransDraftIn 
	 */
	public DraftStorageAssembleInfo findDraftInByID(long lID) throws BillException
	{
		try
		{
			return draft.findDraftInByID(lID);
		}
		catch (RemoteException e)
		{
			e.printStackTrace();
			throw new BillException("Gen_E001", e);
		}
	}
	/**
	 * 根据汇票查复交易id查找有效的查复交易信息：操作table：Bill_TransDraftQueryReply 
	 */
	public DraftQueryReplyAssembleInfo findDraftQueryReplyByID(long lID) throws BillException, RemoteException
	{
		return draft.findDraftQueryReplyByID(lID);
	}
	/**
	 * 根据汇票托收交易id查找有效的托收交易信息：操作table：Bill_TransDraftConsign 
	 */
	public DraftConsignAssembleInfo findDraftConsignByID(long lID) throws BillException, RemoteException
	{
		return draft.findDraftConsignByID(lID);
	}
	/**
	 * 根据汇票托复交易id查找有效的托收交易信息：操作table：Bill_TransDraftConsignRelpy 
	 */
	public DraftConsignReplyAssembleInfo findDraftConsignReplyByID(long lID) throws BillException, RemoteException
	{
		return draft.findDraftConsignReplyByID(lID);
	}
	/**
	 * 保存票据基本信息。
	 * 1 调用票据风险管理模块方法判断当前票据是否在黑名单中，如果是，给出提示信息“***票据在黑名单中，是  否继续？”
	 * 
	 * 2 判断票据是否已经被删除，否则抛出异常信息"票据***已经被删除！";
	 * 
	 * 3 根据Loan_DiscountContractBill的dtModifyDate 字段分别判断票据信息是否被修改过，如果修改过则抛出相应异常信息“票据××××信息被修改过”;（实现方式参照汇票管理入库等部分的保存方法如何控制并发操作）
	 * 
	 * 4 调用DiscountContractBillDao方法update，修改界面的相应栏位信息，并记录修改人和修改时间（精确到时分秒，用于控制并发），其他字段照填。 
	 */
	public long saveDiscountContractBillInfo(DiscountContractBillInfo discountContractBillInfo) throws BillException, RemoteException
	{
		return draft.saveDiscountContractBillInfo(discountContractBillInfo);
	}
	/**
	 * 根据票据id查找该票据下所有入库记录
	 * 操作数据库表:Bill_TransDraftIn
	 * 步骤：
	 * 调用：TransDraftInDAO方法findByBillID 
	 */
	public Collection findDraftInByBillID(long lBillID) throws BillException, RemoteException
	{
		return draft.findDraftInByBillID(lBillID);
	}
	/**
	 * 删除当前票据。（页面提示“删除当前票据信息将删除该票的入出库、查询、查复、托收、托复信息，是否删除？”）
	 * 操作数据库表：LOAN_DISCOUNTCONTRACTBILL、Bill_TransDraftIn、Bill_TransDraftOut、Bill_TransDraftQuery、Bill_TransDraftQueryReply、Bill_TransDraftConsign、Bill_TransDraftConsignReply
	 * 步骤：
	 * 1 判断票据是否已经被删除，否则抛出异常信息"票据***已经被删除！";
	 * 
	 * 2 分别调用TransDraftConsignReplyDao、TransDraftConsignDao、TransDraftQueryReplyDao、TransDraftQueryDao、
	 *   TransDraftOutDao、TransDraftInDAO方法deleteByBillID（逻辑删除）,最后调用DiscountContractBillDao方法delete（逻辑删除） 
	 */
	public void deleteDiscountContractBillByID(long lBillID) throws BillException, RemoteException
	{
		draft.deleteDiscountContractBillByID(lBillID);
	}
	/**
	 * 删除一条入库信息
	 * 操作数据库表：LOAN_DISCOUNTCONTRACTBILL,Bill_TransDraftIn
	 * 步骤：
	 * 1 判断当前入库记录是否已经被删除，否则抛出异常信息“票据***入库编号****入库记录已经被删除！”;
	 * 2 调用DiscountContractBillDao.findByID方法判断当前票据记录的库存状态是否为入库状态，  如果是出库状态，抛出异常信息“请先删除当前票据***入库编号***对应的出库记录！”;
	 *   如果是入库状态，判断对应的入库交易id是否是当前入库记录对应的入库，如果不是，则抛出异常信息“请删除当前票据***在入库编号***之后的出库入库记录！”;
	 * 3 调用TransDraftInDAO方法delete;
	 * 4 查询当前票据的所有的出库记录中最大的出库交易id，如果存在这样的交易id>0,则调用DiscountContractBillDao方法update更新票据的库存状态字段为“出库”,更新库存交易字段id为最大的出库交易id；  如果当前票据没有出库记录，则调用DiscountContractBillDao方法update更新票据的库存状态字段为“-1”,更新库存交易字段id为"-1"； 
	 */
	public void deleteDraftInByID(long lID) throws BillException, RemoteException
	{
		draft.deleteDraftInByID(lID);
	}
	/**
	 * 根据票据id查找该票据下所有出库记录
	 * 操作数据库表:Bill_TransDraftOut
	 * 步骤：
	 * 调用：TransDraftOutDAO方法findByBillID 
	 */
	public Collection findDraftOutByBillID(long lBillID) throws BillException, RemoteException
	{
		return draft.findDraftOutByBillID(lBillID);
	}
	/**
	 * 根据票据id查找该票据下所有发出查询记录
	 * 操作数据库表：Bill_TransDraftQuery
	 * 步骤：
	 * 调用：TransDraftQueryDao方法findByBillID 
	 */
	public Collection findDraftQueryByBillID(long lBillID) throws BillException, RemoteException
	{
		return draft.findDraftQueryByBillID(lBillID);
	}
	/**
	 * 根据票据id查找该票据下所有发出查复记录
	 * 操作数据库表：Bill_TransDraftQueryReply
	 * 步骤：
	 * 调用：TransDraftQueryReplyDao方法findByBillID 
	 */
	public Collection findDraftQueryReplyByBillID(long lBillID) throws BillException, RemoteException
	{
		return draft.findDraftQueryReplyByBillID(lBillID);
	}
	/**
	 * 根据票据id查找该票据下所有发出托收记录
	 * 操作数据库表:Bill_TransDraftConsign
	 * 步骤：
	 * 调用：TransDraftConsignDAO方法findByBillID 
	 */
	public Collection findDraftConsignByBillID(long lBillID) throws BillException, RemoteException
	{
		return draft.findDraftConsignByBillID(lBillID);
	}
	/**
	 * 根据票据id查找该票据下所有托收回复记录
	 * 操作数据库表:Bill_TransDraftConsignReply
	 * 步骤：
	 * 调用：TransDraftConsignReplyDAO方法findByBillID 
	 */
	public Collection findDraftConsignReplyByBillID(long lBillID) throws BillException, RemoteException
	{
		return draft.findDraftConsignReplyByBillID(lBillID);
	}

    /**
     * 删除一条出库信息
     * 操作数据库表:LOAN_DISCOUNTCONTRACTBILL,Bill_TransDraftOut
     * 步骤：
     * 1 判断当前出库记录是否已经被删除，否则抛出异常信息“票据***出库编号****出库记录已经被删除！”;
     * 2 调用DiscountContractBillDao.findByID方法判断当前票据记录的库存状态是否为出库状态,如果是出库状态，判断对应的出库交易id是否是当前出库记录对应的出库，如果不是，则抛出异常信息“请删除当前票据***在出库编号***之后的入出库记录！”;
     *   如果当前票据记录的库存状态是否为出库状态是入库状态，则抛出异常信息“请删除当前票据***在出库编号***之后的入出库记录！”;；
     * 3 调用TransDraftOutDAO方法delete;  
     * 4 调用DiscountContractBillDao方法update更新票据的库存状态字段为“入库”,更新库存交易字段id为当前出库记录对应的入库记录id； 
     */
	public void deleteDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws BillException, RemoteException
	{
		draft.deleteDraftOut(draftStorageAssembleInfo);
	}

    /**
     * 删除一条汇票发出查询信息
     * 操作数据库表：LOAN_DISCOUNTCONTRACTBILL，Bill_TransDraftQuery，Bill_TransDraftQueryReply
     * 步骤：
     * 1 判断当前查询记录是否已经被删除，否则抛出异常信息“票据***查询编号****查询记录已经被删除！”;
     * 2 调用TransDraftQueryDAO方法delete; 
     * 3 查询Bill_TransDraftQuery,Bill_TransDraftQueryReply这两个表中id为最大的有效的且不等于当前被删除的记录ID的记录MaxID，
     *   如果最大交易在Bill_TransDraftQuery中，调用DiscountContractBillDao方法update更新票据的查复状态为发出查询状态，
     *   如果最大交易在Bill_TransDraftQueryReply中，调用DiscountContractBillDao方法update更新票据的查复状态为查复结果状态态，
     *   如果这个表中都没有记录，调用DiscountContractBillDao方法update更新票据的查复状态为：-1
     *   注：Bill_TransDraftQuery，Bill_TransDraftQueryReply这两个表在新增记录的时候交易的id取两个表的最大id 
     */
	public void deleteDraftQueryByID(DraftStorageAssembleInfo draftStorageAssembleInfo) throws BillException, RemoteException
	{
		draft.deleteDraftOut(draftStorageAssembleInfo);
	}

    /**
     * deleteDraftQueryReplyByID
     * 删除一条汇票查询查复信息
     * 操作数据库表:LOAN_DISCOUNTCONTRACTBILL,Bill_TransDraftQuery,Bill_TransDraftQueryReply
     * 步骤：
     * 1 判断当前查询查复记录是否已经被删除，否则抛出异常信息“票据***查复编号****查复记录已经被删除！”;
     * 2 调用TransDraftQueryReplyDAO方法delete; 
     * 3 查询Bill_TransDraftQuery,Bill_TransDraftQueryReply这两个表中id为最大的有效的且不等于当前被删除的记录ID的记录MaxID，
     *   如果最大交易在Bill_TransDraftQuery中，调用DiscountContractBillDao方法update更新票据的查复状态为发出查询状态，
     *   如果最大交易在Bill_TransDraftQueryReply中，调用DiscountContractBillDao方法update更新票据的查复状态为查复结果状态，
     *   如果这个表中都没有记录，调用DiscountContractBillDao方法update更新票据的查复状态为：-1
     *   注：Bill_TransDraftQuery，Bill_TransDraftQueryReply这两个表在新增记录的时候交易的id取两个表的最大id 
     */
	public void deleteDraftQueryReplyByID(long lID) throws BillException, RemoteException
	{
		draft.deleteDraftQueryReplyByID(lID);
	}

    /**
     * 删除一条汇票托收信息
     * 操作数据库表:LOAN_DISCOUNTCONTRACTBILL,Bill_TransDraftConsign,Bill_TransDraftInConsignReply
     * 步骤：
     * 1 判断当前托收记录是否已经被删除，否则抛出异常信息“票据***托收编号****托收记录已经被删除！”;
     * 2 调用TransDraftConsignDAO方法delete; 
     * 3 查询Bill_TransDraftConsign,Bill_TransDraftConsignReply这两个表中id为最大的有效的且不等于当前被删除的记录ID的记录MaxID，
     *   如果最大交易在Bill_TransDraftConsign中，调用DiscountContractBillDao方法update更新票据的托收状态为发出托收状态，
     *   如果最大交易在DiscountContractBillDao中，调用DiscountContractBillDao方法update更新票据的托收状态为托收结果状态，
     *   如果这个表中都没有记录，调用DiscountContractBillDao方法update更新票据的托收状态为：-1
     *   注：Bill_TransDraftConsign，Bill_TransDraftInConsignReply这两个表在新增记录的时候交易的id取两个表的最大id 
     */
	public void deleteDraftConsignByID(long lID) throws BillException, RemoteException
	{
		draft.deleteDraftConsignByID(lID);
	}

    /**
     * deleteDraftConsignReplyByID
     * 删除一条汇票托复信息
     * 操作数据库表:LOAN_DISCOUNTCONTRACTBILL,Bill_TransDraftConsign,Bill_TransDraftInConsignReply
     * 步骤：
     * 1 判断当前托复记录是否已经被删除，否则抛出异常信息“票据***托复编号****托收记录已经被删除！”;
     * 2 调用TransDraftConsignReplyDAO方法delete; 
     * 3 查询Bill_TransDraftConsign,Bill_TransDraftConsignReply这两个表中id为最大的有效的且不等于当前被删除的记录ID的记录MaxID，
     *   如果最大交易在Bill_TransDraftConsign中，调用DiscountContractBillDao方法update更新票据的托收状态为发出托收状态，
     *   如果最大交易在DiscountContractBillDao中，调用DiscountContractBillDao方法update更新票据的托收状态为托收结果状态，
     *   如果这个表中都没有记录，调用DiscountContractBillDao方法update更新票据的托收状态为：-1
     *   注：Bill_TransDraftConsign，Bill_TransDraftInConsignReply这两个表在新增记录的时候交易的id取两个表的最大id 
     */
	public void deleteDraftConsignReplyByID(long lID) throws BillException, RemoteException
	{
		draft.deleteDraftConsignReplyByID(lID);
	}
	
	public long doApprovalDraftOut(TransDraftOutInfo nInfo) throws RemoteException,IRollbackException{
		return draft.doApprovalDraftOut(nInfo);
	}
    public long doCancelApproval(TransDraftOutInfo nInfo) throws RemoteException,IRollbackException{
    	return draft.doCancelApproval(nInfo);
    }
    public DraftStorageAssembleInfo findLastDraftInByBillID(long lBillID) throws RemoteException,BillException{
    	return draft.findLastDraftInByBillID(lBillID);
    }
    public DraftStorageAssembleInfo findLastDraftOutByBillID(long lBillID) throws RemoteException,BillException{
    	return draft.findLastDraftOutByBillID(lBillID);
    }
    public long autoDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,IRollbackException{
    	return draft.autoDraftOut(draftStorageAssembleInfo);
    }
    public long autoCancelDraftOut(DraftStorageAssembleInfo draftStorageAssembleInfo) throws RemoteException,IRollbackException{
    	return draft.autoCancelDraftOut(draftStorageAssembleInfo);
    }
}
