/* Generated by Together */
package com.iss.itreasury.bill.bizdelegation;
import java.rmi.RemoteException;
import java.util.Vector;

import javax.ejb.CreateException;
import com.iss.itreasury.bill.util.BillException;
import com.iss.itreasury.bill.venture.bizlogic.Venture;
import com.iss.itreasury.bill.venture.bizlogic.VentureHome;
import com.iss.itreasury.bill.venture.dataentity.BlackBillInfo;
import com.iss.itreasury.bill.venture.dataentity.BlackConditionInfo;
import com.iss.itreasury.bill.venture.dataentity.BlackQueryCondition;
import com.iss.itreasury.util.EJBHomeFactory;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.Log4j;
import com.iss.itreasury.util.Constant;
public class VentureDelegation
{
	Venture VentureEjb = null;
	public VentureDelegation() throws RemoteException, BillException
	{
		try
		{
			VentureHome home = (VentureHome) EJBHomeFactory.getFactory().lookUpHome(VentureHome.class);
			VentureEjb = (Venture) home.create();
		}
		catch (RemoteException e)
		{
			throw new RemoteException("System Error ---Creating VentureEjb failed!", e);
		}
		catch (BillException e)
		{
			throw new BillException("System Error:" + e.getMessage(), e);
		}
		catch (CreateException e)
		{
			e.printStackTrace();
			throw new RemoteException("System Error ---Creating VentureEjb failed!", e);
		}
		catch (IException e)
		{
			throw new BillException("System Error:" + e.getMessage(), e);
		}
	}
	protected Log4j log = new Log4j(Constant.ModuleType.BILL, this);
	/**
	* 增加黑名单记录
	*/
	public long add(BlackConditionInfo bci) throws BillException, RemoteException
	{
		return VentureEjb.add(bci);
	}
	/**
	* 查询符合条件的黑名单信息
	*/
	public Vector findByCondition(BlackQueryCondition bci) throws BillException, RemoteException
	{
		return VentureEjb.findByCondition(bci);
	}
	/**
	 * Method releaseFromBlackList.
	 * 解除黑名单
	 * @param ID
	 * @return long
	 * @throws BillException
	 * @throws RemoteException
	 */
	public long releaseFromBlackList(long[] IDs) throws BillException, RemoteException
	{
		return VentureEjb.releaseFromBlackList(IDs);
	}
	/**
	* 根据指定条件（ID），获取该记录的详细信息
	*/
	public BlackBillInfo findByID(long ID) throws BillException, RemoteException
	{
		return VentureEjb.findByID(ID);
	}
	/**
	* 根据指定条件（数组），删除相关记录
	*/
	public long delete(long[] IDs) throws BillException, RemoteException
	{
		return VentureEjb.delete(IDs);
	}
	/**
	* 修改指定票据信息
	*/
	public long update(BlackBillInfo bbi) throws BillException, RemoteException
	{
		return VentureEjb.update(bbi);
	}
}
