package com.iss.itreasury.ebank.obfinanceinstr.bizlogic;

import java.rmi.RemoteException;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.ejb.EJBContext;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.servlet.ServletRequest;


import com.iss.itreasury.ebank.approval.bizlogic.InutApprovalRecordBiz;
import com.iss.itreasury.ebank.approval.dao.InutApprovalRelationDao;
import com.iss.itreasury.ebank.approval.dataentity.InutApprovalRecordInfo;
import com.iss.itreasury.ebank.approval.dataentity.InutApprovalRelationInfo;
import com.iss.itreasury.ebank.approval.dataentity.InutParameterInfo;
import com.iss.itreasury.ebank.obfinanceinstr.dao.OBFinanceInstrDao;
import com.iss.itreasury.ebank.obfinanceinstr.dataentity.AccountBalanceInfo;
import com.iss.itreasury.ebank.obfinanceinstr.dataentity.FinanceInfo;
import com.iss.itreasury.ebank.obfinanceinstr.dataentity.OBBankPayInfo;
import com.iss.itreasury.ebank.obfinanceinstr.dataentity.OpenDateInfo;
import com.iss.itreasury.ebank.obfinanceinstr.dataentity.PayerOrPayeeInfo;
import com.iss.itreasury.ebank.obfinanceinstr.dataentity.QueryCapForm;
import com.iss.itreasury.ebank.obfinanceinstr.dataentity.SubLoanAccountDetailInfo;
import com.iss.itreasury.ebank.oboutersourceregister.judgement.IsOuterSourceJudgement;
import com.iss.itreasury.ebank.obsystem.dao.OBSystemDao;
import com.iss.itreasury.ebank.obsystem.dataentity.ClientCapInfo;
import com.iss.itreasury.ebank.util.OBConstant;

import com.iss.itreasury.ebank.util.SessionOB;
import com.iss.itreasury.project.wisgfc.ebank.special.bizlogic.ConsignReceiveBiz;

import com.iss.itreasury.settlement.bizdelegation.AccountSystemDelegation;
import com.iss.itreasury.settlement.dataentity.AccountSystemInfo;
import com.iss.itreasury.system.translog.bizlogic.TranslogBiz;
import com.iss.itreasury.system.translog.dataentity.TransInfo;
import com.iss.itreasury.util.ConfigConstant;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.IRollbackException;
import com.iss.itreasury.util.Log4j;
import com.iss.itreasury.util.OBFSWorkflowManager;
import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Timestamp;


import com.iss.itreasury.ebank.obfinanceinstr.dao.OBBankPayDao;

import com.iss.itreasury.ebank.util.NameRef;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Config;

import com.iss.itreasury.util.Database;

import com.iss.itreasury.bankportal.integration.client.BPClientAgent;
import com.iss.itreasury.bankportal.integration.constant.ResultStatus;
import com.iss.itreasury.bankportal.integration.info.ReqInstructionInfo;
import com.iss.itreasury.bankportal.integration.info.ReqQueryInstructionInfo;
import com.iss.itreasury.bankportal.integration.info.RespInstructionInfo;
import com.iss.itreasury.bankportal.integration.info.RespQueryInstructionInfo;


/**
 * Created 2002-12-7 16:48:11 Code generated by the Forte for Java EJB Module
 * 
 * @author dong
 */

public class OBFinanceInstrEJB implements SessionBean
{
    private static Log4j log4j = null;
    
    private javax.ejb.SessionContext mySessionCtx = null;
    
    private static Map lockMap=Collections.synchronizedMap(new HashMap());

    //modified by mzh_fu 2008/04/08 解决事务回滚问题
    //private SessionContext context;

    /**
     * No argument constructor required by container.
     */
    public OBFinanceInstrEJB()
    {
        log4j = new Log4j(Constant.ModuleType.EBANK, this);
    }

    /**
     * Create method specified in EJB 1.1 section 6.10.3
     */
    public void ejbCreate()
    {
    }

    /* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */

    /**
     * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(SessionContext context)
    {
    	//modified by mzh_fu 2008/04/08 解决事务回滚问题
    	//this.context = context;
        this.mySessionCtx = context;
    }

    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate()
    {
    }

    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate()
    {
    }

    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove()
    {
    }
    
    public void lockObj(long id) throws Exception
    {
    	if(id >0)
    	{
	    	if(lockMap.get(String.valueOf(id))!=null)
	    	{
	    		throw new Exception("该笔数据正在被其它用户使用，请稍后再试！");
	    	}
	    	else
	    	{
	    		log4j.print("********************锁定信息--id:"+id+"--********************");
	    		lockMap.put(String.valueOf(id), new Object());
	    	}
    	}
    }
    
    public void unLockObj(long id)throws Exception
    {
    	if(id>0)
    	{
    		log4j.print("********************解锁信息--id:"+id+"--********************");
    		lockMap.remove(String.valueOf(id));
    	}
    }
    
    public static synchronized  boolean isTouch(long id ,Timestamp dtModify) throws Exception
    {
    	boolean isTouch = false;
    	FinanceInfo info = null;
    	try
    	{
    		if(id >0)
    		{
    		  OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
    		  info = obFinanceInstrDao.findByID(id);
    		  if(info!=null)
    		  {
    			  if(info.getDtModify()!=null&&!info.getDtModify().equals(dtModify))
    			  {
    				  throw new Exception("该笔交易已经被修改，请确认！");
    			  }
    		  }
    		  else
    		  {
    			  throw new Exception("查询指令数据异常！");
    		  }
    		}
    	}
    	catch(Exception e)
    	{
    		e.printStackTrace();
    		throw e;
    	}
    	return isTouch;
    }
    
    /**
     * 保存交易信息 Create Date: 2007-4-19
     * 
     * @param FinanceInfo
     * @return long 财务交易指令流水号,如小于0表示新增或修改失败
     * @exception Exception
     */
    public long addTrans(FinanceInfo info) throws RemoteException, Exception
    {
        long lReturn = -1;
        long lAccountID = -1;
        lockObj(info.getID());///锁定操作的数据 add by zhanglei  2010.06.01
        String strTroyName = Config.getProperty(ConfigConstant.GLOBAL_TROY_NAME,Constant.GlobalTroyName.NotUseCertificate);
        try
        {
        	isTouch(info.getID(), info.getDtModify());
            if (info != null)
            {
                OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
//                lReturn = obFinanceInstrDao.addTrans(info);
                lAccountID = info.getPayerAcctID();
                //查找帐户所在办事处
                long lOfficeId = obFinanceInstrDao.findOfficeByAccountId(info.getPayerAcctID());
                info.setOfficeID(lOfficeId);
                if (!obFinanceInstrDao.getAccountPrvg(lAccountID, info.getTransType()))
    			{
    				throw new IException("账户没有设置进行此项交易的权限!");
    			}
                
                
                log4j.info("传入指令ID=" + info.getID());
                if (info.getID() > 0)
                {
                    lReturn = obFinanceInstrDao.update(info);
                    info.setID(lReturn);
                }
                else
                {   
                    lReturn = obFinanceInstrDao.addTrans(info);
                    info.setID(lReturn);
                }
                /**
				 * 如果Info中的InutParameterInfo不为空,则需要提交审批 add by 刘琰 2007-04-17
				 */
					if(info.getInutParameterInfo()!=null)
					{
					log4j.debug("------提交审批--------");
					//设置返回的地址链接(交易id只能在交易保存之后加上,tempInfo.getUrl()得到的url没有具体的交易id)
					InutParameterInfo tempInfo = info.getInutParameterInfo();
					tempInfo.setUrl(tempInfo.getUrl()+lReturn);
					tempInfo.setTransID(String.valueOf(info.getID()));
					tempInfo.setDataEntity(info);
					
					//提交审批
					OBFSWorkflowManager.initApproval(tempInfo);
					//更新状态到审批中
					obFinanceInstrDao.updateStatus(info.getID(),OBConstant.SettInstrStatus.APPROVALING);
					log4j.debug("------提交审批成功--------");
					
					}
                log4j.info("传出指令ID=" + lReturn);
            }
            
          /* if(!strTroyName.equals(Constant.GlobalTroyName.NotUseCertificate))
            {
            	info = OBSignatureUtil.getSignatureInfo(info, strTroyName);
            }*/
            if(null != info.getSignatureValue() && info.getSignatureValue().length() > 0)
            {
				//保存签名值
				new OBFinanceInstrDao().updateSignatureInfo(info);
			}
            unLockObj(lReturn);//释放锁
        }
        catch(IException ie)
		{
        	log4j.error(ie.toString());
        	unLockObj(lReturn);
        	throw ie;
		}
        catch (RemoteException re)
        {
            log4j.error(re.toString());
            unLockObj(lReturn);
            throw new IException("Gen_E001");
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            unLockObj(lReturn);
            throw new IException("Gen_E001");
        }

        return lReturn;

    }

    /**
     * 定期支取时检查是否已提交过该存单
     */
    public long checkCapitalTrans(FinanceInfo info) throws RemoteException, Exception{
    	long lReturn = - 1;
    	OBFinanceInstrDao obFinanceInstrDao = null;
    	try{
    		obFinanceInstrDao = new OBFinanceInstrDao();
    		lReturn = obFinanceInstrDao.checkCapitalTrans(info);
    	}catch (Exception e){
            log4j.error(e.toString());
//            throw new IException("");
            throw new IRollbackException(mySessionCtx, "Gen_E001", e);
        }
    	return lReturn;
    }
    
    /**
     * 保存资金划拨信息 Create Date: 2003-8-13
     * 
     * @param FinanceInfo
     * @return long 财务交易指令流水号,如小于0表示新增或修改失败
     * @exception Exception
     */
    public long addCapitalTrans(FinanceInfo info) throws RemoteException, Exception
    {
        long lReturn = -1;
        AccountBalanceInfo accountBalanceInfo = null;
        OpenDateInfo openDateInfo = null;

        lockObj(info.getID());
        try
        {
        	OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
        	isTouch(info.getID(), info.getDtModify());
        	//通过帐户获取机构id
        	long lOfficeId = obFinanceInstrDao.findOfficeByAccountId(info.getPayerAcctID());
        	info.setOfficeID(lOfficeId);
            if (info != null)
            {
                if (info.getTransType() != OBConstant.SettInstrType.FIXEDTOCURRENTTRANSFER && info.getTransType() != OBConstant.SettInstrType.NOTIFYDEPOSITDRAW)
                {
                    accountBalanceInfo = obFinanceInstrDao.getCurrBalanceByAccountID(info.getPayerAcctID(), info.getCurrencyID(), info.getID());
                    
                    if (info.getTransType()==OBConstant.SettInstrType.APPLYCAPITAL)
                    {	
                    	//校验可用余额是否大于划拨金额
	                    log4j.info("可用余额=" + (accountBalanceInfo.getOverdraftAmount()+accountBalanceInfo.getUsableBalance()));
	                    log4j.info("划拨金额=" + info.getAmount());
	                    if ((accountBalanceInfo.getOverdraftAmount()+accountBalanceInfo.getUsableBalance())
	                    		< info.getAmount())
	                    {
	                        throw new IException("OB_EC18");
	                    }
                    }
                    else
                    {
	                    //校验可用余额是否大于划拨金额
	                    log4j.info("可用余额=" + accountBalanceInfo.getUsableBalance());
	                    log4j.info("划拨金额=" + info.getAmount());
	                    
	                   //modified by mzh_fu 2008/03/13　账户体系校验，只针对活期账户组 
	                   // if (accountBalanceInfo.getUsableBalance() < info.getAmount())
	                    if ((accountBalanceInfo.getOverdraftAmount() + accountBalanceInfo.getUsableBalance())
	                    		< info.getAmount())
	                    {
	                        throw new IException("OB_EC18");
	                    }
                    }
                    
        	        //added by mzh_fu 2008/03/13　账户体系校验，只针对活期账户组
    	        	AccountSystemInfo accountSystemInfo = new AccountSystemInfo();
    	        	accountSystemInfo.setNAccountId(info.getPayerAcctID());
    	        	double dCPF2Amount = obFinanceInstrDao.getUsableBalanceByAccountID(info.getPayerAcctID(), info.getCurrencyID(), info.getID());
    	        	accountSystemInfo.setDPayAmount(info.getAmount()+dCPF2Amount);
    	        	if(!new AccountSystemDelegation().isPassAccountSystemVerify(accountSystemInfo)){
    	        		throw new IException("OB_EC18");
    	        	}
                }
                
                if (info.getTransType()!=OBConstant.SettInstrType.APPLYCAPITAL)
	            {
	                //日期不能在结算开机日之前
	                openDateInfo = obFinanceInstrDao.getOpenDate(info.getOfficeID(), info.getCurrencyID());
	
	                if (openDateInfo == null)//不能取到开关机时间
	                {
	                    //throw new IException("OB_EC12");
	                	throw new IException("OB_EC30");
	                } 
	                if (openDateInfo.getSystemStatusID() == 1)//开机
	                {
	                    if (info.getExecuteDate().getTime() - openDateInfo.getOpenDate().getTime() < 0)
	                    {
	                        log4j.info("ExecuteDate=" + info.getExecuteDate().toString());
	                        log4j.info("openDate=" + openDateInfo.getOpenDate().toString());
	                        //throw new IException("OB_EC12");
	                        throw new IException("OB_EC31");
	                    }
	                }
	                else
	                //关机
	                {
	                    if (info.getExecuteDate().getTime() - openDateInfo.getOpenDate().getTime() <= 0)
	                    {
	                        throw new IException("OB_EC17");
	                    }
	                }
	
	                //如类型为“银行付款”需保存收款方的信息
	                if ((info.getRemitType() == OBConstant.SettRemitType.BANKPAY)
                            ||(info.getRemitType() == OBConstant.SettRemitType.BANKPAY_DOWNTRANSFER )
                            ||(info.getRemitType() == OBConstant.SettRemitType.FINCOMPANYPAY) 
                            || (info.getRemitType() == OBConstant.SettRemitType.PAYSUBACCOUNT))   
	                {
                        //如果指令的数据来源为外部系统（即外部系统通过财企接口提交），无需保存收款方信息
                        if(!IsOuterSourceJudgement.judge(info.getSource()))
                        {
	                        log4j.info("begin save Payee info!");
	                        OBSystemDao obSystemDao = new OBSystemDao();
	                        ClientCapInfo capInfo = new ClientCapInfo();
	
	                        capInfo.setCity(info.getPayeeCity());
	                        capInfo.setClientID(info.getClientID());
	                        capInfo.setCurrencyID(info.getCurrencyID());
	                        capInfo.setID(info.getID());
	                        capInfo.setInputUserID(info.getConfirmUserID());
	                        capInfo.setIsCPFAcct(OBConstant.AccountOfCpf.CODE_ACCOUNTOFCPF_NO);
	                        capInfo.setPayeeAccoutNO(info.getPayeeAcctNo());
	                        capInfo.setPayeeBankName(info.getPayeeBankName());
	                        capInfo.setPayeeBankNO(info.getPayeeBankNo());
	                        capInfo.setPayeeName(info.getPayeeName());
	                        capInfo.setPayeeProv(info.getPayeeProv());
	                        capInfo.setSPayeeBankCNAPSNO(info.getSPayeeBankCNAPSNO());
	                        capInfo.setSPayeeBankExchangeNO(info.getSPayeeBankExchangeNO());
	                        capInfo.setSPayeeBankOrgNO(info.getSPayeeBankOrgNO());
	                        capInfo.setBankName(info.getBankName());
	                        info.setPayeeAcctID(obSystemDao.addPayee(capInfo));
	                        log4j.info("finish saving Payee info!");
                        }
	                }
	                //如类型为“银行付款”需保存收款方的信息
	                if ((info.getInterestRemitType() == OBConstant.SettRemitType.BANKPAY)
                            ||(info.getInterestRemitType() == OBConstant.SettRemitType.BANKPAY_DOWNTRANSFER)
                            ||(info.getInterestRemitType() == OBConstant.SettRemitType.FINCOMPANYPAY)
                            ||(info.getInterestRemitType() == OBConstant.SettRemitType.PAYSUBACCOUNT))
	                {
                        //如果指令的数据来源为外部系统（即外部系统通过财企接口提交），无需保存收款方信息
                        if(!IsOuterSourceJudgement.judge(info.getSource()))
                        {                        
	                        log4j.info("begin save Payee info!");
	                        OBSystemDao obSystemDao = new OBSystemDao();
	                        ClientCapInfo capInfo = new ClientCapInfo();
	
	                        capInfo.setCity(info.getInterestPayeeCity());
	                        capInfo.setClientID(info.getClientID());
	                        capInfo.setCurrencyID(info.getCurrencyID());
	                        capInfo.setID(info.getID());
	                        capInfo.setInputUserID(info.getConfirmUserID());
	                        capInfo.setIsCPFAcct(OBConstant.AccountOfCpf.CODE_ACCOUNTOFCPF_NO);
	                        capInfo.setPayeeAccoutNO(info.getInterestPayeeAcctNo());
	                        capInfo.setPayeeBankName(info.getInterestPayeeBankName());
	                        capInfo.setPayeeBankNO(info.getInterestPayeeBankNo());
	                        capInfo.setPayeeName(info.getInterestPayeeName());
	                        capInfo.setPayeeProv(info.getInterestPayeeProv());
	                        capInfo.setSPayeeBankCNAPSNO(info.getSPayeeBankCNAPSNO());
	                        capInfo.setSPayeeBankExchangeNO(info.getSPayeeBankExchangeNO());
	                        capInfo.setSPayeeBankOrgNO(info.getSPayeeBankOrgNO());
	                        capInfo.setBankName(info.getBankName());
	                        info.setInterestPayeeAcctID(obSystemDao.addPayee(capInfo));
	                        log4j.info("finish saving InterestPayee info!");
                        }
	                }
	            }
                
                log4j.info("传入指令ID=" + info.getID());
                if (info.getID() > 0)
                {
                    lReturn = obFinanceInstrDao.update(info);
                    info.setID(lReturn);
                }
                else
                {
                    lReturn = obFinanceInstrDao.add(info);
                    info.setID(lReturn);
                }
                log4j.info("传出指令ID=" + lReturn);
                
                /**
				 * 如果Info中的InutParameterInfo不为空,则需要提交审批 add by 刘琰 2007-04-17
				 */
				if(info.getInutParameterInfo()!=null)
				{
					log4j.debug("------提交审批--------");
					//设置返回的地址链接(交易id只能在交易保存之后加上,tempInfo.getUrl()得到的url没有具体的交易id)
					InutParameterInfo tempInfo = info.getInutParameterInfo();
					tempInfo.setUrl(tempInfo.getUrl()+lReturn);
					tempInfo.setTransID(String.valueOf(info.getID()));
					tempInfo.setDataEntity(info);
					//	本单位保存并提交审批
					tempInfo.setIslowerunit(OBConstant.IsLowerun.ISNO);
					//提交审批
					OBFSWorkflowManager.initApproval(tempInfo);
					//更新状态到审批中
					obFinanceInstrDao.updateStatus(info.getID(),OBConstant.SettInstrStatus.APPROVALING);
					log4j.debug("------提交审批成功--------");					
				}
            }
            
            //保存后重新对业务进行加签验签
           /* if(!strTroyName.equals(Constant.GlobalTroyName.NotUseCertificate))
            {
            	info = OBSignatureUtil.getSignatureInfo(info, strTroyName);
            }*/
		/*	if(null != info.getSignatureValue() && info.getSignatureValue().length() > 0){
				//保存签名值
				new OBFinanceInstrDao().updateSignatureInfo(info);
			}*/
			unLockObj(info.getID());
        }
        //modified by mzh_fu(付明正) 2007/05/18 
/*        catch(IException ie)
		{
        	log4j.error(ie.toString());
        	throw ie;
		}
        catch (RemoteException re)
        {
            log4j.error(re.toString());
            throw new IException("Gen_E001");
        }*/
        catch (IException e)
        {
        	e.printStackTrace();
        	unLockObj(info.getID());
        	log4j.error(e.toString());
        	String message = e.translateExceptionMessage();
        	throw new IException(message,e);
        }
        catch (Exception e)
        {
        	unLockObj(info.getID());
            log4j.error(e.toString());
            throw new IRollbackException(mySessionCtx, e.getMessage(), e);
        }

        return lReturn;

    }
    
	/**
	 * 审批方法（通知开立）。
	 * @param info
	 * @return long
	 * @throws Exception 
	 */
	public long doApproval(FinanceInfo info)throws Exception
	{
		long depositId = -1;
		InutParameterInfo returnInfo = new InutParameterInfo();
		OBFinanceInstrDao dao = new OBFinanceInstrDao();
		
		
		InutApprovalRelationDao inputDao = new InutApprovalRelationDao();
		
		
		InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
		com.iss.itreasury.ebank.util.SessionOB sessionMng = null;
		if(inutParameterInfo != null){
			sessionMng = inutParameterInfo.getSessionMng();
		}
		lockObj(info.getID());
		try
		{
			isTouch(info.getID(), info.getDtModify());
			//提交审批
			FinanceInfo financeinfo = new FinanceInfo();
			financeinfo = this.findByID(info.getID(),info.getUserID(),info.getCurrencyID());
			inutParameterInfo.setDataEntity(financeinfo);
			
			//判断状态,是否被修改过
			/*
			if(!dao.isStatus(info.getLID(), info.getStatus()))
			{
				sessionMng.getActionMessages().addMessage("该业务已被其他人审批完成");
				throw new Exception("该业务已被其他人审批完成");
			}
			*/
			try
			{
				returnInfo = OBFSWorkflowManager.doApproval(inutParameterInfo);
			}
			catch(Exception e)
			{
				e.printStackTrace();
				sessionMng.getActionMessages().addMessage("该业务已被其他人审批完成");
				throw new Exception("该业务已被其他人审批完成",e);
			}
			//如果是最后一级,且为审批通过,更新状态为已审批

			if(returnInfo.isLastLevel())
			{	
				InutApprovalRelationInfo qInfo = new InutApprovalRelationInfo();
				InutApprovalRelationInfo resultInfo = null;
				qInfo.setTransTypeID(inutParameterInfo.getTransTypeID());
				
				//是否送交上级审批 modify by zcwang 2008-05-06

				log4j.print("551客户ID为："+info.getClientID());
				qInfo.setClientID(info.getClientID());
				log4j.print("553客户ID为："+qInfo.getClientID());
				qInfo.setIslowerunit(OBConstant.IsLowerun.ISNO);
				long lIsSendToUpClient = -1;
				long parentId =-1;
				long approvalID = -1;
				resultInfo = inputDao.findApprovalInfo(qInfo);
				 if(resultInfo!=null)// resultInfo为null表明本级单位没有管理审批流
				 {
					 lIsSendToUpClient = resultInfo.getIssendtoupclient();
				 }
				
				//检查是上级是否设置审批流
				if(lIsSendToUpClient>0)
				{
				    parentId = inputDao.getParentId(info.getClientID());
				    if(parentId<=0)
				    {
				    	throw new IException("无法获取上级单位信息，审批失败");
				    }
					qInfo.setClientID(parentId);
					qInfo.setIslowerunit(OBConstant.IsLowerun.ISYES);
					approvalID = inputDao.findApprovalID(qInfo);
					if(approvalID<=0)
					{
						throw new IException("上级单位没有设置下级审批流,审批失败");
					}
				}
				
				
				
				//
				
				//判断账户体系,只有内部转帐业务需要判断modify by zcwang 2008-05-06
				boolean isNeedAccountSystem = Config.getBoolean(ConfigConstant.EBANK_ISNEEDACCOUNTSYSTEM, false);
				boolean	isInAccountSystem = false;
				if(isNeedAccountSystem && inutParameterInfo.getTransTypeID()==OBConstant.SettInstrType.CAPTRANSFER_INTERNALVIREMENT)
				{
					AccountSystemDelegation as = new AccountSystemDelegation();
					AccountSystemInfo accountSystemInfo = new AccountSystemInfo();
					accountSystemInfo.setNAccountId(financeinfo.getPayerAcctID());
					isInAccountSystem = as.isInAccountSystem(accountSystemInfo);
					
				}
				else
				{
					//当不是上边的业务就不进行账户体系判断,isInAccountSystem始终为TRUE
					isInAccountSystem = true;
				}
				//
				//inutParameterInfo.setApprovalEntryID(approvalID);
				
				if(parentId != -1 && approvalID != -1 && lIsSendToUpClient>0 && isInAccountSystem){
					
					//OBFSWorkflowManager.updateApprovalRecord(inutParameterInfo);
					InutApprovalRecordInfo recordInfo = new InutApprovalRecordInfo();
					long wfInstanceId = Long.parseLong((String)inutParameterInfo.getRequestMap().get(com.iss.inut.workflow.constants.Constants.WF_INSTANCEID));
				
					recordInfo.setApprovalEntryID(wfInstanceId);
					recordInfo.setStatusID(Constant.RecordStatus.STASIS);
					inputDao.updateApprovalRecord(recordInfo);
					inutParameterInfo.setClientID(parentId);
					//查询原记录审批级别
					InutApprovalRecordBiz ibiz = new InutApprovalRecordBiz();
					InutApprovalRecordInfo iInfo = ibiz.findByInstanceID(wfInstanceId);
					inutParameterInfo.setNextLevel(iInfo.getNextLevel()+1); //集团审批 在原有级别增加1
					//
					//保存并提交给下级单位审批流
					inutParameterInfo.setIslowerunit(OBConstant.IsLowerun.ISYES);
					inutParameterInfo.setTransID(String.valueOf(financeinfo.getID()));
					OBFSWorkflowManager.initApproval(inutParameterInfo);
					
					
				}else{
					

					dao.updateStatus(info.getID(),OBConstant.SettInstrStatus.APPROVALED);
					//如果是自动复核
					if(OBFSWorkflowManager.isAutoCheck())
					{
						//构造check参数
						//FinanceInfo financeInfo = new FinanceInfo();
						//financeInfo = this.findByID(info.getID(),info.getUserID(),info.getCurrencyID());
						//financeinfo.setAbstract("机核");
						info.setUserID(sessionMng.m_lUserID);	
						info.setCurrencyID(sessionMng.m_lCurrencyID);
						//financeInfo.setCheckUserID(assemble.getSett_TransCurrentDepositInfo().getInputUserID());			        
										
						
						//TransCurrentDepositAssembler dataEntity = new TransCurrentDepositAssembler(depositInfo);
						
						//调用openCheck方法
						this.check(info.getID(),info.getUserID(),info.getCurrencyID());	
	
					}
				
				}
			}
			//如果是最后一级,且为审批拒绝,更新状态为已保存
			else if(returnInfo.isRefuse())
			{
				dao.updateStatus(
						info.getID(),
						OBConstant.SettInstrStatus.SAVE);
			}
			
			if(null != info.getSignatureValue() && info.getSignatureValue().length() > 0){
				//保存签名值
				new OBFinanceInstrDao().updateSignatureInfo(info);
			}
			unLockObj(info.getID());
		}
		//modified by mzh_fu(付明正) 2007/05/15
/*		catch (RemoteException e)
		{
			throw e;
		}
		catch (IRollbackException e)
		{
			throw e;
		}*/
		catch (Exception e)
		{
			unLockObj(info.getID());
            log4j.error(e.toString());
            throw new IRollbackException(mySessionCtx, e.getMessage(), e);
		}
		return depositId;
	}
	
	
	
    /**
     * 单条记录查询
     * @param lInstructionID
     * @return
     * @throws IException
     */
    public OBBankPayInfo findByID (long lInstructionID) throws  RemoteException, Exception
    {
        OBBankPayInfo info = new OBBankPayInfo();
        Connection con = null;
        boolean b = false;
		try
		{
			con = Database.getConnection();
            //con.setAutoCommit(false);	 
		    OBBankPayDao dao = new OBBankPayDao(con);
			info = (OBBankPayInfo) dao.findByID(lInstructionID,info.getClass());
			b = true;
		 }
		catch(IException ie)
		{        	
			ie.printStackTrace(); 
			throw ie;
        }
		catch(Exception e)
		{
        	e.printStackTrace(); 
        	throw new IException("Gen_E001");
        }finally{
        	//doCon(con, b);
        	if(con != null){
        		con.close();
        		con = null;
        	}
        }
		return info;	
        
    }
    
    
    /**
	 * 取消审批方法
	 * 取消复核：调用ejb的取消复核方法
	 * 取消审批：将业务记录状态置为已保存即可
	 * @author mingfang
	 * @param info
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(OBBankPayInfo info)throws RemoteException, IRollbackException ,Exception
	{
		long lReturn = -1;
		// OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
		
		Connection con = null;
		OBBankPayDao dao = new OBBankPayDao(con);
		

		InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
		com.iss.itreasury.ebank.util.SessionOB sessionMng = null;
		if(inutParameterInfo != null){
			sessionMng = inutParameterInfo.getSessionMng();
		}
		 
		
		try
		{
			//如果系统内设定为自动动复核，则需要先取消复核，然后取消审批
			if(OBFSWorkflowManager.isAutoCheck() && info.getNstatus()==OBConstant.SettInstrStatus.CHECK)
			{
				//取消复核
				this.cancelCheckBankPay(info.getId(),sessionMng.m_lUserID);
				//取消审批
				lReturn = dao.updateStatus(info.getId(), OBConstant.SettInstrStatus.SAVE);
			}
			else if( !OBFSWorkflowManager.isAutoCheck() && info.getNstatus()==OBConstant.SettInstrStatus.APPROVALED)
			{
				//取消审批
				lReturn = dao.updateStatus(info.getId(), OBConstant.SettInstrStatus.SAVE);
			}
			
			//查询映射表
			InutApprovalRecordInfo inutApprovalRecordInfo = OBFSWorkflowManager.findByTransID(String.valueOf(info.getId()),info.getNtranstype(),Constant.RecordStatus.VALID);
			
			
			//如果存在映射信息,说明此业务关联了审批流
			//将审批记录表内的该交易的审批记录状态置为无效
			if(inutApprovalRecordInfo != null && inutApprovalRecordInfo.getApprovalEntryID() > 0)
			{
				inutParameterInfo.setApprovalEntryID(inutApprovalRecordInfo.getApprovalEntryID());
				OBFSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
			}							
		}
		catch (Exception e)
		{
			throw new IRollbackException(mySessionCtx, e.getMessage(), e);
		}
		return lReturn;
	}
	
	/**
	 * 审批方法（银行付款）。
	 * @param info
	 * @return long
	 * @throws IRollbackException
	 */
	public long doApproval(OBBankPayInfo info)throws RemoteException, IRollbackException
	{
		long depositId = -1;
		InutParameterInfo returnInfo = new InutParameterInfo();
		Connection con = null;
		OBBankPayDao dao = new OBBankPayDao(con);
		
		
		InutApprovalRelationDao inputDao = new InutApprovalRelationDao();
		
		
		InutParameterInfo inutParameterInfo = info.getInutParameterInfo();
		com.iss.itreasury.ebank.util.SessionOB sessionMng = null;
		if(inutParameterInfo != null){
			sessionMng = inutParameterInfo.getSessionMng();
		}
		try
		{
			//提交审批
			OBBankPayInfo oBBankPayInfo = new OBBankPayInfo();
			oBBankPayInfo = this.findByID(info.getId());
			inutParameterInfo.setDataEntity(oBBankPayInfo);
			
			try
			{
				returnInfo = OBFSWorkflowManager.doApproval(inutParameterInfo);
			}
			catch(Exception e)
			{
				e.printStackTrace();
				sessionMng.getActionMessages().addMessage("该业务已被其他人审批完成");
				throw new Exception("该业务已被其他人审批完成",e);
			}
			//如果是最后一级,且为审批通过,更新状态为已审批
			if(returnInfo.isLastLevel())
			{	
				
				InutApprovalRelationInfo qInfo = new InutApprovalRelationInfo();
				InutApprovalRelationInfo resultInfo = null;
				qInfo.setTransTypeID(inutParameterInfo.getTransTypeID());
				qInfo.setClientID(info.getNclientid());
				qInfo.setIslowerunit(OBConstant.IsLowerun.ISNO);
				long lIsSendToUpClient = -1;
				long parentId =-1;
				long approvalID = -1;
				resultInfo = inputDao.findApprovalInfo(qInfo);
				if(resultInfo!=null)// resultInfo为null表明本级单位没有管理审批流
				{
					lIsSendToUpClient = resultInfo.getIssendtoupclient();
				}
				//检查是上级是否设置审批流
				if(lIsSendToUpClient>0)
				{
					parentId = inputDao.getParentId(info.getNclientid());
					if(parentId<=0)
					{
					   throw new IException("无法获取上级单位信息，审批失败");
					}

					qInfo.setClientID(parentId);
					qInfo.setIslowerunit(OBConstant.IsLowerun.ISYES);
					approvalID = inputDao.findApprovalID(qInfo);
					if(approvalID<=0)
					{
						throw new IException("上级单位没有设置下级审批流,审批失败");
					}
					

				}
			
				if(parentId != -1 && approvalID != -1 && lIsSendToUpClient>0)
				{
					InutApprovalRecordInfo recordInfo = new InutApprovalRecordInfo();
					long wfInstanceId = Long.parseLong((String)inutParameterInfo.getRequestMap().get(com.iss.inut.workflow.constants.Constants.WF_INSTANCEID));
					recordInfo.setApprovalEntryID(wfInstanceId);
					recordInfo.setStatusID(Constant.RecordStatus.STASIS);
					inputDao.updateApprovalRecord(recordInfo);
					inutParameterInfo.setClientID(parentId);
					//查询原记录审批级别
					InutApprovalRecordBiz ibiz = new InutApprovalRecordBiz();
					InutApprovalRecordInfo iInfo = ibiz.findByInstanceID(wfInstanceId);
					inutParameterInfo.setNextLevel(iInfo.getNextLevel()+1); //集团审批 在原有级别增加1
					//保存并提交给下级单位审批流
					inutParameterInfo.setIslowerunit(OBConstant.IsLowerun.ISYES);
					inutParameterInfo.setTransID(String.valueOf(oBBankPayInfo.getId()));
					OBFSWorkflowManager.initApproval(inutParameterInfo);
					depositId = 1;
					
				}
				else
				{
				
					dao.updateStatus(info.getId(),OBConstant.SettInstrStatus.APPROVALED);
					//如果是自动复核
					if(OBFSWorkflowManager.isAutoCheck())
					{
						//构造check参数
						//FinanceInfo financeInfo = new FinanceInfo();
						//financeInfo = this.findByID(info.getID(),info.getUserID(),info.getCurrencyID());
						//financeinfo.setAbstract("机核");
						//info.setUserId(sessionMng.m_lUserID);	
						//info.setCurrencyID(sessionMng.m_lCurrencyID);
						//financeInfo.setCheckUserID(assemble.getSett_TransCurrentDepositInfo().getInputUserID());			        
										
						
						//TransCurrentDepositAssembler dataEntity = new TransCurrentDepositAssembler(depositInfo);
						
						//调用openCheck方法
						this.checkBankPay(info.getId(),sessionMng.m_lUserID);	
	
					}
				
					depositId = 1;
				}
			}
			//如果是最后一级,且为审批拒绝,更新状态为已保存
			else if(returnInfo.isRefuse())
			{
				dao.updateStatus(
						info.getId(),
						OBConstant.SettInstrStatus.SAVE);
				depositId = 1;
			}
			else
			{
				depositId = 1;
				
			}
			
		}
		//modified by mzh_fu(付明正) 2007/05/15
/*		catch (RemoteException e)
		{
			throw e;
		}
		catch (IRollbackException e)
		{
			throw e;
		}*/
		catch (Exception e)
		{
			throw new IRollbackException(mySessionCtx, e.getMessage(), e);
		}
		return depositId;
	}
	
	
    /**
     * 复核  判断状态，判断复核人不为录入人,是否需要判断日期 如果不需要签认则调用银企接口发送指令
     * @param lInstructionID
     * @return
     * @throws IException
     */
    public long checkBankPay(long lInstructionID,long lCheckUserID) throws  RemoteException, Exception
    {
    	
    	long lReturn = -1;
        Connection con = null;
        //boolean b = false;
		 try
	        {
				lockObj(lInstructionID);
			 	con = Database.getConnection();
	            //con.setAutoCommit(false);
		        OBBankPayDao dao = new OBBankPayDao(con);
		        OBBankPayInfo info = new OBBankPayInfo ();
		        info = this.findByID(lInstructionID);
		 		long[] lstatus = new long[2];
		 		lstatus[0] = OBConstant.OBBankPayStatus.SAVE;
		 		lstatus[1] = OBConstant.OBBankPayStatus.LOADSAVE;
		 		boolean bstatus = dao.isStatus(lInstructionID, lstatus);
		 		//boolean buser = dao.isComfirmer(lInstructionID,lCheckUserID,"check");
		 		if (!bstatus)
				{
					throw new IException("该笔交易已经被修改，请确认!");
				}
		 		//else if(buser)
		        //{
		 		//	 throw new IException("OB_EC65");
		        //}
//		 		else if(!Date.valueOf(info.getDtexecute().toString().substring(0,10)).equals( Date.valueOf(DataFormat.getStringDateTime().toString().substring(0,10)) ))
//		 		{
//		 		    throw new IException("OB_EC66");
//		 		}
		 		else
		 		{
		 			lReturn  = dao.updateStatus(lInstructionID,OBConstant.OBBankPayStatus.CHECK,lCheckUserID,"check");	 
		 		}

		 		if(lReturn>0)
		 		{
		 		    boolean btmp = dao.isCanAcept(lReturn);
		 		    if(btmp)
		 		    {
		 		       RespInstructionInfo RespInstrInfo = null;
		 		       boolean bIsValid = Config.getBoolean(Config.INTEGRATION_SERVICE_ISVALID, false);
		 		       if(bIsValid)
		 		       {
		 		          
		 		          BPClientAgent.init(Config.getProperty(Config.INTEGRATION_SERVICE_BPSERVICEIP),Config.getInteger(Config.INTEGRATION_SERVICE_BPSERVICEPORT,-1));
		 		          ReqInstructionInfo reqInstrInfo = new ReqInstructionInfo();
		 		          if(info.getNmodule()>0)
		 		          {	//结算
		 		          	reqInstrInfo.setSystemId(1);//用常量
		 		          }else{
		 		          	reqInstrInfo.setSystemId(2);//网银
		 		          }
		 		         long officeid=info.getNmodule();
				          if(officeid<0) 
				          {
				          	officeid=dao.getOfficeIDbyClientID(info.getNclientid());
				          }
		 		          reqInstrInfo.setPayAcctCurrencyCode(NameRef.getCurrencyCodeByID(info.getNcurrencyid()));
		 		          reqInstrInfo.setPayAccountNO(NameRef.getBankAcctNameByAcctID(info.getNpayeracctid()));
		 		          reqInstrInfo.setRecAccountNO(info.getSpayeeacctno());
		 		          reqInstrInfo.setRecAccountName(info.getSpayeeacctname());
		 		          reqInstrInfo.setRecBranchProvince(info.getSpayeeprov());
		 		          reqInstrInfo.setRecBranchCity(info.getSpayeecity());
		 		          reqInstrInfo.setRecBranchName(info.getSpayeebankname());
		 		          // juncai increase 机构号，银行联行号
		 		          reqInstrInfo.setRecBranchCode(info.getDepartmentnumber());
		 		          reqInstrInfo.setRecBranchUniteCode(info.getBankconnectnumber());
		 		          reqInstrInfo.setAmount(info.getMamount());
		 		          reqInstrInfo.setOfficeID(officeid);//办事处
		 		          //reqInstrInfo.setChargesBorneType();
		 		          reqInstrInfo.setRemitPriority(1);
		 		          reqInstrInfo.setAbstractInfo(info.getSnote());
		 		          reqInstrInfo.setSubmitUserName(String.valueOf(info.getNconfirmuserid()));
		 		          reqInstrInfo.setTransNO(String.valueOf(info.getId()));
		 		          reqInstrInfo.setTransType(1);
		 		          reqInstrInfo.setTransactionTime(info.getDtexecute());
		 		          reqInstrInfo.setRecBankCode(info.getBankCNAPSNo());
		 		          log4j.print("开始向银企发送付款指令");
					      log4j.print("reqInstrInfo:"+reqInstrInfo);
		 		          RespInstrInfo = BPClientAgent.postInstruction(reqInstrInfo);
		 		          log4j.print("发送银企指令完毕"+RespInstrInfo.getMessage());
		 		          if(RespInstrInfo!=null && RespInstrInfo.getStatus() != ResultStatus.SUCCESS)
						  {
							log4j.print(RespInstrInfo.getMessage());
							lReturn  = dao.updateStatus(lInstructionID,OBConstant.OBBankPayStatus.SAVE,lCheckUserID,"cancelcheck");	 	 
							throw new IException(RespInstrInfo.getMessage().substring(0,7));					
						  }
		 		       }
		 		       
		 		    }
		 		}
		 		//b = true;
	        }
			catch(IException ie)
			{        	
				ie.printStackTrace(); 
				throw ie;
	        }
			catch(Exception e)
			{
	        	e.printStackTrace(); 
	        	throw new IException(e.getMessage());
	        }finally{
	        	//doCon(con, b);
	        	if(con != null){
	        		con.close();
	        		con = null;
	        	}
	        	unLockObj(lInstructionID);
	        }
	     
	        return lReturn;	 
        
    }
    
    
    /**
     * 取消复核 判断状态 判断复核人  若没有提交至资金监控 则取消复核，若提交 则察看银企指令状态 
     * @param lInstructionID
     * @param lCheckUserID
     * @return
     * @throws IException
     */
    public long cancelCheckBankPay(long lInstructionID, long lCheckUserID) throws  RemoteException, Exception
    {
    	long lReturn = -1;
        Connection con = null;
        //boolean b = false;
		 try
	        {
			 lockObj(lInstructionID);
		 	 con = Database.getConnection();
	         //con.setAutoCommit(false);
		     OBBankPayDao dao = new OBBankPayDao(con);
		     boolean btmp = dao.isCanAcept(lReturn);
		     if(btmp)//已经提交资金监控
		     {
		         OBBankPayInfo info = new OBBankPayInfo();
		         info = this.findByID(lInstructionID);
		         BPClientAgent.init(Config.getProperty(Config.INTEGRATION_SERVICE_BPSERVICEIP),Config.getInteger(Config.INTEGRATION_SERVICE_BPSERVICEPORT,-1));
		         
		         ReqQueryInstructionInfo reqQueInfo = new ReqQueryInstructionInfo();
		         ReqQueryInstructionInfo.ConditionInfo conditioInfo=reqQueInfo.new ConditionInfo();
		         
		         conditioInfo.setTransNO(String.valueOf(info.getId()));
		         ReqQueryInstructionInfo.ConditionInfo[] conditionInfos=new ReqQueryInstructionInfo.ConditionInfo[1];
		 		 conditionInfos[0]=conditioInfo;
		 		 if(info.getNmodule()>0)
		          {	//结算
		 			reqQueInfo.setSystemId(1);//用常量
		          }else{
		          	reqQueInfo.setSystemId(2);//网银
		          }
		 		
				 long officeid=info.getNmodule();
		          if(officeid<0) 
		          {
		          	officeid=dao.getOfficeIDbyClientID(info.getNclientid());
		          }
		 		 reqQueInfo.setOfficeID(officeid);//办事处
		 		 reqQueInfo.setConditions(conditionInfos);
		 		 RespQueryInstructionInfo respinfo = BPClientAgent.queryInstruction(reqQueInfo);
				 RespQueryInstructionInfo.ResultInfo[] resultInfo = respinfo.getResults();
				 if(resultInfo != null)
				 {
					for(int i = 0;i < resultInfo.length; i++)
					{
						log4j.print("============================resultInfo[i].getStatus()="+resultInfo[i].getStatus());
						if (resultInfo[i].getStatus() != 0 && resultInfo[i].getStatus() != 10)//不是辙消状态
						{
							 throw new IException("存在未撤销的指令,无法取消复核");
						}
					}
				 }
		         //
			    long[] lstatus = new long[1];
		 		lstatus[0] = OBConstant.OBBankPayStatus.CHECK;
		 		boolean bstatus = dao.isStatus(lInstructionID, lstatus);
		 		boolean buser = dao.isComfirmer(lInstructionID,lCheckUserID,"canclecheck");
		 		if (!bstatus)
				{
					throw new IException("OB_EC67");
				}
		 		else if(!buser)
		        {
		 			 throw new IException("OB_EC68");
		        }
		 		else
		 		{
		 			lReturn  = dao.updateStatus(lInstructionID,OBConstant.OBBankPayStatus.SAVE,lCheckUserID,"cancelcheck");	 
		 		}
		         
		         
		     }
		     else//没有提交资金监控
		     {
		         	long[] lstatus = new long[1];
			 		lstatus[0] = OBConstant.OBBankPayStatus.CHECK;
			 		boolean bstatus = dao.isStatus(lInstructionID, lstatus);
			 		boolean buser = dao.isComfirmer(lInstructionID,lCheckUserID,"canclecheck");
			 		if (!bstatus)
					{
						throw new IException("OB_EC67");
					}
			 		else if(!buser)
			        {
			 			 throw new IException("OB_EC68");
			        }
			 		else
			 		{
			 			lReturn  = dao.updateStatus(lInstructionID,OBConstant.OBBankPayStatus.SAVE,lCheckUserID,"cancelcheck");	 
			 		}
		     }
		     //b = true;
	        }
			catch(IException ie)
			{        	
				ie.printStackTrace(); 
				throw ie;
	        }
			catch(Exception e)
			{
	        	e.printStackTrace(); 
	        	throw new IException(e.getMessage());
	        }finally{
	        	//doCon(con, b);
	        	if(con != null){
	        		con.close();
	        		con = null;
	        	}
	        	unLockObj(lInstructionID);
	        }
	     
	        return lReturn;	 
    }

    /**
     * 修改资金划拨信息 Create Date: 2003-8-13
     * 
     * @param FinanceInfo
     * @return long 大于0表示成功，等于0表示失败
     * @exception Exception
     */
    public long updateCapitalTrans(FinanceInfo info) throws RemoteException, Exception
    {
        long lReturn = -1;
        return lReturn;
    }

    /**
     * 逻辑删除资金划拨信息 Create Date: 2003-8-13
     * 
     * @param long
     *            lInstructionID -- 交易指令ID
     * @param long
     *            lDeleteUserID -- 删除人
     * @return long 大于0表示成功，等于0表示失败
     * @exception Exception
     */
    public long deleteCapitalTrans(FinanceInfo info) throws RemoteException, Exception
    {
        long lReturn = -1;

        lockObj(info.getID());
        try
        {
        	isTouch(info.getID(), info.getDtModify());
            OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
            lReturn = obFinanceInstrDao.delete(info.getID(), info.getDeleteUserID());
            log4j.info("删除成功：" + lReturn);
            //add by xlchang 2010-12-06 由委托收款生成的内转删除时应级联更新委托收款业务
            ConsignReceiveBiz biz = new ConsignReceiveBiz();
            biz.delInstr(info.getID(), info.getDeleteUserID());
            //add end 
            unLockObj(info.getID());
        }
        catch (Exception e)
        {
        	unLockObj(info.getID());
            log4j.error(e.toString());
            throw new IException(e.getMessage());
        }

        return lReturn;

    }
    public FinanceInfo getFinanceInfo(long id)throws RemoteException,Exception{
        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
    	return obFinanceInstrDao.getFinanceInfo(id);
    }
	/**
	 * 换开定期存单：返回符合条件的值
	 * @return Collection
	 * @throws Exception
	 */
    public Collection getTransOpenFixdDePosit(FinanceInfo financeInfo)throws RemoteException,Exception
    {
        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
        return obFinanceInstrDao.getTransOpenFixdDePosit(financeInfo);
    }



    public long check(long lInstructionID, long lCheckUserID, long lCurrencyID) throws RemoteException, Exception
    {
        long lReturn = -1;
        try{
	        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
	        lReturn = obFinanceInstrDao.check(lInstructionID,lCheckUserID);
        
        }catch (Exception e){
			throw new IRollbackException(mySessionCtx, e.getMessage(), e);
		}
        return lReturn;

    }
	public long billcheck(long lInstructionID, long lCheckUserID,long lCurrencyID,String billcheckabstract,boolean cancelCheck,Timestamp dtmodify) throws RemoteException,Exception
	{
        long lReturn = -1;
        lockObj(lInstructionID);
        try{
        	isTouch(lInstructionID, dtmodify);
	        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
	        lReturn = obFinanceInstrDao.billcheck(lInstructionID,lCheckUserID,billcheckabstract, cancelCheck );
        }catch (Exception e){
        	unLockObj(lInstructionID);
			throw new IRollbackException(mySessionCtx, e.getMessage(), e);
		}
        unLockObj(lInstructionID);
        return lReturn;		
	}
	
	

	/**
	 * added by mzh_fu 2007/05/16
	 * @param financeInfo
	 * @return
	 * @throws RemoteException, IRollbackException,Exception 
	 * @throws Exception
	 */
    public long check(FinanceInfo financeInfo) throws RemoteException, IRollbackException,Exception
    {
        long lReturn = -1;
        this.lockObj(financeInfo.getID());
        try{
        	isTouch(financeInfo.getID(), financeInfo.getDtModify());
        	
	        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
	        lReturn = obFinanceInstrDao.check(financeInfo.getID(),financeInfo.getCheckUserID());
        
	        if(null != financeInfo.getSignatureValue() && financeInfo.getSignatureValue().length() > 0){
	        	obFinanceInstrDao.updateSignatureInfo(financeInfo);
	        }
        }catch (Exception e){
        	unLockObj(financeInfo.getID());		
        	throw new IRollbackException(mySessionCtx, e.getMessage(), e);
		}
        unLockObj(financeInfo.getID());	
        return lReturn;

    }
    /**
     * added by mzh_fu 2007/05/16
     * @param financeInfo
     * @param cancelCheck
     * @return
     * @throws RemoteException
     * @throws Exception
     */
	public long billcheck(FinanceInfo financeInfo,boolean cancelCheck) throws RemoteException,IRollbackException
	{
        long lReturn = -1;
        try{
	        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
	        lReturn = obFinanceInstrDao.billcheck(financeInfo.getID(),financeInfo.getCheckUserID(),financeInfo.getAbstract(), cancelCheck );
	        if(null != financeInfo.getSignatureValue() && financeInfo.getSignatureValue().length() > 0){
	        	obFinanceInstrDao.updateSignatureInfo(financeInfo);
	        }
        }catch (Exception e){
			throw new IRollbackException(mySessionCtx, e.getMessage(), e);
		}
        return lReturn;		
	}

    /**
     * 取消复核 Create Date: 2003-8-13
     * 
     * @param long
     *            lInstructionID -- 交易指令ID
     * @param long
     *            lCheckUserID -- 复核人
     * @return long 大于0表示成功，小于，等于0表示失败
     * @exception Exception
     */
    public long cancelCheck(long lInstructionID, long lCheckUserID) throws RemoteException, Exception
    {
        long lReturn = -1;

        try
        {
            OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
            lReturn = obFinanceInstrDao.cancelCheck(lInstructionID, lCheckUserID);
        }
        catch (RemoteException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }

        return lReturn;

    }
    
    /**
     * added by mzh_fu 2007/05/21
     * @param financeInfo
     * @param cancelCheck
     * @return
     * @throws RemoteException
     * @throws Exception
     */
    public long cancelCheck(FinanceInfo financeInfo) throws RemoteException, Exception
    {
        long lReturn = -1;
        lockObj(financeInfo.getID()+999999);
        try
        {
        	isTouch(financeInfo.getID(), financeInfo.getDtModify());
            OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
            
            lReturn = obFinanceInstrDao.cancelCheck(financeInfo.getID(), financeInfo.getCheckUserID());
            if(null != financeInfo.getSBatchNo() && financeInfo.getSBatchNo().length() > 0)
            {           	
            }
            else
            {
	        if(null != financeInfo.getSignatureValue() && financeInfo.getSignatureValue().length() > 0 ){
	           obFinanceInstrDao.updateSignatureInfo(financeInfo);
	        }
            }
        }
        catch (Exception e)
        {
            log4j.error(e.toString());
            unLockObj(financeInfo.getID()+999999);
           throw e;
        }
        unLockObj(financeInfo.getID()+999999);
        return lReturn;

    }
    /**
     * 业务签认 Create Date: 2003-8-13
     * 
     * @param long
     *            lInstructionID -- 交易指令ID
     * @param long
     *            lSignUserID -- 签认人
     * @return long , 大于0表示成功，小于,等于0表示失败
     * @exception Exception
     */
    public long sign(FinanceInfo info) throws RemoteException, Exception
    {
        long lReturn = -1;
        lockObj(info.getID());
        try
        {
        	isTouch(info.getID(), info.getDtModify());
            OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
            lReturn = obFinanceInstrDao.sign(info.getID(), info.getSignUserID());

        }
        catch (Exception e)
        {
        	log4j.error(e.toString());
            unLockObj(info.getID());
            throw new IException(e.getMessage());
        }
        unLockObj(info.getID());
        return lReturn;
    }

    /**
     * 取消签认 Create Date: 2003-8-13
     * 
     * @param long
     *            lInstructionID -- 交易指令ID
     * @param long
     *            lSignUserID -- 签认人
     * @return long , 大于0表示成功，小于,等于0表示失败
     * @exception Exception
     */
    public long cancelSign(long lInstructionID, long lSignUserID) throws RemoteException, Exception
    {
        long lReturn = -1;

        try
        {
            OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
            lReturn = obFinanceInstrDao.cancelSign(lInstructionID, lSignUserID);
        }
        catch (RemoteException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        return lReturn;
    }
    
    /**
     * 根据财务交易指令ID，查询指令信息(换开定期存单) Create Date: 2006-5-9
     * @param lInstructionID
     * @return
     * @throws RemoteException
     * @throws Exception
     */
    public FinanceInfo findByIDForSett(long lInstructionID, long lClientID, long lCurrencyID) throws RemoteException,Exception
	{
    	FinanceInfo info = null;
    	try{
	       
	        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
			info = obFinanceInstrDao.findByIDForSett(lInstructionID,lClientID,lCurrencyID);
		}catch (IException e){
        log4j.error(e.toString());
        throw e;
	    }catch (RemoteException e){
	        log4j.error(e.toString());
	        throw new IException("Gen_E001");
    	}
		return info;
	}
    
    /**
     * 根据财务交易指令ID，查询指令信息 Create Date: 2003-8-13
     * 
     * @param lInstructionID
     *            财务交易指令ID
     * @param lUserID
     *            登录人ID
     * @param lCurrencyID
     *            币种ID
     * @return FinanceInfo
     * @exception Exception
     */
    public FinanceInfo findByID(long lInstructionID, long lUserID, long lCurrencyID) throws RemoteException, Exception
    {
        FinanceInfo info = null;
        try
        {
            OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
            info = obFinanceInstrDao.findByID(lInstructionID, lUserID, lCurrencyID);
        }
        catch (RemoteException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        return info;
    }
    public long TransOpenFixdDePositUpdtae(FinanceInfo financeInfo) throws RemoteException, Exception
    {
        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
        return obFinanceInstrDao.TransOpenFixdDePositUpdtae(financeInfo);
    }
    /**
     * 得到贷款条件信息
     * 
     * @param info
     *            SubLoanAccountDetailInfo
     * @return SubLoanAccountDetailInfo
     * @throws RemoteException
     * @throws IRollbackException
     */

    public SubLoanAccountDetailInfo findSubLoanAccountDetailByCondition(SubLoanAccountDetailInfo subLoanAccountDetailInfo) throws RemoteException, Exception
    {
        SubLoanAccountDetailInfo info = null;
        try
        {
            OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
            info = obFinanceInstrDao.findSubLoanAccountDetailByCondition(subLoanAccountDetailInfo);
        }
        catch (IException e)
        {
            log4j.error(e.toString());
            throw e;
        }
        catch (RemoteException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        return info;
    }

    /**
     * 根据账户种类得到账户信息
     * 
     * @param info
     *            SubLoanAccountDetailInfo
     * @return AccountInfo
     * @throws RemoteException
     * @throws IRollbackException
     */
    public PayerOrPayeeInfo getLoanAccountInfo(long lclientID, long lcurrencyID, long laccountGroupType) throws RemoteException, Exception
    {
        PayerOrPayeeInfo info = null;
        try
        {
            OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
            info = obFinanceInstrDao.getLoanAccountInfo(lclientID, lcurrencyID, laccountGroupType);
        }
        catch (RemoteException e)
        {
            log4j.error(e.toString());
            throw new IException("Gen_E001");
        }
        return info;
    }

    /**
	 * 取消审批方法。如果是自动复核，则取消审批之前必须先取消复核，如果是手动复核，则只需取消审批
	 * 取消复核：调用ejb的取消复核方法
	 * 取消审批：将业务记录状态置为已保存即可
	 * @author mingfang
	 * @param info
	 * @return long
	 * @throws IRollbackException
	 */
	public long cancelApproval(FinanceInfo financeInfo)throws RemoteException, IRollbackException ,Exception
	{
		long lReturn = -1;
		 OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();	
		 
		
		 lockObj(financeInfo.getID());
		try
		{
			isTouch(financeInfo.getID(), financeInfo.getDtModify());
			//如果系统内设定为自动动复核，则需要先取消复核，然后取消审批
			if(OBFSWorkflowManager.isAutoCheck() && financeInfo.getStatus()==OBConstant.SettInstrStatus.CHECK)
			{
				//取消复核
				this.cancelCheck(financeInfo);
				//取消审批
				lReturn = obFinanceInstrDao.updateStatusAndActionStatus(financeInfo.getID(), OBConstant.SettInstrStatus.SAVE,OBConstant.SettActionStatus.CANCELAPPROVALED);
			}
			else if( !OBFSWorkflowManager.isAutoCheck() && financeInfo.getStatus()==OBConstant.SettInstrStatus.APPROVALED)
			{
				//取消审批
				lReturn = obFinanceInstrDao.updateStatusAndActionStatus(financeInfo.getID(), OBConstant.SettInstrStatus.SAVE,OBConstant.SettActionStatus.CANCELAPPROVALED);
				
			}
			
			//查询映射表
			InutApprovalRecordInfo inutApprovalRecordInfo = OBFSWorkflowManager.findByTransID(String.valueOf(financeInfo.getID()),financeInfo.getTransType(),Constant.RecordStatus.VALID);
			
			
			//如果存在映射信息,说明此业务关联了审批流
			//将审批记录表内的该交易的审批记录状态置为无效
			if(inutApprovalRecordInfo != null && inutApprovalRecordInfo.getApprovalEntryID() > 0)
			{
				InutParameterInfo inutParameterInfo = new InutParameterInfo();
				inutParameterInfo.setApprovalEntryID(inutApprovalRecordInfo.getApprovalEntryID());
				inutParameterInfo.setSessionMng(financeInfo.getInutParameterInfo().getSessionMng());
				OBFSWorkflowManager.cancelApprovalRecord(inutParameterInfo);
			}	
			unLockObj(financeInfo.getID());
		}
		catch (Exception e)
		{
			unLockObj(financeInfo.getID());
			throw new IRollbackException(mySessionCtx, e.getMessage(), e);
		}
		return lReturn;
	}
	 
	
	
    public static void main(String args[])
    {
        try
        {
        }
        catch (Exception e)
        {
        }
    }
    
    public Collection isTransOpenFixdDePosit(FinanceInfo financeInfo) throws RemoteException, Exception
    {
        OBFinanceInstrDao obFinanceInstrDao = new OBFinanceInstrDao();
        return obFinanceInstrDao.isTransOpenFixdDePosit(financeInfo);
    }
    
    
    
    /**
     * 增加\修改 银行汇款记录 同时交验 1可用余额2执行日不能晚于当日
     * @param info
     * @return
     * @throws IException
     */
    public long addBankPay(OBBankPayInfo info) throws  RemoteException, Exception
    {
        long lReturn = -1;
        double duseBalance = 0.00;
        Connection con = null;
        //boolean b = false;
	    try
        {
	    	con = Database.getConnection();
            //con.setAutoCommit(false);
		    if(info.getId()<0)
		    {
		        OBBankPayDao dao = new OBBankPayDao(con);
		        /*
		        duseBalance = dao.getUseBalanceByAccountID(info.getNpayeracctid(),info.getNcurrencyid(),info.getId());
		        log4j.print("excute"+info.getDtexecute());
		        log4j.print("today"+Timestamp.valueOf(DataFormat.getStringDateTime()));
		
		        if(duseBalance < info.getMamount())
		         {
		             throw new IException("OB_EC60"); //异常代码自定义     
		         }
		         else 
		         */
		         if(!Date.valueOf(info.getDtexecute().toString().substring(0,10)).equals( Date.valueOf(DataFormat.getStringDateTime().toString().substring(0,10)) ))
		         {
		             throw new IException("OB_EC61"); //异常代码自定义     
		         }
		         else  
		         {// log4j.print("%%%%%%%%%%%%%%%%%"+Long.parseLong(OBOperation.createInstrCode(OBConstant.SubModuleType.SETTLEMENT)));
		            // info.setId(Long.parseLong(OBOperation.createInstrCode(OBConstant.SubModuleType.SETTLEMENT)));
		         	log4j.print("*********外部账户信息:账号"+info.getNpayeeacctid()+"***办事处id"+info.getNmodule());
		         	//if(info.getNpayeeacctid()==-1&& info.getNmodule()!=-1)
		         	if(info.getNmodule()!= -1)
		         	{	//如果是结算模块用户自己录入的信息，添加该外部账户
			         	long payeeid=dao.addExternalPayee(info);
			         	info.setNpayeeacctid(payeeid);
		         	}
		         	info.setNstatus(OBConstant.OBBankPayStatus.SAVE);
		         	lReturn = dao.addbankpay(info);  
		         	// if(lReturn > 0)
		         	// {
		         	//     lReturn = dao.updateMaxID(lReturn);
		         	// }
		         }
		         
					if(info.getInutParameterInfo()!=null)
					{
						log4j.debug("------提交审批--------");
						//设置返回的地址链接(交易id只能在交易保存之后加上,tempInfo.getUrl()得到的url没有具体的交易id)
						InutParameterInfo tempInfo = info.getInutParameterInfo();
						tempInfo.setUrl(tempInfo.getUrl()+lReturn);
						tempInfo.setTransID(String.valueOf(lReturn));
						tempInfo.setDataEntity(info);
						//	本单位保存并提交审批
						tempInfo.setIslowerunit(OBConstant.IsLowerun.ISNO);
						//提交审批
						OBFSWorkflowManager.initApproval(tempInfo);
						//更新状态到审批中
						dao.updateStatus(lReturn,OBConstant.SettInstrStatus.APPROVALING);
						log4j.debug("------提交审批成功--------");					
					}
		         
		         
		    }
		    else 
		    {
		         OBBankPayDao dao = new OBBankPayDao(con);
		    	 long[] lstatus = new long[1];
		    	 lstatus[0] = OBConstant.OBBudgetStatus.SAVE;
		    	 boolean bstatus = dao.isStatus(info.getId(), lstatus);
		    	 boolean buser = dao.isComfirmer(info.getId(),info.getNconfirmuserid(),"input");
		    	 /*
		    	 duseBalance = dao.getUseBalanceByAccountID(info.getNpayeracctid(),info.getNcurrencyid(),info.getId());
		        
		         if(duseBalance < info.getMamount())
		         {
		             throw new IException("OB_EC60"); //异常代码自定义     
		         }
		         else 
		         */
		    	 if(!Date.valueOf(info.getDtexecute().toString().substring(0,10)).equals( Date.valueOf(DataFormat.getStringDateTime().toString().substring(0,10)) ))
		         {
		             throw new IException("OB_EC61"); //异常代码自定义     
		         }
		    	 else if(!bstatus)
		         {
		             throw new IException("OB_EC62"); //异常代码自定义     
		         }
		    	 else if(!buser)
		    	 {
		    	 	 throw new IException("OB_EC63"); //异常代码自定义   
		    	 }
		         else 
		         { 
		            if(info.getNmodule()!= -1)
		         	{	//如果是结算模块用户自己录入的信息，添加该外部账户
			         	long payeeid=dao.addExternalPayee(info);
			         	info.setNpayeeacctid(payeeid);
		         	}
		            lReturn = info.getId();
		            dao.updateEbank(info);
		         } 
		    }
		    //b = true;
        }
		catch(IException ie)

		{        	
			ie.printStackTrace(); 
			throw ie;
        }
		catch(Exception e)
		{
        	e.printStackTrace(); 
        	throw new IException("Gen_E001");
        }
		finally{
			//doCon(con, b);
			if(con != null){
        		con.close();
        		con = null;
        	}
		}
		return lReturn;
        
    }
    
    /**
     * @param con
     * @param b
     * @throws SQLException
     */
    private void doCon(Connection con, boolean b) {
        try {
            if (con != null) {
                if (b == true) {
                    con.commit();
                } else {
                    con.rollback();
                }
                con.close();

            }
        } catch (Exception e) {

        }
    }
    
    /**
     * 
     * @param info
     * @param userId
     * @return
     * @throws IException
     */
    public long matching (OBBankPayInfo info,long userId)throws  RemoteException, Exception
	{
        long lmatch = -1;
        OBBankPayInfo conInfo = new OBBankPayInfo ();
        Connection con = null;
        //boolean b = false;
		try
		{
			con = Database.getConnection();
	        //con.setAutoCommit(false);
			OBBankPayDao dao = new OBBankPayDao(con);
			conInfo.setNpayeracctid(info.getNpayeracctid());
			conInfo.setNpayeeacctid(info.getNpayeeacctid());
			conInfo.setNtranstype(info.getNtranstype());
			conInfo.setMamount(info.getMamount());
			conInfo.setNstatus(OBConstant.OBBankPayStatus.SAVE);
			conInfo.setDtexecute(info.getDtexecute());
			conInfo.setNclientid(info.getNclientid());
			conInfo.setNcurrencyid(info.getNcurrencyid());
			conInfo.setNmodule(info.getNmodule());
			lmatch =  dao.matchingBankPay(conInfo,userId);
			//b = true;
		 }
		catch(IException ie)
		{        	
			ie.printStackTrace(); 
			throw ie;
        }
		catch(Exception e)
		{
        	e.printStackTrace(); 
        	throw new IException("Gen_E001");
        }finally{
        	//doCon(con, b);
        	if(con != null){
        		con.close();
        		con = null;
        	}
        }
		return lmatch;
    }
    
    public Collection query (QueryCapForm info) throws  RemoteException, Exception
    {
        Collection  coll = null ;
        Connection con = null;
        //boolean b = false;
        try
		{

            con = Database.getConnection();
            //con.setAutoCommit(false);
            OBBankPayDao dao = new OBBankPayDao(con);
            coll = dao.query(info);
            //b = true;
        }
		catch(IException ie)
		{        	
			ie.printStackTrace(); 
			throw ie;
	    
	    }
		catch(Exception e)
		{
	    	e.printStackTrace(); 
	    	throw new IException("Gen_E001");
	    }finally{
	    	//doCon(con, b);
	    	if(con != null){
        		con.close();
        		con = null;
        	}
	    }
		return coll;
	        
    }
    
    
    /**
     * 签认 判断状态，判断复核人 是否需要判断日期  调用银企接口发送指令
     * @param lInstructionID
     * @param lSignUserID
     * @return
     * @throws IException
     */
    public long signBankPay(long lInstructionID, long lSignUserID) throws  RemoteException, Exception
    {
        long lReturn = -1;
        Connection con = null;
        //boolean b = false;
		 try
	        {
		 		con = Database.getConnection();
		 		//con.setAutoCommit(false);
		        OBBankPayDao dao = new OBBankPayDao(con);
		        OBBankPayInfo info = new OBBankPayInfo ();
		        info = this.findByID(lInstructionID);
		        long[] lstatus = new long[2];
		 		lstatus[0] = OBConstant.OBBankPayStatus.CHECK;
		 		lstatus[1] = OBConstant.OBBankPayStatus.AUDITING;
		 		boolean bstatus = dao.isStatus(lInstructionID, lstatus);
		 		if (!bstatus)
				{
					throw new IException("OB_EC69");
				}
		 		else if(!Date.valueOf(info.getDtexecute().toString().substring(0,10)).equals( Date.valueOf(DataFormat.getStringDateTime().toString().substring(0,10)) ))
		 		{
		 		    throw new IException("OB_EC66");
		 		}
		 		else
		 		{
		 			lReturn  = dao.updateStatus(lInstructionID,OBConstant.OBBankPayStatus.SIGN,lSignUserID,"sign");	 
		 		}
		 		if(lReturn>0)
		 		{
		 		    boolean btmp = dao.isCanAcept(lReturn);
		 		    if(btmp)
		 		    {
		 		       RespInstructionInfo RespInstrInfo = null;
		 		       boolean bIsValid = Config.getBoolean(Config.INTEGRATION_SERVICE_ISVALID, false);
		 		       if(bIsValid)
		 		       {
		 		          
		 		          BPClientAgent.init(Config.getProperty(Config.INTEGRATION_SERVICE_BPSERVICEIP),Config.getInteger(Config.INTEGRATION_SERVICE_BPSERVICEPORT,-1));
		 		          ReqInstructionInfo reqInstrInfo = new ReqInstructionInfo();
		 		          if(info.getNmodule()>0)
		 		          {	//结算
		 		          	reqInstrInfo.setSystemId(1);//用常量
		 		          }else{
		 		          	reqInstrInfo.setSystemId(2);//网银
		 		          }
		 		          long officeid=info.getNmodule();
		 		          if(officeid<0) 
		 		          {
		 		          	officeid=dao.getOfficeIDbyClientID(info.getNclientid());
		 		          }
		 		          reqInstrInfo.setPayAcctCurrencyCode(NameRef.getCurrencyCodeByID(info.getNcurrencyid()));
		 		          reqInstrInfo.setPayAccountNO(NameRef.getBankAcctNameByAcctID(info.getNpayeracctid()));
		 		          reqInstrInfo.setRecAccountNO(info.getSpayeeacctno());
		 		          reqInstrInfo.setRecAccountName(info.getSpayeeacctname());
		 		          reqInstrInfo.setRecBranchName(info.getSpayeebankname());
		 		          reqInstrInfo.setRecBranchProvince(info.getSpayeeprov());
		 		          reqInstrInfo.setRecBranchCity(info.getSpayeecity());
		 		          // juncai increase 机构号，银行联行号
		 		          reqInstrInfo.setRecBranchCode(info.getDepartmentnumber());
		 		          reqInstrInfo.setRecBranchUniteCode(info.getBankconnectnumber());
		 		          
		 		          //CNAPS号
		 		          reqInstrInfo.setRecBankCode(info.getBankCNAPSNo());
		 		          
		 		          reqInstrInfo.setAmount(info.getMamount());
		 		          reqInstrInfo.setOfficeID(officeid);//办事处
		 		          //reqInstrInfo.setChargesBorneType();
		 		          reqInstrInfo.setRemitPriority(1);
		 		          reqInstrInfo.setAbstractInfo(info.getSnote());
		 		          reqInstrInfo.setSubmitUserName(String.valueOf(info.getNconfirmuserid()));
		 		          reqInstrInfo.setTransNO(String.valueOf(info.getId()));
		 		          reqInstrInfo.setTransType(1);
		 		          reqInstrInfo.setTransactionTime(info.getDtexecute());
		 		          log4j.print("开始向银企发送付款指令");
					      log4j.print("reqInstrInfo:"+reqInstrInfo);
		 		          RespInstrInfo = BPClientAgent.postInstruction(reqInstrInfo);
		 		          log4j.print("发送银企指令完毕"+RespInstrInfo.getMessage());
		 		          if(RespInstrInfo!=null && RespInstrInfo.getStatus() != ResultStatus.SUCCESS)
						  {
		 		        	long status = -1; 
		 		        	if(info.getNauditinguserid() > 0)
		 		        	{		 		       	
		 		        		status = OBConstant.OBBankPayStatus.AUDITING;
		 		        	}
		 		        	else
		 		        	{
		 		        		status = OBConstant.OBBankPayStatus.CHECK;
		 		        	}
		 		        		
							log4j.print(RespInstrInfo.getMessage());
							lReturn  = dao.updateStatus(lInstructionID,status,lSignUserID,"cancelSign");	
							throw new IException(RespInstrInfo.getMessage().substring(0,7));					
						  }
						  
		 		       }
		 		       
		 		    }
		 		}
		 		//b = true;
	        }
			catch(IException ie)
			{        	
				ie.printStackTrace(); 
				throw ie;
	        }
			catch(Exception e)
			{
	        	e.printStackTrace(); 
	        	throw new IException("Gen_E001");
	        }finally{
	        	//doCon(con, b);
	        	if(con != null){
	        		con.close();
	        		con = null;
	        	}
	        }
	     
	        return lReturn;	 
    }
    
    
    
    /**
     * 是否可以取消签认
     * @param lInstructionID
     * @param lSignUserID
     * @return
     * @throws IException
     */
    public long cancelAuditingBankPay(long lInstructionID, long lSignUserID) throws  RemoteException, Exception
    {
        long lReturn = -1;
        Connection con = null;
        //boolean b = false;
		 try
	        {
			 	con = Database.getConnection();
	            //con.setAutoCommit(false);
		        OBBankPayInfo info = new OBBankPayInfo();
		        info = this.findByID(lInstructionID);
		        OBBankPayDao dao = new OBBankPayDao(con);
		        boolean bIsValid = Config.getBoolean(Config.INTEGRATION_SERVICE_ISVALID, false);
 		        if(bIsValid)
 		        {
			         BPClientAgent.init(Config.getProperty(Config.INTEGRATION_SERVICE_BPSERVICEIP),Config.getInteger(Config.INTEGRATION_SERVICE_BPSERVICEPORT,-1));
			        
			         ReqQueryInstructionInfo reqQueInfo = new ReqQueryInstructionInfo();
			         ReqQueryInstructionInfo.ConditionInfo conditioInfo=reqQueInfo.new ConditionInfo();
			        
			         conditioInfo.setTransNO(String.valueOf(info.getId()));
			        
			         ReqQueryInstructionInfo.ConditionInfo[] conditionInfos=new ReqQueryInstructionInfo.ConditionInfo[1];
					 conditionInfos[0]=conditioInfo;
					 if(info.getNmodule()>0)
			          {	//结算
			 			reqQueInfo.setSystemId(1);//用常量
			          }else{
			          	reqQueInfo.setSystemId(2);//网银
			          }
					 long officeid=info.getNmodule();
			          if(officeid<0) 
			          {
			          	officeid=dao.getOfficeIDbyClientID(info.getNclientid());
			          }
					 reqQueInfo.setOfficeID(officeid);//办事处
					 reqQueInfo.setConditions(conditionInfos);
					 RespQueryInstructionInfo respinfo = BPClientAgent.queryInstruction(reqQueInfo);
					 RespQueryInstructionInfo.ResultInfo[] resultInfo = respinfo.getResults();
					 if(resultInfo != null)
					 {
						for(int i = 0;i < resultInfo.length; i++)
						{
							log4j.print("============================resultInfo[i].getStatus()="+resultInfo[i].getStatus());
							if (resultInfo[i].getStatus() != 0 && resultInfo[i].getStatus() != 10)//不是辙消状态
							{
								 throw new IException("存在未撤销的指令,无法取消复核");
							}
						}
					 }
 		        }
		        //执行
			    long[] lstatus = new long[1];
		 		lstatus[0] = OBConstant.OBBankPayStatus.AUDITING;
		 		boolean bstatus = dao.isStatus(lInstructionID, lstatus);
		 		if (!bstatus)
				{
					throw new IException("OB_EC72");
				}
		 		else
		 		{
		 			lReturn  = dao.updateStatus(lInstructionID,OBConstant.OBBankPayStatus.CHECK,lSignUserID,"cancelauditing");	 
		 		}
			 	//b = true;
	        }
			catch(IException ie)
			{        	
				ie.printStackTrace(); 
				throw ie;
	        }
			catch(Exception e)
			{
	        	e.printStackTrace(); 
	        	throw new IException("Gen_E001");
	        }finally{
	        	//doCon(con, b);
	        	if(con != null){
	        		con.close();
	        		con = null;
	        	}
	        }
	     
	        return lReturn;	 
        
    }
    
    
    /**
     * 审核 判断状态， 需要判断日期  调用银企接口发送指令
     * @param lInstructionID
     * @param lAuditinguserID
     * @return
     * @throws IException
     */
    public long AuditingBankPay(long lInstructionID, long lSignUserID) throws  RemoteException, Exception
    {
        long lReturn = -1;
        Connection con = null;
        //boolean b = false;
		 try
	        {
			 	con = Database.getConnection();
	            //con.setAutoCommit(false);
		        OBBankPayDao dao = new OBBankPayDao(con);
		        OBBankPayInfo info = new OBBankPayInfo ();
		        info = this.findByID(lInstructionID);
		        long[] lstatus = new long[1];
		 		lstatus[0] = OBConstant.OBBankPayStatus.CHECK;
		 		boolean bstatus = dao.isStatus(lInstructionID, lstatus);
		 		if (!bstatus)
				{
					throw new IException("OB_EC71");//状态不是复核  不能审核
				}
		 		else if(!Date.valueOf(info.getDtexecute().toString().substring(0,10)).equals( Date.valueOf(DataFormat.getStringDateTime().toString().substring(0,10)) ))
		 		{
		 		    throw new IException("OB_EC66");
		 		}
		 		else
		 		{
		 			lReturn  = dao.updateStatus(lInstructionID,OBConstant.OBBankPayStatus.AUDITING,lSignUserID,"auditing");	 
		 		}
		 		if(lReturn>0)
		 		{
		 		    boolean btmp = dao.isCanAcept(lReturn);
		 		    if(btmp)
		 		    {
		 		       RespInstructionInfo RespInstrInfo = null;
		 		       boolean bIsValid = Config.getBoolean(Config.INTEGRATION_SERVICE_ISVALID, false);
		 		       if(bIsValid)
		 		       {
		 		          
		 		          BPClientAgent.init(Config.getProperty(Config.INTEGRATION_SERVICE_BPSERVICEIP),Config.getInteger(Config.INTEGRATION_SERVICE_BPSERVICEPORT,-1));
		 		          ReqInstructionInfo reqInstrInfo = new ReqInstructionInfo();
		 		         if(info.getNmodule()>0)
		 		          {	//结算
		 		          	reqInstrInfo.setSystemId(1);//用常量
		 		          }else{
		 		          	reqInstrInfo.setSystemId(2);//网银
		 		          }
		 		          long officeid=info.getNmodule();
		 		          if(officeid<0) 
		 		          {
		 		          	officeid=dao.getOfficeIDbyClientID(info.getNclientid());
		 		          }
		 		          reqInstrInfo.setPayAcctCurrencyCode(NameRef.getCurrencyCodeByID(info.getNcurrencyid()));
		 		          reqInstrInfo.setPayAccountNO(NameRef.getBankAcctNameByAcctID(info.getNpayeracctid()));
		 		          reqInstrInfo.setRecAccountNO(info.getSpayeeacctno());
		 		          reqInstrInfo.setRecAccountName(info.getSpayeeacctname());
		 		          reqInstrInfo.setRecBranchName(info.getSpayeebankname());
		 		          reqInstrInfo.setRecBranchProvince(info.getSpayeeprov());
		 		          reqInstrInfo.setRecBranchCity(info.getSpayeecity());
		 		          //juncai increase 机构号，银行联行号
		 		          reqInstrInfo.setRecBranchCode(info.getDepartmentnumber());
		 		          reqInstrInfo.setRecBranchUniteCode(info.getBankconnectnumber());
		 		          reqInstrInfo.setAmount(info.getMamount());
		 		          reqInstrInfo.setOfficeID(officeid);//办事处
		 		          //reqInstrInfo.setChargesBorneType();
		 		          reqInstrInfo.setRemitPriority(1);
		 		          reqInstrInfo.setAbstractInfo(info.getSnote());
		 		          reqInstrInfo.setSubmitUserName(String.valueOf(info.getNconfirmuserid()));
		 		          reqInstrInfo.setTransNO(String.valueOf(info.getId()));
		 		          reqInstrInfo.setTransType(1);
		 		          reqInstrInfo.setTransactionTime(info.getDtexecute());
		 		          log4j.print("开始向银企发送付款指令");
					      log4j.print("reqInstrInfo:"+reqInstrInfo);
		 		          RespInstrInfo = BPClientAgent.postInstruction(reqInstrInfo);
		 		          log4j.print("发送银企指令完毕"+RespInstrInfo.getMessage());
		 		          if(RespInstrInfo!=null && RespInstrInfo.getStatus() != ResultStatus.SUCCESS)
						  {
							log4j.print(RespInstrInfo.getMessage());
							lReturn  = dao.updateStatus(lInstructionID,OBConstant.OBBankPayStatus.CHECK,lSignUserID,"cancelSign");	
							throw new IException(RespInstrInfo.getMessage().substring(0,7));					
						  }
						  
		 		       }
		 		       
		 		    }
		 		}
		 		//b = true;
	        }
			catch(IException ie)
			{        	
				ie.printStackTrace(); 
				throw ie;
	        }
			catch(Exception e)
			{
	        	e.printStackTrace(); 
	        	throw new IException("Gen_E001");
	        }finally{
	        	//doCon(con, b);
	        	if(con != null){
	        		con.close();
	        		con = null;
	        	}
	        }
	     
	        return lReturn;	 
    }
    
    /**
     * 是否可以取消签认
     * @param lInstructionID
     * @param lSignUserID
     * @return
     * @throws IException
     */
    public long cancelSignBankPay(long lInstructionID, long lSignUserID) throws  RemoteException, Exception
    {
        long lReturn = -1;
        Connection con = null;
        //boolean b = false;
		 try
	        {
			 	con = Database.getConnection();
	            //con.setAutoCommit(false);
		        OBBankPayInfo info = new OBBankPayInfo();
		        info = this.findByID(lInstructionID);
		        OBBankPayDao dao = new OBBankPayDao(con);
		        boolean bIsValid = Config.getBoolean(Config.INTEGRATION_SERVICE_ISVALID, false);
 		        if(bIsValid)
 		        {
			        BPClientAgent.init(Config.getProperty(Config.INTEGRATION_SERVICE_BPSERVICEIP),Config.getInteger(Config.INTEGRATION_SERVICE_BPSERVICEPORT,-1));
			        
			        ReqQueryInstructionInfo reqQueInfo = new ReqQueryInstructionInfo();
			        ReqQueryInstructionInfo.ConditionInfo conditioInfo=reqQueInfo.new ConditionInfo();
			        
			        conditioInfo.setTransNO(String.valueOf(info.getId()));
			        
			        ReqQueryInstructionInfo.ConditionInfo[] conditionInfos=new ReqQueryInstructionInfo.ConditionInfo[1];
					 conditionInfos[0]=conditioInfo;
					 if(info.getNmodule()>0)
			         {	//结算
			 			reqQueInfo.setSystemId(1);//用常量
			         }else{
			          	reqQueInfo.setSystemId(2);//网银
			         }
					 long officeid=info.getNmodule();
			         if(officeid<0) 
			         {
			          	officeid=dao.getOfficeIDbyClientID(info.getNclientid());
			         }
					 reqQueInfo.setOfficeID(officeid);//办事处
					 reqQueInfo.setConditions(conditionInfos);
					 RespQueryInstructionInfo respinfo = BPClientAgent.queryInstruction(reqQueInfo);
					 RespQueryInstructionInfo.ResultInfo[] resultInfo = respinfo.getResults();
					 if(resultInfo != null)
					 {
						for(int i = 0;i < resultInfo.length; i++)
						{
							log4j.print("============================resultInfo[i].getStatus()="+resultInfo[i].getStatus());
							if (resultInfo[i].getStatus() != 0 && resultInfo[i].getStatus() != 10)//不是辙消状态
							{
								 throw new IException("存在未撤销的指令,无法取消签认");
							}
						}
					 }
 		        }
		        //执行
			    long[] lstatus = new long[1];
		 		lstatus[0] = OBConstant.OBBankPayStatus.SIGN;
		 		boolean bstatus = dao.isStatus(lInstructionID, lstatus);
		 		if (!bstatus)
				{
					throw new IException("OB_EC70");
				}
		 		else
		 		{
		 			long _status = -1; 
 		        	if(info.getNauditinguserid() > 0)
 		        	{		 		       	
 		        		_status = OBConstant.OBBankPayStatus.AUDITING;
 		        	}
 		        	else
 		        	{
 		        		_status = OBConstant.OBBankPayStatus.CHECK;
 		        	}
		 			lReturn  = dao.updateStatus(lInstructionID,_status,lSignUserID,"cancelSign");	 
		 		}
		 		//b = true;
	        }
			catch(IException ie)
			{        	
				ie.printStackTrace(); 
				throw ie;
	        }
			catch(Exception e)
			{
	        	e.printStackTrace(); 
	        	throw new IException("Gen_E001");
	        }finally{
	        	//doCon(con, b);
	        	if(con != null){
	        		con.close();
	        		con = null;
	        	}
	        }
	     
	        return lReturn;	 
        
    }
    
    public boolean addBatchCapitalTrans(FinanceInfo[] financeInfoArray,SessionOB sessionMng,String remoteAddr,String remoteHost)throws RemoteException,Exception
    {
    	
    	boolean isSuccess = false;
    	FinanceInfo financeInfo = null;
    	TransInfo transinfo = new TransInfo(); 
    	long lInstructionID = -1;
    	try
    	{
        	for(int i=0;i<financeInfoArray.length;i++)
        	{
        		financeInfo = new FinanceInfo();
        		financeInfo = financeInfoArray[i];
        		lInstructionID = this.addCapitalTrans(financeInfo);
        		if(lInstructionID>0)
        		{
        			isSuccess = true;
        			transinfo.setStatus(Constant.SUCCESSFUL);
        			transinfo.setActionType(Constant.TransLogActionType.inport);
        			
        		}
        		else
        		{
        			isSuccess = false;
        		}
        		
        	}
    	}catch(Exception e)
    	{
    		transinfo.setStatus(Constant.FAIL);
    		transinfo.setActionType(Constant.TransLogActionType.inport);
    		e.printStackTrace();
    		throw new EJBException(e);
    	}
    	finally
    	{
			if(transinfo.getStatus()!=-1)
			{
				TranslogBiz translofbiz= new TranslogBiz();
				transinfo.setHostip(remoteAddr);
				transinfo.setHostname(remoteHost);
				transinfo.setTransType(financeInfo.getTransType());
				translofbiz.saveTransLogInfo(sessionMng,financeInfo,transinfo); 
					
			}
    	}
    	return isSuccess;
    }
    
 }