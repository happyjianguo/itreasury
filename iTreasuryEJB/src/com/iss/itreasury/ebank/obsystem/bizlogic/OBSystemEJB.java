package com.iss.itreasury.ebank.obsystem.bizlogic;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import java.rmi.RemoteException;
import java.util.*;
import com.iss.itreasury.ebank.obsystem.dataentity.*;
import com.iss.itreasury.ebank.obsystem.dao.*;
import com.iss.itreasury.util.*;
import com.iss.itreasury.util.Log4j;
import com.iss.itreasury.ebank.util.*;
import com.iss.itreasury.loan.loancommonsetting.dataentity.*;
import com.iss.itreasury.loan.loancommonsetting.dao.*;

/**
 * Created 2002-12-7 16:48:11
 * Code generated by the Forte for Java EJB Module
 * @author dong
 */

public class OBSystemEJB implements SessionBean
{
	private static Log4j log4j = null;
	private SessionContext context;

	/**
	 * No argument constructor required by container.
	 */
	public OBSystemEJB()
	{
		log4j = new Log4j(Constant.ModuleType.EBANK, this);
	}

	/**
	 * Create method specified in EJB 1.1 section 6.10.3
	 */
	public void ejbCreate()
	{
	}

	/* Methods required by SessionBean Interface. EJB 1.1 section 6.5.1. */

	/**
	 * @see javax.ejb.SessionBean#setContext(javax.ejb.SessionContext)
	 */
	public void setSessionContext(SessionContext context)
	{
		this.context = context;
	}

	/**
	 * @see javax.ejb.SessionBean#ejbActivate()
	 */
	public void ejbActivate()
	{
	}

	/**
	 * @see javax.ejb.SessionBean#ejbPassivate()
	 */
	public void ejbPassivate()
	{
	}

	/**
	 * @see javax.ejb.SessionBean#ejbRemove()
	 */
	public void ejbRemove()
	{
	}

	/**
	 * 保存签认金额设置
	 * Create Date: 2003-8-13
	 * @param SignAmountInfo
	 * @return long
	 * @exception Exception
	 */
	public long addSignAmount(SignAmountInfo info) throws RemoteException,IException
	{
		long lReturn = -1;

		try
		{
			OBSystemDao obSystemDao = new OBSystemDao();
			lReturn = obSystemDao.addSignAmount(info);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lReturn;

	}
	
	/**
	 * 保存签认金额设置（新奥--活期）
	 * Create Date: 2011-4-15
	 * @param SignAmountInfo
	 * @return long
	 * @exception Exception
	 */
	public long addSignAmountForCurr(SignAmountInfo info) throws RemoteException,IException
	{
		long lReturn = -1;
		
		try
		{
			OBSystemDao obSystemDao = new OBSystemDao();
			lReturn = obSystemDao.addSignAmountForCurr(info);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lReturn;
		
	}
	
	/**
	 * 保存签认金额设置（新奥--定期）
	 * Create Date: 2011-4-15
	 * @param SignAmountInfo
	 * @return long
	 * @exception Exception
	 */
	public long addSignAmountForFix(SignAmountInfo info) throws RemoteException,IException
	{
		long lReturn = -1;
		
		try
		{
			OBSystemDao obSystemDao = new OBSystemDao();
			lReturn = obSystemDao.addSignAmountForFix(info);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}
		return lReturn;
		
	}

	/**
	 * 保存交易类型设置
	 * Create Date: 2003-8-27
	 * @param AccountPrvgInfo
	 * @return long
	 * @exception Exception
	 */
	public long addAccountPrvg(Collection c) throws RemoteException,IException
	{
		long lReturn = -1;

		try
		{
			OBSystemDao obSystemDao = new OBSystemDao();
			lReturn = obSystemDao.addAccountPrvg(c);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		return lReturn;

	}

	/**
	 *  增加收款人资料信息（包括中油客户以及非中油客户）
	 * Create Date: 2003-8-13
	 * @param ClientCapInfo  
	 * @return long 大于0表示成功，小于,等于0表示保存失败
	 * @exception Exception
	 */
	public long addPayee(ClientCapInfo info) throws RemoteException,IException
	{
		long lReturn = -1;
		ClientCapInfo info1 = new ClientCapInfo();

		try
		{
			OBSystemDao obSystemDao = new OBSystemDao();
			
			if(info.getIsCPFAcct() == OBConstant.AccountOfCpf.CODE_ACCOUNTOFCPF_YES)
			{//财务公司内部客户
				info1 = obSystemDao.findAccount(info.getClientID(),info.getCurrencyID(),info.getPayeeAccoutNO(),info.getLofficeid());

				
				if(info1 == null)
				{
					throw new IException("OB_E001");
				}
				
				info.setPayeeName(info1.getPayeeName());
				info.setPayeeAccoutNO(info1.getPayeeAccoutNO());
				info.setPayeeBankNO(info1.getPayeeBankNO());
				info.setPayeeBankName(info1.getPayeeBankName());


				lReturn = obSystemDao.findPayee(info);
				if (lReturn > 0)
				{
					throw new IException("OB_EC25");
				}
				
				lReturn = obSystemDao.addPayee(info);
			}
			else
			{//非财务公司内部客户
				lReturn = obSystemDao.findPayee(info);
				if (lReturn > 0)
				{
					throw new IException("OB_EC25");
				}
				
				lReturn = obSystemDao.addPayee(info);
			}
		}
		catch(IException ie)
		{
			throw ie;
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001"); 
		}

		return lReturn;
	}
	public ClientCapInfo findAccount(long lClientID, long lCurrencyID, String strAccountno,long officeid) throws RemoteException,IException
	{
		long lReturn = -1;
		ClientCapInfo info1 = new ClientCapInfo();

		try
		{
			OBSystemDao obSystemDao = new OBSystemDao();
			info1 = obSystemDao.findAccount(lClientID,lCurrencyID,strAccountno,officeid);

			
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		return info1;
		
	}
	/**
	 *  修改收款人资料信息（包括中油客户以及非中油客户）
	 * Create Date: 2003-8-13
	 * @param ClientCapInfo  
	 * @return long 大于0表示成功，小于,等于0表示保存失败
	 * @exception Exception
	 */
	public long updatePayee(ClientCapInfo info) throws RemoteException,IException
	{
		long lReturn = -1;
		ClientCapInfo info1 = new ClientCapInfo();
		try
		{
			OBSystemDao obSystemDao = new OBSystemDao();
			if(info.getIsCPFAcct() == OBConstant.AccountOfCpf.CODE_ACCOUNTOFCPF_YES)
			{//中油客户
				info1 = obSystemDao.findAccount(info.getClientID(),info.getCurrencyID(),info.getPayeeAccoutNO(),info.getLofficeid());
				if(info1 == null)
				{
					throw new IException("OB_E001");
				}
				info.setPayeeName(info1.getPayeeName());
				lReturn = obSystemDao.updatePayee(info);
			}
			else
			{//非中油客户
				lReturn = obSystemDao.updatePayee(info);
			}
		}
		catch(IException ex)
		{
			ex.printStackTrace();
			throw ex;
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		return lReturn;
	}

	/**
	 * 删除一条收款方资料
	 * Create Date: 2003-8-13
	 * @param lID 收款方ID
	 * @return long 大于0表示成功，小于,等于0表示保存失败
	 * @exception Exception
	 */
	public long deletePayee(long lID) throws RemoteException,IException
	{
		long lReturn = -1;

		try
		{
			OBSystemDao obSystemDao = new OBSystemDao();
			lReturn = obSystemDao.deletePayee(lID);
		}
		catch (Exception e)
		{
			log4j.error(e.toString());
			throw new IException("Gen_E001");
		}

		return lReturn;
	}

	/**
	 * 新增（修改）客户详细资料
	 * saveClientInfo  新增（修改）客户的详细资料
	 * 操作Client数据表
	 * 更新相应字段
	 * lID=0,新增  lID>0,修改
	 * 约定：long型参数=-1，string型参数=“”,为未使用项，不参与新增或修改
	 *
	 * @param clientinfo 客户信息
	 * 相应字段：（包含在clientinfo类中）
	 * @param lID 标识
	 * @param strClientName   公司名称
	 * @param strClientNo,    客户编号
	 * @param strLicence,     营业执照
	 * @param lOfficeID,      办事处
	 * @param strAccount,     财务公司账号
	 * @param strBank,        开户银行
	 * @param strAccount      开户银行账号
	 * @param strBank1,       开户银行1
	 * @param strAccount1,    账号1
	 * @param strBank2,       开户银行2
	 * @param strAccount2,    账号2
	 * @param strBank3,       开户银行3
	 * @param strAccount3,    账号3
	 * @param strProvince,    省
	 * @param strCity,        市
	 * @param strAddress1,    地址1
	 * @param strAddress2     地址2
	 * @param strZipCode,     邮编
	 * @param strDeputy,      法人代表
	 * @param strTel,         电话
	 * @param strFax,         传真
	 * @param strMailAddr,    电邮
	 * @param strContact,     联系人
	 * @param strEconomic,    经济性质
	 * @param lGovernmentID,  主管部门表示
	 * @param isShareHolder,  是否股份
	 * @param lClientTypeID,  客户分类
	 * @param lCreditLevel,   信用等级
	 * @param lVentureLevel   风险评级
	 * @param strCapital      注册资本
	 *
	 * @return long 成功返回ID信息，失败返回0
	 * @throws RemoteException
	 */
	public long saveClientInfo(ClientInfo clientinfo) 
	throws RemoteException,IException
	{
		LoanCommonSettingDao loanCommonSettingDao = new LoanCommonSettingDao();
		long ret=-1;
		try
		{
			ret=loanCommonSettingDao.saveClientInfo(clientinfo);
		} catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new IException("");
		}
		return ret;
	}
	
	/**
	 * findClient 查找现有客户
	 * 根据客户编号查找现有客户，返回客户详细资料
	 * 操作Client数据表
	 * 查询记录
	 * haoning
	 * @param lClientID String  客户编号的ID
	 * @return ClientInfo  详细的客户信息
	 * @throws RemoteException`
	 */
	public ClientInfo findClientByID(long lClientID) 
	throws RemoteException,IException
	{ 
		LoanCommonSettingDao loanCommonSettingDao = new LoanCommonSettingDao();
		ClientInfo cInfo = null;
		try
		{
			cInfo=loanCommonSettingDao.findClientByID(lClientID);
		} catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return cInfo;
		
	}
	public static void main(String args[])
	{
		try
		{

		}
		catch (Exception e)
		{
		}
	}
}