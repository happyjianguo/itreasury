/* Generated by Together */

package com.iss.itreasury.clientmanage.partner.bizlogic;

import java.sql.Connection;

import java.util.Collection;
import java.util.Iterator;
import com.iss.itreasury.clientmanage.partner.dao.PartnerDAO;
import com.iss.itreasury.clientmanage.partner.dataentity.PartnerInfo;
import com.iss.itreasury.command.Command;
import com.iss.itreasury.dao.ITreasuryDAOException;

import com.iss.itreasury.util.Database;

public class PartnerCmd extends Command {

	/**
	 * 检查控股比率是否正确，如果新增的比率加上数据库中已有记录比率的总和大于100，说明新增的这个比率错误 ；所有股东的持股比率之和应该不超过100%
	 * 
	 * @param lClientId
	 * @param addStockRate
	 * @return
	 */
	public boolean isRightStockRateByClient(long lClientId, double addStockRate)
			throws Exception {
		double lSumValue = 0.00;
		try {
			lSumValue = new PartnerDAO().sumStockRateByClient(lClientId);

		} catch (ITreasuryDAOException e) {
			throw e;
		}
		return lSumValue + addStockRate > 100 ? false : true;
	}

	/**
	 * 增加一条企业资本构成情况信息
	 * 
	 * @param 企业资本构成情况dataEntity
	 * @return 新增记录ID
	 * @throws Exception
	 */
	public long add(PartnerInfo dataEntity) throws Exception {
		long myid = -1;
		Connection con = null;
		con = Database.getConnection();
		PartnerDAO partnerdao = new PartnerDAO(con);
		partnerdao.setUseMaxID();
		myid = partnerdao.add(dataEntity);
		if (con != null) {
			con.close();
			con = null;
		}
		System.out.println("myid====" + myid);
		return myid;
	}

	/**
	 * 更新一条企业资本构成情况信息
	 * 
	 * @param 企业资本构成情况dataEntity
	 * @throws Exception
	 * 
	 */
	public void update(PartnerInfo dateEntity) throws Exception {
		Connection con = null;
		con = Database.getConnection();
		PartnerDAO partnerdao = new PartnerDAO(con);

		partnerdao.update(dateEntity);
		if (con != null) {
			con.close();
			con = null;
		}

	}

	/**
	 * 删除一条企业资本构成情况信息
	 * 
	 * @param id
	 *            企业资本构成情况Id
	 * @throws Exception
	 */
	public void delete(long id) throws Exception {
		Connection con = null;
		con = Database.getConnection();
		PartnerDAO partnerdao = new PartnerDAO(con);
		partnerdao.delete(id);
		if (con != null) {
			con.close();
			con = null;
		}

	}

	/**
	 * 获得编号为id的一条资本构成信息
	 * 
	 * @throws Exception
	 */
	public PartnerInfo findById(long id) throws Exception {
		PartnerInfo onepartnerinfo = new PartnerInfo();
		Connection con = null;
		con = Database.getConnection();
		PartnerDAO partnerdao = new PartnerDAO(con);
		onepartnerinfo = (PartnerInfo) partnerdao.findByID(id, onepartnerinfo
				.getClass());
		if (con != null) {
			con.close();
			con = null;
		}
		return onepartnerinfo;
	}

	/**
	 * 获得编号为clientID的客户的所有资本构成信息
	 * 
	 * @throws Exception
	 */
	public Collection findByClientID(long clientID) throws Exception {
		Collection data = null;
		Connection con = null;
		con = Database.getConnection();
		PartnerDAO partnerdao = new PartnerDAO(con);
		data = partnerdao.findByClientID(clientID);
		if (con != null) {
			con.close();
			con = null;
		}
		return data;
	}

	public Collection findByCondition(PartnerInfo dataEntity) throws Exception {
		Collection data = null;
		Connection con = null;
		con = Database.getConnection();
		PartnerDAO partnerdao = new PartnerDAO(con);
		data = partnerdao.findByCondition(dataEntity);
		if (con != null) {
			con.close();
			con = null;
		}
		return data;
	}

	/**
	 * 
	 * @param args
	 * @throws Exception
	 */
	public PartnerInfo findPartner(long ClientID) throws Exception {
		Connection con = null;
		PartnerInfo Info = new PartnerInfo();
		PartnerDAO partnerdao = null;

		try {
			con = Database.getConnection();
			partnerdao = new PartnerDAO(con);
			Info = partnerdao.findPartner(ClientID);
		} catch (Exception e) {
			if (con != null) {
				con.close();
				con = null;
			}
		} finally {
			try {
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				throw new Exception(ex.getMessage());
			}
		}
		return (Info);
	}

	public static void main(String[] args) throws Exception {
		PartnerCmd onepartnercmd = new PartnerCmd();
		PartnerInfo onepartnerinfo = new PartnerInfo();

		Collection aa = null;
		onepartnerinfo.setId(7);
		onepartnerinfo.setStockWay("bbbbbbbbbbbbbbbbb");
		onepartnercmd.update(onepartnerinfo);

		aa = onepartnercmd.findByClientID(2);

		Iterator it = aa.iterator();

		System.out.println(it.hasNext());
		// System.out.println("contain===="+((PartnerInfo)it.next()).getId());

	}

}
