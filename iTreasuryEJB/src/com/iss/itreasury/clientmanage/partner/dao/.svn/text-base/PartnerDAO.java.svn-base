/* Generated by Together */

package com.iss.itreasury.clientmanage.partner.dao;

import com.iss.itreasury.clientmanage.dao.CimsBaseDao;
import com.iss.itreasury.clientmanage.partner.dataentity.PartnerInfo;
import com.iss.itreasury.dao.ITreasuryDAOException;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collection;
import com.iss.itreasury.util.ITreasuryException;

/**
 * 企业资本构成信息DAO,对应于表Client_PartnerOfClient
 */
public class PartnerDAO extends CimsBaseDao {
	public PartnerDAO() {
		super("Client_PartnerOfClient");
		this.setUseMaxID();
	}

	public PartnerDAO(Connection con) {
		super("Client_PartnerOfClient", con);
		this.setUseMaxID();
	}

	/**
	 * 获得属于某一客户的所有企业资本构成信息
	 * 
	 * @throws Exception
	 */
	public Collection findByClientID(long clientID) throws ITreasuryException {

		Collection data = null;

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select *");
			sb.append(" from Client_PartnerOfClient ");
			sb
					.append("  where ClientID = ? and (statusid is null or statusid<>0)");
			transPS = transConn.prepareStatement(sb.toString());
			transPS.setLong(1, clientID);

			transRS = transPS.executeQuery();

			data = getDataEntitiesFromResultSet(new PartnerInfo().getClass());
		} catch (Exception e) {
			log.error(e.toString());
			throw new ITreasuryException();
		}
		finalizeDAO();
		return data;
	}

	/**
	 * 根据Code查询 经营管理信息
	 * 
	 * @author chuanliu
	 * 
	 * TODO To change the template for this generated type comment go to Window -
	 * Preferences - Java - Code Style - Code Templates
	 */
	public PartnerInfo findPartner(long ClientID) throws Exception {
		StringBuffer strSQL = new StringBuffer();
		PartnerInfo Info = new PartnerInfo();

		strSQL
				.append("select COUNT(PartnerID) count,SUM(ContributiveAmount) sum \n");
		strSQL.append(" from Client_PartnerOfClient \n");
		strSQL.append("WHERE ClientID = " + ClientID + " \n");
		strSQL.append("AND ContributiveCurrency = '人民币' \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				Info.setCount(transRS.getLong("count"));
				Info.setSum(transRS.getLong("sum"));
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 统计控股比率
	 * @param lClientId
	 * @return
	 * @throws ITreasuryDAOException
	 */
	public double sumStockRateByClient(long lClientId)
			throws ITreasuryDAOException {
		double dReturn = 0.00;

		try {
			StringBuffer strSQL = new StringBuffer();
			strSQL
					.append("select sum(StockRate) from Client_PartnerOfClient where clientid = ? and statusId = " + com.iss.itreasury.util.Constant.TRUE);
			initDAO();
			prepareStatement(strSQL.toString());
			transPS.setLong(1, lClientId);
			executeQuery();
			if (transRS.next()) {
				dReturn=transRS.getDouble(1);
			}
		} catch (Exception e) {
			throw new ITreasuryDAOException(e.getMessage(), e);
		} finally {
			finalizeDAO();
		}
		return dReturn;

	}
}
