/* Generated by Together */

package com.iss.itreasury.clientmanage.management.bizlogic;


import java.sql.Connection;
import java.util.Collection;
import java.util.Iterator;
import com.iss.itreasury.clientmanage.management.dao.ManagementDAO;
import com.iss.itreasury.clientmanage.management.dataentity.ManagementInfo;
import com.iss.itreasury.command.Command;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.IException;
public class ManagementCmd extends Command{
    /**
     *增加一条企业管理层信息
     * @param  dataEntity 企业管理层信息dataEntity
     * @throws Exception
     * */
    public long add(ManagementInfo dataEntity) throws Exception {
    	
    	long myid = -1;
    	Connection con = null;
    	con = Database.getConnection();
    	ManagementDAO  managementdao = new ManagementDAO(con);
    	managementdao.setUseMaxID();
    	myid = managementdao.add(dataEntity);
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return myid;
    }

    /**
     *更新一条企业管理层信息
     * @param  企业管理层信息dataEntity
     * @throws Exception
     * */
     public long update(ManagementInfo dataEntity) throws Exception{
    	long myid=-1; 
     	Connection con = null;
     	con = Database.getConnection();
     	ManagementDAO  managementdao = new ManagementDAO(con);
     	managementdao.update(dataEntity);
     	myid = 1;
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
        return myid;
     }
     /**
      *删除一条企业管理层信息
      * @param  企业管理层信息Id
     * @throws Exception
      * */
     public long delete(long id) throws Exception{
    	 long myid=-1;
     	Connection con = null;
     	con = Database.getConnection();
     	ManagementDAO  managementdao = new ManagementDAO(con);
     	managementdao.delete(id);
     	myid=1;
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return myid;
     }

     /**
      *获得编号为id的一条企业管理层信息
     * @throws Exception
      * */
     public ManagementInfo findById(long id) throws Exception{
     	
     	ManagementInfo onemanagementinfo = new ManagementInfo();
    	Connection con = null;
    	con = Database.getConnection();
    	ManagementDAO  managementdao = new ManagementDAO(con);
    	onemanagementinfo =(ManagementInfo) managementdao.findByID(id,onemanagementinfo.getClass());
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return onemanagementinfo;
     }

     /**
      *获得编号为clientID的客户的所有的企业管理层信息
      * @param   clientID法人客户ID
      * @return  包含ManagementDataEntity的Collection
     * @throws Exception
      * */
     public Collection findByClientID(long clientID) throws Exception{
     	Collection data = null;
    	Connection con = null;
    	con = Database.getConnection();
    	ManagementDAO  managementdao = new ManagementDAO(con);
    	data=managementdao.findByClientID(clientID);
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return data;
     }

     /**
      *根据查询条件获得管理层信息集合
     * @throws Exception
      * */
     public Collection findByCondition(ManagementInfo dataEntity) throws Exception{
     	Collection data = null;
    	Connection con = null;
    	con = Database.getConnection();
    	ManagementDAO  managementdao = new ManagementDAO(con);
    	data=managementdao.findByCondition(dataEntity);
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return data;
     	
     	
     }
     
     /**
      * 
      * @param args
      * @throws Exception
      */
     public ManagementInfo findManagement(long ClientID) throws Exception
 	{
     	Connection con = null;
     	ManagementInfo Info = new ManagementInfo();
     	ManagementDAO managementdao = null;
     	
     	try
 		{
     		con = Database.getConnection();
     		managementdao = new ManagementDAO(con);
     		Info = managementdao.findManagement(ClientID);
 		}
     	catch(Exception e)
 		{
     		if(con != null)
     		{
     			con.close();
     			con = null;
     		}
 		}
     	finally
 		{
     		try
 			{
     			if(con != null)
     			{
     				con.close();
     				con = null;
     			}
 			}
     		catch(Exception ex)
 			{
     			throw new Exception(ex.getMessage());
 			}
 		}
     	return (Info);
 	}
     
     public static void main(String []args) throws Exception
		{
     		ManagementCmd onecmd = new ManagementCmd();
	    	ManagementInfo oneinfo = new ManagementInfo();
	    	
	    	
	    	Collection aa = null;
	    	oneinfo.setPosition("ghfd");
	    	onecmd.add(oneinfo);	    	
	    	oneinfo.setId(2);
	    	oneinfo.setPosition("rwerwrwwrw");
	    	onecmd.update(oneinfo);
	    	aa=onecmd.findByCondition(oneinfo);
	    	Iterator it = aa.iterator();    	
	    	System.out.println(it.hasNext());
	    	System.out.println("contain===="+((ManagementInfo)it.next()).getId());	
		}
     /**
      * 管理层信息新增
      * @param managementinfo
      * @return
      * @throws Exception
      */
     public long addManagerInfo(ManagementInfo managementinfo) throws Exception{
 		long id = -1;
 		ManagementDAO dao = new ManagementDAO();
 		if(!dao.isManagerNameRepeat(managementinfo))
 		{	
 				id = add(managementinfo);
 		}else
 		{
 			throw new IException("管理人名称已存在");
 		}
 		
 		return id;
 	}
     /**
      * 企业管理层信息更新
      * @param managementinfo
      * @return
      * @throws Exception
      */
     public long updateManagerInfo(ManagementInfo managementinfo) throws Exception{
  		long id = -1;
  		ManagementDAO dao = new ManagementDAO();
  		if(!dao.isManagerNameRepeat(managementinfo))
  		{	
  				id = update(managementinfo);
  		}else
  		{
  			throw new IException("管理人名称已存在");
  		}
  		
  		return id;
  	}

}
