/* Generated by Together */

package com.iss.itreasury.clientmanage.client.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;

import com.iss.itreasury.clientmanage.client.dataentity.CorporationInfo;
import com.iss.itreasury.clientmanage.client.dataentity.QueryClientInfo;
import com.iss.itreasury.clientmanage.client.dataentity.QueryLogInfo;
import com.iss.itreasury.clientmanage.dao.CimsBaseDao;
import com.iss.itreasury.clientmanage.dataentity.ClientInfo;
import com.iss.itreasury.clientmanage.util.CMConstant;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.loan.base.LoanDAOException;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.budget.util.BUDGETConstant;
import com.iss.itreasury.settlement.util.SETTConstant;
import com.iss.itreasury.util.Config;
import com.iss.itreasury.util.ConfigConstant;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.ITreasuryException;

/**
 * 基本信息DAO，对应于表Client_clientInfo
 */
public class ClientDAO extends CimsBaseDao {

	public ClientDAO() {
		super("Client_clientInfo");
	}

	public ClientDAO(Connection con) {
		super("Client_clientInfo", con);
	}

	/**
	 * 判断数据库中是否已经存在编号为ClientNo的客户
	 * 
	 * @author huiyu
	 * @return true(exists) or false(not exists)
	 * @param clientNo
	 *            客户编号
	 * @throws ITreasuryException
	 */
	public boolean isClientNoRepeat(ClientInfo clientInfo)
			throws ITreasuryException {
		boolean exists = false;

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select Code");
			sb.append(" from Client_clientInfo ");
			sb
					.append(" where statusid = 1 and Code = '"
							+ clientInfo.getCode());
			sb.append("' ");
			sb.append(" and id<> " + clientInfo.getId() + " ");
			transPS = transConn.prepareStatement(sb.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				exists = true;
			}

		} catch (Exception e) {
			log.error(e.toString());
			throw new ITreasuryException();
		}
		finalizeDAO();

		return exists;
	}

	public ClientInfo findClientinfobyClientId(long clientid)
			throws ITreasuryException, SQLException {
		ClientInfo clientinfo = new ClientInfo();
		Connection conn = null;

		try {

			conn = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append(" select *");
			sb.append(" from Client_clientInfo ");
			sb.append(" where id=" + clientid);
			transPS = conn.prepareStatement(sb.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				clientinfo.setCode(transRS.getString("CODE"));
				clientinfo.setName(transRS.getString("NAME"));
			}

		} catch (Exception e) {
			log.error(e.toString());
			throw new ITreasuryException();
		} finally {
			if (conn != null) {
				conn.close();
			}
		}
		finalizeDAO();

		return clientinfo;
	}

	/**
	 * 法人客户编号是否重复
	 * 
	 * @return true(重复） or false(不重复）
	 * @throws ITreasuryException
	 */
	public boolean isNameRepeat(ClientInfo clientInfo)
			throws ITreasuryException {
		boolean exists = false;

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select Code");
			sb.append(" from Client_ClientInfo ");
			sb
					.append(" where ClientBaseType = '1'  and statusid = 1 and  Name = '"
							+ clientInfo.getName());
			sb.append("' ");
			sb.append(" and id<> " + clientInfo.getId() + " ");
			transPS = transConn.prepareStatement(sb.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				exists = true;
			}

		} catch (Exception e) {
			log.error(e.toString());
			throw new ITreasuryException();
		}
		finalizeDAO();

		return exists;
	}

	/**
	 * 根据一定的规则（办事处编号-增值编号 (ex: 01-0001)）产生客户编号
	 * 
	 * @throws ITreasuryException
	 * @para dataEntity: 客户entity
	 * @author huiyu
	 */
	public String generateClientNo(ClientInfo dataEntity)
			throws ITreasuryException {
		long officeid = dataEntity.getOfficeID();
		String strCode = "";
		String strOfficeCode = "";
		long lNewClientID = -1;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select min(no) \n");
			sb.append(" from \n");
			sb.append(" (      select id no from serialno \n");
			sb.append("        minus \n");
			sb.append("        select no \n");
			sb.append("        from \n");
			sb
					.append("        (	select to_number(substr(saccountno,7,4)) no from sett_Account  where  nofficeid=? \n");
			sb
					.append("   and   ascii(substr(saccountno,7,1)) > 47 and ascii(substr(saccountno,7,1)) < 58 \n");
			sb
					.append("     and   ascii(substr(saccountno,8,1)) > 47 and ascii(substr(saccountno,8,1)) < 58 \n");
			sb
					.append("     and   ascii(substr(saccountno,9,1)) > 47 and ascii(substr(saccountno,9,1)) < 58 \n");
			sb
					.append("     and   ascii(substr(saccountno,10,1)) > 47 and ascii(substr(saccountno,10,1)) < 58 \n");
			sb.append("        		union all \n");
			sb.append("    	   		select to_number(substr(code,4,4))  no \n");
			sb.append(" 	   		from   Client_ClientInfo \n");
			sb
					.append("        		where  OfficeID=? and ascii(substr(code,4,1)) > 47 and ascii(substr(code,4,1)) < 58 \n");
			sb
					.append("             	and ascii(substr(code,5,1)) > 47 and ascii(substr(code,5,1)) < 58 \n");
			sb
					.append(" 		        and ascii(substr(code,6,1)) > 47 and ascii(substr(code,6,1)) < 58 \n");
			sb
					.append("         	    and ascii(substr(code,7,1)) > 47 and ascii(substr(code,7,1)) < 58 \n");
			sb.append(" 		) \n");
			sb.append(" ) \n");

			transPS = transConn.prepareStatement(sb.toString());
			System.out.println(sb.toString());
			transPS.setLong(1, officeid);
			transPS.setLong(2, officeid);
			transRS = transPS.executeQuery();

			if (transRS.next()) {
				lNewClientID = transRS.getLong(1);

			}

			transRS.close();
			transRS = null;
			transPS.close();
			transPS = null;

			sb.setLength(0);
			sb.append(" select scode from office where id=? ");
			transPS = transConn.prepareStatement(sb.toString());
			transPS.setLong(1, officeid);
			transRS = transPS.executeQuery();

			if (transRS.next()) {
				strOfficeCode = transRS.getString("scode");
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw new ITreasuryException();
		}
		finalizeDAO();
		strCode = strOfficeCode + "-"
				+ DataFormat.formatInt(lNewClientID, 4, true);
		return strCode;
	}

	/**
	 * 当前客户信息是否已经被引用，在删除客户信息之前判断，如果 客户信息已经被引用则不可执行删除。判断条件：该客户下已经开立了账户、贷款或者贴现
	 * 
	 * @return true(客户信息已经被引用) or false(客户信息没有被引用)
	 */
	public boolean isInUse(ClientInfo dataEntity) throws ITreasuryException {
		return false;
	}

	/**
	 * 判断客户是否已经建立有效得内部账户
	 * 
	 * @param dataEntity
	 * @return
	 * @throws Exception
	 */
	public long isExistAccount(ClientInfo dataEntity) throws Exception {

		long id = -1;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select b.id \n");
		strSQL.append("from sett_account b \n");
		strSQL.append("where  ");
		strSQL.append("  b.NCLIENTID=" + dataEntity.getId());
		strSQL.append(" and b.NSTATUSID<>0 and b.NSTATUSID>0");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				id = transRS.getLong("id");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}

		return id;
	}

	/**
	 * 判断客户是否已经建立有效得银行账户
	 * 
	 * @param dataEntity
	 * @return
	 * @throws Exception
	 */
	public long isExistBankAccount(ClientInfo dataEntity) throws Exception {

		long id = -1;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select b.N_ID \n");
		strSQL.append("from BS_BANKACCOUNTINFO b \n");
		strSQL.append("where  ");
		strSQL.append("  b.N_CLIENTID=" + dataEntity.getId());
		strSQL.append(" and b.N_RDSTATUS<>0 and b.N_RDSTATUS>0");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				id = transRS.getLong("N_ID");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}

		return id;
	}

	public long isExistLoan(ClientInfo dataEntity) throws Exception {

		long id = -1;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select b.id \n");
		strSQL.append("from loan_loanform b \n");
		strSQL.append("where  ");
		strSQL.append(" ( b.NBORROWCLIENTID=" + dataEntity.getId()
				+ " or b.NCONSIGNCLIENTID=" + dataEntity.getId() + " )");
		strSQL.append(" and b.NSTATUSID<>5 and b.NSTATUSID>0");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				id = transRS.getLong("id");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}

		return id;
	}

	public long isExistLoanAssure(ClientInfo dataEntity) throws Exception {

		long id = -1;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select b.id \n");
		strSQL.append("from loan_loanform b,loan_loanformassure c \n");
		strSQL.append("where  ");
		strSQL.append(" b.id = c.nloanid and c.NCLIENTID ="
				+ dataEntity.getId());
		strSQL.append(" and b.NSTATUSID<>5 and b.NSTATUSID>0");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				id = transRS.getLong("id");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}

		return id;
	}

	/**
	 * 查询办事中是否已经存在财务公司 liuguang
	 */
	public long findCorpID(CorporationInfo corinfo, ClientInfo finfo)
			throws Exception {

		long id = -1;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select b.id \n");
		strSQL.append("from client_corporationinfo a,client_clientinfo b \n");
		strSQL.append("where a.clientid=b.id ");
		strSQL.append(" and b.officeid=" + finfo.getOfficeID());
		strSQL.append(" and a.ispartner=1 \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				id = transRS.getLong("id");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}

		return id;
	}

	/**
	 * 根据客户经理的ID号查询出该客户经理的客户信息
	 * 
	 * @return v
	 * @author chuanliu
	 * 
	 */
	public Vector find(long CustomerManagerUserID) throws Exception {
		Vector v = new Vector();
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("SELECT Code,Name,EngName \n");
		strSQL.append(" FROM Client_clientInfo \n");
		strSQL.append("WHERE CustomerManagerUserID = " + CustomerManagerUserID
				+ " \n");
		strSQL.append(" AND statusid=1 \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				ClientInfo Info = new ClientInfo();
				Info.setCode(transRS.getString("Code"));
				Info.setName(transRS.getString("Name"));
				Info.setEngName(transRS.getString("EngName"));

				v.add(Info);
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}

		return (v);
	}

	/**
	 * 
	 * @throws Exception
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public long updateManager(ClientInfo dataEntity) throws Exception {
		long lReturn = -1;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("update Client_clientInfo set \n");
		strSQL.append(" CustomerManagerUserID = "
				+ dataEntity.getCustomerManagerUserID() + " \n");
		strSQL.append("WHERE Code = '" + dataEntity.getCode() + "' \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			lReturn = transPS.executeUpdate();
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return lReturn;
	}

	/**
	 * 根据Code查询 查存贷款
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findaccount(long ClientID, long[] type) throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		long typeid = -1;
		String types = "";
		for (int i = 0; i < type.length - 1; i++) {
			types = types + type[i] + ",";
		}
		types = types + type[type.length - 1];

		strSQL
				.append("select COUNT( distinct sett_account.SACCOUNTNO) count,SUM(sett_subaccount.MBALANCE) sum \n");
		strSQL.append("from sett_account,sett_subaccount \n");
		strSQL
				.append("WHERE sett_account.NACCOUNTTYPEID in (" + types
						+ ") \n");
		strSQL.append("AND sett_account.ID = sett_subaccount.NACCOUNTID(+) \n");
		strSQL.append("AND sett_account.NCLIENTID = " + ClientID + "  \n");
		// add by zcwang 2007-10-22 判断账户状态必须是"复核"状态的账户
		strSQL.append("AND sett_account.ncheckstatusid = "
				+ SETTConstant.AccountCheckStatus.CHECK + "  \n");
		//
		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				Info.setCount(transRS.getLong("count"));
				Info.setSum(transRS.getLong("sum"));
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 根据Code查询 查合同
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findloan(long ClientID, long[] type) throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		long typeid = -1;
		String types = "";
		for (int i = 0; i < type.length - 1; i++) {
			types = types + type[i] + ",";
		}
		types = types + type[type.length - 1];

		strSQL
				.append("select COUNT(SCONTRACTCODE) count,SUM(MEXAMINEAMOUNT) sum \n");
		strSQL.append("from loan_contractform \n");
		strSQL.append("WHERE NSTATUSID in( "
				+ LOANConstant.ContractStatus.CHECK + ","
				+ LOANConstant.ContractStatus.NOTACTIVE + ","
				+ LOANConstant.ContractStatus.ACTIVE + ","
				+ LOANConstant.ContractStatus.EXTEND + ","
				+ LOANConstant.ContractStatus.OVERDUE + ","
				+ LOANConstant.ContractStatus.DELAYDEBT + ","
				+ LOANConstant.ContractStatus.BADDEBT + ","
				+ LOANConstant.ContractStatus.FINISH + ") \n");
		strSQL.append("AND NTYPEID in (" + types + ") \n");
		strSQL.append("AND NBORROWCLIENTID = " + ClientID + "  \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				Info.setCount(transRS.getLong("count"));
				Info.setSum(transRS.getLong("sum"));
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 
	 * @author huiyu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public String findname(long ID) throws ITreasuryException {
		String clientname = "";

		try {
			StringBuffer strSQL = new StringBuffer();
			strSQL.append("select name  \n");
			strSQL.append("from Client_clientinfo  \n");
			strSQL.append("where id = " + ID + "  \n");

			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				clientname = transRS.getString("name");

			}
		} catch (Exception e) {
			log.error(e.toString());
			throw new ITreasuryException();
		}

		finalizeDAO();
		return clientname;
	}

	/**
	 * 根据Code查询 查保函
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findsaveletter(String Code) throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select COUNT(EventRecordNo) count \n");
		strSQL.append("from Client_EnterpriseMemo \n");
		strSQL
				.append("WHERE ClientID = (select Client_CorporationInfo.ClientID  \n");
		strSQL.append("from Client_clientInfo,Client_CorporationInfo \n");
		strSQL
				.append("WHERE Client_clientInfo.ID = Client_CorporationInfo.ID \n");
		strSQL.append("AND Client_clientInfo.Code = '" + Code + "') \n");
		strSQL.append("OR ClientID = (select Client_NatureInfo.ClientID  \n");
		strSQL.append("from Client_clientInfo,Client_NatureInfo \n");
		strSQL.append("WHERE Client_clientInfo.ID = Client_NatureInfo.ID \n");
		strSQL.append("AND Client_clientInfo.Code = '" + Code + "') \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {

			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 根据Code查询 查财务报表
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findreport(long ClientID) throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select COUNT(ReportID) count \n");
		strSQL.append("from Client_ReportData \n");
		strSQL.append("WHERE ClientID = " + ClientID + "  \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				Info.setCount(transRS.getLong("count"));
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 根据Code查询 查财务指标
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findtarget(long ClientID) throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select COUNT(TargetID) count \n");
		strSQL.append("from Client_TargetData \n");
		strSQL.append("WHERE ClientID = " + ClientID + "  \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				Info.setCount(transRS.getLong("count"));
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 根据Code查询 查信用金额
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findCredit(String Code) throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select TargetID, ConstantConstant, Symbol  \n");
		strSQL.append("from Client_CreditFormual,Client_CreditLevel \n");
		strSQL
				.append("WHERE Client_CreditFormual.ID = Client_CreditLevel.ID \n");
		strSQL
				.append("AND ClientID = (select Client_CorporationInfo.ClientID  \n");
		strSQL.append("from Client_clientInfo,Client_CorporationInfo \n");
		strSQL
				.append("WHERE Client_clientInfo.ID = Client_CorporationInfo.ID \n");
		strSQL.append("AND Client_clientInfo.Code = '" + Code + "') \n");
		strSQL.append("OR ClientID = (select Client_NatureInfo.ClientID  \n");
		strSQL.append("from Client_clientInfo,Client_NatureInfo \n");
		strSQL.append("WHERE Client_clientInfo.ID = Client_NatureInfo.ID \n");
		strSQL.append("AND Client_clientInfo.Code = '" + Code + "') \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {

			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 根据Code查询 查预算
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findbudget(long ClientID, long budgetflag)
			throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select COUNT(VERSIONNO) count \n");
		strSQL.append("from budget_plan \n");
		strSQL.append("WHERE ClientID = " + ClientID + "  \n");
		strSQL.append("AND STATUSID = "
				+ BUDGETConstant.ConstituteStatus.LASTCHECK + " \n");
		strSQL.append("AND BUDGETFLAG = " + budgetflag + " \n");
		strSQL
				.append("AND to_char(PLANDATE,'yyyy') = to_char(sysdate,'yyyy') \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				Info.setCount(transRS.getLong("count"));
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 根据Code查询 查预算金额
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findbudgetmoney(long ClientID) throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		strSQL
				.append("select SUM(BUDGETAMOUNT) sum,SUM(EXECUTEAMOUNT) sum2 \n");
		strSQL.append("from budget_itemsum \n");
		strSQL.append("WHERE ClientID = " + ClientID + "  \n");
		strSQL.append("AND STATUSID = 1  \n");
		strSQL
				.append("AND to_char(STARTDATE,'yyyy') = to_char(sysdate,'yyyy') \n");
		strSQL
				.append("AND to_char(ENDDATE,'yyyy') = to_char(sysdate,'yyyy') \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				Info.setSum(transRS.getLong("sum"));
				Info.setFact(transRS.getLong("sum2"));
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 判断用户
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public ClientInfo findClientBaseType(String Code) throws Exception {
		ClientInfo Info = new ClientInfo();
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select ClientBaseType,ID  \n");
		strSQL.append("from Client_clientInfo  \n");
		strSQL.append("WHERE Code ='" + Code + "' \n");
		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				Info.setClientBaseType(transRS.getString("ClientBaseType"));
				Info.setId(transRS.getLong("ID"));
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return (Info);
	}

	/**
	 * 
	 * @throws Exception
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public long findclientid(long ID) throws Exception {
		long ClientID = -1;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select id  \n");
		strSQL.append("from Client_corporationinfo  \n");
		strSQL.append("where ClientID = " + ID + "  \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				ClientID = transRS.getLong("ID");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return ClientID;
	}

	/**
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public long findNclient(long ID) throws Exception {
		long ClientID = -1;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select id  \n");
		strSQL.append("from Client_natureinfo  \n");
		strSQL.append("where ClientID = " + ID + "  \n");

		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				ClientID = transRS.getLong("id");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return ClientID;
	}

	public String findmanager(long CustomerManagerUserID) throws Exception {
		String sname = null;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select sname  \n");
		strSQL.append("from userinfo  \n");
		strSQL.append("where id = " + CustomerManagerUserID + "  \n");
		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				sname = transRS.getString("sname");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return sname;
	}

	/**
	 * @param officeID
	 * @return
	 */
	public String findOffice(long OfficeID) throws Exception {
		String sname = null;
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("select sname  \n");
		strSQL.append("from office  \n");
		strSQL.append("where id = " + OfficeID + "  \n");
		try {
			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			while (transRS.next()) {
				sname = transRS.getString("sname");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return sname;
	}

	/**
	 * @param id
	 * @return
	 */
	public String parentName(long id) throws Exception {
		// TODO Auto-generated method stub
		String strName = "";
		StringBuffer strSQL = new StringBuffer();

		strSQL.append("SELECT name FROM Client_clientInfo \n");
		strSQL.append(" WHERE id = ? \n");

		transPS = transConn.prepareStatement(strSQL.toString());
		transPS.setLong(1, id);
		transRS = transPS.executeQuery();

		while (transRS.next()) {
			strName = transRS.getString("name");
		}
		try {
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
		}

		return strName;
	}

	public Collection findByMultiOption(QueryClientInfo qInfo)
			throws LoanDAOException, SQLException {
		String strSelect = "";
		String strSQL = "";
		ArrayList v = new ArrayList();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		long clientID = qInfo.getId();

		long queryPurpose = qInfo.getQueryPurpose();

		long pageLineCount = qInfo.getPageLineCount();
		long pageNo = qInfo.getPageNo();

		long desc = qInfo.getDesc();
		long turnid = qInfo.getTurnid();
		String orderParamString = qInfo.getOrderParamString();
		long recordCount = -1;
		long pageCount = -1;
		long rowNumStart = -1;
		long rowNumEnd = -1;

		try {

			// 计算记录总数
			if (queryPurpose == 1) // for modify
			{
				strSQL = "";
				strSelect = " select count(*) ";
				strSQL = " from client_clientinfo a " + " where 1 = 1 " 
						+ " and a.officeid = " + qInfo.getOfficeID()
						+ " and a.StatusID = " + Constant.RecordStatus.VALID
						+ " and a.clientbasetype = " + turnid;
			}

			// ////////////////////查询条件////////////////////////////////////////////////////
			if (clientID > 0) {
				strSQL += " and a.ID = " + clientID;
			}

			// //////////////////////////排序处理//////////////////////////////////////////////////////////////////////
			int nIndex = 0;
			nIndex = orderParamString.indexOf(".");
			if (nIndex > 0) {
				if (orderParamString.substring(0, nIndex).equalsIgnoreCase(
						"Client")) {
					strSQL += " order by a."
							+ orderParamString.substring(nIndex + 1);
				}
			} else {
				strSQL += " order by a.ID";
			}
			if (desc == Constant.PageControl.CODE_ASCORDESC_DESC) {
				strSQL += " desc";
			}

			System.out.println("######111111#######" + strSelect + strSQL);

			try {
				con = Database.getConnection();
				ps = con.prepareStatement(strSelect + strSQL);
				rs = ps.executeQuery();
				if (rs != null && rs.next()) {
					recordCount = rs.getLong(1);
				}
				if (rs != null) {
					rs.close();
					rs = null;
				}
				if (ps != null) {
					ps.close();
					ps = null;
				}
			} catch (ITreasuryDAOException e) {
				throw new LoanDAOException("批量查询贷款类型分类设置笔数产生错误", e);
			} catch (SQLException e) {
				throw new LoanDAOException("批量查询贷款类型分类设置笔数产生错误", e);
			}
			pageCount = recordCount / pageLineCount;
			if ((recordCount % pageLineCount) != 0) {
				pageCount++;
			}
			// System.out.println("$$$$$$$$$recordCount"+recordCount);
			// System.out.println("$$$$$$$$$pageCount"+pageCount);
			// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// 返回需求的结果集
			rowNumStart = (pageNo - 1) * pageLineCount + 1;
			rowNumEnd = rowNumStart + pageLineCount - 1;
			strSelect = " select a.* ";
			strSQL = " select * from ( select aa.*,rownum r from ( "
					+ strSelect + strSQL;
			strSQL += " ) aa ) where r between " + rowNumStart + " and "
					+ rowNumEnd;
			System.out.println("========22222=======" + strSQL);
			try {

				ps = con.prepareStatement(strSQL);
				ResultSet rs1 = ps.executeQuery();
				while (rs1 != null && rs1.next()) {
					QueryClientInfo info = new QueryClientInfo();
					info.setId(rs1.getLong("ID")); // id
					System.out.println("()()()info有值()()()");
					info.setCode(rs1.getString("Code")); // 编号
					info.setName(rs1.getString("Name")); // 名称
					info.setName2(rs1.getString("name2"));
					info.setOfficeID(rs1.getLong("officeID"));
					// 表中没有的字段
					info.setRecordCount(recordCount); // 记录数
					info.setPageCount(pageCount); // 页数
					v.add(info);
				}
				if (rs1 != null) {
					rs1.close();
					rs1 = null;
				}
			} catch (SQLException e) {
				throw new LoanDAOException("批量查询贷款类型分类设置产生错误", e);
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (rs != null) {
				rs.close();
				rs = null;
			}

			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		}
		return (v.size() > 0 ? v : null);
	}

	public Collection findLogByClientID(QueryClientInfo qInfo, long officeId)
			throws SQLException {
		ArrayList v = new ArrayList();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		String strSQL = "select * from SETT_OPERATELOG where officeid= "
				+ officeId;
		if (qInfo.getId() != -1) {
			strSQL = strSQL + " and clientid=" + qInfo.getId();
		}

		try {

			con = Database.getConnection();
			ps = con.prepareStatement(strSQL);
			rs = ps.executeQuery();
			while (rs != null && rs.next()) {
				QueryLogInfo queryLogInf = new QueryLogInfo();
				queryLogInf.setID(rs.getLong("id"));
				queryLogInf.setContent(rs.getString("content"));
				queryLogInf.setExecuteTime(rs.getTimestamp("executedate"));
				queryLogInf.setInsertLogTypeName(rs
						.getLong("InsertLogTypeName"));
				queryLogInf.setOfficeID(rs.getLong("officeid"));
				queryLogInf.setUserID(rs.getLong("userid"));
				queryLogInf.setClientID(rs.getLong("clientid"));
				v.add(queryLogInf);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (rs != null) {
				rs.close();
				rs = null;
			}

			if (ps != null) {
				ps.close();
				ps = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		}
		return (v.size() > 0 ? v : null);
	}


	public static void main(String[] args) throws Exception {
		ClientDAO dao = new ClientDAO(Database.getConnection());
		ClientInfo data = new ClientInfo();
		data.setOfficeID(1);
		System.out.println(dao.generateClientNo(data));
	}

	/**
	 * @param dataEntity
	 * @return
	 */
	public long getlevelId(CorporationInfo dataEntity2) throws Exception {
		long levelId = 1;
		try {
			StringBuffer sb = new StringBuffer();
			sb
					.append("select levelid+1 levelid from client_clientinfo where id = "
							+ dataEntity2.getParentCorpID1() + " \n");
			transPS = transConn.prepareStatement(sb.toString());
			transRS = transPS.executeQuery();

			if (transRS.next()) {
				levelId = transRS.getLong("levelid");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		// TODO Auto-generated method stub
		return levelId;
	}

	/**
	 * @param dataEntity
	 * @return
	 */
	public String getlevelCode(CorporationInfo dataEntity2, long levelId)
			throws Exception {
		String levelCode = null;
		try {
			System.out.println("-------CorpID:"
					+ dataEntity2.getParentCorpID1());
			System.out.println("-------LevelID:" + levelId);
			StringBuffer sb = new StringBuffer();
			String sql = null;
			if (dataEntity2.getParentCorpID1() > 0) {
				sql = "select distinct nvl((select levelcode"
						+ " || nvl((select max(to_number(substr(levelcode,length(levelcode)-4,length(levelcode))))+1 "
						+ "from client_clientInfo a,client_corporationinfo b where a.id=b.clientId  and b.parentcorpid1= "
						+ dataEntity2.getParentCorpID1() + "and a.levelid="
						+ levelId
						+ "),'10001') CODE  from client_clientInfo where id= "
						+ dataEntity2.getParentCorpID1()
						+ "),'10001') levelCode from client_clientinfo ";
			} else {
				sql = "select distinct nvl((select max(to_number(substr(levelcode,length(levelcode)-4,length(levelcode))))+1 "
						+ "from client_clientInfo a,client_corporationinfo b where a.id=b.clientId "
						+ "and a.levelid="
						+ levelId
						+ "),'10001') levelCode from client_clientinfo ";
			}

			System.out.println("-----66666------:" + sql);
			sb.append(sql);
			transPS = transConn.prepareStatement(sb.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				levelCode = transRS.getString("levelCode");
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}

		// TODO Auto-generated method stub
		return levelCode;
	}

	/**
	 * 查出子单位ID,同时做为第二级子单位的上级单位ID
	 * 
	 * @author chuanliu
	 * 
	 *         TODO To change the template for this generated type comment go to
	 *         Window - Preferences - Java - Code Style - Code Templates
	 */
	public Vector getList(long id) throws Exception {
		Vector v = new Vector();
		long clientid = -1;
		try {
			StringBuffer sb = new StringBuffer();
			sb
					.append("select clientid from client_corporationinfo where parentcorpid1 = "
							+ id);

			transPS = transConn.prepareStatement(sb.toString());
			transRS = transPS.executeQuery();

			while (transRS.next()) {
				ClientInfo info = new ClientInfo();
				info.setId(transRS.getLong("clientid"));

				v.add(info);
			}
			finalizeDAO();
		} catch (ITreasuryDAOException e) {
			e.printStackTrace();
			throw e;
		} finally {
			finalizeDAO();
		}
		return v;
	}

	/**
	 * @param id
	 * @return
	 */
	public String findmanagename(long id) throws Exception {
		// TODO Auto-generated method stub
		String managename = "";

		try {
			StringBuffer strSQL = new StringBuffer();
			strSQL.append("select sname  \n");
			strSQL.append("from userinfo  \n");
			strSQL.append("where id = " + id + "  \n");

			transPS = transConn.prepareStatement(strSQL.toString());
			transRS = transPS.executeQuery();
			if (transRS.next()) {
				managename = transRS.getString("sname");

			}
		} catch (Exception e) {
			log.error(e.toString());
			throw new ITreasuryException();
		}

		finalizeDAO();
		return managename;
	}

	public String genClientNo(ClientInfo dataEntity) throws ITreasuryException {
		long officeid = dataEntity.getOfficeID();
		String code = "";
		String officeCode = "";
		String clientCode = "";

		try {
			StringBuffer sb = new StringBuffer();
			sb
					.append(" select max(code) code from client_clientinfo where officeid=?");

			transPS = transConn.prepareStatement(sb.toString());
			System.out.println(sb.toString());
			transPS.setLong(1, officeid);
			transRS = transPS.executeQuery();

			if (transRS.next()) {
				clientCode = transRS.getString("code");
			}

			transRS.close();
			transRS = null;
			transPS.close();
			transPS = null;
			// 客户号最长段的长度
			int accountNumber = Config.getInteger(
					ConfigConstant.GLOBAL_MAXACCOUNTNO_LENGTH, 4);
			// 客户号的段间符号
			String tag = Config.getProperty(
					ConfigConstant.GLOBAL_ACCOUNTNO_TAG, "-");
			if (clientCode == null || "".equalsIgnoreCase(clientCode)) {
				// 默认编号从1开始
				clientCode = DataFormat.formatInt(1, accountNumber);
			} else {
				String[] clientCodes = clientCode.split(tag);
				clientCode = DataFormat.formatInt(Integer
						.parseInt(clientCodes[clientCodes.length - 1]) + 1,
						accountNumber);
			}
			sb.setLength(0);
			sb.append(" select scode from office where id=? ");
			transPS = transConn.prepareStatement(sb.toString());
			transPS.setLong(1, officeid);
			transRS = transPS.executeQuery();

			if (transRS.next()) {
				officeCode = transRS.getString("scode");
			}
			code = officeCode + tag + clientCode;
		} catch (Exception e) {
			e.printStackTrace();
			throw new ITreasuryException();
		}
		finalizeDAO();

		return code;
	}

	public Collection findDetailById(long lId) throws ITreasuryDAOException {
		Collection c = null;

		String strSQL = "select a.*,nvl(b.sname,'') customerManagerUserName from "
				+ strTableName
				+ " a left join userinfo b on b.id = a.customerManagerUserID  where a.id = ?";
		try {
			initDAO();
			prepareStatement(strSQL);
			transPS.setLong(1, lId);
			executeQuery();
			c = getDataEntitiesFromResultSet(ClientInfo.class);

		} catch (Exception e) {
			throw new ITreasuryDAOException(e.getMessage(), e);
		} finally {
			finalizeDAO();
		}
		return c;
	}

	public void updateForLog(ClientInfo dataEntity, long userID, long officeID,
			long insertLogTypeName) throws ITreasuryDAOException {
		try {

			initDAO();

			StringBuffer buffer = new StringBuffer();
			buffer
					.append("insert into SETT_OPERATELOG (ID, USERID, CLIENTID,OFFICEID, INSERTLOGTYPENAME, CONTENT,EXECUTEDATE)");
			buffer
					.append("values ((select nvl(max(ID)+1,1) ID from sett_operateLog),"
							+ userID
							+ ","
							+ dataEntity.getId()
							+ ","
							+ officeID + ", " + insertLogTypeName + ", ");
			buffer.append("'" + dataEntity.toStringForLog() + "',?)");
			String strSQL = buffer.toString();
			log.debug(strSQL);
			prepareStatement(strSQL);
			transPS.setTimestamp(1, DataFormat.getDateTime(DataFormat
					.getDateString()));
			executeUpdate();

		} catch (ITreasuryDAOException ide) {
			throw ide;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {// added by mzh_fu 2008/03/26 将关闭连接放到 finally 中
			finalizeDAO();
		}

	}
	public String getQueryClientInfo(QueryClientInfo info)
	{
		String strSelect ="";
		String strFrom = "";
		
		strSelect = " (select a.*, "
			+ " (select name from Client_ExtendAttribute where id = b.clienttypeid1) clienttypeid1,"
			+ " (select name from Client_ExtendAttribute where id = b.clienttypeid2) clienttypeid2,"
			+ " (select name from Client_ExtendAttribute where id = b.clienttypeid3) clienttypeid3,"
			+ " (select name from Client_ExtendAttribute where id = b.clienttypeid4) clienttypeid4,"
			+ " (select name from Client_ExtendAttribute where id = b.clienttypeid5) clienttypeid5,"
			+ " (select name from Client_ExtendAttribute where id = b.clienttypeid6) clienttypeid6,"
			+ " (select name from Client_ExtendAttribute where id = b.extendattribute1) extendattribute1,"
			+ " (select name from Client_ExtendAttribute where id = b.extendattribute2) extendattribute2,"
			+ " (select name from Client_ExtendAttribute where id = b.extendattribute3) extendattribute3,"
			+ " (select name from Client_ExtendAttribute where id = b.extendattribute4) extendattribute4,"
			+ " (select name from Client_ExtendAttribute where id = b.extendattribute5) extendattribute5,"
			+ " (select name from Client_ExtendAttribute where id = b.extendattribute6) extendattribute6,"
			+ " (select name from Client_ExtendAttribute where id = b.extendattribute7) extendattribute7,"
			+ " (select name from Client_ExtendAttribute where id = b.extendattribute8) extendattribute8,"
			+ " b.licencecode ," + " b.legalpersoncodecert ,b.loancardno,"
			+ " decode(b.ParentCorpID1,-1,a.code,c.code ) upcorporationcode,"
			+ " c.name upcorporationname,"
		    + " b.extendinfo1," 
		    + " b.extendinfo2," 
		    + " b.extendinfo3," 
		    + " b.extendinfo4," 
		    + " b.extendinfo5," 
		    + " b.extendinfo6," 
		    + " b.extendinfo7," 
		    + " b.extendinfo8 ";
		
		strFrom = " from  client_clientinfo a, client_corporationinfo b,  client_clientinfo c "
			+ " where 1 = 1 "
			+ " and a.id = b.clientid(+) "
			+ " and b.ParentCorpID1 = c.id(+) "
			+ " and a.officeid = "
			+ info.getOfficeID()
			+ " and a.StatusID = "
			+ Constant.RecordStatus.VALID
			+ " and a.clientbasetype = " + info.getTurnid();
		if(info.getId()>0)
		{
			strFrom+=" and (a.id = "+info.getId();
		}
		if(info.getId()>0&&!info.getIsInclude().equals(""))
		{
			strFrom+=" or a.levelcode like  '"+info.getLevelcode()+"%'";
		}
		if(info.getId()>0)
		{
			strFrom+=" ) ";
		}
		if(!info.getLoanCardNo().equals(""))
		{
			strFrom+=" and b.loancardno = '"+info.getLoanCardNo()+"'";
		}
		if(!info.getLegalpersoncodecert().equals(""))
		{
			strFrom+=" and b.Legalpersoncodecert = '"+info.getLegalpersoncodecert()+"'";
		}
		if(!info.getLicencecode().equals(""))
		{
			strFrom+=" and b.Licencecode = '"+info.getLicencecode()+"'";
		}
		if(info.getClienttypeid1().equals("-1"))
		{
			strFrom+=" and ( b.clienttypeid1 is null or b.clienttypeid1 <=0 )";
		}
		else if(info.getClienttypeid1().equals("0")||info.getClienttypeid1().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.clienttypeid1 = "+info.getClienttypeid1();
		}
		if(info.getClienttypeid2().equals("-1"))
		{
			strFrom+=" and ( b.clienttypeid2 is null or b.clienttypeid2 <= 0 )";
		}
		else if(info.getClienttypeid2().equals("0")||info.getClienttypeid2().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.clienttypeid2 = "+info.getClienttypeid2();
		}	
		if(info.getClienttypeid3().equals("-1"))
		{
			strFrom+=" and ( b.clienttypeid3 is null or b.clienttypeid3 <= 0 )";
		}
		else if(info.getClienttypeid3().equals("0")||info.getClienttypeid3().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.clienttypeid3 = "+info.getClienttypeid3();
		}
		if(info.getClienttypeid4().equals("-1"))
		{
			strFrom+=" and ( b.clienttypeid4 is null or b.clienttypeid4 <= 0 )";
		}
		else if(info.getClienttypeid4().equals("0")||info.getClienttypeid4().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.clienttypeid4 = "+info.getClienttypeid4();
		}
		if(info.getClienttypeid5().equals("-1"))
		{
			strFrom+=" and ( b.clienttypeid5 is null or b.clienttypeid5 <= 0 )";
		}
		else if(info.getClienttypeid5().equals("0")||info.getClienttypeid5().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.clienttypeid5 = "+info.getClienttypeid5();
		}
		if(info.getClienttypeid6().equals("-1"))
		{
			strFrom+=" and ( b.clienttypeid6 is null or b.clienttypeid6 <= 0 )";
		}
		else if(info.getClienttypeid6().equals("0")||info.getClienttypeid6().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.clienttypeid6 = "+info.getClienttypeid6();
		}
		if(info.getExtendattribute1().equals("-1"))
		{
			strFrom+=" and ( b.Extendattribute1 is null or b.Extendattribute1 <=0 ) ";
		}
		else if(info.getExtendattribute1().equals("0")||info.getExtendattribute1().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.Extendattribute1 = "+info.getExtendattribute1();
		}
		if(info.getExtendattribute2().equals("-1"))
		{
			strFrom+=" and ( b.Extendattribute2 is null or b.Extendattribute2 <= 0 )";
		}
		else if(info.getExtendattribute2().equals("0")||info.getExtendattribute2().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.Extendattribute2 = "+info.getExtendattribute2();
		}
		if(info.getExtendattribute3().equals("-1"))
		{
			strFrom+=" and ( b.Extendattribute3 is null or b.Extendattribute3 <= 0 )";
		}
		else if(info.getExtendattribute3().equals("0")||info.getExtendattribute3().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.Extendattribute3 = "+info.getExtendattribute3();
		}
		if(info.getExtendattribute4().equals("-1"))
		{
			strFrom+=" and ( b.Extendattribute4 is null or b.Extendattribute4 <= 0 )";
		}
		else if(info.getExtendattribute4().equals("0")||info.getExtendattribute4().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.Extendattribute4 = "+info.getExtendattribute4();
		}
		if(info.getExtendattribute5().equals("-1"))
		{
			strFrom+=" and ( b.Extendattribute5 is null or b.Extendattribute5 <= 0 )";
		}
		else if(info.getExtendattribute5().equals("0")||info.getExtendattribute5().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.Extendattribute5 = "+info.getExtendattribute5();
		}
		if(info.getExtendattribute6().equals("-1"))
		{
			strFrom+=" and ( b.Extendattribute6 is null or b.Extendattribute6 <= 0 )";
		}
		else if(info.getExtendattribute6().equals("0")||info.getExtendattribute6().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.Extendattribute6 = "+info.getExtendattribute6();
		}
		if(info.getExtendattribute7().equals("-1"))
		{
			strFrom+=" and ( b.Extendattribute7 is null or b.Extendattribute7 <=0 )";
		}
		else if(info.getExtendattribute7().equals("0")||info.getExtendattribute7().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.Extendattribute7 = "+info.getExtendattribute7();
		}
		if(info.getExtendattribute8().equals("-1"))
		{
			strFrom+=" and ( b.Extendattribute8 is null or b.Extendattribute8 <= 0 )";
		}
		else if(info.getExtendattribute8().equals("0")||info.getExtendattribute8().equals(""))
		{
			
		}
		else 
		{
			strFrom+=" and b.Extendattribute8 = "+info.getExtendattribute8();
		}
		
		
		
		return strSelect + strFrom+")";
	}
}