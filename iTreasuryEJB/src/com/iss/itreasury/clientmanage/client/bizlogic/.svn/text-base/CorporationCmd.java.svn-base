/* Generated by Together */

package com.iss.itreasury.clientmanage.client.bizlogic;

import java.sql.Connection;

import java.util.ArrayList;
import java.util.Collection;

import com.iss.itreasury.clientmanage.client.dao.ClientDAO;
import com.iss.itreasury.clientmanage.client.dao.CorporationDAO;

import com.iss.itreasury.clientmanage.client.dataentity.CorporationInfo;
import com.iss.itreasury.clientmanage.client.dataentity.QueryClientInfo;
import com.iss.itreasury.command.Command;
import com.iss.itreasury.clientmanage.dataentity.ClientInfo;
import com.iss.itreasury.clientmanage.enterpriselaw.dao.EnterpriseLawDAO;

import com.iss.itreasury.clientmanage.enterprisememo.dao.EnterpriseMemoDAO;

import com.iss.itreasury.clientmanage.invest.dao.InvestDAO;

import com.iss.itreasury.clientmanage.management.dao.ManagementDAO;

import com.iss.itreasury.clientmanage.partner.dao.PartnerDAO;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.IException;

public class CorporationCmd extends Command {
	/**
	 * 添加法人记录
	 * 
	 * @throws Exception
	 */
	public long add(CorporationInfo dataEntity) throws Exception {

		long myid = -1;
		Connection con = null;
		con = Database.getConnection();
		CorporationDAO corporationdao = new CorporationDAO(con);

		corporationdao.setUseMaxID();

		myid = corporationdao.add(dataEntity);

		if (con != null) {
			con.close();
			con = null;
		}

		return myid;
	}

	/**
	 * 更新记录
	 * 
	 * @throws Exception
	 */
	public void update(CorporationInfo corDataEntity, ClientInfo cliDataEntity)
			throws Exception {
		Connection con = null;
		con = Database.getConnection();
		CorporationDAO corporationdao = new CorporationDAO(con);
		ClientDAO clientdao = new ClientDAO(con);
		// 更新父客户信息
		clientdao.update(cliDataEntity);
		// 更新法人信息
		corporationdao.update(corDataEntity); 

		if (con != null) {
			con.close();
			con = null;
		}
	}
	/**
	 * 更新记录
	 * 
	 * @throws Exception
	 */
	public void updateAndForLog(CorporationInfo corDataEntity, ClientInfo cliDataEntity,long userID,long officeID)
			throws Exception {
		Connection con = null; 
		con = Database.getConnection();
		CorporationDAO corporationdao = new CorporationDAO(con);
		ClientDAO clientdao = new ClientDAO(con);
		clientdao.update(cliDataEntity);
		// 更新法人信息
		corporationdao.update(corDataEntity);  
		// 更新父客户信息 
	//	clientdao.updateForLog(cliDataEntity,userID,officeID,com.iss.itreasury.util.Constant.OperateLog.Corp); 
		// 更新法人信息
		corporationdao.updateForLog(cliDataEntity,corDataEntity,userID,officeID,com.iss.itreasury.util.Constant.OperateLog.Corp); 

		if (con != null) {
			con.close();
			con = null;
		}
	}
	/**
	 * 删除一条法人客户信息，同时删除父客户信息。
	 * 
	 */
	public void delete(long id) throws IException,Exception {
		// 判断父客户信息，是否已经被引用，如果被应用，抛出异常
		Connection con = null;
		try{
			con = Database.getConnection();
	
			CorporationInfo corporationinfo = new CorporationInfo();
			ClientInfo clientinfo = new ClientInfo();
	
			CorporationDAO corporationdao = new CorporationDAO(con);
			ClientDAO clientdao = new ClientDAO(con);
	
			clientinfo = (ClientInfo) clientdao.findByID(id, clientinfo.getClass());
			/*
			if (!clientdao.isInUse(clientinfo))// 如果没有被引用
			{
	
				// 删除父客户信息
				clientdao.delete(id);
			} else// 如果有被引用
			{
			}
			*/
			
			if(clientdao.isExistAccount(clientinfo)>0)
			{
				throw new IException("该客户已经建立内部账户，不能删除");
			}
			else if(clientdao.isExistBankAccount(clientinfo)>0)
			{
				throw new IException("该客户已经建立银行账户，不能删除");
			}
			else if(clientdao.isExistLoan(clientinfo)>0)
			{
				throw new IException("该客户已经存在贷款业务，不能删除");
			}
			else if(clientdao.isExistLoanAssure(clientinfo)>0)
			{
				throw new IException("贷款业务担保方式中存在此客户信息，不能删除");
			}
			else  //未被使用
			{
				clientdao.delete(id);
			}
		}catch (Exception e) {
			throw e;
		}
		finally
		{
			if (con != null) {
				con.close();
				con = null;
			}
		}

	}

	public Collection findByContidion(CorporationInfo dataEntity)
			throws Exception {

		Collection data = null;
		Connection con = null;
		
		try{
			con = Database.getConnection();
			// CorporationInfo corporationinfo = new CorporationInfo();
			// ClientInfo clientinfo = new ClientInfo();
	
			CorporationDAO corporationdao = new CorporationDAO(con);
			// ClientDAO clientdao = new ClientDAO(con);
	
			data = corporationdao.findByCondition(dataEntity);
		
		}catch (Exception e) {
			throw e;
		}finally{
			if (con != null) {
				con.close();
				con = null;
			}			
		}
		

	
		return data;
	}

	public Collection findById(long lId) throws Exception {

		Collection data = null;
		Connection con = null;
		con = Database.getConnection();

		CorporationDAO corporationdao = new CorporationDAO(con);

		data = corporationdao.findDetailById(lId);
		if (con != null) {
			con.close();
			con = null;
		}
		return data;
	}

	public Collection findByClientId(long lClientId) throws Exception {

		Collection data = null;
		Connection con = null;
		con = Database.getConnection();

		CorporationDAO corporationdao = new CorporationDAO(con);

		data = corporationdao.findDetailByClientId(lClientId);
		if (con != null) {
			con.close();
			con = null;
		}
		return data;
	}
	/**
	 * 获得法人客户的全部信息，包括对外投资信息，等等 返回CorporationDAO的loadAll结果
	 * 
	 * @throws Exception
	 */
	public CorporationInfo loadAll(long id) throws Exception {
		// 获得法人客户信息

		Connection con = null;
		con = Database.getConnection();
		CorporationInfo corporationinfo = new CorporationInfo();// 法人
		ClientInfo clientinfo = new ClientInfo();

		CorporationDAO corporationdao = new CorporationDAO(con);
		ClientDAO clientdao = new ClientDAO(con);

		EnterpriseLawDAO enterpriseLaw = new EnterpriseLawDAO(con);// 诉讼信息
		EnterpriseMemoDAO enterprisememo = new EnterpriseMemoDAO(con);// 大事件信息
		InvestDAO invest = new InvestDAO(con);// 对外投资信息
		ManagementDAO management = new ManagementDAO(con);// 管理层信息
		PartnerDAO partner = new PartnerDAO(con);// 资本构成信息

		// 获得相应的客户信息，赋值到法人客户信息的clientInfo
		corporationinfo = corporationdao.findByclietID(id);
		clientinfo = (ClientInfo) clientdao.findByID(id, clientinfo.getClass());
		corporationinfo.setClientInfo(clientinfo);
		// 获得客户对外投资信息、资本构成信息等，进行相应的赋值->CorporationDataEntity

		corporationinfo.setEnterpriseLawInfo(enterpriseLaw.findByClientID(id));
		corporationinfo
				.setEnterpriseMemoInfo(enterprisememo.findByClientID(id));
		corporationinfo.setInvestInfo(invest.findByClientID(id));
		corporationinfo.setManagementInfo(management.findByClientID(id));
		corporationinfo.setPartnerInfo(partner.findByClientID(id));

		if (con != null) {
			con.close();
			con = null;
		}

		return corporationinfo;
	}

	/**
	 * 获得法人客户的基本信息
	 * 
	 * @throws Exception
	 */
	public CorporationInfo load(long id) throws Exception {
		// 获得法人客户信息
		Connection con = null;
		con = Database.getConnection();
		CorporationInfo corporationinfo = new CorporationInfo();// 法人
		ClientInfo clientinfo = new ClientInfo();

		CorporationDAO corporationdao = new CorporationDAO(con);
		ClientDAO clientdao = new ClientDAO(con);

		// 获得客户信息赋值到法人客户信息的clientInfo
		corporationinfo = (CorporationInfo) corporationdao.findByclietID(id);
		clientinfo = (ClientInfo) clientdao.findByID(id, clientinfo.getClass());
		corporationinfo.setClientInfo(clientinfo);

		if (con != null) {
			con.close();
			con = null;
		}

		return corporationinfo;
	}

	/**
	 * 根据Code查询 查信用评审
	 * 
	 * @param args
	 * @throws Exception
	 */
	public CorporationInfo findAppraise(long ClientID) throws Exception {
		CorporationInfo Info = new CorporationInfo();
		Connection con = null;
		CorporationDAO corporationdao = null;

		try {
			con = Database.getConnection();
			corporationdao = new CorporationDAO(con);
			Info = corporationdao.findAppraise(ClientID);
		} catch (Exception e) {
			if (con != null) {
				con.close();
				con = null;
			}
		} finally {
			try {
				if (con != null) {
					con.close();
					con = null;
				}
			} catch (Exception ex) {
				throw new Exception(ex.getMessage());
			}
		}
		return (Info);
	}

	public static void main(String[] args) throws Exception {
		CorporationCmd onecmd = new CorporationCmd();
		// PartnerCmd pcmd = new PartnerCmd();
		//    	
		// CorporationInfo oneinfo = new CorporationInfo();
		// PartnerInfo painfo = new PartnerInfo();
		// ClientInfo clinfo = new ClientInfo();
		//    	
		// Collection aa = null;
		// clinfo.setOfficeID(3);
		// clinfo.setSystemIdentify("1");
		// clinfo.setClientBaseType("1");
		// clinfo.setName("oeroer");
		// clinfo.setCountry("China");
		// painfo.setAbstract("afafdsfsdfads");
		//    	
		// Collection p = null;
		//    	
		// p = pcmd.findByCondition(painfo);
		// oneinfo.setClientInfo(clinfo);
		// oneinfo.setPartnerInfo(p);

		// onecmd.delete(-1);
		// oneinfo.setId(2);
		//    	
		// oneinfo.setCli entBaseType("1");
		//
		// onecmd.update(oneinfo);

		// aa=onecmd.findByCondition(oneinfo);

		System.out.println("id=========" + onecmd.load(52).getId());

		// Iterator it = aa.iterator();
		//    	
		// System.out.println(it.hasNext());
		// System.out.println("contain===="+((ManagementInfo)it.next()).getId());

	}

	/**
	 * @param id
	 * @return
	 * @throws Exception
	 */

}
