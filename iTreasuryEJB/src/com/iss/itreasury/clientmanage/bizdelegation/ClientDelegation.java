/* Generated by Together */

package com.iss.itreasury.clientmanage.bizdelegation;

import java.util.Collection;
import java.util.*;

import com.iss.itreasury.budget.util.BUDGETConstant;
import com.iss.itreasury.clientmanage.client.bizlogic.ClientCmd;
import com.iss.itreasury.clientmanage.client.dataentity.CorporationInfo;
import com.iss.itreasury.clientmanage.dataentity.ClientInfo;
import com.iss.itreasury.clientmanage.enterpriselaw.dataentity.EnterpriseLawInfo;
import com.iss.itreasury.clientmanage.enterprisememo.dataentity.EnterpriseMemoInfo;
import com.iss.itreasury.clientmanage.invest.dataentity.InvestInfo;
import com.iss.itreasury.clientmanage.management.dataentity.ManagementInfo;
import com.iss.itreasury.clientmanage.partner.dataentity.PartnerInfo;
import com.iss.itreasury.clientmanage.util.CMConstant;
import com.iss.itreasury.loan.util.LOANConstant;
import com.iss.itreasury.settlement.util.SETTConstant;

/**
 * 这是从controller层到后台EJB的转发层，为了对C层和M层解耦。 请根据其他模块的delegation和后台sessionBean的具体内容，为
 * 各delegation添加相应的委托调用。
 */
public class ClientDelegation {

	ClientCmd clientcmd = new ClientCmd();

	public Collection load(ClientInfo dataEntity) {
		Collection c = null;
		try {
			c = clientcmd.findByCondition(dataEntity);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (c);
	}

	
	public Collection loadById(long lId) {
		Collection c = null;
		try {
			c = clientcmd.findDetailById(lId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (c);
	}

	/**
	 * 客户经理转移 查询
	 * 
	 * @return
	 */
	public Vector findByCustomerManagerUserID(long CustomerManagerUserID) {
		Vector v = new Vector();
		try {
			v = clientcmd.findByCustomerManagerUserID(CustomerManagerUserID);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (v);
	}

	/**
	 * 客户经理转移 更新
	 * 
	 * @param checkIds
	 * @param CustomerManagerUserID
	 * @return
	 */
	public long update(String[] checkIds, long CustomerManagerUserID) {
		long lReturn = -1;
		ClientInfo dataEntity = new ClientInfo();
		dataEntity.setCustomerManagerUserID(CustomerManagerUserID);
		for (int i = 0; checkIds != null && i < checkIds.length; i++) {
			dataEntity.setCode(checkIds[i]);
			try {
				lReturn = clientcmd.updateManager(dataEntity);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return lReturn;
	}

	/**
	 * 查存贷款
	 * 
	 * @return
	 * @throws Exception
	 */
	public ClientInfo findaccount(long ClientID, long[] type) throws Exception {
		ClientInfo Info = new ClientInfo();

		try {
			Info = clientcmd.findaccount(ClientID, type);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 查合同
	 * 
	 * @return
	 * @throws Exception
	 */
	public ClientInfo findloan(long ClientID, long[] type) throws Exception {
		ClientInfo Info = new ClientInfo();

		try {
			Info = clientcmd.findloan(ClientID, type);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 查保函
	 * 
	 * @return
	 * @throws Exception
	 */
	public ClientInfo findsaveletter(String Code) throws Exception {
		ClientInfo Info = new ClientInfo();

		try {
			Info = clientcmd.findsaveletter(Code);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 查财务报表
	 * 
	 * @return
	 * @throws Exception
	 */
	public ClientInfo findreport(long ClientID) throws Exception {
		ClientInfo Info = new ClientInfo();

		try {
			Info = clientcmd.findreport(ClientID);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 查财务指标
	 * 
	 * @return
	 * @throws Exception
	 */
	public ClientInfo findtarget(long ClientID) throws Exception {
		ClientInfo Info = new ClientInfo();

		try {
			Info = clientcmd.findtarget(ClientID);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 查信用金额
	 * 
	 * @return
	 * @throws Exception
	 */
	public ClientInfo findCredit(String Code) throws Exception {
		ClientInfo Info = new ClientInfo();

		try {
			Info = clientcmd.findCredit(Code);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 查预算
	 * 
	 * @return
	 * @throws Exception
	 */
	public ClientInfo findbudget(long ClientID, long budgetflag)
			throws Exception {
		ClientInfo Info = new ClientInfo();

		try {
			Info = clientcmd.findbudget(ClientID, budgetflag);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 查预算金额
	 * 
	 * @return
	 * @throws Exception
	 */
	public ClientInfo findbudgetmoney(long ClientID) throws Exception {
		ClientInfo Info = new ClientInfo();

		try {
			Info = clientcmd.findbudgetmoney(ClientID);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 
	 * @param args
	 */
	public ClientInfo findClientBaseType(String Code) throws Exception {
		ClientInfo Info = new ClientInfo();
		try {
			Info = clientcmd.findClientBaseType(Code);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (Info);
	}

	/**
	 * 
	 * @author chuanliu
	 * 
	 * TODO To change the template for this generated type comment go to Window -
	 * Preferences - Java - Code Style - Code Templates
	 */
	public long findclientid(long ID) {
		long ClientID = -1;
		try {
			ClientID = clientcmd.findclientid(ID);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ClientID;
	}

	/**
	 * 
	 * @author chuanliu
	 * 
	 * TODO To change the template for this generated type comment go to Window -
	 * Preferences - Java - Code Style - Code Templates
	 */
	public long findNclient(long ID) {
		long ClientID = -1;
		try {
			ClientID = clientcmd.findNclient(ID);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ClientID;
	}

	public String findManager(long CustomerManagerUserID) throws Exception {
		return clientcmd.findmanager(CustomerManagerUserID);
	}

	public String findOffice(long OfficeID) throws Exception {
		return clientcmd.findOffice(OfficeID);
	}

	public static void main(String[] args) throws Exception {
		String[] checkIds = { "01-0005", "01-0006" };
		long CustomerManagerUserID = 1;
		ClientDelegation del = new ClientDelegation();
		long lReturn = -1;
		lReturn = del.update(checkIds, CustomerManagerUserID);
		System.out.println(lReturn);
	}
}
