/* Generated by Together */

package com.iss.itreasury.clientmanage.enterprisememo.bizlogic;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;

import com.iss.itreasury.clientmanage.client.dao.ClientmanageDAO;
import com.iss.itreasury.clientmanage.client.dataentity.ManagerInfo;
import com.iss.itreasury.clientmanage.client.dataentity.QueryCorporationInfo;
import com.iss.itreasury.clientmanage.dataentity.ClientInfo;
import com.iss.itreasury.clientmanage.enterprisememo.dao.EnterpriseMemoDAO;
import com.iss.itreasury.clientmanage.enterprisememo.dataentity.EnterpriseMemoInfo;


import com.iss.itreasury.command.Command;


import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.IException;
import com.iss.system.dao.PageLoader;



public class EnterpriseMemoCmd extends Command{
    
	public long delete(long id) throws Exception{
		long myid=-1;
    	Connection con = null;
    	con = Database.getConnection();
     	EnterpriseMemoDAO  enterprisememodao = new EnterpriseMemoDAO(con
);
     	enterprisememodao.delete(id);
     	myid=1;
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return myid;
    	}   

	/**
     * 增加一条企业大事记信息
	 * @throws Exception
     * */
    public long add(EnterpriseMemoInfo dataEntity ) throws Exception {
    	long myid = -1;
    	Connection con = null;
    	con = Database.getConnection();
    	EnterpriseMemoDAO  enterprisememodao = new EnterpriseMemoDAO(con);
    	enterprisememodao.setUseMaxID();
    	myid = enterprisememodao.add(dataEntity);
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	
    	return myid;
    }

    /**
     *更新企业大事记信息
     * @throws Exception
     * */
    public long update(EnterpriseMemoInfo dataEntity) throws Exception{
    	long myid=-1;
    	Connection con = null;
    	con = Database.getConnection();
    	EnterpriseMemoDAO  enterprisememodao = new EnterpriseMemoDAO(con);
    	
    	enterprisememodao.update(dataEntity);
    	myid = 1;
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return myid;
    }
    
    /**
     *	判断新code是否重复
	 * @throws Exception
     * @throws Exception
     * */
	public String isRecode(long id,String newcode) throws Exception {
		Connection con = null;
		String s = "";
		con = Database.getConnection();
    	EnterpriseMemoDAO  enterpriselawdao = new EnterpriseMemoDAO(con);
    	s=enterpriselawdao.isRename(id,newcode);
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return s;

    }
	
	public String creatCode(long id) throws Exception {
		Connection con = null;
		String s = "";
		con = Database.getConnection();
    	EnterpriseMemoDAO  enterpriselawdao = new EnterpriseMemoDAO(con);
    	s=enterpriselawdao.creatCode(id);
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return s;

    }

    /**
     *获得编号为id的一条企业大事记信息
     * @throws Exception
     * */
    public EnterpriseMemoInfo findById(long id) throws Exception{
    	EnterpriseMemoInfo oneenterprisememoinfo = new EnterpriseMemoInfo();
    	Connection con = null;
    	con = Database.getConnection();
    	EnterpriseMemoDAO  enterprisememodao = new EnterpriseMemoDAO(con);
    	oneenterprisememoinfo =(EnterpriseMemoInfo) enterprisememodao.findByID(id,oneenterprisememoinfo.getClass());
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return oneenterprisememoinfo;
    }
    /**
     *获得编号为clientID的所有企业大事记信息
     * @param   clientID法人客户ID
     * @return  包含EnterpriseMemo的Collection
     * @throws Exception
     * */
    public Collection findByCondition(long clientID) throws Exception{
    	Collection data = null;
    	Connection con = null;
    	con = Database.getConnection();
    	EnterpriseMemoDAO  enterprisememodao = new EnterpriseMemoDAO(con);
    	data=enterprisememodao.findByClientID(clientID);
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return data;
    }

    /**
     *根据查询条件获取结果集
     * @param  dataEntity 其中有值的属性将被组织为查询条件
     * @return 包含EnterpriseMemoDataEntity的Collection
     * @throws Exception
     * */
    public Collection findByCondition(EnterpriseMemoInfo dataEntity) throws Exception{
    	Collection data = null;
    	Connection con = null;
    	con = Database.getConnection();
    	EnterpriseMemoDAO  enterprisememodao = new EnterpriseMemoDAO(con);
    	data=enterprisememodao.findByCondition(dataEntity);
    	if(con != null)
    	{
    		con.close();
    		con=null;
    	}
    	return data;
    }

    /**
     * 
     * @param args
     * @throws Exception
     */
    public EnterpriseMemoInfo findEnterpriseMemo(long ClientID) throws Exception
	{
    	Connection con = null;
    	EnterpriseMemoInfo Info = new EnterpriseMemoInfo();
    	EnterpriseMemoDAO enterprisememodao = null;
    	
    	try
		{
    		con = Database.getConnection();
    		enterprisememodao = new EnterpriseMemoDAO(con);
    		Info = enterprisememodao.findEnterpriseMemo(ClientID);
		}
    	catch(Exception e)
		{
    		if(con != null)
    		{
    			con.close();
    			con = null;
    		}
		}
    	finally
		{
    		try
			{
    			if(con != null)
    			{
    				con.close();
    				con = null;
    			}
			}
    		catch(Exception ex)
			{
    			throw new Exception(ex.getMessage());
			}
		}
    	return (Info);
	}
    
    public static void main(String []args) throws Exception
	{
    	EnterpriseMemoCmd  onepartnercmd = new EnterpriseMemoCmd();
    	
    	
    	
    	
    	
    	
    	System.out.println("contain===="+onepartnercmd.creatCode(4));
    	
    }
    /**
     * 企业大事件信息分页查询
     * @param clientInfo
     * @return
     */
    public PageLoader queryEnterpriseMemoInfo(QueryCorporationInfo clientInfo){
		PageLoader pageLoader = null;
		EnterpriseMemoDAO clientmanageDao = new EnterpriseMemoDAO();
		pageLoader = clientmanageDao.queryEnterpriseMemoInfo(clientInfo);
		return pageLoader;
		
	}
    /**
     * 企业大事件信息查询
     * @param clientInfo
     * @return
     */
    public Collection query_enterpriseMemoInfo(ClientInfo clientinfo) throws Exception
	{
    	EnterpriseMemoDAO enterpriseMemodao = new EnterpriseMemoDAO();
		Collection vReturn = new ArrayList();
		vReturn=enterpriseMemodao.query_enterpriseMemoInfo(clientinfo);
		return vReturn;
		
	}
}
