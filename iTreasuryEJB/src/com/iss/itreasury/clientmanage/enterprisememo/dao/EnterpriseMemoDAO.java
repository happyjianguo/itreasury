/* Generated by Together */

package com.iss.itreasury.clientmanage.enterprisememo.dao;

import com.iss.itreasury.clientmanage.client.dataentity.ManagerInfo;
import com.iss.itreasury.clientmanage.client.dataentity.QueryCorporationInfo;
import com.iss.itreasury.clientmanage.dao.CimsBaseDao;
import com.iss.itreasury.clientmanage.dataentity.ClientInfo;
import com.iss.itreasury.clientmanage.enterprisememo.dataentity.EnterpriseMemoInfo;
import com.iss.itreasury.dao.ITreasuryDAOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;

import com.iss.itreasury.util.AppContext;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.ITreasuryException;
import com.iss.system.dao.PageLoader;
/**
*企业大事记信息DataEntity，对应于表Client_EnterpriseMemo
* */
public class EnterpriseMemoDAO extends CimsBaseDao {
	
	StringBuffer m_sbSelect = null;
	StringBuffer m_sbFrom = null;
	StringBuffer m_sbWhere = null;
	StringBuffer m_sbOrderBy = null;
	
    public EnterpriseMemoDAO() {
        super("Client_EnterpriseMemo");
    }
    
    public EnterpriseMemoDAO(Connection con) {
    	super("Client_EnterpriseMemo",con);
    }

    /**
     *获得属于某一客户的所有企业大事记信息
     * */
     public Collection findByClientID(long clientID) throws ITreasuryException{
     	Collection data = null;
     	
     	try
		{
			
			StringBuffer sb = new StringBuffer();
			sb.append(" select * from");
			sb.append(" Client_EnterpriseMemo ");
			sb.append(" where ClientID = ?  and  (statusid is null or statusid <> 0)");
			transPS = transConn.prepareStatement(sb.toString());
			transPS.setLong(1, clientID);
			
			transRS = transPS.executeQuery();
			
			data=getDataEntitiesFromResultSet(new EnterpriseMemoInfo().getClass());
		}
		catch (Exception e)
		{
			log.error(e.toString());
			throw new ITreasuryException();
		}
		finalizeDAO();
		return data;
     }
     
     /**
      *判断一个客户的编号是否重复
      * */
     public String isRename(long clientId,String newcode)throws ITreasuryException{
         
         String s = "";
        
      	try
 		{
 			
 			StringBuffer sb = new StringBuffer();
 			sb.append(" select eventrecordno from");
 			sb.append(" client_enterprisememo ");
 			sb.append(" where ClientID = "+clientId+"  and  (statusid is null or statusid <> 0) and eventrecordno like '"+newcode+"%'");
 			transPS = transConn.prepareStatement(sb.toString());
 			transRS = transPS.executeQuery();
 			
 			while(transRS.next())
 			{	
 				s = transRS.getString("eventrecordno");
 			}
 			if (s!="")
 			{	
	 			if(s.indexOf("-")>0)
	 			{	
	 				long index = Long.parseLong(s.substring(s.indexOf("-")+1))+1;
	 				s = s.substring(0,s.indexOf("-")+1);
	 				s = s+index;
	 				}
	 			else
	 			{
	 				s=s+"-1";	
	 				}
 			}
 		}
 		catch (Exception e)
 		{
 			log.error(e.toString());
 			throw new ITreasuryException();
 		}
 		finalizeDAO();
 		return s;
      }
     
     /**
      *产生一个客户的编号
      * */
     public String creatCode(long clientId)throws ITreasuryException{
         
         String s = "";
        
      	try
 		{
 			
 			StringBuffer sb = new StringBuffer();
 			sb.append(" select eventrecordno from");
 			sb.append(" client_enterprisememo ");
 			sb.append(" where ClientID = "+clientId+"  and  (statusid is null or statusid <> 0) and eventrecordno like 'Event%'");
 			transPS = transConn.prepareStatement(sb.toString());
 			transRS = transPS.executeQuery();
 			System.out.println("=========="+sb.toString());
 			
 			while(transRS.next())
 			{	
 				s = transRS.getString("eventrecordno");
 			}
 			System.out.print("s=========="+s);
 			
 			if (s!="")
 			{	
	 			if(s.indexOf("-")>0)
	 			{	
	 				long index = Long.parseLong(s.substring(s.indexOf("-")+1))+1;
	 				s = s.substring(0,s.indexOf("-")+1);
	 				s = s+index;
	 				}
	 			else
	 			{
	 				s=s+"-1";	
	 				}
 			}
 			else
 			{
 				s = "Event-1";
 				}
 		}
 		catch (Exception e)
 		{
 			log.error(e.toString());
 			throw new ITreasuryException();
 		}
 		finalizeDAO();
 		return s;
      }
     
     /**
      * 根据Code查询 经营管理信息
      * @author chuanliu
      *
      * TODO To change the template for this generated type comment go to
      * Window - Preferences - Java - Code Style - Code Templates
      */
     public EnterpriseMemoInfo findEnterpriseMemo(long ClientID) throws Exception
 	{
     	StringBuffer strSQL = new StringBuffer();
     	EnterpriseMemoInfo Info = new EnterpriseMemoInfo();
     	
     	strSQL.append("select COUNT(EventRecordNo) count \n");
     	strSQL.append("from Client_EnterpriseMemo \n");
 		strSQL.append("WHERE ClientID = " + ClientID + "  \n");
 		
 		try {			
 			transPS = transConn.prepareStatement(strSQL.toString());
 			transRS = transPS.executeQuery();
 			while(transRS.next())
 			{
 				Info.setCount(transRS.getLong("count"));
 			}
 			finalizeDAO();
 		} catch (ITreasuryDAOException e) {
 			e.printStackTrace();
 			throw e;
 		} finally {
 			finalizeDAO();
 		}
     	return (Info);
 	} 
     
     /**
      * 企业大事件信息分页查询
      * @param clientInfo
      * @return
      */
     public PageLoader queryEnterpriseMemoInfo(QueryCorporationInfo clientInfo) {
 		
    	 queryEnterpriseMemoInfoSQL(clientInfo);
 		PageLoader pageLoader = (PageLoader) com.iss.system.BaseObjectFactory.getBaseObject("com.iss.system.dao.PageLoader");
 		pageLoader.initPageLoader(
 			new AppContext(),
 			m_sbFrom.toString(),
 			m_sbSelect.toString(),
 			m_sbWhere.toString(),
 			(int) Constant.PageControl.CODE_PAGELINECOUNT,
 			"com.iss.itreasury.clientmanage.enterprisememo.dataentity.EnterpriseMemoInfo",
 			null);
 		pageLoader.setOrderBy(" " + m_sbOrderBy.toString() + " ");
 		return pageLoader;
 		
 	}
     /**
      * 企业大事件信息分页查询SQL
      * @param clientInfo
      * @return
      */
 	public void queryEnterpriseMemoInfoSQL(QueryCorporationInfo clientInfo){
 		m_sbSelect = new StringBuffer();
 		m_sbSelect.append(" a.eventrecordno,a.eventdate,a.memodescribe,a.abstract,b.code,b.name,a.clientID,b.id client_info_id \n"); 
 		m_sbFrom = new StringBuffer();
 		m_sbFrom.append("( select * from client_clientinfo where client_clientinfo.statusid = 1 ) b , ");
 		m_sbFrom.append("( select * from Client_EnterpriseMemo where Client_EnterpriseMemo.statusid = 1 ) a ");
 		m_sbWhere= new StringBuffer();
 		m_sbWhere.append(" a.clientid(+)=b.id ");
 		m_sbWhere.append(" and b.clientbasetype = '1'");
 		m_sbWhere.append(" and b.officeid = "+clientInfo.getOfficeID()); 		
 		if(clientInfo.getLClientNOStart()!=null && !clientInfo.getLClientNOStart().equals("")){
 			m_sbWhere.append(" and b.code >= '"+clientInfo.getLClientNOStart()+"'");
 		}
 		if(clientInfo.getLClientNOEnd()!=null && !clientInfo.getLClientNOEnd().equals("")){
 			m_sbWhere.append(" and b.code <= '"+clientInfo.getLClientNOEnd()+"'");
 		}
 		m_sbOrderBy = new StringBuffer();
 		m_sbOrderBy.append("order by b.code asc");
 	}	
    
	public Collection query_enterpriseMemoInfo(ClientInfo clientinfo) throws Exception
	{
		EnterpriseMemoInfo info = null;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Collection vReturn = new ArrayList();
		StringBuffer sbSQL = new StringBuffer();
		try
		{   
		
			
			
			
			con = Database.getConnection();
			sbSQL.append(" SELECT a.eventrecordno,a.eventdate,a.memodescribe,a.abstract,b.code,b.name,a.clientid,a.id,a.describedetail,b.id client_info_id \n");
			sbSQL.append(" FROM ( select * from client_clientinfo where client_clientinfo.statusid = 1 ) b , ");
			sbSQL.append("( select * from Client_EnterpriseMemo where Client_EnterpriseMemo.statusid = 1 ) a ");
			sbSQL.append(" WHERE a.clientid(+) = b.id and b.code='"+clientinfo.getCode()+"' and b.clientbasetype = '1' and b.officeid ="+clientinfo.getOfficeID()+" ");
			sbSQL.append("order by a.eventdate asc"); 
			System.out.print("SQL="+sbSQL);
			ps = con.prepareStatement(sbSQL.toString());
			rs = ps.executeQuery();
	         	
			while(rs.next())
			{     
				info = new EnterpriseMemoInfo();
				info.setEventRecordNo((rs.getString("eventrecordno")));	
				info.setEventDate((rs.getTimestamp("eventdate")));
				info.setMemoDescribe((rs.getString("memodescribe")));
				info.setAbstract(rs.getString("abstract"));
				info.setClientID(rs.getLong("clientid"));
				info.setId(rs.getLong("id"));
				info.setDescribedetail(rs.getString("describedetail"));
				info.setClient_info_id(rs.getLong("client_info_id"));
			    vReturn.add(info);	
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		}
		catch (Exception e)
		{
			throw new IException("查询出现异常");
		}
		finally
		{
			try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				throw new IException("Gen_E001");
			}
		}
		return vReturn;
		
		
	}
}
