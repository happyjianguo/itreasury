/* Generated by Together */

package com.iss.itreasury.clientmanage.systemset.clientattribute.bizlogic;

import java.sql.Connection;
import java.util.Collection;
import java.util.Vector;

import com.iss.itreasury.clientmanage.systemset.clientattribute.dao.ClientAttributeDAO;
import com.iss.itreasury.clientmanage.systemset.clientattribute.dataentity.ClientAttributeInfo;
import com.iss.itreasury.command.Command;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.settlement.base.SettlementException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.Log;

public class ClientAttributeCmd extends Command{
    /**
     *增加一条记录，增加以前，检查是否有相同AttributeID的记录存在
     * 如果已经存在，不允许增加记录
     * @throws Exception
     * 
     * */
    public long add(ClientAttributeInfo dataEntity) throws Exception {
    	Connection con = null;
    	ClientAttributeDAO clientattributedao = null;
    	long lReturn = -1;
    	
    	try
		{
    		con = Database.getConnection();
    		clientattributedao = new ClientAttributeDAO(con);
    		if(clientattributedao.checkByAttributeID(dataEntity)>0)
			{
    			lReturn = 2;     //录入错误，AttributeID已存在
			}
    		else
    		{
    			lReturn = clientattributedao.insertClientAttribute(dataEntity);
    		}
		}
    	catch(Exception e)
		{
    		if (con != null)
			{
				con.close();
				con = null;
			}
		}
    	finally
		{
    		try
			{
    			if (con != null)
    			{
    				con.close();
    				con = null;
    			}
			}
    		catch(Exception ex)
			{
    			throw new Exception(ex.getMessage());
			}
		}
    	return (lReturn);
    }
    /**
     * 删除扩展属性(更新其状态)
     * @param id
     * @throws Exception
     */
	public void delete(long id) throws Exception
	{
		ClientAttributeInfo info = new ClientAttributeInfo();
		info.setId(id);
		info.setStatusID(Constant.RecordStatus.INVALID);
		
		Connection con = null;
    	ClientAttributeDAO dao = null;
		try
		{
			con = Database.getConnection();
    		dao = new ClientAttributeDAO(con);
    		
			dao.update(info);
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new SettlementException();
		}
		finally
		{
			try
			{
				if(con != null)
				{
					con.close();
					con = null;
				}
			} 
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
	}

	/**
     *数据库中是否有相同AttrubuteID的记录存在
     * @return  true(exists) or false(not exists)
     * */
    public boolean exists(String attributeID){
    	return false;

    }

    /**
     *修改一条客户属性设置信息
     * @throws Exception
     * */
    public long update(ClientAttributeInfo dataEntity) throws Exception {
    	Connection con = null;
    	ClientAttributeDAO clientattributedao = null;
    	long lReturn = -1;
    	
    	try
		{
    		con = Database.getConnection();
    		clientattributedao = new ClientAttributeDAO(con);
    		lReturn = clientattributedao.saveClientAttribute(dataEntity);
		}
    	catch(Exception e)
		{
    		if(con != null)
    		{
    			con.close();
    			con = null;
    		}
		}
    	finally
		{
    		try
			{
    			if (con != null)
    			{
    				con.close();
    				con = null;
    			}
			}
    		catch(Exception ex)
			{
    			throw new Exception(ex.getMessage());
			}
		}
    	return (lReturn);
    }

    /**
     *根据条件查询客户属性设置信息
     * @throws Exception
     * */
    public Vector findByCondition(long StatusID) throws Exception{
    	Connection con = null;
    	ClientAttributeDAO clientattributedao = null;
    	Vector v = new Vector();
    	
    	try
		{
    		con = Database.getConnection();
    		clientattributedao = new ClientAttributeDAO(con);
    		
    		v = clientattributedao.findCustomFieldInfo(StatusID);
    		
    		con.close();
    		con = null;
		}
    	catch(Exception e)
		{
    		if(con != null)
    		{
    			con.close();
    			con = null;
    		}
		}   	
    	finally
		{
    		try
			{
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
    	return (v);
    }
    
    public Vector findByCondition(long StatusID, long officeID,long currencyID) throws Exception{
    	Connection con = null;
    	ClientAttributeDAO clientattributedao = null;
    	Vector v = new Vector();
    	
    	try
		{
    		con = Database.getConnection();
    		clientattributedao = new ClientAttributeDAO(con);
    		
    		v = clientattributedao.findCustomFieldInfo(StatusID, officeID,currencyID);
    		
    		con.close();
    		con = null;
		}
    	catch(Exception e)
		{
    		if(con != null)
    		{
    			con.close();
    			con = null;
    		}
		}   	
    	finally
		{
    		try
			{
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
    	return (v);
    }
    /**
     * 
     * @author chuanliu
     *
     * TODO To change the template for this generated type comment go to
     * Window - Preferences - Java - Code Style - Code Templates
     */
    public Vector findByAttributeID(long AttributeID) throws Exception
	{
    	Connection con = null;
    	ClientAttributeDAO clientattributedao = null;
    	Vector v = new Vector();
    	
    	try
		{
    		con = Database.getConnection();
    		clientattributedao = new ClientAttributeDAO(con);
    		
    		v = clientattributedao.findAttributeSetInfo(AttributeID);
    		
    		con.close();
    		con = null;
		}
    	catch(Exception e)
		{
    		if(con != null)
    		{
    			con.close();
    			con = null;
    		}
		}   	
    	finally
		{
    		try
			{
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
    	return (v);
	}
    
    public Vector findByAttributeID(long AttributeID, long officeID,long currencyID) throws Exception
	{
    	Connection con = null;
    	ClientAttributeDAO clientattributedao = null;
    	Vector v = new Vector();
    	
    	try
		{
    		con = Database.getConnection();
    		clientattributedao = new ClientAttributeDAO(con);
    		
    		v = clientattributedao.findAttributeSetInfo(AttributeID, officeID,currencyID);
    		
    		con.close();
    		con = null;
		}
    	catch(Exception e)
		{
    		if(con != null)
    		{
    			con.close();
    			con = null;
    		}
		}   	
    	finally
		{
    		try
			{
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
    	return (v);
	}
	/**
     * 根据扩展属性类型查询扩展属性
     * @param lAttributeTypeID
     * @return
     * @throws SettlementException
     */
	public Collection findByAttrID(long lAttributeID) throws Exception
	{
		ClientAttributeInfo info = new ClientAttributeInfo();
		info.setAttributeID(lAttributeID);
		info.setStatusID(Constant.RecordStatus.VALID);
		
		Connection con = null;
    	ClientAttributeDAO dao = null;
		try
		{
			con = Database.getConnection();
    		dao = new ClientAttributeDAO(con);
    		
			return dao.findByCondition(info,"order by InputDate desc");		
		} 
		catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new SettlementException();
		}
		finally
		{
			try
			{
				if(con != null)
				{
					con.close();
					con = null;
				}
			} 
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
	}
	/**
     * 根据扩展属性ID得到属性信息
     * @param id
     * @return
     * @throws SettlementException
     */
	public ClientAttributeInfo findByID(long id) throws Exception
	{
		Connection con = null;
    	ClientAttributeDAO dao = null;
		try
		{
			con = Database.getConnection();
    		dao = new ClientAttributeDAO(con);
    		
			return (ClientAttributeInfo)dao.findByID(id,(new ClientAttributeInfo()).getClass());
		} 
		catch (Exception e)
		{
			e.printStackTrace();
			throw new SettlementException();
		}
		finally
		{
			try
			{
				if(con != null)
				{
					con.close();
					con = null;
				}
			} 
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
	}
	/**
     * 新增或修改扩展属性:根据info里的ID,如果大于-1则是修改,否则新增
     * @param info
     * @return 新增或修改的扩展属性ID,0表示属性名已存在
     * @throws SettlementException
     */
	public long save(ClientAttributeInfo info) throws Exception
	{
		long returnLong = -1;
		Connection con = null;
		ClientAttributeDAO dao = null;
		try
		{
//			先根据扩展属性名称判断此属性名称是否已经存在
			ClientAttributeInfo tmpInfo = new ClientAttributeInfo();
			tmpInfo.setAttributeID(info.getAttributeID());
			tmpInfo.setName(info.getName());
			tmpInfo.setStatusID(Constant.RecordStatus.VALID);
			Collection c = dao.findByCondition(tmpInfo);
			System.out.println("============>获得collection");
			if (c!=null && c.size()>0)
			{
				//如果是新增操作,直接抛出异常
				if (info.getId()==-1)
				{
					System.out.println("============>判断为新增");
					return 0;
				}
				else
				{
					//如果查出的信息的ID不是要修改的此条信息
					if (((ClientAttributeInfo)c.iterator().next()).getId()!=info.getId())
					{
						Log.print("已经存在此扩展属性名称====ID:"+info.getId());
						Log.print("需要修改的====ID:"+((ClientAttributeInfo)c.iterator().next()).getId());
						return 0;
					}
				}
			}
			//判断结束
				
			if (info.getId()!=-1)//更新操作
			{
				System.out.println("============>进行更新操作");
				dao.update(info);
				returnLong = info.getId();
			}
			else//新增
			{
				System.out.println("============>进行新增");
				returnLong = dao.add(info);
			}
		}catch(ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new SettlementException();
		}
		finally
		{
			try
			{
				if(con != null)
				{
					con.close();
					con = null;
				}
			} 
			catch (Exception ex)
			{
				throw new Exception(ex.getMessage());
			}
		}
		return returnLong;
	}
	/**
	 * @param checkIds
	 * @param attributeID
	 */
	public void deleteName(String[] checkIds) throws Exception
	{
		Connection con = null;
		ClientAttributeDAO clientattributedao = null;
		ClientAttributeInfo info = new ClientAttributeInfo();
		for(int i = 0; checkIds != null && i < checkIds.length; i++)
		{
			info.setId(Long.parseLong(checkIds[i]));	
			try
			{
				con = Database.getConnection();
				clientattributedao = new ClientAttributeDAO(con);
				clientattributedao.deleteName(info);
    		
				con.close();
				con = null;
			}
		
			catch(Exception e)
			{
				if(con != null)
				{
					con.close();
					con = null;
				}
			}   	
			finally
			{
				try
				{
					if (con != null)
					{
						con.close();
						con = null;
					}
				}
				catch (Exception ex)
				{
					throw new Exception(ex.getMessage());
				}
			}
		}
	}
	
	 public  String  getAttributename(long id) throws Exception
	    {	
	    	String str="";
	    	Connection con = null;
	    	try{
	    	con = Database.getConnection();
	    	str = new ClientAttributeDAO(con).getAttributename(id);
	    	return str;
	    	}catch (Exception ex){
	    		ex.printStackTrace();
	    		throw ex;
	    	}finally{
	    		clearConn(con);
	    	}
	    }
}
