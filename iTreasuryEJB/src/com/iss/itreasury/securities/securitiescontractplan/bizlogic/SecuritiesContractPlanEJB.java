package com.iss.itreasury.securities.securitiescontractplan.bizlogic;

import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.securities.securitiescontractplan.dao.*;
import com.iss.itreasury.securities.securitiescontract.dataentity.*;
import com.iss.itreasury.securities.securitiescontractplan.dataentity.*;
import com.iss.itreasury.securities.exception.*;
import com.iss.itreasury.securities.util.*;
import com.iss.itreasury.system.approval.bizlogic.*;
import com.iss.itreasury.system.approval.dataentity.*;
import com.iss.itreasury.util.*;

import java.util.*;
/**
 * Created 2004-3-15 15:01:53
 * Code generated by the Sun ONE Studio EJB Builder
 * @author cpf
 */


public class SecuritiesContractPlanEJB implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;
    
    
    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context=aContext;
    }
    
    
    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {
        
    }
    
    
    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
        
    }
    
    
    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {
        
    }
    
    
    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate( ) throws javax.ejb.CreateException {
        
    }
	
	/**
	 * 修改执行计划-查找合同
	 * @param qInfo
	 * @return
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */    
	public java.util.Collection findByMultiOption(SecuritiesContractQueryInfo qInfo) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDao dao = new SecuritiesContractPlanDao();
		Collection c=null;
		try
		{
			c=dao.findContractByMultiOption( qInfo );
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}
		return c;
	}

	/**
	 * 根据合同查找合同的版本列表
	 * @param lID
	 * @return
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public java.util.Collection findPlanVerByContract(long lID) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDao dao = new SecuritiesContractPlanDao();
		Collection c=null;
		try
		{
			c=dao.findPlanVerByContract( lID );
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}
		return c;

	}
	
	/**
	 * 根据执行计划版本查找该版本计划明细列表
	 * @param lID
	 * @return
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public java.util.Collection findPlanDetailByVer(long lID) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDetailDao dao = new SecuritiesContractPlanDetailDao();
		Collection c=null;
		try
		{
			c=dao.findPlanDetailByVer( lID );
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}
		return c;
	}
	
	/**
	 * 根据合同查找最新版本的计划明细
	 * @param lID
	 * @return
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public java.util.Collection findPlanDetailByContract(long lID) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDao dao = new SecuritiesContractPlanDao();
		Collection c=null;
		try
		{
			c=dao.findPlanDetailByContract( lID );
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}
		return c;

	}
	
	public SecuritiesContractPlanVersionInfo findLastPlanVersionByContract(long lID) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDao dao = new SecuritiesContractPlanDao();
		SecuritiesContractPlanVersionInfo c = null;
		try
		{
			 c=dao.findLastPlanVersionByContract( lID );
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}
		return c;
	}
	/**
	 * 根据明细ID查找明细的详细内容
	 * @param lID
	 * @return
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public SecuritiesContractPlanDetailInfo findByID(long lID) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDetailDao dao = new SecuritiesContractPlanDetailDao();
		SecuritiesContractPlanDetailInfo c=new SecuritiesContractPlanDetailInfo();
		try
		{
			c=(SecuritiesContractPlanDetailInfo)dao.findByID( lID,c.getClass());
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}
		return c;

	}
	
	/**
	 * 自动安排计划
	 * @param autoInfo
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public void autoSavePlan(SecuritiesContractAutoPlanInfo autoInfo) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDao dao = new SecuritiesContractPlanDao();
		try
		{
			dao.autoSavePlanDetail( autoInfo );
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}

		
	}
	
	/**
	 * 保存计划明细，包括新增和修改
	 * @param c
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public void savePlanDetail(java.util.Collection c) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDetailDao dao = new SecuritiesContractPlanDetailDao();
		ArrayList aList=(ArrayList)c;
		dao.setUseMaxID() ;
		try
		{
			for (int i=0;i<aList.size();i++)
			{
				SecuritiesContractPlanDetailInfo info = (SecuritiesContractPlanDetailInfo)aList.get(i);
				if (info.getId()<0)
				{
					dao.add(info);		
				}
				else
				{
					dao.update( info );
				}
			}
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}
	}
	
	/**
	 * 删除计划明细，支持批量删除
	 * @param lID
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public void deletePlanDetail(long lID[]) throws java.rmi.RemoteException,SecuritiesException
	{
		SecuritiesContractPlanDetailDao dao = new SecuritiesContractPlanDetailDao();
		
		try
		{
			for (int i=0;i<lID.length;i++)
			{
				if (lID[i]<=0) break;
				dao.delete(lID[i]);		
			}
		} catch (ITreasuryDAOException e)
		{
			e.printStackTrace();
			throw new SecuritiesException();
		}		
	}
	
	/**
	 * 在从就版本修改时需要先生成一个新版本并复制明细，然后修改新版本的明细
	 * @param lID
	 * @param lContractID
	 * @return
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public long createPlanVersion(long lID,long lContractID) throws java.rmi.RemoteException,SecuritiesException
	{
		return -1;
	}
	
	/**
	 * 审核执行计划修改
	 * @param atInfo
	 * @return
	 * @throws java.rmi.RemoteException
	 * @throws SecuritiesException
	 */
	public long checkPlan(ApprovalTracingInfo atInfo) throws java.rmi.RemoteException,SecuritiesException    
	{
		SecuritiesContractPlanDao dao = new SecuritiesContractPlanDao();

		long lCount = 0;
		long lSerialID = -1; 
		long lStatusID = -1;
		long lResultID = -1;
		long[] lApprovalContentIDList;

		//模块类型
		long lModuleID = atInfo.getModuleID();
		//业务类型
		long lLoanTypeID = atInfo.getLoanTypeID();
		//操作类型
		long lActionID = atInfo.getActionID();
		
		long lApprovalContentID = atInfo.getApprovalContentID();
		long lNextUserID = atInfo.getNextUserID();
		long lApprovalID = atInfo.getApprovalID();
		long lUserID = atInfo.getInputUserID();
		
		//zpli add 2005-09-14
		long lOfficeID=atInfo.getOfficeID();
		long lCurrencyID=atInfo.getCurrencyID();
		////
		
		String sOpinion = atInfo.getOpinion();

		ApprovalTracingInfo info = new ApprovalTracingInfo();
		ApprovalBiz appbiz = new ApprovalBiz();
		
		lApprovalContentIDList = atInfo.getApprovalContentIDList();
		System.out.println("_______________________1");
		if (lApprovalContentIDList.length > 0)
		{
			try {
				//获得ApprovalID
				if (lApprovalID<0){
					
					//zpli modify 2005-09-14
					lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
					//lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID);
				}
				System.out.println(lApprovalID);
			} catch (Exception e1) {
	
				e1.printStackTrace();
			}
	        
			//处理审批意见
			if (atInfo.getCheckActionID() == SECConstant.Actions.REJECT) //拒绝
			{				
				//审批意见状态
				lStatusID = Constant.RecordStatus.VALID;
				//审批操作类型
				lResultID = Constant.ApprovalDecision.REFUSE;							
			}
			if (atInfo.getCheckActionID() == SECConstant.Actions.CHECK) //审批
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;				
			}	
			if (atInfo.getCheckActionID() == SECConstant.Actions.CHECKOVER) //审批&&最后
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.FINISH;				
				//审批完成后需要做的操作
			}
			if (atInfo.getCheckActionID() == SECConstant.Actions.RETURN) //修改
			{
				lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.RETURN;				
			}
			atInfo.setApprovalID(lApprovalID);
			atInfo.setResultID(lResultID);
			atInfo.setStatusID(lStatusID);
			System.out.println("_______________________2");
			lCount = lApprovalContentIDList.length;
			for(int i=0; i<lCount; i++)
			{
				if (lApprovalContentIDList[i] > 0)
				{
					atInfo.setApprovalContentID(lApprovalContentIDList[i]);
					Log.print("atInfo.getApprovalContentID()="+atInfo.getApprovalContentID());
				}
				else
				{
					break;
				}
				//审核申请书
				dao.check(atInfo);				
				System.out.println("_______________________3");
				try {
					System.out.println("_______________________5");
					appbiz.saveApprovalTracing(atInfo);
					System.out.println("_______________________6");
				} catch (Exception e) {
	
					e.printStackTrace();
					throw new java.rmi.RemoteException();
				}
				System.out.println("_______________________7");
			}
			System.out.println("_______________________8");
		}
		return 1;
	}
	
	public long createPlanVersion(long lID, long lContractID, long lUserID, long lOfficeID) throws java.rmi.RemoteException
	{
		long ver=-1;
		SecuritiesContractPlanDao sDao = new SecuritiesContractPlanDao();
		
		try
		{
			ver=sDao.createPlanVersion( lID,lContractID,lUserID,lOfficeID);
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new java.rmi.RemoteException("");
		}
		return ver;	
	}
	public long createTempPlanVersion(long lID, long lContractID, long lUserID, long lOfficeID) throws java.rmi.RemoteException
	{
		long ver=-1;
		SecuritiesContractPlanDao sDao = new SecuritiesContractPlanDao();
		
		try
		{
			ver=sDao.createPlanVersion( lID,lContractID,lUserID,lOfficeID);
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new java.rmi.RemoteException("");
		}
		return ver;	
	}

}
