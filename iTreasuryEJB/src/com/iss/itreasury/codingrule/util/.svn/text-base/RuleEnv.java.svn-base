/* Generated by Together */
/* Author:YanLiu */

package com.iss.itreasury.codingrule.util;
import java.io.File;
import java.util.Iterator;
import java.util.Properties;
import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Collection;
import java.io.FileInputStream;
import com.iss.itreasury.codingrule.util.XMLParseHelper;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import com.iss.itreasury.codingrule.dataentity.CodingSectInfo;
import com.iss.itreasury.codingrule.dataentity.ReturnFormatInfo;
import com.iss.itreasury.configtool.configmanage.dataentity.ConfigItemInfo;
import com.iss.itreasury.util.ITreasuryBaseDataEntity;

import java.util.Vector;
import java.util.HashMap;

public class RuleEnv
{
	private static RuleEnv instance = new RuleEnv();
	//xml配置文件路径
	private static final String configFilePath = ".config/";
	//xml配置文件名
	private static final String configFileName = "codingrule.xml";
    private static final String paraListFileName = "codingrule_paralist.xml";
	//xml配置文件的文件对象变量
	private  File xmlFile = null;
	private  File paraFile = null;
	//xml配置文件的最后修改日期
	private  long lastModifiedTime = 0;
	private long lastModifiedTime1 = 0;
	private  long lastModifiedTimePara = 0;

    //xml配置文件所对应的编码类型和返回格式,key值为id,value对象为CodingSectInfo和ReturnFormatInfo
	public  HashMap CodingSects = new HashMap();
    public  HashMap returnFormats = new HashMap();
    //参数列表文件所对应的String数组
    public  String[] paraList = null;
    private  ArrayList resultSectInfo =new ArrayList();
    private  ArrayList resultFormatInfo =new ArrayList();
    private  String param="";
    public static RuleEnv getInstance()
	{
    	return instance;
	}

	private RuleEnv()
	{		
		xmlFile = new File(configFilePath+configFileName);
		paraFile = new File(configFilePath+paraListFileName);
		//lastModifiedTime = xmlFile.lastModified();
		//lastModifiedTimePara = paraFile.lastModified();
		try
		{
           // FileInputStream input = XMLParseHelper.loadConfig(configFilePath+configFileName);
			//Document node = XMLParseHelper.parse(input);
			this.getCodingSects();
            this.getReturnFormats();
            this.getParamList();

			//input.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

    public  HashMap getCodingSects()
    {
		try
        {
			//判断是否存在
			if (!xmlFile.exists())
			{
				System.err.println(configFileName + " file does exist !");
				CodingSects = null;
				lastModifiedTime = 0;
			}
			else
			{
				// 检查xml文件是否被修改过
				long newTime = xmlFile.lastModified();
				// 如果是，读取xml文件
				if (newTime == 0)
				{
					CodingSects = null;
				}
	            //如果xml文件被修改过或者第一次调用该方法,重新读取
				else if (newTime > lastModifiedTime)
				{
					CodingSects = new HashMap();
					resultSectInfo =new ArrayList();
					FileInputStream input = XMLParseHelper.loadConfig(configFilePath+configFileName);
					Document node = XMLParseHelper.parse(input);
					CodingSects = parseToCodingSect(node);
	
					lastModifiedTime = newTime;
					input.close();
				}
			}
		}
		catch (Exception e)
		{
		   e .printStackTrace();
		}
		return CodingSects;
    }

    public HashMap getReturnFormats()
    {
		try
        {
			//判断是否存在
			if (!xmlFile.exists())
			{
				System.err.println(configFileName + " file does exist !");
				returnFormats = null;
				lastModifiedTime= 0;
			}
			else
			{
				// 检查xml文件是否被修改过
				long newTime = xmlFile.lastModified();
				// 如果是，读取xml文件
				if (newTime == 0)
				{
					returnFormats = null;
				}
	            //如果xml文件被修改过或者第一次调用该方法,重新读取
				else if (newTime >lastModifiedTime1 )
				{
					returnFormats = new HashMap();
					resultFormatInfo =new ArrayList();
					FileInputStream input = XMLParseHelper.loadConfig(configFilePath+configFileName);
					Document node = XMLParseHelper.parse(input);
					returnFormats = parseToReturnFormat(node);
	
					lastModifiedTime1 = newTime;
					input.close();
				}
			}
		}
		catch (Exception e)
		{
		   e .printStackTrace();
		}
		return returnFormats;
    }
    
    public String[] getParamList()
    {
    	try
    	{
    		//判断是否存在
			if (!paraFile.exists())
			{
				System.err.println(paraFile + " file does exist !");
				paraList = null;
				lastModifiedTimePara = 0;
			}
			else
			{
		    	//    	 检查xml文件是否被修改过
				long newTime = paraFile.lastModified();
				// 如果是，读取xml文件
				if (newTime == 0)
				{
					paraList = null;
				}
		        //如果xml文件被修改过或者第一次调用该方法,重新读取
				else if (newTime >lastModifiedTimePara)
				{
					param="";
					FileInputStream input = XMLParseHelper.loadConfig(configFilePath+paraListFileName);
					Document node = XMLParseHelper.parse(input);
					paraList = parseToParaList(node);
		
					lastModifiedTimePara = newTime;
					input.close();
				}
			}
    	}
		catch (Exception e)
		{
		   e .printStackTrace();
		}
		return paraList;
    }
   /*
	 * 将xml文件解析为CodingSectInfo对象数组
	 * 描述:1.将xml文件解析为CodingSectInfo对象数组  2.将数组赋予静态变量CodingSects
	 * @param       Node      			Dom解析器解析出的Document对象
	 * @return      Collection        	CodingSectInfo对象集合
	 */
    private HashMap parseToCodingSect(Node node) throws Exception
	{
		//CodingSectInfo info = new CodingSectInfo();
        HashMap m_Return = new HashMap();
        
        traverseCodingSect(node,null);
		if(resultSectInfo!=null && resultSectInfo.size()>0)
		{  
			//System.out.println("resultSectInfo.size:"+resultSectInfo.size());
			for(Iterator it=resultSectInfo.iterator();it.hasNext();)
			{	
				CodingSectInfo codingsectinfo =(CodingSectInfo)it.next();
				//System.out.println("=========:"+codingsectinfo.getStrparaType());
				if(codingsectinfo.getStrparaType().length()>0)
				{
					codingsectinfo.setParaType(codingsectinfo.getStrparaType().substring(0, codingsectinfo.getStrparaType().length()-1).split(";"));
				}
				//System.out.println("=========:"+codingsectinfo.getStrparaType());
				if(codingsectinfo.getStrparaValue().length()>0)
				{
					codingsectinfo.setParaValue(codingsectinfo.getStrparaValue().substring(0, codingsectinfo.getStrparaValue().length()-1).split(";"));
				}
				m_Return.put(String.valueOf(codingsectinfo.getId()), codingsectinfo);
			}
		}
        //处理逻辑
        return m_Return;
	}

   /*
	 * 将xml文件解析为ReturnFormatInfo对象数组
	 * 描述:1.将xml文件解析为ReturnFormatInfo对象数组  2.将数组赋予静态变量returnFormats
	 * @param       Node      			Dom解析器解析出的Document对象
	 * @return      Collection        	ReturnFormatInfo对象集合
	 */
    private HashMap parseToReturnFormat(Node node) throws Exception
	{
		// ReturnFormatInfo info = new ReturnFormatInfo();
         HashMap m_Return = new HashMap();
        traverseReturnFormat(node,null);
		if(resultFormatInfo!=null && resultFormatInfo.size()>0)
		{
			//System.out.println("returnformatinfo.size:"+resultFormatInfo.size());
			for(Iterator it=resultFormatInfo.iterator();it.hasNext();)
			{	
				ReturnFormatInfo returnformatinfo =(ReturnFormatInfo)it.next();
				m_Return.put(String.valueOf(returnformatinfo.getFormat_type()), returnformatinfo);
			}
		}
         //处理逻辑
         return m_Return;
	}

	   /*
	 * 将参数xml文件解析为String数组
	 * 描述:1.将xml文件解析为String数组  2.将数组赋予静态变量paraList
	 * @param       Node      			Dom解析器解析出的Document对象
	 * @return      String[]        	ReturnFormatInfo对象集合
	 */
    private String[] parseToParaList(Node node) throws Exception
	{
		 String[] paraList = null;
		 traverseParaList(node);
		 if(param!=null && param.length()>0)
		 { 
			// System.out.println("param:"+param);
			 paraList=param.substring(0, param.length()-1).split(";");
		 }
         //处理逻辑
         return paraList;
	}
    
    /**
	 * 将响应返回的XML文件解析成对象
	 * @param node
	 * @param info
	 * @throws Exception
	 */
	private void traverseCodingSect(Node node, CodingSectInfo info) throws Exception
	{
		short type = node.getNodeType();
		switch (type)
		{
			case Node.DOCUMENT_NODE :
				{
					Document document = (Document) node;
					traverseCodingSect(document.getDocumentElement(), info);
					break;
				}

			case Node.ELEMENT_NODE :
				{
					Node child = node.getFirstChild();
					while (child != null)
					{
						if ("codingtypeitem".equals(child.getNodeName()))
						{ //如果是一个账户信息
							info = new CodingSectInfo(); //new 一个新的信息类
							traverseCodingSect(child, info); //结息账户信息
							resultSectInfo.add(info);
							info = null;
						}
						else
						{
							traverseCodingSect(child, info);
						}

						child = child.getNextSibling();
					}
					break;
				}
			case Node.TEXT_NODE :
				{
					/**
					 * 如果账户交易信息AccountTransactionInfo对象不为null
					 * 
					 * 则检测是否存在账户明细交易信息节点,存在则赋值
					 */

					//
					if (info != null && "id".equals(node.getParentNode().getNodeName()))
					{ //
						info.setId(Long.valueOf(node.getNodeValue()).longValue());
					}
					else if (info != null && "name".equals(node.getParentNode().getNodeName()))
					{ //
						info.setName(node.getNodeValue());
					}
					else if (info != null && "desc".equals(node.getParentNode().getNodeName()))
					{ //
						info.setDesc(node.getNodeValue());
					}
					else if (info != null && "value_type".equals(node.getParentNode().getNodeName()))
					{ //
						info.setValue_type(Long.valueOf(node.getNodeValue()).longValue());
					}
					else if (info != null && "sql_string".equals(node.getParentNode().getNodeName()))
					{ //
						info.setSql_string(node.getNodeValue());
					}
					//参数用分号分隔
					else if (info != null && "paratype".equals(node.getParentNode().getNodeName()))
					{ //
						info.setStrparaType(info.getStrparaType()+node.getNodeValue()+";");
					}
					else if (info != null && "value_return".equals(node.getParentNode().getNodeName()))
					{ //
						info.setValue_return(node.getNodeValue());
					}
					else if (info != null && "format_type".equals(node.getParentNode().getNodeName()))
					{ //
						info.setFormat_type(Long.valueOf(node.getNodeValue()).longValue());
					}
					else if (info != null && "method_class".equals(node.getParentNode().getNodeName()))
					{ //
						info.setMethod_class(node.getNodeValue());
					}
					else if (info != null && "method_name".equals(node.getParentNode().getNodeName()))
					{ //
						info.setMethod_name(node.getNodeValue());
					}
					//用分号分隔
					else if (info != null && "paravalue".equals(node.getParentNode().getNodeName()))
					{ //
						info.setStrparaValue(info.getStrparaValue()+node.getNodeValue()+";");
					}
					break;
				}
		}
		
	}
	 /**
	 * 将响应返回的XML文件解析成对象
	 * @param node
	 * @param info
	 * @throws Exception
	 */
	private void traverseReturnFormat(Node node, ReturnFormatInfo info) throws Exception
	{
		HashMap resultSet =new HashMap();
		short type = node.getNodeType();
		switch (type)
		{
			case Node.DOCUMENT_NODE :
				{
					Document document = (Document) node;
					traverseReturnFormat(document.getDocumentElement(), info);
					break;
				}

			case Node.ELEMENT_NODE :
				{
					Node child = node.getFirstChild();
					while (child != null)
					{
						if ("formatitem".equals(child.getNodeName()))
						{ //如果是一个账户信息
							info = new ReturnFormatInfo(); //new 一个新的信息类
							traverseReturnFormat(child, info); //结息账户信息
							resultFormatInfo.add(info);
							info = null;
						}
						else
						{
							traverseReturnFormat(child, info);
						}

						child = child.getNextSibling();
					}
					break;
				}
			case Node.TEXT_NODE :
				{
					/**
					 * 如果账户交易信息AccountTransactionInfo对象不为null
					 * 
					 * 则检测是否存在账户明细交易信息节点,存在则赋值
					 */

					//
					if (info != null && "format_type".equals(node.getParentNode().getNodeName()))
					{ //
						info.setFormat_type(Long.valueOf(node.getNodeValue()).longValue());
					}
					else if (info != null && "format_mode".equals(node.getParentNode().getNodeName()))
					{ //
						info.setFormat_mode(node.getNodeValue());
					}
					
					//参数用分号分隔
					else if (info != null && "parameter".equals(node.getParentNode().getNodeName()))
					{ //
						info.setParameter(info.getParameter()+node.getNodeValue()+";");
					}
					
					break;
				}
		}
	}
	/**
	 * 将响应返回的XML文件解析成对象
	 * @param node
	 * @param info
	 * @throws Exception
	 */
	private  void  traverseParaList(Node node) throws Exception
	{	
		short type = node.getNodeType();
		switch (type)
		{
			case Node.DOCUMENT_NODE :
				{
					Document document = (Document) node;
					traverseParaList(document.getDocumentElement());
					break;
				}

			case Node.ELEMENT_NODE :
				{
					Node child = node.getFirstChild();
					while (child != null)
					{
						traverseParaList(child); 
						child = child.getNextSibling();
					}
					break;
				}
			case Node.TEXT_NODE :
				{
					//用分号做分隔
					if ("name".equals(node.getParentNode().getNodeName()))
					{ //
						param=param+node.getNodeValue()+";";
					}
					break;
				}
		}
	
	}
	public static void main(String[] args)
	{
		RuleEnv.getInstance();
	}
}
