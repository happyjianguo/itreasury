package com.iss.itreasury.settlement.transupsave.bizlogic;

//import java.sql.Date;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.HashMap;

import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.settlement.transupsave.dataentity.transupsaveinfo;
import com.iss.itreasury.settlement.transupsave.dao.*;


/* Generated by Together */

public class TransUpSaveBiz {	

	/**
	 * 功能：从银企平台中得到需要处理的Collection，其中Collection中包含的dataEntity为银行交易信息dataEntity
	 * 参数： tsEndDate 截至日期； 
	 */
	public Collection getBankTransFromBS(transupsaveinfo info)
			throws Exception {
		Vector v = new Vector();
		Vector v1= new Vector();
		Collection con=null;
		Iterator it = null;
		long accountid=-1;
	    String accid="";
	    int i=0;
		try {
			
			//查找所有的结算中心账户
			Collection a = null;
			Bs_AcctTransInfoDAO aDao=new Bs_AcctTransInfoDAO(); 
			//System.out.println("$$$$$$$$$$$$$getOfficeID"+info.getOfficeID());
			//System.out.println("$$$$$$$$$$$$$getCurrencyid()"+info.getCurrencyid());
			a=aDao.findByCondition(info.getOfficeID(),info.getCurrencyid(),info.getAccountNO(),info.getStartDt(),info.getEndDt());
      
			//查找已入账的交易信息
			HashMap hpbankTransNo = new HashMap();
			Sett_TransUpRecordDAO turDao = new Sett_TransUpRecordDAO();
			Collection c1 = turDao.findByCondition(info);
			
			if (c1 != null) {
				it = c1.iterator();
				while (it.hasNext()) {
					transupsaveinfo info1 = (transupsaveinfo) it.next();
					hpbankTransNo.put(String.valueOf(info1.getBsID()),String.valueOf(info1.getStatusID()));
				}
			}
			
			
			
//			只返回未入账的交易
			if (a != null) {
//				遍历集合c将已处理过的交易的状态置入集合c的info里，返回一个Vector。
				Iterator iter1 = a.iterator();
				while (iter1.hasNext()) {
					transupsaveinfo info2 = (transupsaveinfo)iter1.next();
					
					if (hpbankTransNo.containsKey(String.valueOf(info2.getBsID()))) {
						String tmp=(String)hpbankTransNo.get(String.valueOf(info2.getBsID()));
						info2.setStatusID(Long.parseLong(tmp));
						//System.out.println(info2);
						v.add(info2);
					}
					else{
						info2.setStatusID(3);
						v.add(info2);
						//System.out.println(info2);
					}
				}
			}
			//根据客户选中的状态返回数据
			con=v;
			if(con!=null){
				Iterator iter1 = a.iterator();
				
					if(info.getStatusID()==-1){
						v1=v;
					}
					else if(info.getStatusID()==1){
						while(iter1.hasNext()){
							transupsaveinfo info3=(transupsaveinfo)iter1.next();
							if(info3.getStatusID()==1){
								v1.add(info3);
								//System.out.println("1111111111111111");
							}
						}
					}
					else if(info.getStatusID()==2){
						while(iter1.hasNext()){
							transupsaveinfo info3=(transupsaveinfo)iter1.next();
							if(info3.getStatusID()==2){
								v1.add(info3);
							}
						}
					}
					else if(info.getStatusID()==3){
						while(iter1.hasNext()){
							transupsaveinfo info3=(transupsaveinfo)iter1.next();
							if(info3.getStatusID()==3){
								v1.add(info3);
							}
						}
					}
				
			}
	
			
		} catch (Exception e) {
			//System.out.println("error:" + e.toString());
		}
		
		return v1.size()>0?v1:null;
	}
	
	//成功的提醒
	public Collection getBankTransSuccessFromBS(transupsaveinfo info)
	throws Exception {
     Vector v = new Vector();
  Vector v1= new Vector();
   Collection con=null;
  Iterator it = null;
   long accountid=-1;
   String accid="";
   int i=0;
try {
	
	//查找所有的结算中心账户
	Collection a = null;
	Bs_AcctTransInfoDAO aDao=new Bs_AcctTransInfoDAO(); 
	//System.out.println("$$$$$$$$$$$$$getOfficeID"+info.getOfficeID());
	//System.out.println("$$$$$$$$$$$$$getCurrencyid()"+info.getCurrencyid());
	//a=aDao.findByCondition(info.getOfficeID(),info.getCurrencyid(),info.getAccountNO(),info.getStartDt(),info.getEndDt());
    a=aDao.findBySuccessCondition(info.getOfficeID(),info.getCurrencyid(),info.getAccountNO(),info.getStartDt(),info.getEndDt());
   // a=aDao.findByFailCondition(info.getOfficeID(),info.getCurrencyid(),info.getAccountNO(),info.getStartDt(),info.getEndDt());
	//查找已入账的交易信息
	HashMap hpbankTransNo = new HashMap();
	Sett_TransUpRecordDAO turDao = new Sett_TransUpRecordDAO();
	//Collection c1 = turDao.findByCondition(info);
	//modify by xwhe 2008-11-20 直接从监控的表里面查找入账成功信息
	Collection c1 = turDao.findByUpRecordInfo(info);
	if (c1 != null) {
		it = c1.iterator();
		while (it.hasNext()) {
			transupsaveinfo info1 = (transupsaveinfo) it.next();
			hpbankTransNo.put(String.valueOf(info1.getBsID()),String.valueOf(info1.getStatusID()));
		}
	}
	
	
	
//	只返回未入账的交易
	if (a != null) {
//		遍历集合c将已处理过的交易的状态置入集合c的info里，返回一个Vector。
		Iterator iter1 = a.iterator();
		while (iter1.hasNext()) {
			transupsaveinfo info2 = (transupsaveinfo)iter1.next();
			
			if (hpbankTransNo.containsKey(String.valueOf(info2.getBsID()))) {
				String tmp=(String)hpbankTransNo.get(String.valueOf(info2.getBsID()));
				info2.setStatusID(Long.parseLong(tmp));
				v.add(info2);
			}
			else{
				info2.setStatusID(3);
				v.add(info2);
			}
		}
	}
	//根据客户选中的状态返回数据
	con=v;
	if(con!=null){
		Iterator iter1 = a.iterator();
		
			if(info.getStatusID()==-1){
				v1=v;
			}
			else if(info.getStatusID()==1){
				while(iter1.hasNext()){
					transupsaveinfo info3=(transupsaveinfo)iter1.next();
					if(info3.getStatusID()==1){
						v1.add(info3);
						//System.out.println("1111111111111111");
					}
				}
			}
			else if(info.getStatusID()==2){
				while(iter1.hasNext()){
					transupsaveinfo info3=(transupsaveinfo)iter1.next();
					if(info3.getStatusID()==2){
						v1.add(info3);
					}
				}
			}
			else if(info.getStatusID()==3){
				while(iter1.hasNext()){
					transupsaveinfo info3=(transupsaveinfo)iter1.next();
					if(info3.getStatusID()==3){
						v1.add(info3);
					}
				}
			}
		
	}

	
} catch (Exception e) {
	//System.out.println("error:" + e.toString());
}

return v1.size()>0?v1:null;
}
	
	
	//失败
	public Collection getBankFailTransFromBS(transupsaveinfo info)
	throws Exception {
    Vector v = new Vector();
    Vector v1= new Vector();
    Collection con=null;
    Iterator it = null;
    long accountid=-1;
    String accid="";
    int i=0;
try {
	
	//查找所有的结算中心账户
	Collection a = null;
	Bs_AcctTransInfoDAO aDao=new Bs_AcctTransInfoDAO(); 
	//System.out.println("$$$$$$$$$$$$$getOfficeID"+info.getOfficeID());
	//System.out.println("$$$$$$$$$$$$$getCurrencyid()"+info.getCurrencyid());
	
    a=aDao.findByFailCondition(info.getOfficeID(),info.getCurrencyid(),info.getAccountNO(),info.getStartDt(),info.getEndDt());
	//查找已入账的交易信息
	HashMap hpbankTransNo = new HashMap();
	Sett_TransUpRecordDAO turDao = new Sett_TransUpRecordDAO();
    //Collection c1 = turDao.findByCondition(info);
	Collection c1 = turDao.findByUpFailRecordInfo(info);
	if (c1 != null) {
		it = c1.iterator();
		while (it.hasNext()) {
			transupsaveinfo info1 = (transupsaveinfo) it.next();
			hpbankTransNo.put(String.valueOf(info1.getBsID()),String.valueOf(info1.getStatusID()));
		}
	}
	
	
	
//	只返回未入账的交易
	if (a != null) {
//		遍历集合c将已处理过的交易的状态置入集合c的info里，返回一个Vector。
		Iterator iter1 = a.iterator();
		while (iter1.hasNext()) {
			transupsaveinfo info2 = (transupsaveinfo)iter1.next();
			
			if (hpbankTransNo.containsKey(String.valueOf(info2.getBsID()))) {
				String tmp=(String)hpbankTransNo.get(String.valueOf(info2.getBsID()));
				info2.setStatusID(Long.parseLong(tmp));		
				v.add(info2);
			}
			else{
				info2.setStatusID(3);
				v.add(info2);
			}
		}
	}
	//根据客户选中的状态返回数据
	con=v;
	if(con!=null){
		Iterator iter1 = a.iterator();
		
			if(info.getStatusID()==-1){
				v1=v;
			}
			else if(info.getStatusID()==1){
				while(iter1.hasNext()){
					transupsaveinfo info3=(transupsaveinfo)iter1.next();
					if(info3.getStatusID()==1){
						v1.add(info3);
						//System.out.println("1111111111111111");
					}
				}
			}
			else if(info.getStatusID()==2){
				while(iter1.hasNext()){
					transupsaveinfo info3=(transupsaveinfo)iter1.next();
					if(info3.getStatusID()==2){
						v1.add(info3);
					}
				}
			}
			else if(info.getStatusID()==3){
				while(iter1.hasNext()){
					transupsaveinfo info3=(transupsaveinfo)iter1.next();
					if(info3.getStatusID()==3){
						v1.add(info3);
					}
				}
			}
		
	}

	
} catch (Exception e) {
	//System.out.println("error:" + e.toString());
}

return v1.size()>0?v1:null;
}	
	
	
	
	
	//	查询一条交易的详细信息
	//根据id先查询表bs_acctHIstransinfo如果没有找到记录再查询表bs_acctcurtransinfo
	public transupsaveinfo findByID(long id) throws ITreasuryDAOException
	{
		transupsaveinfo info=null;
		Bs_AcctTransInfoDAO aDao = new Bs_AcctTransInfoDAO();
		info = aDao.findByID(id);
		return info;
	}
	
	
	
	public static void main(String[] args) 
	{
		try
		{
			transupsaveinfo info=new transupsaveinfo();
			info.setCurrencyid(1);
			info.setOfficeID(1);
			info.setStartDt("2005-01-11");
			info.setEndDt("2006-11-23");
			TransUpSaveBiz biz = new TransUpSaveBiz();	 
			biz.getBankTransFromBS(info);
			//System.out.println(info);
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}