package com.iss.itreasury.settlement.offbalance.bizlogic;

import java.util.Collection;

import com.iss.itreasury.settlement.offbalance.dao.OffBalanceDAO;
import com.iss.itreasury.settlement.offbalance.dataentity.OffBalanceInfo;
import com.iss.itreasury.settlement.offbalance.dataentity.OffBalanceParam;
import com.iss.itreasury.settlement.offbalance.exception.OffBalanceException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Log4j;

/**
 * Created 2004-9-24 23:29:07
 * Code generated by the Sun ONE Studio EJB Builder
 * @author yiwang
 */
public class OffBalanceEJB implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;
    private OffBalanceDAO offBalanceDAO = new OffBalanceDAO();
    private Log4j log4j = new Log4j(Constant.ModuleType.SETTLEMENT, this);

    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context=aContext;
    }

    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
    }

    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {
    }

    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() throws javax.ejb.CreateException {
    }

    /**
     * 保存记录
     * @param  OffBalanceParam parameter
     * @return void
     * @exception throws java.rmi.RemoteException, OffBalanceException
     */
    public void save(OffBalanceParam parameter) throws java.rmi.RemoteException, OffBalanceException {
    	offBalanceDAO.add(parameter);
    }

    /**
     * 修改记录
     * @param  OffBalanceParam parameter
     * @return void
     * @exception throws java.rmi.RemoteException, OffBalanceException
     */
    public void update(OffBalanceParam parameter) throws java.rmi.RemoteException, OffBalanceException {
    	offBalanceDAO.update(parameter);
    }

    /**
     * 删除记录
     * @param  OffBalanceParam parameter
     * @return void
     * @exception throws java.rmi.RemoteException, OffBalanceException
     */
    public void delete(OffBalanceParam parameter) throws java.rmi.RemoteException, OffBalanceException {
    	offBalanceDAO.delete(parameter);
    }

    /**
     * 通过ID查找结果集
     * @param  long id
     * @return OffBalanceInfo
     * @exception throws java.rmi.RemoteException, OffBalanceException
     */
    public OffBalanceInfo findByID(long id) throws java.rmi.RemoteException, OffBalanceException {
    	return offBalanceDAO.findByID(id);
    }

    /**
     * 通过条件查找结果集
     * @param  OffBalanceInfo info
     * @return Collection
     * @exception throws java.rmi.RemoteException, OffBalanceException
     */
    public Collection findByCondition(OffBalanceInfo info, String orderByString) throws java.rmi.RemoteException, OffBalanceException {
    	return offBalanceDAO.findByCondition(info,orderByString);
    }

	/**
	 * 复核
	 * @param  OffBalanceParam parameter
	 * @return void
	 * @exception throws java.rmi.RemoteException, OffBalanceException
	 */
	public void check(OffBalanceParam parameter) throws java.rmi.RemoteException, OffBalanceException {
    	offBalanceDAO.check(parameter);
	}

	/**
	 * 取消复核
	 * @param  OffBalanceParam parameter
	 * @return void
	 * @exception throws java.rmi.RemoteException, OffBalanceException
	 */
	public void cancleCheck(OffBalanceParam parameter) throws java.rmi.RemoteException, OffBalanceException {
    	offBalanceDAO.cancleCheck(parameter);
	}

    /**
     * 检查时间戳
     * 
     * 当录入页面的时间戳与数据库里的不相同时.检查记录状态，给前台打出时间戳不同的原因。
     */
    public OffBalanceInfo checkTimeStamp(OffBalanceParam offBalanceParam) throws  java.rmi.RemoteException, OffBalanceException {
    	return offBalanceDAO.checkTimeStamp(offBalanceParam);
    }

	/**
	 * 表外业务明细账查询
	 * @param  OffBalanceParam parameter
	 * @return Collection
	 * @exception throws java.rmi.RemoteException, OffBalanceException
	 */
    public Collection findTableOutsideDetail(OffBalanceParam parameter,
            String orderByString) throws java.rmi.RemoteException, OffBalanceException {
		return offBalanceDAO.findTableOutsideDetail(parameter,orderByString);
	}

	/**
	 * 表外业务汇总查询
	 * @param  OffBalanceParam parameter
	 * @return Collection
	 * @exception throws java.rmi.RemoteException, OffBalanceException
	 */
	public Collection findTableOutsideCollect(OffBalanceParam parameter) throws java.rmi.RemoteException, OffBalanceException {
		return offBalanceDAO.findTableOutsideCollect(parameter);
	}
}