/* Generated by Together */

package com.iss.itreasury.budget.setting.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;

import com.iss.itreasury.budget.dao.BudgetDAO;
import com.iss.itreasury.budget.exception.BudgetDAOException;
import com.iss.itreasury.budget.setting.dataentity.BudgetClientRelationInfo;
import com.iss.itreasury.dao.ITreasuryDAOException;

/**
 * 
 * @author shantao
 * 
 * @version 1.0 2005-12-16
 */
public class Budget_ClientRelationDAO extends BudgetDAO
{
    public Budget_ClientRelationDAO()
    {
        super("clientrelation");
        super.setUseMaxID();
    }

    /**
     * search method
     * 
     * @return
     * @throws Exception
     */
    public BudgetClientRelationInfo findByID(long id) throws Exception
    {
        BudgetClientRelationInfo info = new BudgetClientRelationInfo();
        ResultSet rs = null;
        try
        {
            this.initDAO();
            StringBuffer buffer = new StringBuffer("");
            //∆¥¥’≤È—Ø”Ôæ‰
            buffer.append(" select a.id,a.clientId,a.parentClientId,");
            buffer.append(" b.scode as clientNo,b.sname as clientName,");
            buffer.append(" c.scode as parentClientNo,c.sname as parentClientName");
            buffer.append(" from clientrelation a,client b,client c");
            buffer.append(" where a.id=" + id);
            buffer.append(" and a.clientid=b.id and a.parentclientid=c.id");

            String sql = buffer.toString();

            System.out.println(sql);

            this.prepareStatement(sql);
            rs = this.executeQuery();

            while (rs.next())
            {
                info = new BudgetClientRelationInfo();
                info.setId(rs.getLong("id"));
                info.setClientId(rs.getLong("clientid"));
                info.setParentClientId(rs.getLong("parentclientid"));
                info.setClientNo(rs.getString("clientNo"));
                info.setClientName(rs.getString("clientName"));
                info.setParentClientNo(rs.getString("parentClientNo"));
                info.setParentClientName(rs.getString("parentClientName"));
            }
        }
        catch (Exception e)
        {
            throw new BudgetDAOException(e.getMessage(), e);
        }
        finally
        {
            try
            {
                this.finalizeDAO();
            }
            catch (ITreasuryDAOException se)
            {
                throw new BudgetDAOException(se.getMessage(), se);
            }
        }

        return info;
    }

    /**
     * search method
     * 
     * @return
     * @throws Exception
     */
    public Collection findAll() throws Exception
    {
        BudgetClientRelationInfo info;
        ArrayList result = new ArrayList();
        ResultSet rs = null;
        try
        {
            this.initDAO();
            StringBuffer buffer = new StringBuffer("");
            //∆¥¥’≤È—Ø”Ôæ‰
            buffer.append(" select a.id,a.clientId,a.parentClientId,");
            buffer.append(" b.scode as clientNo,b.sname as clientName,");
            buffer.append(" c.scode as parentClientNo,c.sname as parentClientName");
            buffer.append(" from clientrelation a,client b,client c");
            buffer.append(" where a.clientid=b.id and a.parentclientid=c.id");
            buffer.append(" order by a.clientId");

            String sql = buffer.toString();

            System.out.println(sql);

            this.prepareStatement(sql);
            rs = this.executeQuery();

            while (rs.next())
            {
                info = new BudgetClientRelationInfo();
                info.setId(rs.getLong("id"));
                info.setClientId(rs.getLong("clientid"));
                info.setParentClientId(rs.getLong("parentclientid"));
                info.setClientNo(rs.getString("clientNo"));
                info.setClientName(rs.getString("clientName"));
                info.setParentClientNo(rs.getString("parentClientNo"));
                info.setParentClientName(rs.getString("parentClientName"));
                //                info.setClientLevel(rs.getLong("clientlevel"));
                result.add(info);
            }
        }
        catch (Exception e)
        {
            throw new BudgetDAOException(e.getMessage(), e);
        }
        finally
        {
            try
            {
                this.finalizeDAO();
            }
            catch (ITreasuryDAOException se)
            {
                throw new BudgetDAOException(se.getMessage(), se);
            }
        }

        return result;
    }

    /**
     * delete method
     * 
     * @param id
     * @throws Exception
     */
    public long delete(String[] id) throws Exception
    {
        long m = -1;
        try
        {
            if (id.length == 0)
                return m;
            this.initDAO();
            StringBuffer buffer = new StringBuffer("");
            buffer.append(" delete from clientrelation where ");
            for (int i = 0; i < id.length - 1; i++)
            {
                buffer.append(" id=" + id[i] + " or");
            }
            buffer.append(" id=" + id[id.length - 1]);

            String sql = buffer.toString();
            this.prepareStatement(sql);
            m = this.executeUpdate();
        }
        catch (Exception e)
        {
            throw new BudgetDAOException(e.getMessage(), e);
        }
        finally
        {
            try
            {
                this.finalizeDAO();
            }
            catch (ITreasuryDAOException se)
            {
                throw new BudgetDAOException(se.getMessage(), se);
            }
        }
        return m;
    }
}