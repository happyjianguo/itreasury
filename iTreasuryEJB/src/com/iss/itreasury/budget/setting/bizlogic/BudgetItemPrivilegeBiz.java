/* Generated by Together */

package com.iss.itreasury.budget.setting.bizlogic;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.iss.itreasury.budget.constitute.dao.Budget_PlanDAO;
import com.iss.itreasury.budget.constitute.dataentity.BudgetPlanInfo;
import com.iss.itreasury.budget.exception.BudgetException;
import com.iss.itreasury.budget.setting.dao.Budget_ItemPrivilegeDAO;
import com.iss.itreasury.budget.setting.dataentity.BudgetItemPrivilegeInfo;
import com.iss.itreasury.budget.setting.dataentity.BudgetPeriodInfo;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.Log;
/**
 * @priority medium*/
public class BudgetItemPrivilegeBiz {

    /**
     * 根据条件查找某体系、某单位的项目权限
     * @param info
     * @return
     * @throws BudgetException
     */
    public Collection findByCondition(BudgetItemPrivilegeInfo info,String panduan)throws BudgetException,Exception
    {
    	PreparedStatement ps = null;
        Connection conn = null;
        StringBuffer sbSQL = null;
        ResultSet rs = null;        
        String sResult = " ";
    	Collection coll=new ArrayList();
    	Budget_ItemPrivilegeDAO dao=new Budget_ItemPrivilegeDAO();
    	try{
    		
    		if(panduan.equals("0")){
    			BudgetItemPrivilegeInfo tmpInfo = new BudgetItemPrivilegeInfo();    			
        		tmpInfo.setBudgetClientID(info.getBudgetClientID());        		
    			tmpInfo.setBudgetSystemID(info.getBudgetSystemID());			
    			tmpInfo.setStatusID(1);
    			coll= dao.findByCondition(tmpInfo);
    		}else if(panduan.equals("1")){
    			conn = Database.getConnection();
                sbSQL = new StringBuffer();
                sbSQL.append(" select distinct budgetclientid,budgetsystemid  from budget_itemprivilege ");               
                sbSQL.append(" where statusid=1");
                if(info.getBudgetSystemID()>0){               	
                	sbSQL.append(" and budgetsystemid="+info.getBudgetSystemID()+"");
                }
                if(info.getBudgetClientID()>0){
                	sbSQL.append(" and budgetclientid="+info.getBudgetClientID()+"");
        		}           
                Log.print(sbSQL.toString());
                ps = conn.prepareStatement(sbSQL.toString());
                rs = ps.executeQuery();  
                
                while (rs.next()){               	
                	BudgetItemPrivilegeInfo tmpInfo1 = new BudgetItemPrivilegeInfo();
                	tmpInfo1.setBudgetClientID(rs.getLong("budgetclientid"));
                	tmpInfo1.setBudgetSystemID(rs.getLong("budgetsystemid"));
                	coll.add(tmpInfo1);
                	
                }
    		}
    		
    	}catch(Exception ex){
    		ex.printStackTrace();
    		throw new BudgetException();
    	}finally{
            if (rs != null){
				rs.close();
				rs = null;
			}
			if (ps != null){
				ps.close();
				ps = null;
			}
			if (conn != null){
                conn.close();
                conn = null;
            }
        }
    	
		return coll;
    }
    
    /**
     * 保存某单位的所有项目权限
     * 检查：如果此单位已经做了预算，则不允许修改
     * 流程：需先删除原来此单位，此体系下所有权限再新增
     * 		如果选择了权限复制的单位，把这些单位这个体系修改为选择的项目，控制此单位的全部账户，账户ID字段-100
     * 注意：此过程需要手动控制事务
     * 		如果没有选择账户，记录账户ID字段为-100，控制此单位的全部账户
     * @param info
     * @return      
     */
    public long save(BudgetItemPrivilegeInfo info) throws BudgetException,Exception {
    	Collection coll=new ArrayList();
    	Collection tempColl=new ArrayList();
    	Connection transConn = null;
    	long retLong=-1;
    	BudgetPlanInfo planInfo=new BudgetPlanInfo();
    	Budget_PlanDAO dao=new Budget_PlanDAO(); 
    	
    	try{
    		try{
    			transConn =Database.getConnection();
    			transConn.setAutoCommit(false);
            }catch (Exception e){
                throw new ITreasuryDAOException("数据库初使化异常发生", e);
            }
 
            Budget_ItemPrivilegeDAO priDao=new Budget_ItemPrivilegeDAO("Budget_ItemPrivilege",transConn);
  
    		//查询预算表里是否已存在此体系下此单位的记录，如存在不能修改
    		planInfo.setBudgetSystemID(info.getBudgetSystemID());
        	planInfo.setClientID(info.getBudgetClientID());        	  
        	coll=dao.findRecord(planInfo);
        	if(!coll.isEmpty()){
        		retLong=-2;//预算表里已有记录，不能提交   		
        	}else{
        		BudgetItemPrivilegeInfo tepInfo=new BudgetItemPrivilegeInfo();
        		tepInfo.setBudgetClientID(info.getBudgetClientID());
        		tepInfo.setBudgetSystemID(info.getBudgetSystemID());
        		tepInfo.setStatusID(1); 
        		tempColl=priDao.findByCondition(tepInfo);
        		//可以新建
        		if(tempColl.isEmpty()){
        			//没有选择复制单位的情况
        			if(info.getCopyClientID()==null){
        				updateItemPrivilege(info,priDao);//执行数据库入库操作
        				//选择复制单位的情况
        			}else{
        				updateItemPrivilege(info,priDao);//执行数据库入库操作
        				for(int n=0;n<info.getCopyClientID().length;n++){
        					//如果复制单位和要新建单位相同则不处理，不同要处理
        					if(Long.parseLong(info.getCopyClientID()[n])!=info.getBudgetClientID()){
        						tepInfo.setBudgetClientID(Long.parseLong(info.getCopyClientID()[n]));
        		        		tepInfo.setBudgetSystemID(info.getBudgetSystemID());
        		        		tepInfo.setStatusID(1);
        		        		tempColl=priDao.findByCondition(tepInfo);
        		        		BudgetItemPrivilegeInfo copyInfo=new BudgetItemPrivilegeInfo();
        		        		if(tempColl.isEmpty()){
        		        			for(int i=0;i<info.getItemID().length;i++){
        		        				copyInfo.setBudgetAccountID(-100);
        		        				copyInfo.setBudgetClientID(Long.parseLong(info.getCopyClientID()[n]));
        		        				copyInfo.setBudgetItemID(Long.parseLong(info.getItemID()[i]));
        		        				copyInfo.setBudgetSystemID(info.getBudgetSystemID());
        		        				copyInfo.setUpdateDate(Env.getSystemDateTime());//最新修改时间入库 
        		        				copyInfo.setInputDate(Env.getSystemDateTime());//最新新建时间		
        		        				copyInfo.setStatusID(1);
        		        				priDao.add(copyInfo);
        							}           		        			
        		        		}else{
        		        			//先删除数据库里原有的记录
        		        			for(Iterator iter=tempColl.iterator();iter.hasNext();){
        		        				BudgetItemPrivilegeInfo reInfo=(BudgetItemPrivilegeInfo)iter.next();
        		        				priDao.delete(reInfo.getId());     		        				
        		        			}
        		        			//新建复制单位的权限
        		        			for(int i=0;i<info.getItemID().length;i++){
        		        				copyInfo.setBudgetAccountID(-100);
        		        				copyInfo.setBudgetClientID(Long.parseLong(info.getCopyClientID()[n]));
        		        				copyInfo.setBudgetItemID(Long.parseLong(info.getItemID()[i]));
        		        				copyInfo.setBudgetSystemID(info.getBudgetSystemID());
        		        				copyInfo.setUpdateDate(Env.getSystemDateTime());//最新修改时间入库 
        		        				copyInfo.setInputDate(Env.getSystemDateTime());//最新新建时间		
        		        				copyInfo.setStatusID(1);
        		        				priDao.add(copyInfo);
        							}   
        		        		}        						
        					}        					
        				}        				
        			}
        			//修改--删除原来存在的记录，重新新建
        		}else{
        			//先删除原来数据库里存在的记录，在新建
        			for(Iterator iter=tempColl.iterator();iter.hasNext();){
        				BudgetItemPrivilegeInfo reInfo=(BudgetItemPrivilegeInfo)iter.next();
        				priDao.delete(reInfo.getId());     		        				
        			}
        			updateItemPrivilege(info,priDao);//执行数据库入库操作        			
        		}
        	}
        	try{
                if (transConn != null){
                    transConn.commit();
                    transConn = null;
                }
            }catch (SQLException e){
                e.printStackTrace();
                throw new ITreasuryDAOException("数据库关闭异常发生", e);
            }
        }catch (Exception e){
            try{
                if (transConn != null){
                    transConn.rollback();
                    transConn = null;
                }
            }catch (Exception es){
                es.printStackTrace();
            }
        }finally{
            try{
                if (transConn != null){
                    transConn.close();
                    transConn = null;
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }    	
    	return retLong;
    }
    
    /**
     * 新建权限记录的公用方法
     * @param info
     * @param priDao
     */
    public static void updateItemPrivilege(BudgetItemPrivilegeInfo info,Budget_ItemPrivilegeDAO priDao){
    	try{
    		//没有选择账户说明单位下的所有账户都有权限  
			if(info.getAccountID()==null){
				//单位下的所有账户都有权限
				if(info.getItemID()!=null){
					for(int i=0;i<info.getItemID().length;i++){
						info.setBudgetAccountID(-100);
						info.setBudgetItemID(Long.parseLong(info.getItemID()[i]));
						info.setUpdateDate(Env.getSystemDateTime());//最新修改时间入库 
						info.setInputDate(Env.getSystemDateTime());//最新新建时间		
						info.setStatusID(1);
						priDao.add(info);												
					}        					
				}          				
			}else{//只有选择的账户才有权限
				for(int m=0;m<info.getAccountID().length;m++){	
					if(info.getItemID()!=null){
    					for(int i=0;i<info.getItemID().length;i++){
    						info.setBudgetAccountID(Long.parseLong(info.getAccountID()[m]));
    						info.setBudgetItemID(Long.parseLong(info.getItemID()[i]));
    						info.setUpdateDate(Env.getSystemDateTime());//最新修改时间入库 
    						info.setInputDate(Env.getSystemDateTime());//最新新建时间		
    						info.setStatusID(1);
    						priDao.add(info);
    					}        					
    				}      					
				}			
			}
    	}catch(Exception ex){ex.printStackTrace();}
    }
   /*public static void main(String[] args){
    	BudgetItemPrivilegeInfo info=new BudgetItemPrivilegeInfo();
    	BudgetItemPrivilegeBiz oper=new BudgetItemPrivilegeBiz();
    	String[] copyClientID={"3","4"};
    	String[] accountID={"5","6","7"};
    	String[] itemID={"1","2"};
    	info.setBudgetSystemID(8);
    	info.setId(-1);
    	info.setBudgetClientID(160);
    	info.setBudgetSystemID(1);
    	//info.setStatusID(1);
    	//info.setBudgetClientID(3);
    	//info.setBudgetClientID(6);
    	//info.setAccountID(accountID);
    	//info.setItemID(itemID);
    	//info.setCopyClientID(copyClientID);
    Collection coll=new ArrayList();
    	try{
    		long mm=oper.save(info);
    		System.out.println(mm+"%^^^^^^^^^^^^");
    		/*for(Iterator iter=coll.iterator();iter.hasNext();){
    			BudgetItemPrivilegeInfo inf=(BudgetItemPrivilegeInfo)iter.next();
    			System.out.println(inf.getBudgetSystemID()+"(&&&&&&&&&((("+inf.getBudgetClientID());
    			
    		}
    		
    	}catch(Exception ex){ex.printStackTrace();}
    	
    	
    }*/
    
    
    
}
