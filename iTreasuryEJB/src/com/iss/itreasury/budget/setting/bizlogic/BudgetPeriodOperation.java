/* Generated by Together */

package com.iss.itreasury.budget.setting.bizlogic;
import com.iss.itreasury.budget.setting.dao.Budget_PeriodDAO;
import com.iss.itreasury.budget.setting.dataentity.BudgetPeriodInfo;
import java.util.Collection;
import java.util.Iterator;

import com.iss.itreasury.budget.exception.BudgetException;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Constant;


public class BudgetPeriodOperation {
	
	/**
	 * 预算周期设置。新建或修改，状态正常的情况下判断周期代码不能重复
	 * @param info
	 * @return
	 * @throws BudgetException
	 */
    public long  save(BudgetPeriodInfo info) throws BudgetException{
    	long returnLong = -1;
		try{
			Budget_PeriodDAO dao=new Budget_PeriodDAO();
			//先根据预算周期代码和状态判断此周期代码是否已经存在
			BudgetPeriodInfo tmpInfo = new BudgetPeriodInfo();
			tmpInfo.setPeriodNo(info.getPeriodNo());		
			tmpInfo.setStatusID(Constant.RecordStatus.VALID);
			Collection c = dao.findByCondition(tmpInfo);
			if (c!=null && c.size()>0){
				//如果是新增操作,直接抛出异常
				if (info.getId()==-1){ 
					return 0;
				}else{
					//如果查出的信息的ID不是要修改的此条信息
					for(Iterator iter=c.iterator();iter.hasNext();){
						BudgetPeriodInfo resu=(BudgetPeriodInfo)iter.next();
						if(resu.getId()!=info.getId()){
							return 0;							
						}						
					}					
				}
			}
			//判断结束				
			if (info.getId()!=-1){//更新操作
				if(info.getPeriodType()!=9){
					info.setPeriodDays(-1);					
				}
				dao.update(info);
				returnLong = info.getId();
			}else{//新增
				if(info.getPeriodType()!=9){
					info.setPeriodDays(-1);					
				}
				returnLong = dao.add(info);
			}
		}catch(Exception e){
			e.printStackTrace();			
		}		
		return returnLong;
    }
    
    /**
     * 查询所有状态正常的记录
     * @return
     * @throws BudgetException
     */
    public Collection findAll()  throws BudgetException{   	
    	Collection coll=null;    	
    	Budget_PeriodDAO dao=new Budget_PeriodDAO();
    	BudgetPeriodInfo tmpInfo = new BudgetPeriodInfo();	
		tmpInfo.setStatusID(Constant.RecordStatus.VALID);
		try{
			coll = dao.findByCondition(tmpInfo);
    	}catch(Exception ec){ec.printStackTrace();}
        return coll;
    }
    
    /**
     * 根据ID删除记录（不是真正的删除只是改变记录状态）
     * @param id
     * @return
     * @throws BudgetException
     */
    public long delete(long id)  throws BudgetException{
    	Budget_PeriodDAO dao=new Budget_PeriodDAO();
    	long retlong=-1;
		try{
			long flag = -1;
			flag = dao.checkUse(id);
			if(flag>0)
			{
				throw new BudgetException("Budget_E021",null);
			}
			dao.delete(id);
			retlong=id;
		}
		catch (ITreasuryDAOException e){
			e.printStackTrace();
			throw new BudgetException();
		}
		return retlong;
    }
    
    /**
     * 根据ID查询此记录的详细信息
     * @param id
     * @return
     * @throws BudgetException
     */
     public BudgetPeriodInfo findByID(long id)  throws BudgetException{
    	 Budget_PeriodDAO dao=new Budget_PeriodDAO(); 
    	 BudgetPeriodInfo info=new BudgetPeriodInfo();
    	 try{
    		 info=(BudgetPeriodInfo)dao.findByID(id,(new BudgetPeriodInfo()).getClass());
 		}catch (Exception e){
 			e.printStackTrace();			
 		}
 		return info;
    }
     
    
}
