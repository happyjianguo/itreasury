/* Generated by Together */

package com.iss.itreasury.budget.templet.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import com.iss.itreasury.budget.dao.BudgetDAO;
import com.iss.itreasury.budget.exception.BudgetDAOException;
import com.iss.itreasury.budget.exception.BudgetException;
import com.iss.itreasury.budget.setting.bizlogic.BudgetParameterOperation;
import com.iss.itreasury.budget.setting.dataentity.ParameterInfo;
import com.iss.itreasury.budget.templet.dataentity.BudgetTempletInfo;
import com.iss.itreasury.budget.util.BUDGETNameRef;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.util.Database;

public class Budget_TempletDAO extends BudgetDAO {
	private boolean flag = true;

	public Budget_TempletDAO() {
		super("  Budget_Templet");
		super.setUseMaxID(); 
	}

	/**
	 * 更新所有子项目内容
	 */
	public long updateMember(long id, BudgetTempletInfo info)
			throws BudgetDAOException {
		return -1;
	}
	
	/**
	 * 构造函数，为手动控制事务用
	 * @param tableName
	 * @param conn
	 */
	public Budget_TempletDAO(String tableName, Connection conn)
    {
        super(tableName, conn);
        super.setUseMaxID(); 
    }
	/**
	 * 检查是否还有其他子项目
	 */
	public long checkOtherItem(long id) throws BudgetDAOException {
		long relong = -1;
		Collection coll = new ArrayList();
		Budget_TempletDAO dao = new Budget_TempletDAO();
		BudgetTempletInfo info = new BudgetTempletInfo();
		info.setParentItemID(id);
		info.setStatusID(1);
		try {
			coll = dao.findByCondition(info);
			if (!coll.isEmpty()) {
				relong = coll.size();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return relong;
	}
	private long level =-1; // 最大嵌套层数，从系统参数中读取

	/**
	 * 校验公式的正确性，基本原则：A项目公式中包含B项目，B项目的公式不允许再包括A项目 嵌套层数限制 col中存放项目公式中包含的项目编号 ,如果
	 */
	public boolean checkItemFormula(String itemNO, Collection col,long maxLevel)
			throws BudgetDAOException {		
		try {
			if (col != null) {
				Iterator it = col.iterator();
				while (it.hasNext()) {
					String noTemp =(String)it.next();
					if (itemNO .equals(noTemp)) {
						flag= false;
					} else {
						Collection col1 = findByItemNo(noTemp,"");
						if (level < maxLevel) { // 小于系统参数中的最大层数
							level++;
							checkItemFormula(itemNO, col1,maxLevel);
						}
					}
				}
			}
		} catch (BudgetDAOException e) {
			e.printStackTrace();
			throw e;
		}
		return flag;
	}

	/**
	 * 根据项目编号查找项目公式中包含的项目 公式定义规则itemNo,+,itemNo,-itemNo
	 */
	public Collection findByItemNo(String itemNo,String itemFormula) throws BudgetDAOException {
		Collection coll = new ArrayList();
		String itemID = "";
		String tempFormula="";//临时公式
		Object obj = new Object();
		BudgetTempletInfo info = new BudgetTempletInfo();
		Budget_TempletDAO dao = new Budget_TempletDAO();
		try {
			if(!itemFormula.equals("")){
				tempFormula=itemFormula;				
			}else{
				info = (BudgetTempletInfo) dao.getInfoByItemNo(itemNo);
				itemFormula = info.getItemFormula();// 此项目的计算公式				
			}			
			if(itemFormula!=null && !itemFormula.equals("")){
				String[] as = itemFormula.split(",");
				for (int i = 0; i < as.length; i++) {
					if(as[i].equals("+")||as[i].equals("-")||as[i].equals("*")||as[i].equals("/")){							
					}else{
						obj = (Object) as[i];
						coll.add(obj);							
					}						
				}				
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			
		}
		return coll;
	}

	/**
	 * 得到新建项目的序列编号
	 * 
	 * @param parentFlow
	 * @param systemID
	 * @return
	 */
	public static String getLastFlow(long parentFlow,String parentItemNo) {
		PreparedStatement ps = null;
		StringBuffer sbSQL = null;
		ResultSet rs = null;
		Connection conn = null;
		String itemNo = "";
		String lastItemNo = "";
		try {
			conn = Database.getConnection();
			sbSQL = new StringBuffer();
			sbSQL.append(" select itemNo,itemName from Budget_Templet ");
			if (parentFlow >0) {
				sbSQL.append(" where  ParentItemID=" + parentFlow + "");
			}else{
				sbSQL.append(" where  parentitemid is null or parentitemid<0");
			}
			sbSQL.append("order by ID desc");
			ps = conn.prepareStatement(sbSQL.toString());
			rs = ps.executeQuery();
			if (rs.next()) {
				itemNo = rs.getString(1);
			}
			lastItemNo = getItemNo(itemNo,3,parentItemNo);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		finally
		{
		    try {
			    if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (conn != null){
	                conn.close();
	                conn = null;
	            }
		    } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
		}
		return lastItemNo;
	}

	/**
	 * 根据现存的最大的项目编号，得到新建记录的项目编号
	 * 
	 * @param flowNum
	 * @param flowlen
	 * @return
	 */
	public static String getItemNo(String flowNum, int flowlen,String parentItemNo) {
		String tempFlowNum = "";
		String retFlow = "";
		//String parentItemNo = "";
		int intItemNo = -1;
		//表里没有数据，第一条数据编号为001
		if(flowNum.equals("")&&parentItemNo.equals("")){
			retFlow="001";			
		//查出来的数据和上一级编号相同
		}else if(flowNum.equals("") && !parentItemNo.equals("")){
			retFlow=parentItemNo+"_001";			
		}else{
			if (flowNum.indexOf("_") > -1) {
				parentItemNo = flowNum.substring(0, flowNum.lastIndexOf("_"));
				intItemNo = Integer.parseInt(flowNum.substring(flowNum
						.lastIndexOf("_") + 1, flowNum.length())) + 1;
			} else {
				intItemNo = Integer.parseInt(flowNum) + 1;
			}
			if (intItemNo > 999) {
				retFlow = "0";
			} else {
				tempFlowNum = String.valueOf(intItemNo);
				for (int i = 0; i < flowlen - String.valueOf(intItemNo).length(); i++) {
					tempFlowNum = "0" + tempFlowNum;
				}
				if (flowNum.indexOf("_") > -1) {
					retFlow = parentItemNo + "_" + tempFlowNum;
				} else {
					retFlow = tempFlowNum;
				}
			}
		}
		return retFlow;
	}

	public static long getMaxLayer() {
		long retint = -1;
		BudgetParameterOperation oper = new BudgetParameterOperation();
		try {
			Collection col = oper.findAll();
			for (Iterator iter = col.iterator(); iter.hasNext();) {
				ParameterInfo info = (ParameterInfo) iter.next();
				retint = info.getNestingMaxLevel();
				break;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return retint;

	}

	/**
	 * 0找到和ID匹配的符号
	 * 1根据传过来带逗号的字符串组成正常的公式，显示给用户看
	 * @param id
	 * @param ss
	 * @return
	 */
	public static String getFuByID(String id, String ss, String panduan) {
		String retLastStr = "";
		String[] as = ss.split(",");
		if (panduan.equals("0")) {
			for (int i = 0; i < as.length; i++) {
				if (as[i].equals(id)) {
					if((as.length-i)<3){
						retLastStr="+";								
					}else{
						if(as[i + 1].equals(" ")){
							retLastStr="+";							
						}else{
							retLastStr = as[i + 1];				
						}								
					}					
					i++;
				}
			}
		} else {
			for (int i = 0; i < as.length; i++) {
				retLastStr += as[i];
			}
		}
		return retLastStr;
	}
	
	/**
	 * 根据项目编号查询项目信息
	 * @param itemNo
	 * @return
	 * @throws BudgetException
	 * @throws Exception
	 */
	public static BudgetTempletInfo getInfoByItemNo(String itemNo)throws BudgetException,Exception{
		PreparedStatement ps = null;
	    StringBuffer sbSQL = null;
	    ResultSet rs = null;
	    Connection conn=null;
	    BudgetTempletInfo detinfo=new BudgetTempletInfo(); 
	    try{   
	    	conn=Database.getConnection();
	        sbSQL = new StringBuffer();	       	        
	        sbSQL.append(" select id,itemNO,itemFormula from Budget_templet");        
	        sbSQL.append(" WHERE  itemNO='"+itemNo+"'");	        
	        ps = conn.prepareStatement(sbSQL.toString());	
	        rs = ps.executeQuery();  	        
	        while (rs.next()){  
	        	
	        	detinfo.setId(rs.getLong(1));
	        	detinfo.setItemNO(rs.getString(2));	        	
	        	detinfo.setItemFormula(rs.getString(3));	        		        	
	        }
	        
	    }catch(Exception ex){
	    	ex.printStackTrace();
	    	throw new Exception(ex.getMessage());
	    }finally{
            if (rs != null){
				rs.close();
				rs = null;
			}
			if (ps != null){
				ps.close();
				ps = null;
			}
			if (conn != null){
                conn.close();
                conn = null;
            }
        }
        return detinfo;
    }
		
	/**
	 * 取上级项目ID
	 * @param itemID
	 * @return 最上级返回-1
	 * @throws BudgetException
	 */
	public long getUpItemID(long itemID)throws BudgetException
	{
	    long lReturn = -1;
	    try {
            BudgetTempletInfo info = (BudgetTempletInfo)this.findByID(itemID,BudgetTempletInfo.class);
            String itemNo = info.getItemNO();
            String upItemNo = "";
            if (itemNo.lastIndexOf("_") > -1)
            {
                upItemNo = itemNo.substring(0,itemNo.lastIndexOf("_"));
                lReturn = BUDGETNameRef.getItemIDByCode(upItemNo);
            }
            
        } catch (ITreasuryDAOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	    
	    return lReturn;
	}

	public static void main(String[] args) {
//		Collection coll = null;
//		String mm = "001,+,007-124,/,003_123,-,004,+,007,*,007_123";
//		String sss = "";
		Budget_TempletDAO dao = new Budget_TempletDAO();

            //		BudgetTempletInfo info=new BudgetTempletInfo();
//		// String[] a=new String[]{"1","2","3","4","5","6"};
//		// String[] b=new String[]{"+","-","*","/","+"};
//		try{
//			Collection col=dao.findByItemNo("001","002,+,003,");
//			
//			dao.checkItemFormula("001",col,4);
//			System.out.println(dao.checkItemFormula("001",col,4) + "^^^^^^编号^^^^^^^");						
//		}catch(Exception ex){ex.printStackTrace();}
		try {
		    System.out.println(dao.getUpItemID(6));
        } catch (BudgetException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
	}

}
