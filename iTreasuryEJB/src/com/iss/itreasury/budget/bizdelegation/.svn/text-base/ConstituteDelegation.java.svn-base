/* Generated by Together */

package com.iss.itreasury.budget.bizdelegation;

import java.rmi.RemoteException;
import java.util.Collection;

import com.iss.itreasury.budget.constitute.bizlogic.BudgetConstitute;
import com.iss.itreasury.budget.constitute.bizlogic.BudgetConstituteHome;
import com.iss.itreasury.budget.constitute.dataentity.BudgetPlanInfo;
import com.iss.itreasury.budget.exception.BudgetException;
import com.iss.itreasury.budget.query.paraminfo.QueryBudgetInfo;
import com.iss.itreasury.ebank.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.util.EJBHomeFactory;

public class ConstituteDelegation {

    	private BudgetConstitute constituteFacade = null;

	public ConstituteDelegation() throws BudgetException
	{
		try
		{
		    BudgetConstituteHome home = (BudgetConstituteHome) EJBHomeFactory.getFactory().lookUpHome(BudgetConstituteHome.class);
		    constituteFacade = home.create();
		}
		catch (Exception e)
		{
			throw new BudgetException();
		}
	}
	/**
	* 查找可以调整的所有非调整的预算
	*/
    public Collection findOriginalBudget(BudgetPlanInfo info) throws BudgetException
    {
        try 
        {
            return constituteFacade.findOriginalBudget( info);
        } 
        catch (RemoteException re) 
        {
            throw new BudgetException();
        }
    }
     /**
     *预算项目编制保存操作
    */
    public long save(BudgetPlanInfo info) throws BudgetException
    {        
        try 
        {
            return constituteFacade.save(info);
        } 
        catch (RemoteException re) 
        {
            System.out.println("catch RemoteException ");
            throw new BudgetException();
        }

        
    }
	
      /**
     *预算编制查询操作 根据客户id 查询满足条件的项目进行编制
    */
    public Collection findAll(BudgetPlanInfo info) throws BudgetException
    {        
        try 
        {
            return constituteFacade.findAll(info);
        } 
        catch (RemoteException re) 
        {
            throw new BudgetException();
        }
    }
    
    /**
     *预算编制查询操作 根据客户id 查询满足条件的项目进行编制
    */
    public Collection findAll(QueryBudgetInfo info) throws BudgetException
    {        
        try 
        {
            return constituteFacade.findAll(info);
        } 
        catch (RemoteException re) 
        {
            throw new BudgetException();
        }
    }
     /**
     *预算编制计算操作 根据模板中公式
    */
    public Collection calculatePlan(Collection col) throws BudgetException
    {        
        try 
        {
            return constituteFacade.calculatePlan(col);
        } 
        catch (RemoteException re) 
        {
            throw new BudgetException();
        }
    }
       /**
     *预算编制查询操作 根据预算id查询预算编制
    */
    public BudgetPlanInfo findByPlanID(long planID) throws BudgetException
    {        
        try 
        {
            return constituteFacade.findByPlanID(planID);
        } 
        catch (RemoteException re) 
        {
            throw new BudgetException();
        }
    }
 /**
	 *预算编制的提交操作,根据计算系数和列示选择：上期预算，上期实际，上年同期预算，
     * 上年同期实际数计算显示的编制项目金额
	*/
	public long commitBudget(BudgetPlanInfo info) throws BudgetException
    {
        	try 
			{
				return constituteFacade.commitBudget( info);
			} 
			catch (RemoteException re) 
			{
			    throw new BudgetException();
			}
    }
	/**
	 *预算编制的删除操作
     * 
	*/
	public void deleteBudget(BudgetPlanInfo info) throws BudgetException
    {
        	try 
			{
				constituteFacade.deleteBudget( info);
			} 
			catch (RemoteException re) 
			{
			    throw new BudgetException();
			}
    }
  /**
	 *查找预算编制操作 根据条件查询符合条件的预算编制，用于修改
	*/
	public Collection findByCondition(BudgetPlanInfo info) throws BudgetException
    {
        	try 
			{
				return constituteFacade.findByCondition(info);
			} 
			catch (RemoteException re) 
			{
			    throw new BudgetException();
			}
    }
	    /**
	 *预算编制的审核操作,提交到下一级审核人
	*/
	public long check(ApprovalTracingInfo info) throws java.rmi.RemoteException,BudgetException
    {
        try 
			{
				return constituteFacade.check(info);
			} 
			catch (RemoteException re) 
			{
			    throw new BudgetException();
			}
    }
	/**
	 * 根据预算类型获取新版本号
	 * 生成规则拟定为：预算类型（如原始预算YS、调整预算TZ、汇总预算HZ等）+预算年度（即起始日期的年度）+预算周期类型（如Y、M、D等）+ 月日 ＋ 编号。
	 * @param lConstituteTypeID
	 * @return
	 * @throws BudgetException
	 */
	public String getNewVersionNo(BudgetPlanInfo info) throws BudgetException
	{
	    try {
            return constituteFacade.getNewVersionNo(info);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            throw new BudgetException();
        }
	}
	
	/**
	 * 根据客户和体系取得所有项目的最大级数
	 * @param clientID
	 * @param systemID
	 * @return
	 * @throws BudgetException
	 */
	public long getItemMaxLevel(long clientID,long systemID) throws BudgetException
	{
	    try {
            return constituteFacade.getItemMaxLevel(clientID,systemID);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	}
	
	/**
	 * 查询某单位所有的下级单位集合
	 * @param clinetID
	 * @param statusID
	 * @param officeID
	 * @param currencyID
	 * @return
	 * @throws BudgetException
	 */
	public Collection findLowerClient(long clinetID,long statusID,long officeID,long currencyID) throws BudgetException
	{
	    try {
            return constituteFacade.findLowerClient(clinetID,statusID,officeID,currencyID);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	}
	/**
	 * 接受下级单位预算,首先检查接受的用户是否是审批流中定义的第一级审核人
	 * @param planInfo 
	 * 需要字段:预算ID,当前单位ID,当前操作人,办事处,币种
	 * @throws java.rmi.RemoteException
	 * @throws BudgetException
	 */
	public void receiveLowerClientBudget(BudgetPlanInfo planInfo)throws BudgetException
	{
	    try {
            constituteFacade.receiveLowerClientBudget(planInfo);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	}
	
	/**
	 * 查询当前用户需要审核的预算
	 * @param clientID
	 * @param userID
	 * @param officeID
	 * @param currencyID
	 * @return
	 * @throws BudgetException
	 */
	public Collection findUnCheckBudget(long clientID,long userID,long officeID,long currencyID) throws BudgetException
	{
	    try {
            return constituteFacade.findUnCheckBudget( clientID, userID, officeID, currencyID);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	}
	/**
	 * 取本单位以及下级单位的预算编制状态
	 * @param clientID
	 * @param officeID
	 * @param currencyID
	 * @return
	 * @throws BudgetException
	 */
	public Collection getLowerClientBudgetStatus(BudgetPlanInfo info)throws BudgetException
	{
	    try {
            return constituteFacade.getLowerClientBudgetStatus(info);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	}
	
	/**
	 * 预算汇总
	 * @param info
	 * @return
	 * @throws BudgetException
	 */
	public long collect(BudgetPlanInfo info)throws BudgetException
	{
	    try {
            return constituteFacade.collect(info);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	}
	
	/**
	 * 从EXCEL表导入预算
	 * @param file
	 * @return
	 * @throws BudgetException
	 */
	public void importExcelData(Collection c,long inputUserID)throws BudgetException
	{
	    try {
            constituteFacade.importExcelData(c,inputUserID);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	}
	
	public Collection findNewConstituteTemplate(BudgetPlanInfo info)throws BudgetException
	{
	    try {
            return constituteFacade.findNewConstituteTemplate(info);
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	}
}


