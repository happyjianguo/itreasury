/* Generated by Together */

package com.iss.itreasury.budget.constitute.bizlogic;

import java.io.FileInputStream;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import javax.ejb.SessionBean;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

import com.iss.itreasury.budget.clientrelation.dao.ClientRelationDAO;
import com.iss.itreasury.budget.constitute.dao.Budget_PlanDAO;
import com.iss.itreasury.budget.constitute.dao.Budget_planDetailDAO;
import com.iss.itreasury.budget.constitute.dataentity.BudgetPlanDetailInfo;
import com.iss.itreasury.budget.constitute.dataentity.BudgetPlanInfo;
import com.iss.itreasury.budget.constitute.dataentity.RowInfo;
import com.iss.itreasury.budget.exception.BudgetException;
import com.iss.itreasury.budget.executecontrol.dao.Budget_ItemSumDAO;
import com.iss.itreasury.budget.executecontrol.dataentity.BudgetItemSumInfo;
import com.iss.itreasury.budget.query.paraminfo.QueryBudgetInfo;
import com.iss.itreasury.budget.util.BUDGETConstant;
import com.iss.itreasury.budget.util.BUDGETNameRef;
import com.iss.itreasury.budget.util.UtilOperation;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.ebank.approval.dao.ApprovalDao;
import com.iss.itreasury.ebank.approval.dataentity.ApprovalSettingInfo;
import com.iss.itreasury.ebank.approval.dataentity.ApprovalTracingInfo;
import com.iss.itreasury.ebank.bizdelegation.ApprovalDelegation;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.IException;
import com.iss.itreasury.util.Log;
import com.iss.itreasury.util.Log4j;

public class BudgetConstituteEJB  implements SessionBean {
    private javax.ejb.SessionContext mySessionCtx = null;
    protected Log4j log = new Log4j(Constant.ModuleType.BUDGET, this);

	/**
	 * ejbActivate method comment
	 * @exception java.rmi.RemoteException 异常说明。
	 */
	public void ejbActivate() throws java.rmi.RemoteException
	{
	}
	/**
	 * ejbCreate method comment
	 * @exception javax.ejb.CreateException 异常说明。
	 * @exception java.rmi.RemoteException 异常说明。
	 */
	public void ejbCreate() throws javax.ejb.CreateException, java.rmi.RemoteException
	{
	}
	/**
	 * ejbPassivate method comment
	 * @exception java.rmi.RemoteException 异常说明。
	 */
	public void ejbPassivate() throws java.rmi.RemoteException
	{
	}
	/**
	 * ejbRemove method comment
	 * @exception java.rmi.RemoteException 异常说明。
	 */
	public void ejbRemove() throws java.rmi.RemoteException
	{
	}
	/**
	 * getSessionContext method comment
	 * @return javax.ejb.SessionContext
	 */
	public javax.ejb.SessionContext getSessionContext()
	{
		return mySessionCtx;
	}
	/**
	 * setSessionContext method comment
	 * @param ctx javax.ejb.SessionContext
	 * @exception java.rmi.RemoteException 异常说明。
	 */
	public void setSessionContext(javax.ejb.SessionContext ctx) throws java.rmi.RemoteException
	{
		mySessionCtx = ctx;
	}

   	/**
	 *预算编制的保存操作
	*/
	public long save(BudgetPlanInfo info) throws java.rmi.RemoteException,BudgetException
    {
	    log.print("enter method:BudgetConstitute.save()");
	    
	    long planID = -1;
	    Budget_PlanDAO planDao = new Budget_PlanDAO(); 
	    Budget_planDetailDAO detailDao = new Budget_planDetailDAO();
	    try {
	        //首先查找此版本号是否已经存在,如果已存在则是更新,否则新增
	        if (info.getVersionNo() == null || info.getVersionNo().length() == 0)
	            throw new BudgetException("Budget_E013",null,this.mySessionCtx);
	        
	        BudgetPlanInfo tmpInfo = null;
	        if (info.getId() > 0)
	        {
	            tmpInfo = planDao.findByPlanID(info.getId());
	        }
	        else
	        {
	            tmpInfo = planDao.findByVersionNo(info.getBudgetSystemID(),info.getClientID(),info.getVersionNo());
	        }
	        
	        if (tmpInfo != null && tmpInfo.getId() > 0)	//如果存在更新
	        {
	            log.print("更新编制");
	            System.out.println("当前状态：" + tmpInfo.getStatusID());
	            //判断操作人
	            if (tmpInfo.getInputUserID() != info.getInputUserID())
	                throw new BudgetException("Budget_E014",null,this.mySessionCtx);
	            
	            //查询编制是否已经提交
	            if (tmpInfo.getStatusID()!= BUDGETConstant.ConstituteStatus.SAVE 
	                    && tmpInfo.getStatusID()!= BUDGETConstant.ConstituteStatus.RETURN)
	                throw new BudgetException("Budget_E011",null,this.mySessionCtx);
	            
	            info.setUpdateDate(info.getInputDate());
	            info.setUpdateUserID(info.getInputUserID());
	            planID = tmpInfo.getId();
	            info.setId(planID);
	            planDao.update(info);
	        }
	        else					//新编制
	        {
	            log.print("新增编制");
	            log.print(UtilOperation.dataentityToString(info));
	            planID = planDao.add(info);
	        }
	        
	        //删除所有此编制的详细预算
	        log.print("删除原先所有编制");
	        detailDao.deleteByPlanID(planID);
	        
            //循环保存预算数
	        log.print("循环保存项目编制");
            ArrayList list = (ArrayList)info.getPlanDetail();
            if (list != null)
            {
	            for (int i=0;i<list.size();i++)
	            {
	                BudgetPlanDetailInfo detailInfo = (BudgetPlanDetailInfo)list.get(i);
	                detailInfo.setPlanID(planID);
	                detailDao.add(detailInfo);
	            }
            }
        } catch (ITreasuryDAOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException(mySessionCtx);
        }
        
	    return planID;
    }
    /**
	 *预算编制的审核操作,拒绝，返回修改
	*/
	public long check(ApprovalTracingInfo info) throws java.rmi.RemoteException,BudgetException
    {
	    log.print("enter budgetConstituteEjb.check method");
	    log.print(UtilOperation.dataentityToString(info));
	    //定义相应操作常量
		//模块类型
		long lModuleID = Constant.ModuleType.BUDGET;
		//业务类型，即单位ID
		long lLoanTypeID = info.getLoanTypeID();
		//操作类型
		long lActionID = info.getActionID();
		
		long lApprovalContentID = info.getApprovalContentID();		//审批内容ID
		String sOpinion = info.getOpinion();						//审批意见
		long lUserID = info.getUserID();							//审批人
		long lNextUserID = info.getNextUserID();					//下一个审核人
		long lCheckAction = info.getCheckActionID();				//操作 ：拒绝，返回修改
		long lCurrencyID = info.getCurrencyID();					//币种
		long lOfficeID = info.getOfficeID();						//办事处
		long lApprovalID = -1;
		long lLevel = -1;
		long lStatusID = -1;
		long lResultID = -1;
		
		ApprovalDelegation appbiz = new ApprovalDelegation();
		Budget_PlanDAO planDao = new Budget_PlanDAO();
		
		ApprovalSettingInfo appInfo = new ApprovalSettingInfo();
		BudgetPlanInfo planInfo = new BudgetPlanInfo();
		planInfo.setId(info.getApprovalContentID());
		
		try {
            //获得ApprovalID
            lApprovalID = appbiz.getApprovalID(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID);
			//下一级审核人级别
			lLevel = appbiz.findApprovalUserLevel(lApprovalID, lNextUserID);
			Log.print("下一级审核人级别：" + lLevel);
			//审批设置
			appInfo = appbiz.findApprovalSetting(lApprovalID);
			
			if (lCheckAction == Constant.ApprovalDecision.PASS) //审批
			{
			    lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.PASS;
				
				planInfo.setStatusID(BUDGETConstant.ConstituteStatus.CHECKING);
				planInfo.setNextCheckUserID(lNextUserID);
				planInfo.setNextCheckLevel(lLevel);
				
				if (lNextUserID == -2)	//审核完成
				{
				    if (lActionID == Constant.ApprovalAction.BUDGET_CURRENT)
				        planInfo.setStatusID(BUDGETConstant.ConstituteStatus.CURRENTCHECK);//本单位审核完成
				    else
				        planInfo.setStatusID(BUDGETConstant.ConstituteStatus.UPPERCHECK);//上级单位审核完成
				    
				    ClientRelationDAO clientDao = new ClientRelationDAO();
				    if (clientDao.findParentClientID(lLoanTypeID) == -1)	//财务公司最终审核完成,需要做的操作
				    {
				        log.print("财务公司最终审核完成");
				        planInfo.setStatusID(BUDGETConstant.ConstituteStatus.LASTCHECK);	//最终审核完成
					    //遍历此次汇总的所设计到的下级单位预算,把状态置为审核完成,把数据插入执行情况表
				        planDao.updateAllLowerClientBudget(lApprovalContentID);
				    }
				}
			}
			else if (lCheckAction == Constant.ApprovalDecision.REFUSE) //拒绝
			{
			    lStatusID = Constant.RecordStatus.INVALID;
				lResultID = Constant.ApprovalDecision.REFUSE;
				planInfo.setNextCheckUserID(0);
			    planInfo.setStatusID(BUDGETConstant.ConstituteStatus.REFUSE);
			    //逻辑删除
				appbiz.deleteApprovalTracing(lModuleID,lLoanTypeID,lActionID,lOfficeID,lCurrencyID,lApprovalContentID,2);
			}
			else if (lCheckAction == Constant.ApprovalDecision.RETURN) //返回修改
			{
			    lStatusID = Constant.RecordStatus.VALID;
				lResultID = Constant.ApprovalDecision.RETURN;
				planInfo.setNextCheckUserID(0);
			    planInfo.setStatusID(BUDGETConstant.ConstituteStatus.RETURN);
			}
			Log.print("update constitute status begin");
			planDao.check(planInfo);
			
			Log.print("saveApprovalTracing begin");
			info.setModuleID(lModuleID);
			info.setResultID(lResultID);
			info.setStatusID(lStatusID);
			appbiz.saveApprovalTracing(info);
			Log.print("saveApprovalTracing end");
			
		 } catch (Exception e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	            throw new BudgetException(e,this.mySessionCtx);
	     }
		return lApprovalContentID;
    }
    /**
	 *预算编制的提交操作
	*/
	public long commitBudget(BudgetPlanInfo info) throws java.rmi.RemoteException,BudgetException
    {
	    long planID = -1;
	    try
	    {
	        if (info.getBudgetFlag() != BUDGETConstant.BudgetFlag.TOTAL)
	        {
	            planID = save(info);
	            info.setId(planID);
	        }
	        
	        //更新状态到提交
	        Budget_PlanDAO dao = new Budget_PlanDAO();
	        
	        dao.commitBudget(info);
	        
	    }
	    catch(IException be)
        {
            be.printStackTrace();
            throw new BudgetException(be.getErrorCode(),be,mySessionCtx);
        }
	    return planID;
    }
	  /**
	 *预算编制的删除操作
	*/
	public void deleteBudget(BudgetPlanInfo info) throws java.rmi.RemoteException,BudgetException
    {
	    
	    try
	    {
	    	Budget_PlanDAO dao = new Budget_PlanDAO();
	        Budget_planDetailDAO detailDao = new Budget_planDetailDAO();
	    	
	        BudgetPlanInfo tmp = dao.findByPlanID(info.getId());
	        //检查有效性
	        
	        if (tmp == null)
	            throw new BudgetException("Budget_E010",null,this.mySessionCtx);
	        
	        //判断操作人
            if (tmp.getInputUserID() != info.getInputUserID())
                throw new BudgetException("Budget_E014",null,this.mySessionCtx);
            //判断状态
            if (tmp.getStatusID() < 0 || (tmp.getStatusID()!= BUDGETConstant.ConstituteStatus.SAVE 
                    && tmp.getStatusID()!= BUDGETConstant.ConstituteStatus.RETURN))
                throw new BudgetException("Budget_E011",null,this.mySessionCtx);
            
            //删除所有此编制的详细预算
	        log.print("删除原先所有编制");
	        detailDao.deleteByPlanID(info.getId());
	        //更新状态到删除	        
	        dao.deleteBudget(info);
	        
	    }
	    catch(IException be)
        {
            be.printStackTrace();
            throw new BudgetException(be.getErrorCode(),be,mySessionCtx);
        }
	    
    }

	/**
	 *查找预算编制项目的操作  根据客户id和预算体系ID 查询满足条件的项目进行编制
	*/
	public Collection findAll(BudgetPlanInfo info) throws java.rmi.RemoteException,BudgetException
    {
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    QueryBudgetInfo qInfo = new QueryBudgetInfo();
	    
//	    //如果只用ID查模板,先查询出信息
//	    if (info.getId() > 0)
//	    {
//	        BudgetPlanInfo tmp = dao.findByPlanID(info.getId());
//	        tmp.setShowColumn(info.getShowColumn());
//	        info = tmp;
//	    }
	    qInfo.setPlanID(info.getId());
	    qInfo.setBudgetFlag(info.getBudgetFlag());
	    qInfo.setBudgetSystemID(info.getBudgetSystemID());
	    qInfo.setBudgetPeriodID(info.getBudgetPeriodID());
	    qInfo.setClientID(info.getClientID());
	    qInfo.setStartDate(info.getStartDate());
	    qInfo.setCurrencyID(info.getCurrencyID());
	    qInfo.setOfficeID(info.getOfficeID());
	    qInfo.setEndDate(info.getEndDate());
	    qInfo.setVersionNo(info.getVersionNo());
	    qInfo.setShowColumn(info.getShowColumn());
	    try {
            return dao.getTemplateInfo(qInfo);
        } catch (BudgetException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException (mySessionCtx);
        }
    }
	/**
	 *查找预算编制项目的操作  根据客户id和预算体系ID 查询满足条件的项目进行编制
	*/
	public Collection findAll(QueryBudgetInfo info) throws java.rmi.RemoteException,BudgetException
    {
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    try {
            return dao.getTemplateInfo(info);
        } catch (BudgetException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException (mySessionCtx);
        }
    }
	/**
	 * 根据客户和体系取得所有项目的最大级数
	 * @param clientID
	 * @param systemID
	 * @return
	 * @throws BudgetException
	 */
	public long getItemMaxLevel(long clientID,long systemID)  throws java.rmi.RemoteException,BudgetException
	{
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    return dao.getItemMaxLevel(clientID,systemID);
	}
	/**
	* 查找可以调整的所有非调整的预算
	*/
    public Collection findOriginalBudget(BudgetPlanInfo info) throws java.rmi.RemoteException,BudgetException
    {
        Budget_PlanDAO dao = new Budget_PlanDAO();
        return dao.findOriginalBudget(info);
    }
    /**
	 *预算编制查询操作 根据预算id查询预算编制
     * 
	*/
	public BudgetPlanInfo findByPlanID(long planID) throws java.rmi.RemoteException,BudgetException
    {
	    BudgetPlanInfo info = null;
	    BudgetPlanDetailInfo detailInfo = new BudgetPlanDetailInfo();
	    Collection c = null;
	    //初始化预算以及明细DAO
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    Budget_planDetailDAO detailDao = new Budget_planDetailDAO();
	    //查询明细
	    detailInfo.setPlanID(planID);
        detailInfo.setStatusID(Constant.RecordStatus.VALID);
	    try {
            c = detailDao.findByCondition(detailInfo);
        } catch (ITreasuryDAOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        
	    info = dao.findByPlanID(planID);
	    info.setPlanDetail(c);
	    return info;
    }

     /**
	 *计算预算编制的操作
	*/
	public Collection calculatePlan(Collection col) throws java.rmi.RemoteException,BudgetException
    {
	    return null;
    }
     /**
	 *查找预算编制操作 根据条件查询符合条件的预算编制，用于修改，审核
	*/
	public Collection findByCondition(BudgetPlanInfo info) throws java.rmi.RemoteException,BudgetException
    {
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    return dao.findPlanByCondition(info);
    }
	/**
	 * 根据预算类型获取新版本号
	 * 生成规则拟定为：预算类型（如原始预算YS、调整预算TZ、汇总预算HZ等）+预算年度（即起始日期的年度）+预算周期类型（如Y、M、D等）+ 月日 ＋ 编号。
	 * @param lConstituteTypeID
	 * @return
	 * @throws BudgetException
	 */
	public String getNewVersionNo(BudgetPlanInfo info)throws java.rmi.RemoteException, BudgetException
	{
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    return dao.getNewVersionNo(info);
	}
	
	/**
	 * 查询下级单位集合
	 * @param nClinetID
	 * @param statusID 状态ID
	 * @return
	 */
	public Collection findLowerClient(long clinetID,long statusID,long officeID,long currencyID) throws java.rmi.RemoteException,BudgetException
	{
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    return dao.findLowerClient(clinetID,statusID,officeID,currencyID);
	}
	
	/**
	 * 接受下级单位预算,首先检查接受的用户是否是审批流中定义的第一级审核人
	 * @param planInfo 
	 * 需要字段:预算ID,当前单位ID,当前操作人,办事处,币种
	 * @throws java.rmi.RemoteException
	 * @throws BudgetException
	 */
	public void receiveLowerClientBudget(BudgetPlanInfo planInfo)throws java.rmi.RemoteException,BudgetException
	{
	    log.print(UtilOperation.dataentityToString(planInfo));
	    //先检查此用户是否是第一级审核人
	    log.debug("begin receive");
	    log.debug("先检查此用户是否是第一级审核人");
	    ApprovalDao approvaldao = new ApprovalDao();
	    long approvalID;
        try {
            approvalID = approvaldao.getApprovalID(Constant.ModuleType.BUDGET,planInfo.getClientID(),Constant.ApprovalAction.BUDGET_TOTAL,planInfo.getOfficeID(),planInfo.getCurrencyID());
	        if (!approvaldao.checkApprovalUserLevel(approvalID, planInfo.getNextCheckUserID(), 1))//如果不是第一级审核人,抛出异常
	        {
		        throw new BudgetException("Budget_E015",null);
	        }
        } catch (BudgetException be) {
            // TODO Auto-generated catch block
            be.printStackTrace();
            throw be;
        } catch (Exception e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
            throw new BudgetException();
        }
        log.debug("检查结束,开始更新预算编制");
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    BudgetPlanInfo info = new BudgetPlanInfo();
	    info.setId(planInfo.getId());
	    info.setNextCheckUserID(planInfo.getNextCheckUserID());
	    info.setNextCheckLevel(1);
	    info.setStatusID(BUDGETConstant.ConstituteStatus.CHECKING);
	    try {
            dao.update(info);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException(mySessionCtx);
        }
        log.debug("成功接受完毕,退出方法");
	}
	
	/**
	 * 查询当前用户需要审核的预算
	 * @param clientID
	 * @param userID
	 * @param officeID
	 * @param currencyID
	 * @return
	 * @throws BudgetException
	 */
	public Collection findUnCheckBudget(long clientID,long userID,long officeID,long currencyID) throws java.rmi.RemoteException,BudgetException
	{
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    return dao.findUnCheckBudget(clientID,userID,officeID,currencyID);
	}
	
	/**
	 * 取本单位以及下级单位的预算编制状态
	 * @param clientID
	 * @param officeID
	 * @param currencyID
	 * @return
	 * @throws BudgetException
	 */
	public Collection getLowerClientBudgetStatus(BudgetPlanInfo info)throws java.rmi.RemoteException,BudgetException
	{
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    return dao.getLowerClientBudgetStatus(info);
	}
	/**
	 * 下级单位汇总
	 * @param info
	 * @return
	 * @throws java.rmi.RemoteException
	 * @throws BudgetException
	 */
	public long collect(BudgetPlanInfo info)throws java.rmi.RemoteException,BudgetException
	{
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    //先进行检查，是否可以再次汇总
        if (dao.IsExist(info)) throw new BudgetException("Budget_E018",null,this.mySessionCtx);
	    long lRtn = -1;
	    try
	    { 
	        info = dao.getSumPlanInfo(info);
	        info.setBudgetFlag(BUDGETConstant.BudgetFlag.TOTAL);
	        String strVersionNo = dao.getNewVersionNo(info);
	        info.setVersionNo(strVersionNo);
	        System.out.println("********************"+info.getVersionNo());
	        lRtn =save(info);
	        
	        String  condition = null;
	        condition=dao.getSumBudgetIncludePlanID(info);
	        if(condition!=null)
	        {
	        	dao.collectBudgetUpdate(lRtn,condition);	        	
	        }	        
	        
	    }catch(BudgetException e)
	    {
	        throw new BudgetException(e.getErrorCode(),e,mySessionCtx);
	    }
	    return lRtn;
	}
	/**
     * 从excel导入编制数据
     * 币种	办事处	预算单位编号	单位名称	预算体系编号	预算体系名称	预算周期编号	预算周期名称	开始日期	结束日期	预算类型	预算项目	预算金额
     * @param file 导入文件目录
     * @throws BudgetException
     */
    public void importExcelData(Collection c,long inputUserID)throws java.rmi.RemoteException,BudgetException
    {
        Budget_PlanDAO planDao = new Budget_PlanDAO();
        Budget_planDetailDAO detailDao = new Budget_planDetailDAO();
        Budget_ItemSumDAO sumDao = new Budget_ItemSumDAO();
        Iterator it = c.iterator();
        try
        {
	        while (it.hasNext())
	        {
	            BudgetPlanInfo info = new BudgetPlanInfo();
	            RowInfo rowInfo = (RowInfo)it.next();
		        info.setOfficeID(rowInfo.getOfficeID());				
		    	info.setCurrencyID(rowInfo.getCurrencyID());
		    	info.setClientID(rowInfo.getClientID());	
		    	info.setBudgetSystemID(rowInfo.getSystemID());
		    	info.setBudgetPeriodID(rowInfo.getPeriodID());//预算周期编号
		    	info.setStartDate(rowInfo.getStartDate());//开始日期
		    	info.setEndDate(rowInfo.getEndDate());//结束日期
		    	info.setBudgetFlag(rowInfo.getBudgetFlag());//预算类型
		    	info.setInputUserID(inputUserID);
		    	info.setInputDate(Env.getSystemDateTime());
		    	info.setStatusID(BUDGETConstant.ConstituteStatus.LASTCHECK);//状态
		    	info.setVersionNo(getNewVersionNo(info));
		    	
		    	log.print("开始插入编制表");
		    	long planID = planDao.saveOrUpdate(info);
		    	
		    	BudgetPlanDetailInfo detailInfo = new BudgetPlanDetailInfo();
		    	detailInfo.setPlanID(planID);
		    	detailInfo.setItemID(rowInfo.getItemID());//项目ID
		    	detailInfo.setBudgetAmount(rowInfo.getBudgetAmount()); //预算金额
		    	detailInfo.setAmount(rowInfo.getBudgetAmount()); //预算金额
		    	detailInfo.setStatusID(Constant.RecordStatus.VALID);
		    	
		    	log.print("开始插入编制明细表");
		    	detailDao.add(detailInfo);
		    	
		    	//如果为汇总,还需要插入到汇总表
		    	if (info.getBudgetFlag() != BUDGETConstant.BudgetFlag.TOTAL)
		    	{
		    	    log.print("开始插入汇总表");
		    	    BudgetItemSumInfo sumInfo = new BudgetItemSumInfo();
		            sumInfo.setBudgetSystemID(rowInfo.getSystemID());
		            sumInfo.setBudgerPeriodID(rowInfo.getPeriodID());
		            sumInfo.setClientID(rowInfo.getClientID());
		            sumInfo.setStartDate(rowInfo.getStartDate());
		            sumInfo.setEndDate(rowInfo.getEndDate());
		            sumInfo.setITemID(rowInfo.getItemID());
		            sumInfo.setBudgetAmount(rowInfo.getBudgetAmount());
		            sumInfo.setOriginalAmount(rowInfo.getBudgetAmount());
		            sumInfo.setStatusID(Constant.RecordStatus.VALID);
		            sumInfo.setInputDate(Env.getSystemDateTime());
		            sumDao.saveOrUpdate(sumInfo);
		    	}
	        }
        }
        catch(BudgetException e)
        {
            e.printStackTrace();
            throw new BudgetException(e.getErrorCode(),e,this.mySessionCtx);
        }
        catch(Exception e)
        {
            e.printStackTrace();
            throw new BudgetException(this.mySessionCtx);
        }
    }
	
    /**
     * 查询新的编制模板，在调用findall方法前先进行检查
     * @param info
     * @return
     * @throws java.rmi.RemoteException
     * @throws BudgetException
     */
    public Collection findNewConstituteTemplate(BudgetPlanInfo info)throws java.rmi.RemoteException,BudgetException
    {
        Budget_PlanDAO planDao = new Budget_PlanDAO();
        if (planDao.IsExist(info)) 
        {
            if (info.getBudgetFlag() == BUDGETConstant.BudgetFlag.CONSTITUTE)
                throw new BudgetException("Budget_E016",null,this.mySessionCtx);
            else if (info.getBudgetFlag() == BUDGETConstant.BudgetFlag.ADJUST)
                throw new BudgetException("Budget_E017",null,this.mySessionCtx);
        }
        return this.findAll(info);
    }
    
}
