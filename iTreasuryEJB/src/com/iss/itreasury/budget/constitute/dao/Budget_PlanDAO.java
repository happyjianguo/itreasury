/* Generated by Together */

package com.iss.itreasury.budget.constitute.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;

import com.iss.itreasury.budget.constitute.dataentity.BudgetPlanDetailInfo;
import com.iss.itreasury.budget.constitute.dataentity.BudgetPlanInfo;
import com.iss.itreasury.budget.dao.BudgetDAO;
import com.iss.itreasury.budget.exception.BudgetDAOException;
import com.iss.itreasury.budget.exception.BudgetException;
import com.iss.itreasury.budget.executecontrol.dao.Budget_ItemSumDAO;
import com.iss.itreasury.budget.executecontrol.dataentity.BudgetItemSumInfo;
import com.iss.itreasury.budget.query.paraminfo.QueryBudgetInfo;
import com.iss.itreasury.budget.setting.dao.Budget_PeriodDAO;
import com.iss.itreasury.budget.setting.dataentity.BudgetItemPrivilegeInfo;
import com.iss.itreasury.budget.setting.dataentity.BudgetPeriodInfo;
import com.iss.itreasury.budget.templet.dao.Budget_TempletDAO;
import com.iss.itreasury.budget.templet.dataentity.DisplayTemplateDetailInfo;
import com.iss.itreasury.budget.templet.dataentity.DisplayTemplateInfo;
import com.iss.itreasury.budget.util.BUDGETConstant;
import com.iss.itreasury.budget.util.UtilOperation;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.ebank.approval.bizlogic.ApprovalBiz;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
import com.iss.itreasury.util.Database;
import com.iss.itreasury.util.Env;
import com.iss.itreasury.util.Log;
public class Budget_PlanDAO  extends BudgetDAO {
	
	public Budget_PlanDAO(){
		super("Budget_Plan");
		super.setUseMaxID(); 
	}
	public Budget_PlanDAO(String tableName){
		super(tableName);
		super.setUseMaxID(); 
	}
	
	public Budget_PlanDAO(Connection conn){
		super(conn);
		super.setUseMaxID(); 
	}
	
	public Budget_PlanDAO(String tableName,Connection conn){
		super(tableName,conn);
		super.setUseMaxID(); 
	}
	
 /**
	* 根据预算id查询所有预算编制内容，进行预算修改，连接执行情况汇总表
    * 预算项目编号  预算项目名称 原始金额 已调整金额 新调整金额
    * 当前预算金额 已执行金额 执行比例 调整比例
	*/
	public BudgetPlanInfo findByPlanID(long id) throws BudgetException
    {
	    BudgetPlanInfo info = null;
	    
	    try {
            info = (BudgetPlanInfo) this.findByID(id,BudgetPlanInfo.class);
        } catch (ITreasuryDAOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
        return info;
    }
	
	
	
    /**
	* 根据预算id查询所有预算编制内容，进行预算修改，连接执行情况汇总表
    * 预算项目编号  预算项目名称 原始金额 已调整金额 新调整金额
    * 当前预算金额 已执行金额 执行比例 调整比例
	*/
	public Collection findAdjustByPlanID(long id) throws BudgetDAOException
    {
	    return null;
    }
	/**
	* 查找可以调整的所有非调整的预算
	*/
    public Collection findOriginalBudget(BudgetPlanInfo info) throws BudgetException
    {
        ArrayList list = new ArrayList();
	    BudgetPlanInfo planInfo = null;
	    try {
            this.initDAO();
            String strSQL = "select a.id,a.clientID,a.budgetSystemID,b.budgetSystemName,a.budgetPeriodID,c.periodname,a.startdate,a.enddate,a.versionno,a.inputuseriD,a.statusID,a.planDate,a.budgetFlag";
            strSQL += " from budget_plan a,budget_system b, BUDGET_PERIOD c";
            strSQL += " where a.budgetSystemID = b.id and a.budgetperiodid=c.id";
            if (info.getClientID() > 0)
                strSQL += " and a.clientID = " + info.getClientID();
            
            strSQL += " and a.budgetFlag = " + BUDGETConstant.BudgetFlag.CONSTITUTE;
            strSQL += " and (a.statusID = " + BUDGETConstant.ConstituteStatus.CURRENTCHECK + " or a.statusID = " + BUDGETConstant.ConstituteStatus.LASTCHECK +")";
            strSQL += " order by a.budgetSystemID,a.budgetPeriodID asc,a.inputDate desc";
            log.print(strSQL);
            transPS = transConn.prepareStatement(strSQL);
            transRS = transPS.executeQuery();
            while (transRS.next())
            {
                planInfo = new BudgetPlanInfo();
                convertResultToEntity(transRS,planInfo);
                list.add(planInfo);
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
	    
	    return list;
    }
    /**
     * 查询预算编制各种状态的数量，我的工作使用
     */
    public long queryBudgetCountByStatus(long lUserId,long lStatusId,long lOfficeID,long lCurrencyID)  throws BudgetDAOException
    {
        return -1;
    }
    
    public Collection getTemplateInfo(QueryBudgetInfo budgetInfo) throws BudgetException
    {
        log.print("enter method :Budget_PlanDAO.getTemplateInfo");
        log.print(UtilOperation.dataentityToString(budgetInfo));
        Vector vector = new Vector();
        DisplayTemplateInfo info = null;
        try {
            this.initDAO();
            String strSQL = "select b.* from (	select distinct budgetItemID,budgetClientID,budgetSystemID from Budget_ItemPrivilege where statusID=?) a,  Budget_Templet b where a.budgetClientID=? and a.budgetSystemID=? and a.budgetItemID = b.id order by b.itemno";
            log.print(strSQL);
            log.print("clientID="+budgetInfo.getClientID());
            log.print("budgetSystemID="+budgetInfo.getBudgetSystemID());
            transPS = prepareStatement(strSQL);
            transPS.setLong(1,Constant.RecordStatus.VALID);
            transPS.setLong(2,budgetInfo.getClientID());
            transPS.setLong(3,budgetInfo.getBudgetSystemID());
            transRS = executeQuery();
            while (transRS.next())
            {
                info =  new DisplayTemplateInfo();
                ArrayList detailList  = new ArrayList();
                
                info.setIsLeaf(transRS.getLong("isLeaf"));
            	info.setItemID(transRS.getLong("id"));
            	info.setItemLevel(transRS.getLong("itemLevel"));
            	info.setItemName(transRS.getString("itemName"));								
            	info.setItemNo(transRS.getString("itemNo"));
            	if (transRS.getLong("parentItemID") > 0)
            	    info.setParentItemID(transRS.getLong("parentItemID"));
            	
            	
            	//infoChild.setDisplayValue(transRS.get);
            	//infoChild.setAmount(transRS.getDouble(""));)
            	//infoChild.setIsEdit(1);
            	double[] arrayAmount = getAmountByCondition(budgetInfo,transRS.getLong("id"));
            	for (int i=0;i<arrayAmount.length;i++)
            	{
//            	  添加显示的列,每一个列是个DisplayTemplateDetailInfo
                	DisplayTemplateDetailInfo infoChild = new DisplayTemplateDetailInfo();
            	    infoChild.setAmount(arrayAmount[i]);
            	    infoChild.setDisplayValue(DataFormat.formatAmountUseZero(arrayAmount[i]));
            	    if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.LASTBUDGET
            	            ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.LASTEXECUTE
            	            ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.LASTYEARBUDGET
            	            ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.LASTYEAREXECUTE
            	            ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.CURRENTAMOUNT)
            	        infoChild.setDisplayType(0);
            	    else
            	        infoChild.setDisplayType(1);
            	    //如果不是当前预算列,输入框为只读
            	    if (budgetInfo.getShowColumn()[i] != BUDGETConstant.BudgetColumnList.CURRENTAMOUNT)
            	        infoChild.setIsEdit(1);
            	    else
            	        infoChild.setIsEdit(0);
            	    
            	    //设置显示的样式
            	    if(budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.TOTALAMOUNT)
            	    {
            	    	infoChild.setDisplayValue("<a href=../control/c322.jsp?itemid="+transRS.getLong("id")+">"+infoChild.getAmount()+"</a>");           	    	
            	    }
            	    //比例加上%
            	    else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.EXCUTESCALE
            	              ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.ADJUSTSCALE
            	              ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.BUDGETRATE
            	              ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.EXCUTERATE
            	              ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.BUDGETSTRUCTURE
            	              ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.EXECUTESTRUCTURE)
            	    {
            	        infoChild.setDisplayValue(String.valueOf(DataFormat.formatDouble(infoChild.getAmount()))+"%");
            	    }
            	    else
            	    {
            	    	infoChild.setDisplayValue(String.valueOf(DataFormat.formatAmountUseZero(infoChild.getAmount())));         	    	
            	    }
            	    System.out.println("setIsEdit="+infoChild.getIsEdit());
            	    detailList.add(infoChild);
                	info.setDetailInfos(detailList);
            	}
            	vector.add(info);
            	
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
        return vector;
    }
    
    /**
     * 根据单位,体系,周期,项目,开始日期取所需的金额类型(如当前预算数,上期执行数)
     * @param planInfo
     * @param itemID
     * @return
     * @throws BudgetException
     */
    private double[] getAmountByCondition(QueryBudgetInfo budgetInfo,long itemID) throws BudgetException
    {
        log.print("enter getAmountByCondition方法");
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String versionNo = budgetInfo.getVersionNo();
        try {
            conn = Database.getConnection();
        } catch (Exception e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
            throw new BudgetException();
        }
        double[] arrayAmount = new double[budgetInfo.getShowColumn().length];
        
        String strSQL = null;
        try
        {
	        for (int i=0;i<arrayAmount.length;i++)
	        {
	            //取开始日期
	            Timestamp startDate = getStartDate(budgetInfo.getStartDate(),budgetInfo.getBudgetPeriodID(),budgetInfo.getShowColumn()[i]);
	            
	            if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.CURRENTAMOUNT
	                   ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.UNCHECKBUDGET
	                   ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.ORIGINALAMOUNT)
	            {
	                strSQL = "select Amount CurrentAmount,budgetAmount,ORIGINALAMOUNT from Budget_Plan a,Budget_PlanDetail b where a.id = b.planID ";
	                if (budgetInfo.getPlanID() > 0)
	                    strSQL += " and a.ID = " + budgetInfo.getPlanID();
	                if (budgetInfo.getClientID() > 0)
	                    strSQL += " and a.clientID = " + budgetInfo.getClientID();
	                if (budgetInfo.getBudgetSystemID() > 0)
	                    strSQL += " and a.budgetSystemID=" + budgetInfo.getBudgetSystemID();
	                if (budgetInfo.getBudgetPeriodID() > 0)
	                    strSQL += " and a.budgetperiodid=" + budgetInfo.getBudgetPeriodID();
	                if (budgetInfo.getStartDate() != null)
	                    strSQL += " and to_char(a.startdate,'yyyy-mm-dd')= '" + DataFormat.getDateString(budgetInfo.getStartDate())+ "'";
	                if (budgetInfo.getEndDate() != null)
	                    strSQL += " and to_char(a.endDate,'yyyy-mm-dd')= '" + DataFormat.getDateString(budgetInfo.getEndDate()) + "'";
	                if (versionNo != null && versionNo.length() >0)
	                    strSQL += " and a.versionNo = '" + versionNo + "'";
	                if (itemID > 0)
	                    strSQL += " and b.itemID=" + itemID;
	                strSQL += " and b.statusID = " + Constant.RecordStatus.VALID ;
	                log.print(strSQL);
	                ps = conn.prepareStatement(strSQL);
	                rs = ps.executeQuery();
	            }else if(budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.ADJUSTBALANCE
	            		||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.TOTALAMOUNT
	            		||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.CURRENTEXECUTE
	            		||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.SUB){
	            	strSQL = "select a.ORIGINALAMOUNT ORIGINALAMOUNT ,(a.BUDGETAMOUNT-a.ORIGINALAMOUNT) as ADJUSTSCALE,a.BudgetAmount as BudgetAmount,";
	            	strSQL += " a.executeAmount executeAmount,decode(a.BudgetAmount,0,0,a.executeAmount/a.BudgetAmount*100) as EXCUTESCALE,";
	            	strSQL += " (a.BudgetAmount-a.executeAmount) as SUB";
	            	strSQL += " from Budget_ItemSum a,Budget_Plan b,Budget_PlanDetail c where b.BudgetFlag=1";
	            	strSQL += " and  a.itemid=c.itemid and a.statusid=1 and b.statusid!=0 and c.statusid=1";
	                strSQL += " and a.BudgetSystemID = ?";
	                strSQL += " and a.itemID = ?";
	                strSQL += " and a.BudgetPeriodID = ?";
	                strSQL += " and a.ClientID=?";
	                strSQL += " and a.StartDate = ?";	                          
	                ps = conn.prepareStatement(strSQL.toString());
	                ps.setLong(1,budgetInfo.getBudgetSystemID());
	                ps.setLong(2,itemID);
	                ps.setLong(3,budgetInfo.getBudgetPeriodID());
	                ps.setLong(4,budgetInfo.getClientID());
	                ps.setTimestamp(5,startDate);
	                Log.print(strSQL.toString());
	                rs = ps.executeQuery();		      	 		            
	            }
	            else{
	                strSQL = "select ORIGINALAMOUNT,BudgetAmount,executeAmount,decode(BudgetAmount,0,0,executeAmount/BudgetAmount*100) as EXCUTESCALE,decode(BudgetAmount,0,0,(BUDGETAMOUNT-ORIGINALAMOUNT)/BudgetAmount*100) as ADJUSTSCALE from Budget_ItemSum where 1=1";
	                strSQL += " and ClientID = ?";
	                strSQL += " and BudgetSystemID = ?";
	                strSQL += " and itemID = ?";
	                strSQL += " and BudgetPeriodID = ?";
	                strSQL += " and StartDate = ?";
	                strSQL += " and StatusID = " + Constant.RecordStatus.VALID;
	                ps = conn.prepareStatement(strSQL);
	                ps.setLong(1,budgetInfo.getClientID());
	                ps.setLong(2,budgetInfo.getBudgetSystemID());
	                ps.setLong(3,itemID);
	                ps.setLong(4,budgetInfo.getBudgetPeriodID());
	                ps.setTimestamp(5,startDate);
	                rs = ps.executeQuery();
	            }
	            
	            log.print(strSQL);
                log.print("clientID="+budgetInfo.getClientID());
                log.print("versionNo="+versionNo);
                log.print("budgetSystemID="+budgetInfo.getBudgetSystemID());
                log.print("itemID="+itemID);
                log.print("BudgetPeriodID="+budgetInfo.getBudgetPeriodID());
                log.print("startDate=" + startDate);
	            try {
	                if (rs.next())
	                {	                	
	                    if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.CURRENTAMOUNT)
	                    {
	                        //如果是做预算调整，查看的原始预算的值，本次金额为0，等待用户输入调整的值
	                        if (budgetInfo.getBudgetFlag() == BUDGETConstant.BudgetFlag.ADJUST && versionNo.indexOf("YS") > -1)
	                            arrayAmount[i] = 0.00;
//	                        else if (budgetInfo.getPlanID() < 0 && (versionNo==null || versionNo.length()<=0))//只有在条件唯一的情况下才可以取出当前金额
//	                            arrayAmount[i] = 0.0;
	                        else	
	                            arrayAmount[i] = rs.getDouble("CurrentAmount");
	                    }
	                    else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.CURRENTBUDGET
	                            ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.UNCHECKBUDGET
	                            ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.LASTBUDGET
	                            ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.LASTYEARBUDGET
	                            ||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.TOTALAMOUNT)	                    	
	                    	arrayAmount[i] = rs.getDouble("BudgetAmount");	                    	
	                     else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.CURRENTEXECUTE
	                            || budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.LASTEXECUTE
	                            || budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.LASTYEAREXECUTE)
	                        arrayAmount[i] = rs.getDouble("executeAmount");
	                    else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.ORIGINALAMOUNT)	                        
	                    	arrayAmount[i] = rs.getDouble("ORIGINALAMOUNT");
	                    else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.ADJUSTSCALE
	                    		||budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.ADJUSTBALANCE)	                    	
	                        arrayAmount[i] = rs.getDouble("ADJUSTSCALE");
	                    else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.EXCUTESCALE)
	                        arrayAmount[i] = rs.getDouble("EXCUTESCALE");
	                    else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.SUB)
	                        arrayAmount[i] = rs.getDouble("SUB");
	                    else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.BUDGETSTRUCTURE)	//预算结构
	                    {
	                        Budget_TempletDAO dao = new Budget_TempletDAO();
	                        QueryBudgetInfo tmp = (QueryBudgetInfo)budgetInfo.clone();
	                        //首先取上级项目ID，如果最上级，返回自己ID
	                        long upItem = dao.getUpItemID(itemID);
	                        if (upItem == -1) upItem = itemID;
	                        
	                        tmp.setShowColumn(new long[]{BUDGETConstant.BudgetColumnList.CURRENTBUDGET});
	                        double Amount = this.getAmountByCondition(tmp,itemID)[0];
	                        double UpAmount = this.getAmountByCondition(tmp,upItem)[0];
	                        if (UpAmount != 0)
	                            arrayAmount[i] = Amount/UpAmount*100;
	                        else
	                            arrayAmount[i] = 0.00;
	                    }
	                    else if (budgetInfo.getShowColumn()[i] == BUDGETConstant.BudgetColumnList.EXECUTESTRUCTURE)	//执行结构
	                    {
	                        Budget_TempletDAO dao = new Budget_TempletDAO();
	                        QueryBudgetInfo tmp = (QueryBudgetInfo)budgetInfo.clone();
	                        tmp.setShowColumn(new long[]{BUDGETConstant.BudgetColumnList.CURRENTEXECUTE});
	                        
	                        //首先取上级项目ID，如果最上级，返回自己ID
	                        long upItem = dao.getUpItemID(itemID);
	                        if (upItem == -1) upItem = itemID;
	                        
	                        double Amount = this.getAmountByCondition(tmp,itemID)[0];
	                        double UpAmount = this.getAmountByCondition(tmp,upItem)[0];
	                        if (UpAmount != 0)
	                            arrayAmount[i] = Amount/UpAmount*100;
	                        else
	                            arrayAmount[i] = 0.00;
	                    }
	                }
	                else
	                {
	                    arrayAmount[i] = 0.00;
	                }
	                System.out.println("arrayAmount="+arrayAmount[i]);
	                
	            } catch (SQLException e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }
	            finally
	            {
	                try {
	                    rs.close();
	                    ps.close();
	                } catch (SQLException e2) {
	                    // TODO Auto-generated catch block
	                    e2.printStackTrace();
	                }
	            }
	        }
        }catch(Exception e)
        {
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                if (rs != null)
                {
                    rs.close();
                    rs = null;
                }
                if (ps != null)
                {
                    ps.close();
                    ps = null;
                }
                if (conn != null)
                {
                   conn.close();
                   conn = null;
                }
            } catch (SQLException e2) {
                // TODO Auto-generated catch block
                e2.printStackTrace();
            }
        }
        log.print("out getAmountByCondition方法");
        return arrayAmount;
    }
    
    /**
	 * 根据当前日期,周期和要取的时间类型取开始日期
	 * @param currentDate  当前日期
	 * @param budgetPeriodID 周期
	 * @param ltype			推算类型
	 * @see 推算类型 BUDGETConstant.BudgetColumnList
	 * @return
	 */
	private Timestamp getStartDate(Timestamp currentDate,long budgetPeriodID,long ltype)
	{
	    if (currentDate == null) return null;
	    Budget_PeriodDAO dao = new Budget_PeriodDAO();
	    long periodType = -1;
	    try {
	        periodType = ((BudgetPeriodInfo)dao.findByID(budgetPeriodID,BudgetPeriodInfo.class)).getPeriodType();
        } catch (ITreasuryDAOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
	    Timestamp ts = null;
	    if (ltype == BUDGETConstant.BudgetColumnList.LASTBUDGET		//上一期
	            ||ltype == BUDGETConstant.BudgetColumnList.LASTEXECUTE)
	    {
	        if (periodType == BUDGETConstant.BudgetPeriod.D)
	            ts = new Timestamp(DataFormat.getPreviousOrNextDate(currentDate,-1).getTime());
	        else if (periodType == BUDGETConstant.BudgetPeriod.W)
	            ts = new Timestamp(DataFormat.getPreviousOrNextDate(currentDate,-7).getTime());
	        else if (periodType == BUDGETConstant.BudgetPeriod.T)
	            ts = new Timestamp(DataFormat.getPreviousOrNextDate(currentDate,-10).getTime());
	        else if (periodType == BUDGETConstant.BudgetPeriod.M)
	            ts = DataFormat.getPreviousMonth(currentDate,1);
	        else if (periodType == BUDGETConstant.BudgetPeriod.Q)
	            ts = DataFormat.getPreviousMonth(currentDate,3);
	        else if (periodType == BUDGETConstant.BudgetPeriod.H)
	            ts = DataFormat.getPreviousMonth(currentDate,6);
	        else if (periodType == BUDGETConstant.BudgetPeriod.Y)
	            ts = DataFormat.getPreviousYear(currentDate,1);
	    }
	    else if (ltype == BUDGETConstant.BudgetColumnList.LASTYEARBUDGET		//上一年同期
	            ||ltype == BUDGETConstant.BudgetColumnList.LASTYEAREXECUTE)
	    {
	        ts = DataFormat.getPreviousYear(currentDate,1);
	    }
	    else
	        return currentDate;
	    return ts;
	    
	}
	
	/**
	 * 根据客户和体系取得所有项目的最大级数
	 * @param clientID
	 * @param systemID
	 * @return
	 * @throws BudgetException
	 */
	public long getItemMaxLevel(long clientID,long systemID) throws BudgetException
	{
	    long ltemp = -1;
	    try
	    {
		    this.initDAO();
	        String strSQL = "select max(b.itemLevel) from Budget_ItemPrivilege a, Budget_Templet b where a.budgetClientID=? and a.budgetSystemID=? and a.statusID=? and a.budgetItemID = b.id";
	        transPS = prepareStatement(strSQL);
	        transPS.setLong(1,clientID);
	        transPS.setLong(2,systemID);
	        transPS.setLong(3,Constant.RecordStatus.VALID);
	        transRS = executeQuery();
	        if (transRS.next())
	        {
	          ltemp = transRS.getLong(1);  
	        }
	    }
	    catch(Exception e)
	    {
	        throw new BudgetException();
	    }
	    finally
	    {
	        try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
	    }
	    return ltemp;
	}
	
	/**
	 * 根据预算类型获取新版本号
	 * 生成规则拟定为：预算类型（如原始预算YS、调整预算TZ、汇总预算HZ等）+预算年度（即起始日期的年度）+预算周期类型（如Y、M、D等）+ 月日 + 序号。
	 * @param lConstituteTypeID
	 * @return
	 * @throws BudgetException
	 */
	public String getNewVersionNo(BudgetPlanInfo info) throws BudgetException
	{
	    String version = "";
//	  version = type+year+period+sCode
	    String type = BUDGETConstant.BudgetFlag.getCode(info.getBudgetFlag());
	    String startDate = DataFormat.getDateString(info.getStartDate()).replaceAll("-","");
	    System.out.println(startDate);
	    String period = "";
	    String sCode = "";
	    String sNumber = "";	//编号
	    long num = 0;
	    
	    //取预算周期代码
	    Budget_PeriodDAO dao = new Budget_PeriodDAO();
	    long periodType = -1;
	    try {
	        periodType = ((BudgetPeriodInfo)dao.findByID(info.getBudgetPeriodID(),BudgetPeriodInfo.class)).getPeriodType();
        } catch (ITreasuryDAOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException("Budget_E012",e);
        }
        period = BUDGETConstant.BudgetPeriod.getCode(periodType);
        
        version = type + startDate.substring(0,4) + period + startDate.substring(4);
        //生成序列号
        try
        {
	        this.initDAO();
	        String strSQL = "select max(substr(versionNo,12)) as num from budget_plan where clientID=" + info.getClientID() + " and versionNo like '%" + version + "%'";
	        transPS = prepareStatement(strSQL);
	        transRS = executeQuery();
	        if (transRS.next())
	            num = transRS.getLong("num")+1;
	        if (num < 10)
	            sNumber = "0" + num;
	        else
	            sNumber = String.valueOf(num);
        }catch(Exception e)
        {
            e.printStackTrace();
            throw new BudgetException("Budget_E012",e);
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
        
        //生成预算版本
        version = version + sNumber;
	    return version;
	}
	
	/**
	 * 根据条件查找编制记录
	 * @param info
	 * @return
	 * @throws BudgetException
	 */
	public Collection findPlanByCondition(BudgetPlanInfo info) throws BudgetException
	{
	    ArrayList list = new ArrayList();
	    BudgetPlanInfo planInfo = null;
	    try {
            this.initDAO();
            String strSQL = "select a.id,a.clientID,a.budgetSystemID,b.budgetSystemName,a.budgetPeriodID,c.periodname,a.startdate,a.enddate,a.versionno,a.inputuseriD,a.statusID,a.planDate,a.budgetFlag";
            strSQL += " from budget_plan a,budget_system b, BUDGET_PERIOD c";
            strSQL += " where a.budgetSystemID = b.id and a.budgetperiodid=c.id";
            if (info.getClientID() > 0)
                strSQL += " and a.clientID = " + info.getClientID();
            if (info.getBudgetSystemID() > 0)
                strSQL += " and a.budgetSystemID=" + info.getBudgetSystemID();
            if (info.getBudgetPeriodID() > 0)
                strSQL += " and a.budgetperiodid=" + info.getBudgetPeriodID();
            if (info.getStartDate() != null)
                strSQL += " and to_char(a.startdate,'yyyy-mm-dd')= '" + DataFormat.getDateString(info.getStartDate())+ "'";
            if (info.getEndDate() != null)
                strSQL += " and to_char(a.endDate,'yyyy-mm-dd')= '" + DataFormat.getDateString(info.getEndDate()) + "'";
            if (info.getBudgetFlag() > 0)
                strSQL += " and a.budgetFlag= " + info.getBudgetFlag();
            if (info.getNextCheckUserID() > 0)
                strSQL += " and a.nextCheckUserID = "+ info.getNextCheckUserID();
            if (info.getStatusID() > 0)
                strSQL += " and a.statusID = "+ info.getStatusID();
            else
            {
                strSQL += " and a.statusID != " + Constant.RecordStatus.INVALID;
            }
            
            strSQL += " order by a.budgetSystemID,a.budgetPeriodID asc,a.inputDate desc";
            System.out.println(strSQL);
            transPS = transConn.prepareStatement(strSQL);
            transRS = transPS.executeQuery();
            while (transRS.next())
            {
                planInfo = new BudgetPlanInfo();
                convertResultToEntity(transRS,planInfo);
                list.add(planInfo);
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
	    
	    return list;
	}
	
	public BudgetPlanInfo findByVersionNo(long systemID,long clientID,String versionNo)
	{
	    BudgetPlanInfo info = null;
	    try {
            this.initDAO();
		    String strSQL = "select * from budget_plan where versionNo = ? and statusID != ? and budgetSystemID= ? and clientID = ?";
		    prepareStatement(strSQL);
		    transPS.setString(1,versionNo);
		    transPS.setLong(2,BUDGETConstant.ConstituteStatus.DELETE);
		    transPS.setLong(3,systemID);
		    transPS.setLong(4,clientID);
			executeQuery();
			info = (BudgetPlanInfo) getDataEntityFromResultSet(BudgetPlanInfo.class);
	    } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
	    finally
	    {
	        try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
	    }
	    return info;
	}
	/**
	 * 预算审核
	 * @param info
	 * @throws BudgetException
	 */
	public void check(BudgetPlanInfo info) throws BudgetException 
	{
	    try {
            String strSQL = "";
            if (info.getStatusID() == BUDGETConstant.ConstituteStatus.RETURN)
            {
                this.initDAO();
                strSQL = "update budget_plan set NextCheckUserID = -1,StatusID= "+BUDGETConstant.ConstituteStatus.RETURN + ",NextCheckLevel=-1 where id="+info.getId();
                log.debug(strSQL);
                transPS = this.prepareStatement(strSQL);
                transPS.executeUpdate();
            }
            else
                this.update(info);
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	    finally
	    {
	        try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
	    }
	}
	
	/**
	 * 提交预算对预算表的修改
	 * @param info
	 * @throws BudgetException
	 */
	public void commitBudget(BudgetPlanInfo info) throws BudgetException
	{
	    try {
            this.initDAO();
            String strSQL = "";
            if (info.getBudgetFlag() == BUDGETConstant.BudgetFlag.TOTAL)
                strSQL = "update budget_plan set StatusID= "+BUDGETConstant.ConstituteStatus.COMMIT + ",UPDATEUSERID=?,UPDATEDATE=? where id=?";
            else
                strSQL = "update budget_plan set NextCheckUserID = INPUTUSERID,NEXTCHECKLEVEL=1,StatusID= "+BUDGETConstant.ConstituteStatus.COMMIT + ",UPDATEUSERID=?,UPDATEDATE=? where id=?";
            log.debug(strSQL);
            transPS = this.prepareStatement(strSQL);
            transPS.setLong(1,info.getUpdateUserID());
            transPS.setTimestamp(2,info.getUpdateDate());
            transPS.setLong(3,info.getId());
            transPS.executeUpdate();
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	    finally
	    {
	        try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
	    }
	}
	
	/**
	 * 删除预算编制
	 * @param info
	 * @throws BudgetException
	 */
	public void deleteBudget(BudgetPlanInfo info) throws BudgetException
	{
	    try {
            this.initDAO();
            String strSQL = "";
            strSQL = "update budget_plan set StatusID= "+BUDGETConstant.ConstituteStatus.DELETE + " where id="+info.getId();
            log.debug(strSQL);
            transPS = this.prepareStatement(strSQL);
            transPS.executeUpdate();
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	    finally
	    {
	        try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
	    }
	}
	/**
	 * 汇总后更新下级预算编制
	 * @param info
	 * @throws BudgetException
	 */
	public void collectBudgetUpdate(long collectBudgetPlanID,String condition) throws BudgetException
	{
	    try {
            this.initDAO();
            String strSQL = "";
            strSQL = "update budget_plan set SumBudgetPlanID= "+ collectBudgetPlanID + " where id in (" + condition + ")";
            log.debug(strSQL);
            transPS = this.prepareStatement(strSQL);
            transPS.executeUpdate();
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	    finally
	    {
	        try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
	    }
	}
	
	
	/**
	 * 根据条件查询某单位下级单位集合
	 * @param nClinetID
	 * @param statusID 	状态ID
	 * @return
	 */
	public Collection findLowerClient(long clinetID,long statusID,long officeID,long currencyID) throws BudgetException
	{
	    ArrayList list = new ArrayList();
	    BudgetPlanInfo planInfo = new BudgetPlanInfo();
	    try {
            this.initDAO();
            String strSQL = "";
            strSQL = "select a.id,a.clientID,a.budgetSystemID,b.budgetSystemName,a.budgetPeriodID,c.periodname,a.startdate,a.enddate,a.versionno,a.inputuseriD,a.statusID,a.planDate,a.budgetFlag";
            strSQL += " from budget_plan a, budget_system b, BUDGET_PERIOD c,CLIENTRELATION d";
            strSQL += " where a.clientID=d.clientID";
            strSQL += " and a.budgetSystemID = b.id and a.budgetperiodid=c.id";
            strSQL += " and d.parentclientID = " + clinetID;
            strSQL += " and a.officeID = " + officeID;
            strSQL += " and a.currencyID = " + currencyID;
            strSQL += " and a.budgetflag = " + BUDGETConstant.BudgetFlag.TOTAL;
            if (statusID > 0)
            {
                strSQL += " and a.statusID = " + statusID;
            }
            
            log.debug(strSQL);
            transPS = this.prepareStatement(strSQL);
            transRS = transPS.executeQuery();
            while (transRS.next())
            {
                planInfo = new BudgetPlanInfo();
                convertResultToEntity(transRS,planInfo);
                list.add(planInfo);
            }
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	    finally
	    {
	        try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
	    }
	    return list;
	}
	
	/**
	 * 查询当前用户需要审核的预算
	 * @param clientID
	 * @param userID
	 * @param officeID
	 * @param currencyID
	 * @return
	 * @throws BudgetException
	 */
	public Collection findUnCheckBudget(long clientID,long userID,long officeID,long currencyID) throws BudgetException
	{
	    ArrayList list = new ArrayList();
	    
	    //首先查询出当前用户或转给他权限的用户
	    ApprovalBiz biz = new ApprovalBiz();
	    String sUser = "";	//本单位审批
	    String sUserTotal = "";	//下级单位汇总审批
	    try {
            sUser = biz.findTheVeryUser(Constant.ModuleType.BUDGET,clientID,Constant.ApprovalAction.BUDGET_CURRENT,officeID,currencyID,userID);
            sUserTotal = biz.findTheVeryUser(Constant.ModuleType.BUDGET,clientID,Constant.ApprovalAction.BUDGET_TOTAL,officeID,currencyID,userID);
        } catch (Exception e2) {
            // TODO Auto-generated catch block
            e2.printStackTrace();
            throw new BudgetException();
        }
	    
	    BudgetPlanInfo planInfo = null;
	    try {
            this.initDAO();
            String strSQL = "select a.id,a.clientID,a.budgetSystemID,b.budgetSystemName,a.budgetPeriodID,c.periodname,a.startdate,a.enddate,a.versionno,a.inputuseriD,a.statusID,a.planDate,a.budgetFlag";
            strSQL += " from budget_plan a,budget_system b, BUDGET_PERIOD c";
            strSQL += " where a.budgetSystemID = b.id and a.budgetperiodid=c.id";
            strSQL += " and (a.nextCheckUserID in " + sUser + " or a.nextCheckUserID in " + sUserTotal + ")";
            strSQL += " and a.officeID = " + officeID;
            strSQL += " and a.currencyID = " + currencyID;
            strSQL += " order by a.budgetSystemID,a.budgetPeriodID asc,a.inputDate desc";
            log.print(strSQL);
            transPS = transConn.prepareStatement(strSQL);
            transRS = transPS.executeQuery();
            while (transRS.next())
            {
                planInfo = new BudgetPlanInfo();
                convertResultToEntity(transRS,planInfo);
                list.add(planInfo);
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
	    
	    return list;
	}
	/**
	 * 取本单位以及下级单位的预算编制状态
	 * @param info
	 * @return
	 * @throws BudgetException
	 */
	public Collection getLowerClientBudgetStatus(BudgetPlanInfo info)throws BudgetException
	{
	    ArrayList list = new ArrayList();
	   
	    BudgetPlanInfo planInfo = null;
	    try {
            this.initDAO();
            String strSQL = "";
            strSQL += "select d.clientID,nvl(c.statusID,-1) statusID from \n";
            strSQL += "( \n";
            //下面的SQL是查询一个单位版本号最大的预算的状态,只包括汇总
            strSQL += "		select a.clientID,a.statusID from budget_plan a, \n";
            strSQL += "		(select  a.clientID,max(a.versionNo) versionNo from budget_plan a,clientrelation b  \n";
            strSQL += "			where a.clientid = b.clientid and a.budgetflag="+ BUDGETConstant.BudgetFlag.TOTAL +"\n";
            strSQL += "			and a.statusID!="+ Constant.RecordStatus.INVALID + " \n";
            strSQL += "			and a.officeID="+ info.getOfficeID() + " \n";
            strSQL += "			and a.currencyID="+ info.getCurrencyID() + " \n";
            strSQL += "			and a.BudgetSystemID ="+ info.getBudgetSystemID() + " \n";
            strSQL += " 		and a.BudgetPeriodID = " + info.getBudgetPeriodID();
            strSQL += " 		and to_char(a.startdate,'yyyy-mm-dd')= '" + DataFormat.getDateString(info.getStartDate())+ "'";
            strSQL += "		    and  a.clientID != "+ info.getClientID() + "\n";
            strSQL += "		    and  b.parentclientid = "+ info.getClientID() + "\n";
            strSQL += "			group by a.clientID \n";
            strSQL += "			union \n";
            strSQL += "			select clientid, versionNo \n";
            strSQL += "			from budget_plan \n";
            strSQL += "			where \n";
            strSQL += "			 statusID!="+ Constant.RecordStatus.INVALID + " \n";            
            strSQL += "			and officeID="+ info.getOfficeID() + " \n";
            strSQL += "			and currencyID="+ info.getCurrencyID() + " \n";
            strSQL += "		    and budgetflag!="+ BUDGETConstant.BudgetFlag.TOTAL +"\n";
            strSQL += "			and BudgetSystemID ="+ info.getBudgetSystemID() + " \n";
            strSQL += " 		and BudgetPeriodID = " + info.getBudgetPeriodID();
            strSQL += " 		and to_char(startdate,'yyyy-mm-dd')= '" + DataFormat.getDateString(info.getStartDate())+ "'";
            strSQL += "		    and  clientID = "+ info.getClientID() + "\n";
            strSQL += "			 )b \n";
            strSQL += " 	where a.clientID=b.clientID and a.versionNo = b.versionNo \n";
            //结束
            strSQL += ") c, \n";
            //下面的SQL是查询本单位以及下级单位
            strSQL += "( \n";
            strSQL += "		select "+ info.getClientID() +" as clientID from dual \n";
            strSQL += "		union \n";
            strSQL += "		select clientID from CLIENTRELATION \n";
            strSQL += "		where parentclientID = "+ info.getClientID() + "\n";
            strSQL += ") d \n";
            //结束
            //下面SQL是把两段代码结合起来
            strSQL += " where c.clientID(+)=d.clientID";
            
                
            log.print(strSQL);
            transPS = transConn.prepareStatement(strSQL);
            transRS = transPS.executeQuery();
            while (transRS.next())
            {
                planInfo = new BudgetPlanInfo();
                planInfo.setClientID(transRS.getLong("clientID"));
                planInfo.setStatusID(transRS.getLong("statusID"));
                list.add(planInfo);
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
	    
	    return list;
	}
	
	/**
	 * 把结果集转换成Entity
	 * @param transRS
	 * @param planInfo
	 * @throws SQLException
	 */
	private void convertResultToEntity(ResultSet transRS,BudgetPlanInfo planInfo) throws SQLException
	{
	    planInfo.setId(transRS.getLong("id"));
        planInfo.setBudgetSystemID(transRS.getLong("budgetSystemID"));
        planInfo.setBudgetSystemName(transRS.getString("budgetSystemName"));
        planInfo.setBudgetPeriodID(transRS.getLong("budgetPeriodID"));
        planInfo.setBudgetPeriodName(transRS.getString("periodname"));
        planInfo.setStartDate(transRS.getTimestamp("startdate"));
        planInfo.setEndDate(transRS.getTimestamp("endDate"));
        planInfo.setVersionNo(transRS.getString("versionNo"));
        planInfo.setInputUserID(transRS.getLong("inputuseriD"));
        planInfo.setStatusID(transRS.getLong("statusID"));
        planInfo.setConstituteDate(transRS.getTimestamp("planDate"));
        planInfo.setBudgetFlag(transRS.getLong("budgetFlag"));
        planInfo.setClientID(transRS.getLong("clientID"));
	}
	
	/**
	 * 得到汇总预算包括的预算id
	 * @param planInfo
	 * @return
	 * @throws BudgetException
	 */
	 public String getSumBudgetIncludePlanID(BudgetPlanInfo planInfo) throws BudgetException
	 {
	 	String strPlanID = "";	 	 
	     
		    try {
	            this.initDAO();
	            //首先查询出所有的下级单位已审核的汇总,根据项目ID汇总
	            String strSQL = "";	          
	            strSQL += "		select a.ID from budget_plan a,budget_plandetail b, clientRelation c \n";
	            strSQL += "		where a.ID = b.planID and a.clientid = c.clientid \n";
	            strSQL += "		and a.officeID="+ planInfo.getOfficeID() + " \n";
	            strSQL += "		and a.currencyID="+ planInfo.getCurrencyID() + " \n";
	            strSQL += "		and a.statusID = "+ BUDGETConstant.ConstituteStatus.UPPERCHECK +" \n";
	            strSQL += "		and a.budgetflag="+ BUDGETConstant.BudgetFlag.TOTAL +"\n";
	            strSQL += "		and b.statusID!="+ Constant.RecordStatus.INVALID + " \n";			
	            strSQL += "		and a.BudgetSystemID ="+ planInfo.getBudgetSystemID() + " \n";
	            strSQL += " 	and a.BudgetPeriodID = " + planInfo.getBudgetPeriodID();
	            strSQL += " 	and to_char(startdate,'yyyy-mm-dd')= '" + DataFormat.getDateString(planInfo.getStartDate())+ "'";
	            strSQL += "		    and  a.clientID != "+ planInfo.getClientID() + "\n";
	            strSQL += "		    and  c.parentclientid= "+ planInfo.getClientID() + "\n";
	            strSQL += "		union \n";
	            strSQL += "		select a.ID from budget_plan a,budget_plandetail b \n";
	            strSQL += "		where a.ID = b.planID \n";
	            strSQL += "		and a.officeID="+ planInfo.getOfficeID() + " \n";
	            strSQL += "		and a.currencyID="+ planInfo.getCurrencyID() + " \n";
	            strSQL += "		and a.statusID = "+ BUDGETConstant.ConstituteStatus.CURRENTCHECK +" \n";
	            strSQL += "		and a.budgetflag!="+ BUDGETConstant.BudgetFlag.TOTAL +"\n";
	            strSQL += "		and b.statusID!="+ Constant.RecordStatus.INVALID + " \n";			
	            strSQL += "		and a.BudgetSystemID ="+ planInfo.getBudgetSystemID() + " \n";
	            strSQL += " 	and a.BudgetPeriodID = " + planInfo.getBudgetPeriodID();
	            strSQL += " 	and to_char(startdate,'yyyy-mm-dd')= '" + DataFormat.getDateString(planInfo.getStartDate())+ "'";
	            strSQL += "		and  a.clientID = "+ planInfo.getClientID() + "\n";	             
	            
	  
	            
	            log.print(strSQL);
	            transPS = transConn.prepareStatement(strSQL);
	            /*transPS.setLong(1,planInfo.getOfficeID());
	            transPS.setLong(2,planInfo.getCurrencyID());
	            transPS.setLong(3,BUDGETConstant.ConstituteStatus.CHECK);
	            transPS.setLong(4,BUDGETConstant.BudgetFlag.TOTAL);
	            transPS.setLong(5,Constant.RecordStatus.VALID);*/
	            transRS = transPS.executeQuery();
	            while (transRS.next())
	            {
	            	if(strPlanID==null || strPlanID.trim().length()==0)
	            	{
	            		strPlanID = String.valueOf(transRS.getLong("ID"));
	            	}
	            	else
	            	{
	            		strPlanID= strPlanID+ ","+String.valueOf(transRS.getLong("ID"));
	            	}
	            }
	            
	        } catch (Exception e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	            throw new BudgetException();
	        }
	        finally
	        {
	            try {
	                this.finalizeDAO();
	            } catch (ITreasuryDAOException e1) {
	                // TODO Auto-generated catch block
	                e1.printStackTrace();
	            }
	        }		    
	 	return strPlanID;
	 		
	 }
	
	/**
	 * 汇总本单位和下级单位的各项目的预算金额,形成一个编制的Entity,在EJB层调用SAVE保存
	 * @param planInfo
	 * @return
	 * @throws BudgetException
	 */
	public BudgetPlanInfo getSumPlanInfo(BudgetPlanInfo planInfo)throws BudgetException
	{
	    ArrayList detailList = new ArrayList();
        BudgetPlanDetailInfo detailInfo = null;
	    try {
            this.initDAO();
            //首先查询出所有的下级单位已审核的汇总,根据项目ID汇总
            String strSQL = "";
            strSQL += "select itemID,sum(BUDGETAMOUNT) as BUDGETAMOUNT  from \n";
            strSQL += "( \n";
            strSQL += "		select a.clientID,b.itemID,b.BUDGETAMOUNT from budget_plan a,budget_plandetail b, clientRelation c  \n";
            strSQL += "		where a.ID = b.planID and a.clientid = c.clientid\n";
            strSQL += "		and a.officeID="+ planInfo.getOfficeID() + " \n";
            strSQL += "		and a.currencyID="+ planInfo.getCurrencyID() + " \n";
            strSQL += "		and a.statusID = "+ BUDGETConstant.ConstituteStatus.UPPERCHECK +" \n";
            strSQL += "		and a.budgetflag="+ BUDGETConstant.BudgetFlag.TOTAL +"\n";
            strSQL += "		and b.statusID!="+ Constant.RecordStatus.INVALID + " \n";			
            strSQL += "		and a.BudgetSystemID ="+ planInfo.getBudgetSystemID() + " \n";
            strSQL += " 	and a.BudgetPeriodID = " + planInfo.getBudgetPeriodID();
            strSQL += " 	and to_char(startdate,'yyyy-mm-dd')= '" + DataFormat.getDateString(planInfo.getStartDate())+ "'";
            strSQL += "		and  a.clientID != "+ planInfo.getClientID() + "\n";
            strSQL += "	    and  c.parentclientid= "+ planInfo.getClientID() + "\n";
            strSQL += "		union \n";
            strSQL += "		select a.clientID,b.itemID,b.AMOUNT BUDGETAMOUNT from budget_plan a,budget_plandetail b \n";
            strSQL += "		where a.ID = b.planID \n";
            strSQL += "		and a.officeID="+ planInfo.getOfficeID() + " \n";
            strSQL += "		and a.currencyID="+ planInfo.getCurrencyID() + " \n";
            strSQL += "		and (a.statusID = "+ BUDGETConstant.ConstituteStatus.CURRENTCHECK +" or a.statusID="+ BUDGETConstant.ConstituteStatus.LASTCHECK +" )\n";
            strSQL += "		and a.budgetflag!="+ BUDGETConstant.BudgetFlag.TOTAL +"\n";
            strSQL += "		and b.statusID!="+ Constant.RecordStatus.INVALID + " \n";			
            strSQL += "		and a.BudgetSystemID ="+ planInfo.getBudgetSystemID() + " \n";
            strSQL += " 	and a.BudgetPeriodID = " + planInfo.getBudgetPeriodID();
            strSQL += " 	and to_char(startdate,'yyyy-mm-dd')= '" + DataFormat.getDateString(planInfo.getStartDate())+ "'";
            strSQL += "		and  a.clientID = "+ planInfo.getClientID() + "\n";
            
             
            strSQL += ") c, \n";
            strSQL += "( \n";           
          
            strSQL += "		select clientID from CLIENTRELATION \n";
            strSQL += "		where parentclientID =  "+ planInfo.getClientID() +" \n";
            strSQL += "     union \n";
            strSQL += "		select clientID from CLIENTRELATION \n";
            strSQL += "		where clientID =  "+ planInfo.getClientID() +" \n";
            strSQL += ")d \n";
            strSQL += "where c.clientID = d.clientID \n";
            strSQL += "group by itemID \n";
  
            
            log.print(strSQL);
            transPS = transConn.prepareStatement(strSQL);
            /*transPS.setLong(1,planInfo.getOfficeID());
            transPS.setLong(2,planInfo.getCurrencyID());
            transPS.setLong(3,BUDGETConstant.ConstituteStatus.CHECK);
            transPS.setLong(4,BUDGETConstant.BudgetFlag.TOTAL);
            transPS.setLong(5,Constant.RecordStatus.VALID);*/
            transRS = transPS.executeQuery();
            while (transRS.next())
            {
                detailInfo = new BudgetPlanDetailInfo();
                detailInfo.setItemID(transRS.getLong("itemID"));
        		detailInfo.setBudgetAmount(transRS.getDouble("BUDGETAMOUNT"));
        		detailInfo.setStatusID(Constant.RecordStatus.VALID);
        		detailList.add(detailInfo);
            }
            planInfo.setPlanDetail(detailList);
            planInfo.setStatusID(BUDGETConstant.ConstituteStatus.SAVE);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
	    return planInfo;
	}
	
	/**
	 * 遍历实现更新所有此次汇总预算所设计到的下级单位预算状态
	 * 主要在财务公司最后一级审核时调用
	 * @param planID
	 * @throws BudgetException
	 */
	
	public void updateAllLowerClientBudget(long planID) throws BudgetException
	{
        try {
            log.print("开始更新预算状态");
            this.updateStatus(planID,BUDGETConstant.ConstituteStatus.LASTCHECK);
            log.print("更新预算状态结束");

		    //查询此次汇总所汇总的下级预算,遍历并更新下级预算
            BudgetPlanInfo info = new BudgetPlanInfo();
            info.setSumBudgetplanID(planID);
            
            Collection c = findByCondition(info);
            if (c!=null && c.size() > 0)
            {
                System.out.println("c.size()="+c.size());
                //初始化dao
                Budget_planDetailDAO detailDao = new Budget_planDetailDAO();
                Budget_ItemSumDAO sumDao = new Budget_ItemSumDAO();
                
                //开始循环更新此次汇总的预算
                Iterator it = c.iterator();
                while (it.hasNext())
                {
                    BudgetPlanInfo tmp = (BudgetPlanInfo)it.next();
//                  如果是汇总预算,继续遍历此次汇总所设计到的预算
                    if (tmp.getBudgetFlag() != BUDGETConstant.BudgetFlag.TOTAL)
                    {
                        log.print("编制预算");
                        this.updateStatus(tmp.getId(),BUDGETConstant.ConstituteStatus.LASTCHECK);
//                      把预算数据插入汇总表
                        log.print("开始将预算信息拷贝到预算汇总表");
            		    BudgetPlanInfo tmpPlan = this.findByPlanID(tmp.getId()); 
            		    
            		    log.print("查询明细");
            		    BudgetPlanDetailInfo detailInfo = new BudgetPlanDetailInfo();
            		    detailInfo.setPlanID(tmp.getId());
            	        detailInfo.setStatusID(Constant.RecordStatus.VALID);            		    
            	        Collection tmpCollection = detailDao.findByCondition(detailInfo);
            	        log.print("查询明细结束");

            		    BudgetPlanDetailInfo planDetailInfo = null;
            		    BudgetItemSumInfo sumInfo = null;
            		    
            		    Iterator tmpIt = tmpCollection.iterator();
            		    while (tmpIt.hasNext())
            		    {
            		        planDetailInfo = (BudgetPlanDetailInfo)tmpIt.next();
            		        sumInfo = new BudgetItemSumInfo();
            		        sumInfo.setBudgetSystemID(tmpPlan.getBudgetSystemID());
            		        sumInfo.setBudgerPeriodID(tmpPlan.getBudgetPeriodID());
            		        sumInfo.setClientID(tmpPlan.getClientID());
            		        sumInfo.setStartDate(tmpPlan.getStartDate());
            		        sumInfo.setEndDate(tmpPlan.getEndDate());
            		        sumInfo.setITemID(planDetailInfo.getItemID());
            		        sumInfo.setBudgetAmount(planDetailInfo.getAmount());
            		        sumInfo.setOriginalAmount(planDetailInfo.getOriginalAmount());
            		        sumInfo.setStatusID(Constant.RecordStatus.VALID);
            		        sumInfo.setInputDate(Env.getSystemDateTime());
            		        
            		        sumDao.saveOrUpdate(sumInfo);
            		    }
            		    log.print("将预算信息拷贝到预算汇总表结束");
                    }
                    else
                    {
                        log.print("汇总预算");
                        updateAllLowerClientBudget(tmp.getId());
                    }
                }
            }
            
        } catch (ITreasuryDAOException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
            throw new BudgetException();
        }
	}
	
	/**
	 * 新增或者更新编制信息
	 * @return 新增或更新的ID
	 */
	public long saveOrUpdate(BudgetPlanInfo info) throws BudgetException
	{
	    long lID = info.getId();
	    BudgetPlanInfo tmp = new BudgetPlanInfo();
	    tmp.setBudgetSystemID(info.getBudgetSystemID());
	    tmp.setBudgetPeriodID(info.getBudgetPeriodID());
	    tmp.setClientID(info.getClientID());
	    tmp.setStartDate(info.getStartDate());
	    tmp.setOfficeID(info.getOfficeID());
	    tmp.setCurrencyID(info.getOfficeID());
	    
	    try {
            Collection c = this.findByCondition(tmp);
            if (c != null && c.size() > 0)
                this.update(info);
            else
                lID = this.add(info);
        } catch (ITreasuryDAOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
	    return lID;
	    
	}
	
	/**
	 * 检查是否可以编制，调整或汇总
	 * 规则：预算编制，如果已经编制（同期），结果如果不是拒绝或主动删除的都不允许再次编制
	 * 		预算调整和预算汇总，如果已经做过调整（同期），结果如果不是拒绝或主动删除，或者最终审核完成，不允许再次调整或汇总
	 * @param info
	 * @return true 已经存在，不可以再次编制;false，可以编制
	 * @throws BudgetException
	 */
	public boolean IsExist(BudgetPlanInfo info) throws BudgetException
	{
	    System.out.println("enter IsExist method");
	    boolean lBool = false;
	    //首先检查是否已经编制过
	    Collection c = findPlanByCondition(info);
	    
	    if (c != null && c.size()>0)
	    {
	        BudgetPlanInfo tmp = null;
	        Iterator it = c.iterator();
	        while (it.hasNext())
	        {
	            tmp = (BudgetPlanInfo)it.next();
	            if (info.getBudgetFlag() == BUDGETConstant.BudgetFlag.CONSTITUTE)
	            {
		            if (tmp.getStatusID() != BUDGETConstant.ConstituteStatus.DELETE
		                    &&tmp.getStatusID() != BUDGETConstant.ConstituteStatus.REFUSE)
		                lBool = true;
	            }
	            else if (info.getBudgetFlag() == BUDGETConstant.BudgetFlag.ADJUST
	                    || info.getBudgetFlag() == BUDGETConstant.BudgetFlag.TOTAL)
	            {
	                if (tmp.getStatusID() != BUDGETConstant.ConstituteStatus.DELETE
		                    && tmp.getStatusID() != BUDGETConstant.ConstituteStatus.REFUSE
		                    && tmp.getStatusID() != BUDGETConstant.ConstituteStatus.LASTCHECK)
	                    lBool = true;
	            }
	        }
	    }
	    return lBool;
	}
	/**
	* 查找体系下单位是否已经做了预算
	*/
    public Collection findRecord(BudgetPlanInfo info) throws BudgetException
    {
        ArrayList list = new ArrayList();
	    BudgetPlanInfo planInfo = null;
	    try {
            this.initDAO();
            String strSQL = "select id from budget_plan";
            strSQL += " where budgetSystemID = "+info.getBudgetSystemID()+"";
            strSQL += " and clientID = "+info.getClientID()+" and statusid>0";
            transPS = transConn.prepareStatement(strSQL);
            transRS = transPS.executeQuery();
            while (transRS.next())
            {
                planInfo = new BudgetPlanInfo();
                planInfo.setId(transRS.getLong(1));               
                list.add(planInfo);
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
	    
	    return list;
    }
	public static void main(String[] args)
	{
	    Budget_PlanDAO dao = new Budget_PlanDAO();
	    QueryBudgetInfo info = new QueryBudgetInfo();
        info.setClientID(164);
        info.setBudgetSystemID(1);
        info.setBudgetPeriodID(3);
        info.setStartDate(Timestamp.valueOf("2005-06-30 00:00:00"));
        info.setShowColumn(new long[]{BUDGETConstant.BudgetColumnList.BUDGETSTRUCTURE});
        try {
            double[] amount = dao.getAmountByCondition(info,4);
            System.out.println(amount[0]);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
	}
}
