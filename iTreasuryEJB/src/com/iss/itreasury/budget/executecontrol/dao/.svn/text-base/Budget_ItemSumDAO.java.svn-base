/* Generated by Together */

package com.iss.itreasury.budget.executecontrol.dao;
import java.sql.SQLException;
import java.util.Collection;

import com.iss.itreasury.budget.dao.BudgetDAO;
import com.iss.itreasury.budget.exception.BudgetException;
import com.iss.itreasury.budget.executecontrol.dataentity.BudgetItemSumInfo;
import com.iss.itreasury.budget.executecontrol.dataentity.ControlInfo;
import com.iss.itreasury.budget.util.BUDGETConstant;
import com.iss.itreasury.dao.ITreasuryDAOException;
import com.iss.itreasury.ebank.util.OBConstant;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.DataFormat;
public class Budget_ItemSumDAO  extends BudgetDAO {
	
	public Budget_ItemSumDAO(){
		super("Budget_ItemSum");
		super.setUseMaxID(); 
	}
	/**
	* 校验预算项目是否超出预算，关联结算交易，
    * 预算执行情况汇总，网银指令表
    * 区分刚性还是柔性预算
	* lAccountID 账户 如果账户有权限没选泽项目抛异常
    * lItemID 项目ID
    * amount  金额
    * lBudgetType 预算类型 1只判断刚性 2两种都判断 抛出不同异常
	*/
 /*    public long checkBudget(ControlInfo info) throws Exception {
        return -1;
    }*/
     
     
     /**
      * 得到某账户下预算项目的当日交易累计未导入金额（目前只考虑活期交易）
      * @author xrli
      *
      * To change the template for this generated type comment go to
      * Window - Preferences - Java - Code Generation - Code and Comments
      */
     public double getUnImportAmount(ControlInfo info) throws BudgetException
	 {
     	double amount = 0.0;
     	
     		try {
				initDAO();	
				StringBuffer mSql = new StringBuffer();
				// select		
				mSql.append("select sum(mAmount) as unImportAmount \n");
				
				mSql.append("from SETT_TRANSACCOUNTDETAIL \n");
				
				mSql.append("where BudgetItemID = " + info.getItemID() + " and nTransAccountID=" + info.getAccountID() + "   \n");				
				
				
				mSql.append("and dtExecute=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");						
				
				
				mSql.append("and BudgetStatusID <>2 \n");
				
				System.out.println("---getUnImportAmount--Sql--"+mSql.toString());
				this.prepareStatement(mSql.toString());
				this.executeQuery();
				if(transRS.next())
				{
					return transRS.getDouble(1);
				
				}
				
				
				
			}catch(ITreasuryDAOException e1)
			{
//				 TODO Auto-generated catch block				
				e1.printStackTrace();
	     		throw new BudgetException("Sec_E100", e1);
			}			
     		catch (SQLException e) {
				// TODO Auto-generated catch block				
				e.printStackTrace();
	     		throw new BudgetException("Sec_E100", e);
			}
			finally
 			{
 				try
 				{
 					this.finalizeDAO();
 				} catch (ITreasuryDAOException e1)
 				{
 					// TODO Auto-generated catch block
 					e1.printStackTrace();
 				}
 			}
		return amount;	
     	
     }
     
     /**
      * 得到某客户下预算项目的当日网银交易累计未接收金额（目前只考虑活期交易）
      * @author xrli
      *
      * To change the template for this generated type comment go to
      * Window - Preferences - Java - Code Generation - Code and Comments
      */
     public double getUnAcceptAmount(ControlInfo info) throws BudgetException
	 {
     	double amount = 0.0;
     	
     		try {
				initDAO();	
				StringBuffer mSql = new StringBuffer();
				// select		
				mSql.append("select sum(mAmount) as unAcceptAmount \n");
				
				mSql.append("from OB_FINANCEINSTR \n");
				
				mSql.append("where BudgetItemID = " + info.getItemID() + " and nClientID=" + info.getClientID() + "   \n");				
				
				
				mSql.append("and dtExecute=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");						
				
				
				mSql.append("and nStatus >="+ OBConstant.SettInstrStatus.SAVE + " and nStatus<=" + OBConstant.SettInstrStatus.DEAL  + " \n");
				
				System.out.println("---getUnAcceptAmount--Sql--"+mSql.toString());
				this.prepareStatement(mSql.toString());
				this.executeQuery();
				if(transRS.next())
				{
					return transRS.getDouble(1);
				
				}
				
				
				
			}catch(ITreasuryDAOException e1)
			{
//				 TODO Auto-generated catch block				
				e1.printStackTrace();
	     		throw new BudgetException("Sec_E100", e1);
			}			
     		catch (SQLException e) {
				// TODO Auto-generated catch block				
				e.printStackTrace();
	     		throw new BudgetException("Sec_E100", e);
			}
			finally
 			{
 				try
 				{
 					this.finalizeDAO();
 				} catch (ITreasuryDAOException e1)
 				{
 					// TODO Auto-generated catch block
 					e1.printStackTrace();
 				}
 			}
		return amount;	
     	
     }
     
     /**
      * 得到某客户下预算项目的当日交易累计未复核金额（目前只考虑活期交易）
      * @author xrli
      *
      * To change the template for this generated type comment go to
      * Window - Preferences - Java - Code Generation - Code and Comments
      */
     public double getUnCheckAmount(ControlInfo info) throws BudgetException
	 {
     	double amount = 0.0;
     	
     		try {
				initDAO();	
				StringBuffer mSql = new StringBuffer();
				// select		
				mSql.append("select sum(mAmount) as unCheckAmount \n");
				
				mSql.append("from SETT_TRANSCURRENTDEPOSIT \n");
				
				mSql.append("where BudgetItemID = " + info.getItemID() + " and (nReceiveClientid=" + info.getClientID() + " or nPayClientid = " + info.getClientID() + ")  \n");				
				
				
				mSql.append("and dtExecute=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");						
				
				
				mSql.append("and nStatusID =2 \n");
				
				System.out.println("---getUnCheckAmount--Sql--"+mSql.toString());
				this.prepareStatement(mSql.toString());
				this.executeQuery();
				if(transRS.next())
				{
					return transRS.getDouble(1);
				
				}
				
				
				
			}catch(ITreasuryDAOException e1)
			{
//				 TODO Auto-generated catch block				
				e1.printStackTrace();
	     		throw new BudgetException("Sec_E100", e1);
			}			
     		catch (SQLException e) {
				// TODO Auto-generated catch block				
				e.printStackTrace();
	     		throw new BudgetException("Sec_E100", e);
			}
			finally
 			{
 				try
 				{
 					this.finalizeDAO();
 				} catch (ITreasuryDAOException e1)
 				{
 					// TODO Auto-generated catch block
 					e1.printStackTrace();
 				}
 			}
		return amount;	
     	
     }
     
     /**
      * 校验预算项目是否已经编制预算
      * @param info
      * @return
      * @throws BudgetException
      */
     public long checkBudgetItem(ControlInfo info) throws BudgetException
	 {
     	long lRtn = -1;
     	try {
			initDAO();	
			StringBuffer mSql = new StringBuffer();
			// select		
			mSql.append("select count(*) \n");
			
			mSql.append("from Budget_ItemSum \n");
			
			mSql.append("where ItemID = " + info.getItemID() + " and clientid=" + info.getClientID() + "  \n");

				
			mSql.append("and StartDate<=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");
			
			mSql.append("and endDate>=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");		
			
			
			mSql.append("and StatusID <> 0 \n");
			
			System.out.println("---checkBudgetItem--Sql--"+mSql.toString());
			this.prepareStatement(mSql.toString());
			this.executeQuery();
			if(transRS.next())
			{
				return transRS.getLong(1);			
			}								
			
		}catch(ITreasuryDAOException e1)
		{
//			 TODO Auto-generated catch block				
			e1.printStackTrace();
     		throw new BudgetException("Sec_E100", e1);
		}			
 		catch (SQLException e) {
			// TODO Auto-generated catch block				
			e.printStackTrace();
     		throw new BudgetException("Sec_E100", e);
		}
		finally
			{
				try
				{
					this.finalizeDAO();
				} catch (ITreasuryDAOException e1)
				{
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
     	return lRtn;
     }
     
     /**
      * 得到预算项目的最小可用预算余额
      * @author xrli
      *
      * To change the template for this generated type comment go to
      * Window - Preferences - Java - Code Generation - Code and Comments
      */
     public double getMinBudgetBalance(ControlInfo info) throws BudgetException
	 {
     	double balance = 0.0;
     	
     		try {
				initDAO();	
				StringBuffer mSql = new StringBuffer();
				// select
				mSql.append("select balance from ( \n");
				mSql.append("select min(a.BudgetAmount*(1+b.SUPPLESCALE)-nvl(a.ExecuteAmount,0)) as balance \n");
				
				mSql.append("from Budget_ItemSum a,Budget_templet b  \n");
				
				mSql.append("where a.ItemID = b.id and ItemID = " + info.getItemID() + " and clientid=" + info.getClientID() + "  \n");
                
				mSql.append("and b.BUDGETTYPE ="+ BUDGETConstant.BudgetType.RIGIDITY + " \n");
					
				mSql.append("and a.StartDate<=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");
				
				mSql.append("and a.endDate>=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");		
				
				
				mSql.append("and a.StatusID <> 0 \n");
				
				mSql.append("union select min(a.BudgetAmount*(1+b.SUPPLESCALE)-nvl(a.ExecuteAmount,0)) as balance \n");
				
				mSql.append("from Budget_ItemSum a,Budget_templet b  \n");
				
				mSql.append("where a.ItemID = b.id and ItemID = " + info.getItemID() + " and clientid=" + info.getClientID() + "  \n");
                
				mSql.append("and b.BUDGETTYPE ="+ BUDGETConstant.BudgetType.SUPPLENESS + " \n");
					
				mSql.append("and a.StartDate<=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");
				
				mSql.append("and a.endDate>=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");		
				
				
				mSql.append("and a.StatusID <> 0 \n");
				
				mSql.append(" ) where  balance <>0 \n");
				
				System.out.println("---getMinBudgetBalance--Sql--"+mSql.toString());
				this.prepareStatement(mSql.toString());
				this.executeQuery();
				if(transRS.next())
				{
					return transRS.getDouble(1);
				
				}								
				
			}catch(ITreasuryDAOException e1)
			{
//				 TODO Auto-generated catch block				
				e1.printStackTrace();
	     		throw new BudgetException("Gen_E001", e1);
			}			
     		catch (SQLException e) {
				// TODO Auto-generated catch block				
				e.printStackTrace();
	     		throw new BudgetException("Gen_E001", e);
			}
			finally
 			{
 				try
 				{
 					this.finalizeDAO();
 				} catch (ITreasuryDAOException e1)
 				{
 					// TODO Auto-generated catch block
 					e1.printStackTrace();
 				}
 			}
			return balance;
     }
     /**
      * 得到预算项目的用于柔性提示的预算余额（不包括弹性比例）
      * @author xrli
      *
      * To change the template for this generated type comment go to
      * Window - Preferences - Java - Code Generation - Code and Comments
      */
     public double getMinSuppleBudgetBalance(ControlInfo info) throws BudgetException
	 {
     	double balance = 0.0;
     	
     		try {
				initDAO();	
				StringBuffer mSql = new StringBuffer();
				// select
				mSql.append("select balance from ( \n");
				mSql.append("select min(a.BudgetAmount-nvl(a.ExecuteAmount,0)) as balance \n");
				
				mSql.append("from Budget_ItemSum a,Budget_templet b  \n");
				
				mSql.append("where a.ItemID = b.id and ItemID = " + info.getItemID() + " and clientid=" + info.getClientID() + "  \n");				
					
				mSql.append("and a.StartDate<=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");
				
				mSql.append("and a.endDate>=to_date('"+DataFormat.formatDate(info.getExecuteDate())+"','yyyy-mm-dd') ");		
				
				
				mSql.append("and a.StatusID <> 0 \n");				
				
				mSql.append(" ) where  balance <>0 \n");
				
				System.out.println("---getMinSuppleBudgetBalance--Sql--"+mSql.toString());
				this.prepareStatement(mSql.toString());
				this.executeQuery();
				if(transRS.next())
				{
					return transRS.getDouble(1);
				
				}								
				
			}catch(ITreasuryDAOException e1)
			{
//				 TODO Auto-generated catch block				
				e1.printStackTrace();
	     		throw new BudgetException("Gen_E001", e1);
			}			
     		catch (SQLException e) {
				// TODO Auto-generated catch block				
				e.printStackTrace();
	     		throw new BudgetException("Gen_E001", e);
			}
			finally
 			{
 				try
 				{
 					this.finalizeDAO();
 				} catch (ITreasuryDAOException e1)
 				{
 					// TODO Auto-generated catch block
 					e1.printStackTrace();
 				}
 			}
			return balance;
     }
     
     public void saveOrUpdate(BudgetItemSumInfo sumInfo) throws BudgetException
     {
         BudgetItemSumInfo tmpInfo = new BudgetItemSumInfo();
         tmpInfo.setBudgetSystemID(sumInfo.getBudgetSystemID());
         tmpInfo.setBudgerPeriodID(sumInfo.getBudgetPeriodID());
         tmpInfo.setClientID(sumInfo.getClientID());
         tmpInfo.setITemID(sumInfo.getITemID());
         tmpInfo.setStartDate(sumInfo.getStartDate());
         tmpInfo.setEndDate(sumInfo.getEndDate());
         tmpInfo.setStatusID(Constant.RecordStatus.VALID);
         
         String strSQL = "";
         Collection c = null;
         
         try {
            c = this.findByCondition(tmpInfo);
            if (c!=null && c.size() > 0)
            {
                //更新
                BudgetItemSumInfo tmp = (BudgetItemSumInfo)c.iterator().next();
                long lID = tmp.getId();
                double amount = tmp.getBudgetAmount(); 
                
                log.print("更新执行情况汇总表里的ID："+ lID);
                log.print("原预算金额："+ amount);
                log.print("新调整金额："+ sumInfo.getBudgetAmount());
                tmpInfo = new BudgetItemSumInfo();
                tmpInfo.setId(lID);
                tmpInfo.setBudgetAmount(amount + sumInfo.getBudgetAmount());
                tmpInfo.setInputDate(sumInfo.getInputDate());
                this.update(tmpInfo);
            }
            else	//新增
            {
                this.add(sumInfo);
            }
        } catch (ITreasuryDAOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new BudgetException();
        }
        finally
        {
            try {
                this.finalizeDAO();
            } catch (ITreasuryDAOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
     }
}
