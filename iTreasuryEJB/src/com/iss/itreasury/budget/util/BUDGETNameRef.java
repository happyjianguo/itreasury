/* Generated by Together */

package com.iss.itreasury.budget.util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.HashMap;

import com.iss.itreasury.budget.util.BUDGETHTML;
import com.iss.itreasury.util.Constant;
import com.iss.itreasury.util.Database;

/**
 * @author weilu
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class BUDGETNameRef {
	
    private static HashMap hmClientName = new HashMap();
    private static HashMap hmClientCode = new HashMap();
    private static HashMap hmUserName = new HashMap();
    private static HashMap hmAccountCode = new HashMap();
    private static HashMap hmAccountType = new HashMap();
    private static HashMap hmItemCode = new HashMap();
    private static HashMap hmItemName = new HashMap();
    private static HashMap hmSystemCode = new HashMap();
    private static HashMap hmSystemName = new HashMap();
    private static HashMap hmSystemID = new HashMap();
    private static HashMap hmPeriodID = new HashMap();
    

    
    private static void findClient()
	{
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		try
		{
			hmClientName = new HashMap();
			hmClientCode = new HashMap();			
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select id, scode,sname from client");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next())
			{
				hmClientName.put(String.valueOf(rs.getLong("id")), rs.getString("sname"));
				hmClientCode.put(String.valueOf(rs.getLong("id")), rs.getString("scode"));
			}
		}
		catch (Exception sqle)
		{
		    sqle.printStackTrace();
		}
		finally
		{
		    try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				;
			}    
		}
	}
    private static void findUser()
	{
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		try
		{
			hmUserName = new HashMap();
			//
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select id, sname from userinfo");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next())
			{
				hmUserName.put(String.valueOf(rs.getLong("id")), rs.getString("sname"));
			}
			// 增加机制、机核等用户
			//TODO TOCONTINUE
			long []MachineUser = Constant.MachineUser.getAllCode(1,1);
			for( int i=0; i< MachineUser.length;i++)
			{
			    hmUserName.put(String.valueOf(MachineUser[i]), Constant.MachineUser.getName(MachineUser[i]));
			}
		}
		catch (Exception sqle)
		{
		}
		finally
		{
		    try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				;
			}
		}

	}
    
    private static void findSystem()
	{
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		try
		{
		    hmSystemID = new HashMap();
		    hmSystemCode =  new HashMap();
		    hmSystemName = new HashMap();
			//
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select id, BUDGETSYSTEMNO scode,BUDGETSYSTEMNAME sname from budget_system");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next())
			{
			    hmSystemName.put(String.valueOf(rs.getLong("id")), rs.getString("sname"));
			    hmSystemCode.put(String.valueOf(rs.getLong("id")), rs.getString("scode"));
			    hmSystemID.put(rs.getString("scode"), rs.getString("id"));
			}
		}
		catch (Exception sqle)
		{
		}
		finally
		{
		    try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				;
			}
		}

	}
    
    private static void findPeriod()
	{
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		try
		{
		    hmPeriodID = new HashMap();
		    
			//
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select id, PERIODNO scode,PERIODNAME sname from budget_period");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next())
			{
			    //hmSystemName.put(String.valueOf(rs.getLong("id")), rs.getString("sname"));
			   // hmSystemCode.put(String.valueOf(rs.getLong("id")), rs.getString("scode"));
			    hmPeriodID.put(rs.getString("scode"), rs.getString("id"));
			}
		}
		catch (Exception sqle)
		{
		}
		finally
		{
		    try
			{
				if (rs != null)
				{
					rs.close();
					rs = null;
				}
				if (ps != null)
				{
					ps.close();
					ps = null;
				}
				if (con != null)
				{
					con.close();
					con = null;
				}
			}
			catch (Exception e)
			{
				;
			}
		}

	}
    
    /**
	 * 方法说明：根据 UserID 取得用户名称 
	 * @param lUserID
	 * @return
	 * @
	 */
	public static String getUserNameByID(long lUserID)
	{
		String strReturn = "";
		try
		{
			Object obj = hmUserName.get(String.valueOf(lUserID));
			if (obj != null)
			{
				strReturn = obj.toString();
			}
			else
			{
				findUser();
				obj = hmUserName.get(String.valueOf(lUserID));
				strReturn = (obj != null ? obj.toString() : "");
			}
		}
		catch (Exception e)
		{
			System.out.println(e.toString());
		}
		return strReturn;
	}
	private static void findAccount()
	{
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		try{
			hmAccountCode = new HashMap();
			hmAccountType = new HashMap();
			
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select id,saccountNo,nAccountTypeID from sett_account");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next()){
				hmAccountCode.put(String.valueOf(rs.getLong("id")), rs.getString("saccountNo"));
				hmAccountType.put(String.valueOf(rs.getLong("id")), rs.getString("nAccountTypeID"));
			}
		}catch (Exception sqle){
		    sqle.printStackTrace();
		}finally{
		    try{
				if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (con != null){
					con.close();
					con = null;
				}
			}catch (Exception e){
				
			}    
		}
	}
	
	/**
	 * 通过账户ID取得账户编号
	 * @param lUserID
	 * @return
	 */
	public static String getAccountCodeByID(long laccountID)
	{
		String strReturn = "";
		try{
			Object obj = hmAccountCode.get(String.valueOf(laccountID));
			if (obj != null){
				strReturn = obj.toString();
			}else{
				findAccount();
				obj = hmAccountCode.get(String.valueOf(laccountID));
				strReturn = (obj != null ? obj.toString() : "");
			}
		}catch (Exception e){
			System.out.println(e.toString());
		}
		return strReturn;
	}
    private static void findItem()
	{
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		try{
			hmItemCode = new HashMap();
			hmItemName = new HashMap();
			
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select id,itemNO,itemName from Budget_Templet ");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next()){
				hmItemCode.put(String.valueOf(rs.getLong("id")), rs.getString("itemNO"));
				hmItemName.put(String.valueOf(rs.getLong("id")), rs.getString("itemName"));
			}
		}catch (Exception sqle){
		    sqle.printStackTrace();
		}finally{
		    try{
				if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (con != null){
					con.close();
					con = null;
				}
			}catch (Exception e){
				
			}    
		}
	}
    
    /**
     * 根据项目ID得到项目编号
     * @param lItemID
     * @return
     */
    public static String getItemCodeByID(long lItemID)
	{
		String strReturn = "";
		try{
			Object obj = hmItemCode.get(String.valueOf(lItemID));
			if (obj != null){
				strReturn = obj.toString();
			}else{
				findItem();
				obj = hmItemCode.get(String.valueOf(lItemID));
				strReturn = (obj != null ? obj.toString() : "");
			}
		}catch (Exception e){
			System.out.println(e.toString());
		}
		return strReturn;
	}
    /**
     * 根据项目ID得到项目编号
     * @param lItemID
     * @return
     */
    public static String getItemNameByID(long lItemID)
	{
		String strReturn = "";
		try{
			Object obj = hmItemName.get(String.valueOf(lItemID));
			if (obj != null){
				strReturn = obj.toString();
			}else{
				findItem();
				obj = hmItemName.get(String.valueOf(lItemID));
				strReturn = (obj != null ? obj.toString() : "");
			}
		}catch (Exception e){
			System.out.println(e.toString());
		}
		return strReturn;
	}
    
    
	/**yliu
	 * 通过项目编号查询项目ID
	 * @param code
	 * @return
	 */
	public static long getItemIDByCode(String code)
	{
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		long lResult = -1;
		try{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select ID from Budget_Templet where itemNO='" + code+"'");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next()){
				lResult = rs.getLong("ID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		}catch (Exception sqle){

			try{
				if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (con != null){
					con.close();
					con = null;
				}
			}catch (Exception e){
				e.printStackTrace();
			}

		}
		return lResult;	
	}
	/**yliu
	 * 通过项目ID查询项目编号
	 * @param id
	 * @return
	 */
	public static String getItemNoByID(long id)
	{
		String strReturn = "";
		try{
			String strSQL = "select itemNO from Budget_Templet where id=" + id+"";
			Collection c = BUDGETHTML.getCommonSelectList(strSQL, "itemNO");
			if (c != null){
				strReturn = (String) c.iterator().next();
			}
		}catch (Exception e){
			System.out.println(e.toString());
		}
		return strReturn;
	}
	/**yliu
	 * 通过项目编号查询项目名称
	 * @param code
	 * @return
	 */
	public static String getItemNameByCode(String code)
	{
		String strReturn = "";
		try{
			String strSQL = "select itemName from Budget_Templet where itemNO='" + code+"'";
			Collection c = BUDGETHTML.getCommonSelectList(strSQL, "itemName");
			if (c != null){
				strReturn = (String) c.iterator().next();
			}
		}catch (Exception e){
			System.out.println(e.toString());
		}
		return strReturn;
	}
	/**yliu
	 * 功能：通过账户编号查询账户类型
	 * @param lAccountcode
	 * @return
	 * @
	 */
	public static long getAccountTypeByCode(String lAccountcode)
	{   
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		long lResult = -1;
		try{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select nAccountTypeID from sett_account where saccountNo='" + lAccountcode+"'");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next()){
				lResult = rs.getLong("nAccountTypeID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		}catch (Exception sqle){

			try{
				if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (con != null){
					con.close();
					con = null;
				}
			}catch (Exception e){
				e.printStackTrace();
			}

		}
		return lResult;	
	}
	
	/**
	 * 通过账户ID查询账户类型
	 * @param lAccountcode
	 * @return
	 */
	public static long getAccountTypeByID(long accountID)
	{   
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		long lResult = -1;
		try{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select nAccountTypeID from sett_account where ID=" + accountID+"");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next()){
				lResult = rs.getLong("nAccountTypeID");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		}catch (Exception sqle){

			try{
				if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (con != null){
					con.close();
					con = null;
				}
			}catch (Exception e){
				e.printStackTrace();
			}

		}
		return lResult;	
	}
	
	/**
	 * 通过账户ID查找账户编号
	 * @param id
	 * @return
	 */
	public static String getAccountNoByID(long id)
	{
		String strReturn = "";
		try{
			String strSQL = "select saccountNo from sett_account where id=" + id+"";
			Collection c = BUDGETHTML.getCommonSelectList(strSQL, "saccountNo");
			if (c != null){
				strReturn = (String) c.iterator().next();
			}
		}catch (Exception e){
			System.out.println(e.toString());
		}
		return strReturn;
	}
	/**YLIU
	 * 通过账户编号查询账户ID
	 * @param lAccountcode
	 * @return
	 */
	public static long getAccountIDByCode(String lAccountcode)
	{
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		long lResult = -1;
		try{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select id from sett_account where saccountNo='" + lAccountcode+"'");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next()){
				lResult = rs.getLong("id");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		}catch (Exception sqle){

			try{
				if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (con != null){
					con.close();
					con = null;
				}
			}catch (Exception e){
				e.printStackTrace();
			}

		}
		return lResult;	
	}
	/**YLIU
	 * 通过单位编号查询单位ID
	 * @param lAccountcode
	 * @return
	 */
	public static long getClientIDByCode(String clientCode)
	{
		
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		long lResult = -1;
		try{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select id from client where scode='" + clientCode+"'");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next()){
				lResult = rs.getLong("id");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		}catch (Exception sqle){

			try{
				if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (con != null){
					con.close();
					con = null;
				}
			}catch (Exception e){
				e.printStackTrace();
			}
		}
		return lResult;	
	}
	
	/**
	 * 通过体系ID查询体系编号
	 * @param systemID
	 * @return
	 */
	public static String getSystemNoByID(long systemID)
	{
		
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String lResult = "";
		try{
			con = Database.getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("select budgetSystemNo from Budget_System where ID=" + systemID+"");
			ps = con.prepareStatement(sb.toString());
			rs = ps.executeQuery();
			while (rs.next()){
				lResult = rs.getString("budgetSystemNo");
			}
			rs.close();
			rs = null;
			ps.close();
			ps = null;
			con.close();
			con = null;
		}catch (Exception sqle){

			try{
				if (rs != null){
					rs.close();
					rs = null;
				}
				if (ps != null){
					ps.close();
					ps = null;
				}
				if (con != null){
					con.close();
					con = null;
				}
			}catch (Exception e){
				e.printStackTrace();
			}
		}
		return lResult;	
	}
	/**
	 * 功能：通过客户ID查询客户名称
	 * @param lClientID
	 * @return
	 * @
	 */
	public static String getClientNameByID(long lClientID)
	{
		String strReturn = "";
		try
		{
			Object obj = hmClientName.get(String.valueOf(lClientID));
			if (obj != null)
			{
				strReturn = obj.toString();
			}
			else
			{
				findClient();
				obj = hmClientName.get(String.valueOf(lClientID));
				strReturn = (obj != null ? obj.toString() : "");
			}
		}
		catch (Exception e)
		{
			System.out.println(e.toString());
		}
		return strReturn;
	}
	/**
	 * 功能：通过客户ID查询客户编号
	 * @param lClientID
	 * @return
	 * @
	 */
	public static String getClientCodeByID(long lClientID)
	{
		String strReturn = "";
		try
		{
			Object obj = hmClientCode.get(String.valueOf(lClientID));
			if (obj != null)
			{
				strReturn = obj.toString();
			}
			else
			{
				findClient();
				obj = hmClientCode.get(String.valueOf(lClientID));
				strReturn = (obj != null ? obj.toString() : "");
			}
		}
		catch (Exception e)
		{
			System.out.println(e.toString());
		}
		return strReturn;
	}
	
	/**
	 * 功能：通过体系编号查询体系ID
	 * @param lCode
	 * @return
	 * @
	 */
	public static long getSystemIDByCode(String lCode)
	{
		String strReturn = "";
		try
		{
			Object obj = hmSystemID.get(lCode);
			if (obj != null)
			{
				strReturn = obj.toString();
			}
			else
			{
				findSystem();
				obj = hmSystemID.get(lCode);
				strReturn = (obj != null ? obj.toString() : "");
			}
		}
		catch (Exception e)
		{
			System.out.println(e.toString());
		}
		return strReturn.length()==0?-1:Long.parseLong(strReturn);
	}
	/**
	 * 功能：通过周期编号查询周期ID
	 * @param lCode
	 * @return
	 * @
	 */
	public static long getPeriodIDByCode(String lCode)
	{
		String strReturn = "";
		try
		{
			Object obj = hmPeriodID.get(lCode);
			if (obj != null)
			{
				strReturn = obj.toString();
			}
			else
			{
				findPeriod();
				obj = hmPeriodID.get(lCode);
				strReturn = (obj != null ? obj.toString() : "");
			}
		}
		catch (Exception e)
		{
			System.out.println(e.toString());
		}
		
		return strReturn.length()==0?-1:Long.parseLong(strReturn);
	}
}
